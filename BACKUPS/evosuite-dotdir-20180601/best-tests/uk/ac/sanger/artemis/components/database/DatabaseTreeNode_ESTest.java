/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:43:15 GMT 2018
 */

package uk.ac.sanger.artemis.components.database;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import javax.swing.JPasswordField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.gmod.schema.organism.Organism;
import org.gmod.schema.organism.OrganismProp;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.database.DatabaseTreeNode;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.KeyVector;
import uk.ac.sanger.artemis.util.DatabaseDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatabaseTreeNode_ESTest extends DatabaseTreeNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("v0m8bFK[l.Cs$+)r(", "v0m8bFK[l.Cs$+)r(", "?YdGxh)9$emvPb").when(organism0).toString();
      doReturn("").when(organism0).getCommonName();
      doReturn("?YdGxh)9$emvPb").when(organism0).getGenus();
      doReturn("options.txt").when(organism0).getSpecies();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("v0m8bFK[l.Cs$+)r(", false, organism0, "", databaseDocument0);
      DataFlavor dataFlavor0 = DataFlavor.fragmentHtmlFlavor;
      databaseTreeNode0.isDataFlavorSupported(dataFlavor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("X'\"~i{c*L''", "X'\"~i{c*L''").when(organism0).toString();
      doReturn("#8ownh>X").when(organism0).getCommonName();
      doReturn(101).when(organism0).getOrganismId();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(databaseDocument0).getResidueFeatures(anyInt());
      linkedList0.addFirst((Object) null);
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("zBvW*khq", false, organism0, "zBvW*khq", databaseDocument0);
      // Undeclared exception!
      try { 
        databaseTreeNode0.explore();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("445").when(organism0).toString();
      doReturn("No SeqF*Duence").when(organism0).getCommonName();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("445", true, organism0, "database_manager_cache_off", databaseDocument0);
      databaseTreeNode0.isLeaf();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("Zr:?0eG");
      databaseTreeNode0.getUserName();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn(",{\u0001?)8m9OpH").when(organism0).toString();
      doReturn("mitochondrialTranslationTable").when(organism0).getCommonName();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode(",{\u0001?)8m9OpH", true, organism0, "", databaseDocument0);
      databaseTreeNode0.getUserName();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("U37o[!");
      databaseTreeNode0.getOrganismCommonName();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Organism organism0 = new Organism();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode((String) null, false, organism0, "sDvfz~;f^MIx?&yn", databaseDocument0);
      databaseTreeNode0.getOrganism();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("U37o[!");
      // Undeclared exception!
      try { 
        databaseTreeNode0.isDataFlavorSupported((DataFlavor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("");
      // Undeclared exception!
      try { 
        databaseTreeNode0.getTransferData(databaseTreeNode0.STRING_DATA_FLAVOUR);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(organism0).toString();
      doReturn((String) null).when(organism0).getCommonName();
      doReturn((String) null).when(organism0).getGenus();
      doReturn(0).when(organism0).getOrganismId();
      doReturn((String) null).when(organism0).getSpecies();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(databaseDocument0).getResidueFeatures(anyInt());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("PubMed:", false, organism0, "PubMed:", databaseDocument0);
      // Undeclared exception!
      try { 
        databaseTreeNode0.explore();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = null;
      try {
        databaseTreeNode0 = new DatabaseTreeNode("", false, (Organism) null, "", databaseDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("bPX']Q[");
      databaseTreeNode0.getOrganism();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn(",{\u0001?)8m9OpH").when(organism0).toString();
      doReturn("mitochondrialTranslationTable").when(organism0).getCommonName();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode(",{\u0001?)8m9OpH", true, organism0, "", databaseDocument0);
      DataFlavor dataFlavor0 = DataFlavor.getTextPlainUnicodeFlavor();
      try { 
        databaseTreeNode0.getTransferData(dataFlavor0);
        fail("Expecting exception: UnsupportedFlavorException");
      
      } catch(UnsupportedFlavorException e) {
         //
         // Plain Text
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("X'\"~i{c*L''", "X'\"~i{c*L''").when(organism0).toString();
      doReturn("#8ownh>X").when(organism0).getCommonName();
      doReturn(101).when(organism0).getOrganismId();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(databaseDocument0).getResidueFeatures(anyInt());
      doReturn("#8ownh>X").when(databaseDocument0).getLocation();
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("zBvW*khq", false, organism0, "zBvW*khq", databaseDocument0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/kp11/.artemis/cache/#8ownh>X");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      databaseTreeNode0.explore();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode((String) null);
      databaseTreeNode0.getFeatureType();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("PubMed:").when(organism0).toString();
      doReturn("4 R#m]HPo~X").when(organism0).getCommonName();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("PubMed:", false, organism0, "PubMed:", databaseDocument0);
      databaseTreeNode0.getFeatureId();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(organism0).toString();
      doReturn((String) null).when(organism0).getCommonName();
      doReturn((String) null).when(organism0).getGenus();
      doReturn((String) null).when(organism0).getSpecies();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("PubMed:", false, organism0, "PubMed:", databaseDocument0);
      DatabaseDocument databaseDocument1 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      databaseTreeNode0.setDbDoc(databaseDocument1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("ABXkh#+*]P=erk", "ABXkh#+*]P=erk", "ABXkh#+*]P=erk", "HY%+X").when(organism0).toString();
      doReturn("ABXkh#+*]P=erk", "").when(organism0).getCommonName();
      doReturn("ABXkh#+*]P=erk").when(organism0).getGenus();
      doReturn("lG(P$R").when(organism0).getSpecies();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("ABXkh#+*]P=erk", false, organism0, "", databaseDocument0);
      databaseTreeNode0.getTransferData(databaseTreeNode0.STRING_DATA_FLAVOUR);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("FF,=:yB-c+^2ah5", "FF,=:yB-c+^2ah5", (String) null, (String) null).when(organism0).toString();
      doReturn("*p86F=u'9nL1D<\"qv|O", (String) null).when(organism0).getCommonName();
      doReturn((String) null).when(organism0).getGenus();
      doReturn((String) null).when(organism0).getSpecies();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("^.n3Gl)p)", false, organism0, "", databaseDocument0);
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      databaseTreeNode0.getTransferData(dataFlavor0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("445", "445").when(organism0).toString();
      doReturn("No SeqF*Duence", "/Y[").when(organism0).getCommonName();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("445", true, organism0, "database_manager_cache_off", databaseDocument0);
      databaseTreeNode0.getTransferData(databaseTreeNode0.STRING_DATA_FLAVOUR);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("about");
      databaseTreeNode0.isDataFlavorSupported(databaseTreeNode0.DATABASETREENODE);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "`").when(organism0).toString();
      doReturn("zBvW*khq").when(organism0).getCommonName();
      doReturn(2952).when(organism0).getOrganismId();
      Key key0 = Key.CDS;
      KeyVector keyVector0 = new KeyVector(key0);
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      doReturn(keyVector0).when(databaseDocument0).getResidueFeatures(anyInt());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("zBvW*khq", false, organism0, "zBvW*khq", databaseDocument0);
      // Undeclared exception!
      try { 
        databaseTreeNode0.explore();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.io.Key cannot be cast to org.gmod.schema.sequence.Feature
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Organism organism0 = new Organism();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("Comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.", (JPasswordField) null, "Comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.", "Comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.", true);
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("Comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.", true, organism0, "Comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.", databaseDocument0);
      assertFalse(databaseTreeNode0.isDirectory());
      
      databaseTreeNode0.explore();
      assertFalse(databaseTreeNode0.isExplored());
      assertEquals("null.null", databaseTreeNode0.getOrganismCommonName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("445").when(organism0).toString();
      doReturn("No SeqF*Duence").when(organism0).getCommonName();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("445", true, organism0, "database_manager_cache_off", databaseDocument0);
      boolean boolean0 = databaseTreeNode0.isDirectory();
      assertEquals("database_manager_cache_off", databaseTreeNode0.getUserName());
      assertEquals("No SeqF*Duence", databaseTreeNode0.getOrganismCommonName());
      assertFalse(boolean0);
      assertFalse(databaseTreeNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("about");
      boolean boolean0 = databaseTreeNode0.isDirectory();
      assertTrue(boolean0);
      assertFalse(databaseTreeNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("445").when(organism0).toString();
      doReturn("No SeqF*Duence").when(organism0).getCommonName();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("445", true, organism0, "database_manager_cache_off", databaseDocument0);
      boolean boolean0 = databaseTreeNode0.getAllowsChildren();
      assertFalse(databaseTreeNode0.isExplored());
      assertEquals("database_manager_cache_off", databaseTreeNode0.getUserName());
      assertFalse(boolean0);
      assertEquals("No SeqF*Duence", databaseTreeNode0.getOrganismCommonName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("about");
      boolean boolean0 = databaseTreeNode0.getAllowsChildren();
      assertFalse(databaseTreeNode0.isExplored());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabaseTreeNode.setOrganismProps((Set<OrganismProp>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Organism organism0 = new Organism();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("Comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.", (JPasswordField) null, "Comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.", "Comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.", true);
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("Comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.", true, organism0, "Comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.", databaseDocument0);
      DatabaseTreeNode databaseTreeNode1 = (DatabaseTreeNode)databaseTreeNode0.getTransferData(databaseTreeNode0.DATABASETREENODE);
      assertFalse(databaseTreeNode1.isExplored());
      assertEquals("null.null", databaseTreeNode1.getOrganismCommonName());
      assertTrue(databaseTreeNode0.isLeaf());
      assertFalse(databaseTreeNode0.isExplored());
      assertFalse(databaseTreeNode1.isLeaf());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("about");
      DatabaseTreeNode databaseTreeNode1 = (DatabaseTreeNode)databaseTreeNode0.getTransferData(databaseTreeNode0.DATABASETREENODE);
      assertFalse(databaseTreeNode1.isExplored());
      assertFalse(databaseTreeNode0.isExplored());
      assertFalse(databaseTreeNode0.isLeaf());
      assertTrue(databaseTreeNode1.getAllowsChildren());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("445").when(organism0).toString();
      doReturn("No SeqF*Duence").when(organism0).getCommonName();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("445", true, organism0, "database_manager_cache_off", databaseDocument0);
      String string0 = databaseTreeNode0.getOrganismCommonName();
      assertFalse(databaseTreeNode0.isExplored());
      assertEquals("No SeqF*Duence", string0);
      assertEquals("database_manager_cache_off", databaseTreeNode0.getUserName());
      assertFalse(databaseTreeNode0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("about");
      boolean boolean0 = databaseTreeNode0.isExplored();
      assertTrue(databaseTreeNode0.isDirectory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("X'\"~i{c*L''").when(organism0).toString();
      doReturn("#8ownh>X").when(organism0).getCommonName();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("zBvW*khq", false, organism0, "zBvW*khq", databaseDocument0);
      databaseTreeNode0.getUserName();
      assertEquals("#8ownh>X", databaseTreeNode0.getOrganismCommonName());
      assertFalse(databaseTreeNode0.isLeaf());
      assertFalse(databaseTreeNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("about");
      boolean boolean0 = databaseTreeNode0.isLeaf();
      assertFalse(databaseTreeNode0.isExplored());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("X'\"~i{c*L''").when(organism0).toString();
      doReturn("#8ownh>X").when(organism0).getCommonName();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("zBvW*khq", false, organism0, "zBvW*khq", databaseDocument0);
      databaseTreeNode0.getTransferDataFlavors();
      assertFalse(databaseTreeNode0.isExplored());
      assertFalse(databaseTreeNode0.isLeaf());
      assertEquals("#8ownh>X", databaseTreeNode0.getOrganismCommonName());
  }
}
