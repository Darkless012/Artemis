/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:44:55 GMT 2018
 */

package uk.ac.sanger.artemis.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import javax.swing.DebugGraphics;
import javax.swing.JPasswordField;
import javax.swing.text.JTextComponent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureChangeEvent;
import uk.ac.sanger.artemis.components.DisplayAdjustmentEvent;
import uk.ac.sanger.artemis.components.FeaturePlot;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.plot.CoilFeatureAlgorithm;
import uk.ac.sanger.artemis.plot.FeatureAlgorithm;
import uk.ac.sanger.artemis.plot.HydrophilicityAlgorithm;
import uk.ac.sanger.artemis.plot.HydrophobicityAlgorithm;
import uk.ac.sanger.artemis.plot.LineAttributes;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FeaturePlot_ESTest extends FeaturePlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      HydrophobicityAlgorithm hydrophobicityAlgorithm0 = new HydrophobicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophobicityAlgorithm0);
      featurePlot0.recalculateValues();
      assertFalse(featurePlot0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      HydrophobicityAlgorithm hydrophobicityAlgorithm0 = new HydrophobicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophobicityAlgorithm0);
      int int0 = featurePlot0.getPointPosition((-3923));
      assertEquals((-3922), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FeatureAlgorithm featureAlgorithm0 = mock(FeatureAlgorithm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureAlgorithm0).toString();
      doReturn((Integer) null).when(featureAlgorithm0).getDefaultMaxWindowSize();
      doReturn((Integer) null).when(featureAlgorithm0).getDefaultMinWindowSize();
      doReturn((Integer) null).when(featureAlgorithm0).getDefaultWindowSize();
      doReturn((Feature) null).when(featureAlgorithm0).getFeature();
      FeaturePlot featurePlot0 = null;
      try {
        featurePlot0 = new FeaturePlot(featureAlgorithm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.FeaturePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      HydrophobicityAlgorithm hydrophobicityAlgorithm0 = new HydrophobicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophobicityAlgorithm0);
      FeatureAlgorithm featureAlgorithm0 = featurePlot0.getFeatureAlgorithm();
      assertEquals(1.4E-45F, featureAlgorithm0.getUserMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      HydrophobicityAlgorithm hydrophobicityAlgorithm0 = new HydrophobicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophobicityAlgorithm0);
      DisplayAdjustmentEvent displayAdjustmentEvent0 = new DisplayAdjustmentEvent(feature0, 1, 12303, 2184, 2184, 3198, true, 304);
      featurePlot0.displayAdjustmentValueChanged(displayAdjustmentEvent0);
      // Undeclared exception!
      try { 
        featurePlot0.recalculateValues();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(coilFeatureAlgorithm0);
      featurePlot0.calculateFeatures(true);
      assertFalse(featurePlot0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      HydrophobicityAlgorithm hydrophobicityAlgorithm0 = new HydrophobicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophobicityAlgorithm0);
      int int0 = featurePlot0.getPointPosition(5);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      Feature feature0 = new Feature(emblStreamFeature0);
      HydrophobicityAlgorithm hydrophobicityAlgorithm0 = new HydrophobicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophobicityAlgorithm0);
      featurePlot0.showAveragesForRange();
      assertFalse(featurePlot0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      HydrophobicityAlgorithm hydrophobicityAlgorithm0 = new HydrophobicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophobicityAlgorithm0);
      featurePlot0.stopListening();
      assertFalse(featurePlot0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      HydrophobicityAlgorithm hydrophobicityAlgorithm0 = new HydrophobicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophobicityAlgorithm0);
      Dimension dimension0 = featurePlot0.getMinimumSize();
      assertEquals(160, dimension0.height);
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      HydrophobicityAlgorithm hydrophobicityAlgorithm0 = new HydrophobicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophobicityAlgorithm0);
      JPasswordField jPasswordField0 = new JPasswordField();
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jPasswordField0.new AccessibleJTextComponent();
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = blastEntryInformation0.getDefaultKey();
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(jTextComponent_AccessibleJTextComponent0, feature0, key0, (Location) null, (QualifierVector) null, (-1803));
      featurePlot0.featureChanged(featureChangeEvent0);
      assertFalse(featurePlot0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      Feature feature0 = new Feature(emblStreamFeature0);
      HydrophilicityAlgorithm hydrophilicityAlgorithm0 = new HydrophilicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophilicityAlgorithm0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      LineAttributes[] lineAttributesArray0 = new LineAttributes[4];
      // Undeclared exception!
      try { 
        featurePlot0.drawMultiValueGraph(debugGraphics0, lineAttributesArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      Feature feature0 = new Feature(emblStreamFeature0);
      HydrophilicityAlgorithm hydrophilicityAlgorithm0 = new HydrophilicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophilicityAlgorithm0);
      Dimension dimension0 = featurePlot0.getPreferredSize();
      assertEquals(160, dimension0.height);
      assertEquals(0, dimension0.width);
  }
}
