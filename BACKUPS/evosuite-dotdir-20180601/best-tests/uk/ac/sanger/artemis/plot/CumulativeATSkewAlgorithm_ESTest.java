/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:17:17 GMT 2018
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.datatransfer.Clipboard;
import javax.swing.JFrame;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.EntryGroup;
import uk.ac.sanger.artemis.FeaturePredicateVector;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.SimpleGotoEventSource;
import uk.ac.sanger.artemis.components.BasePlotGroup;
import uk.ac.sanger.artemis.components.FeatureDisplay;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RangeVector;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.plot.CumulativeATSkewAlgorithm;
import uk.ac.sanger.artemis.plot.LineAttributes;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CumulativeATSkewAlgorithm_ESTest extends CumulativeATSkewAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("Reverse GC Frame Plot");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(true).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 1;
      floatArray0[4] = (-7.055661F);
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 116;
      floatArray0[5] = (float) 116;
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getValues(2, 1, floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 0 > end: -1
         //
         verifyException("uk.ac.sanger.artemis.plot.CumulativeATSkewAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Clipboard clipboard0 = new Clipboard("}`Yv0N>");
      Selection selection0 = new Selection(clipboard0);
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getMinimumInternal();
      cumulativeATSkewAlgorithm0.getDefaultStepSize(2);
      cumulativeATSkewAlgorithm0.getMinimumInternal();
      cumulativeATSkewAlgorithm0.getMaximum();
      cumulativeATSkewAlgorithm0.getMaximum();
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      cumulativeATSkewAlgorithm0.getMinimum();
      cumulativeATSkewAlgorithm0.setUserMin(2868.5F);
      cumulativeATSkewAlgorithm0.getMinimumInternal();
      cumulativeATSkewAlgorithm0.getMinimum();
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      cumulativeATSkewAlgorithm0.getMinimumInternal();
      cumulativeATSkewAlgorithm0.getValueCount();
      cumulativeATSkewAlgorithm0.getMaximum();
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      cumulativeATSkewAlgorithm0.setUserMax(2.0F);
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      cumulativeATSkewAlgorithm0.getDefaultStepSize((-591));
      cumulativeATSkewAlgorithm0.getValueCount();
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      cumulativeATSkewAlgorithm0.getDefaultMaxWindowSize();
      cumulativeATSkewAlgorithm0.getDefaultStepSize(1);
      cumulativeATSkewAlgorithm0.getDefaultStepSize(0);
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      cumulativeATSkewAlgorithm0.getMinimumInternal();
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("Reverse GC Frame Plot");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(true).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 1;
      floatArray0[2] = (-7.055661F);
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 116;
      floatArray0[5] = (float) 116;
      cumulativeATSkewAlgorithm0.getValues(2, 116, floatArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      cumulativeATSkewAlgorithm0.setUserMax(1);
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      cumulativeATSkewAlgorithm0.getValueCount();
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      float[] floatArray0 = new float[8];
      cumulativeATSkewAlgorithm0.getValues(1, 0, floatArray0);
      cumulativeATSkewAlgorithm0.setUserMax((-730));
      floatArray0[1] = (float) (-730);
      floatArray0[2] = (float) 1;
      floatArray0[4] = (float) 2;
      floatArray0[5] = 1.0F;
      cumulativeATSkewAlgorithm0.getDefaultStepSize(1);
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 1;
      cumulativeATSkewAlgorithm0.getValues((-730), 1, floatArray0);
      cumulativeATSkewAlgorithm0.getDefaultStepSize(1620);
      cumulativeATSkewAlgorithm0.setUserMax(4152.168F);
      cumulativeATSkewAlgorithm0.setUserMax(0.0F);
      cumulativeATSkewAlgorithm0.setUserMin(1.0F);
      cumulativeATSkewAlgorithm0.getAverage();
      cumulativeATSkewAlgorithm0.getValueCount();
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      cumulativeATSkewAlgorithm0.getDefaultStepSize((-1483));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      doReturn((Strand) null).when(bases0).getReverseStrand();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      int int0 = 0;
      float[] floatArray0 = new float[7];
      cumulativeATSkewAlgorithm0.getValues(62, 0, floatArray0);
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      cumulativeATSkewAlgorithm0.getDefaultStepSize(60);
      cumulativeATSkewAlgorithm0.max_min_disabled = true;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 334;
      floatArray0[4] = (float) 334;
      floatArray0[5] = (float) 334;
      floatArray0[6] = (float) 0;
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getValues(0, 334, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.CumulativeATSkewAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("", "");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getMaximum();
      cumulativeATSkewAlgorithm0.max_min_disabled = false;
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      cumulativeATSkewAlgorithm0.getMaximum();
      cumulativeATSkewAlgorithm0.getDefaultMinWindowSize();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      cumulativeATSkewAlgorithm0.getValues(276, (-1257), floatArray0);
      cumulativeATSkewAlgorithm0.getDefaultMinWindowSize();
      cumulativeATSkewAlgorithm0.getDefaultStepSize(60);
      cumulativeATSkewAlgorithm0.getMaximum();
      cumulativeATSkewAlgorithm0.getAverage();
      cumulativeATSkewAlgorithm0.getDefaultStepSize(60);
      cumulativeATSkewAlgorithm0.getMinimumInternal();
      cumulativeATSkewAlgorithm0.getDefaultMaxWindowSize();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Message", "Cumulative AT Skew, (A-T)/(A+T)");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.setUserMin(133.1F);
      cumulativeATSkewAlgorithm0.max_min_disabled = false;
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      float[] floatArray0 = new float[1];
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      cumulativeATSkewAlgorithm0.getMinimumInternal();
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      floatArray0[0] = (float) 1;
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      // Undeclared exception!
      cumulativeATSkewAlgorithm0.getValues(1, 1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.setUserMax(1);
      cumulativeATSkewAlgorithm0.setRevCompDisplay(false);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getValues(2, 1, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("uk.ac.sanger.artemis.plot.CumulativeATSkewAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      cumulativeATSkewAlgorithm0.getDefaultMinWindowSize();
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      cumulativeATSkewAlgorithm0.getDefaultStepSize(254);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = null;
      try {
        cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getDefaultStepSize(1790);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      cumulativeATSkewAlgorithm0.getDefaultMinWindowSize();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      cumulativeATSkewAlgorithm0.getValues(2, 0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getDefaultMinWindowSize();
      cumulativeATSkewAlgorithm0.getDefaultMaxWindowSize();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getDefaultWindowSize();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getDefaultMinWindowSize();
      cumulativeATSkewAlgorithm0.getValueCount();
      cumulativeATSkewAlgorithm0.getMaximumInternal();
      int int0 = 1233;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      cumulativeATSkewAlgorithm0.setUserMin(1);
      cumulativeATSkewAlgorithm0.setUserMaxMin(false);
      floatArray0[1] = (float) 1233;
      cumulativeATSkewAlgorithm0.getDefaultMaxWindowSize();
      floatArray0[2] = (float) 1233;
      cumulativeATSkewAlgorithm0.getMinimumInternal();
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getValues(2, 1233, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getDefaultMaxWindowSize();
      cumulativeATSkewAlgorithm0.getDefaultStepSize(1);
      cumulativeATSkewAlgorithm0.setRevCompDisplay(false);
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 1;
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getValues(1, 2, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      assertNotNull(rawStreamSequence0);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      assertNotNull(cumulativeATSkewAlgorithm0);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Integer integer0 = cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      assertNotNull(integer0);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(60, (int)integer0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      RangeVector rangeVector0 = new RangeVector();
      assertNotNull(rangeVector0);
      assertEquals(10, rangeVector0.capacity());
      assertTrue(rangeVector0.isEmpty());
      assertEquals("[]", rangeVector0.toString());
      assertEquals(0, rangeVector0.size());
      
      rawStreamSequence0.setFastaHeaderPositionsOnReverseComplement(rangeVector0);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(10, rangeVector0.capacity());
      assertTrue(rangeVector0.isEmpty());
      assertEquals("[]", rangeVector0.toString());
      assertEquals(0, rangeVector0.size());
      
      cumulativeATSkewAlgorithm0.setUserMax(1);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(1.0F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Integer integer1 = cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      assertNotNull(integer1);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(1.0F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(60, (int)integer1);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertTrue(integer1.equals((Object)integer0));
      
      int int0 = cumulativeATSkewAlgorithm0.getValueCount();
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(1.0F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(1, int0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Integer integer2 = cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      assertNotNull(integer2);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(1.0F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(60, (int)integer2);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      
      float[] floatArray0 = new float[8];
      cumulativeATSkewAlgorithm0.getValues(1, 0, floatArray0);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(1.0F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      cumulativeATSkewAlgorithm0.setUserMax((-730));
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals((-730.0F), cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      floatArray0[1] = (float) (-730);
      floatArray0[2] = (float) 1;
      floatArray0[4] = (float) 2;
      floatArray0[5] = 1.0F;
      Integer integer3 = cumulativeATSkewAlgorithm0.getDefaultStepSize(1);
      assertNull(integer3);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals((-730.0F), cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 1;
      cumulativeATSkewAlgorithm0.getValues((-730), 1, floatArray0);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals((-730.0F), cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-730.0F), 1.0F, 0.0F, 2.0F, 1.0F, 2.0F, 1.0F}, floatArray0, 0.01F);
      
      Integer integer4 = cumulativeATSkewAlgorithm0.getDefaultStepSize(1620);
      assertNotNull(integer4);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals((-730.0F), cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(162, (int)integer4);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      
      cumulativeATSkewAlgorithm0.setUserMax(4152.168F);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(4152.168F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      cumulativeATSkewAlgorithm0.setUserMax(0.0F);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(0.0F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      cumulativeATSkewAlgorithm0.setUserMin(1.0F);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.0F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(0.0F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Float float0 = cumulativeATSkewAlgorithm0.getAverage();
      assertNotNull(float0);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.0F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(0.0F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      int int1 = cumulativeATSkewAlgorithm0.getValueCount();
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.0F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(0.0F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(1, int1);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertTrue(int1 == int0);
      
      Integer integer5 = cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      assertNotNull(integer5);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.0F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(0.0F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(60, (int)integer5);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertFalse(integer5.equals((Object)int1));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      
      Integer integer6 = cumulativeATSkewAlgorithm0.getDefaultStepSize((-1483));
      assertNull(integer6);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.0F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(0.0F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      assertNotNull(cumulativeATSkewAlgorithm0);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      
      Integer integer0 = cumulativeATSkewAlgorithm0.getDefaultMinWindowSize();
      assertNotNull(integer0);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(10, (int)integer0);
      
      cumulativeATSkewAlgorithm0.setUserMin(2);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(2.0F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      
      Float float0 = cumulativeATSkewAlgorithm0.getMaximumInternal();
      assertNotNull(float0);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(2.0F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = cumulativeATSkewAlgorithm0.getMinimumInternal();
      assertNotNull(float1);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(2.0F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Integer integer1 = cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      assertNotNull(integer1);
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(2.0F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(60, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = cumulativeATSkewAlgorithm0.getValueCount();
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(2.0F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      
      Bases bases0 = simpleEntryGroup0.getBases();
      assertNull(bases0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      assertNotNull(cumulativeATSkewAlgorithm0);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      
      Float float0 = cumulativeATSkewAlgorithm0.getMaximumInternal();
      assertNotNull(float0);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = cumulativeATSkewAlgorithm0.getMaximum();
      assertNull(float1);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      
      Float float2 = cumulativeATSkewAlgorithm0.getMinimum();
      assertNull(float2);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      
      Integer integer0 = cumulativeATSkewAlgorithm0.getDefaultMinWindowSize();
      assertNotNull(integer0);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(10, (int)integer0);
      
      Integer integer1 = cumulativeATSkewAlgorithm0.getDefaultStepSize(1);
      assertNull(integer1);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      
      Integer integer2 = cumulativeATSkewAlgorithm0.getDefaultMinWindowSize();
      assertNotNull(integer2);
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(10, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      assertNotNull(cumulativeATSkewAlgorithm0);
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      
      Integer integer0 = cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      assertNotNull(integer0);
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(60, (int)integer0);
      
      Integer integer1 = cumulativeATSkewAlgorithm0.getDefaultStepSize((-631));
      assertNull(integer1);
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      
      Integer integer2 = cumulativeATSkewAlgorithm0.getDefaultMaxWindowSize();
      assertNotNull(integer2);
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(5000, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = cumulativeATSkewAlgorithm0.getDefaultMaxWindowSize();
      assertNotNull(integer3);
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(5000, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      
      cumulativeATSkewAlgorithm0.setAlgorithmName("^U2Ue^j");
      assertEquals("^U2Ue^j", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      
      int int0 = cumulativeATSkewAlgorithm0.getValueCount();
      assertEquals("^U2Ue^j", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1, int0);
      
      Integer integer4 = cumulativeATSkewAlgorithm0.getDefaultMaxWindowSize();
      assertNotNull(integer4);
      assertEquals("^U2Ue^j", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(5000, (int)integer4);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      
      Integer integer5 = cumulativeATSkewAlgorithm0.getDefaultMinWindowSize();
      assertNotNull(integer5);
      assertEquals("^U2Ue^j", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertEquals(10, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      
      Clipboard clipboard0 = new Clipboard("wxhH%&p&CBu");
      assertNotNull(clipboard0);
      assertEquals("wxhH%&p&CBu", clipboard0.getName());
      
      Selection selection0 = new Selection(clipboard0);
      assertNotNull(selection0);
      assertEquals("wxhH%&p&CBu", clipboard0.getName());
      
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      assertNotNull(simpleGotoEventSource0);
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      assertNotNull(cumulativeATSkewAlgorithm0);
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      
      int int0 = 500;
      Float float0 = cumulativeATSkewAlgorithm0.getMaximum();
      assertNull(float0);
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(3417);
      assertNotNull(range0);
      assertEquals(3417, range0.getEnd());
      assertEquals(3417, range0.getStart());
      assertEquals(1, range0.getCount());
      
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent((-304), 3417, range0);
      assertNotNull(sequenceChangeEvent0);
      assertEquals(3417, range0.getEnd());
      assertEquals(3417, range0.getStart());
      assertEquals(1, range0.getCount());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(3417, sequenceChangeEvent0.getPosition());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals((-304), sequenceChangeEvent0.getType());
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      
      // Undeclared exception!
      try { 
        sequenceChangeEvent0.getBases();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.io.Range cannot be cast to uk.ac.sanger.artemis.sequence.Bases
         //
         verifyException("uk.ac.sanger.artemis.sequence.SequenceChangeEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("Reverse GC Frame Plot");
      assertNotNull(emblStreamSequence0);
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(21, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(19, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      
      Bases bases0 = new Bases(emblStreamSequence0);
      assertNotNull(bases0);
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(21, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(19, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(true).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      assertNotNull(cumulativeATSkewAlgorithm0);
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(21, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(19, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      float[] floatArray0 = new float[6];
      Float float0 = cumulativeATSkewAlgorithm0.getAverage();
      assertNotNull(float0);
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(21, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(19, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      floatArray0[1] = (float) 1;
      floatArray0[2] = (-7.055661F);
      float float1 = bases0.getAverageGCPercent();
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(21, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(19, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 116;
      int int0 = bases0.getRawPosition(1, 1);
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(21, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(19, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, int0);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      floatArray0[5] = (float) 116;
      cumulativeATSkewAlgorithm0.getValues(2, 116, floatArray0);
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(21, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(19, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals("at_skew", cumulativeATSkewAlgorithm0.getAlgorithmShortName());
      assertEquals(1, cumulativeATSkewAlgorithm0.getValueCount());
      assertFalse(cumulativeATSkewAlgorithm0.isUserMaxMin());
      assertEquals("Cumulative AT Skew, (A-T)/(A+T)", cumulativeATSkewAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, cumulativeATSkewAlgorithm0.getUserMax(), 0.01F);
      assertFalse(cumulativeATSkewAlgorithm0.isRevCompDisplay());
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, cumulativeATSkewAlgorithm0.getUserMin(), 0.01F);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-7.055661F), 1.0F, 116.0F, 116.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.size());
      
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      assertNotNull(simpleGotoEventSource0);
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.size());
      
      SimpleEntryGroup simpleEntryGroup1 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup1);
      assertEquals(0, simpleEntryGroup1.refCount());
      assertEquals(0, simpleEntryGroup1.size());
      assertFalse(simpleEntryGroup1.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup1.getAllFeaturesCount());
      assertFalse(simpleEntryGroup1.equals((Object)simpleEntryGroup0));
      
      FeaturePredicateVector featurePredicateVector0 = new FeaturePredicateVector();
      assertNotNull(featurePredicateVector0);
      assertEquals(0, featurePredicateVector0.size());
      
      // Undeclared exception!
      try { 
        featurePredicateVector0.elementAt(3885);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3885 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getMaximum();
      cumulativeATSkewAlgorithm0.getMinimumInternal();
      cumulativeATSkewAlgorithm0.setScalingFlag(true);
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }
}
