/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 13:00:16 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.EntryVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EntryVector_ESTest extends EntryVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      entryVector0.addElement((Entry) null);
      int int0 = entryVector0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      entryVector0.add((Entry) null);
      boolean boolean0 = entryVector0.removeElement((Entry) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      entryVector0.addElement((Entry) null);
      Entry entry0 = entryVector0.elementAt(0);
      assertNull(entry0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      int int0 = entryVector0.indexOf((Entry) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      boolean boolean0 = entryVector0.contains((Entry) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      entryVector0.addElement((Entry) null);
      boolean boolean0 = entryVector0.contains((Entry) null);
      assertEquals(1, entryVector0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      entryVector0.add((Entry) null);
      int int0 = entryVector0.indexOf((Entry) null);
      assertEquals(1, entryVector0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      int int0 = entryVector0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      entryVector0.removeAllElements();
      assertEquals(0, entryVector0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      // Undeclared exception!
      try { 
        entryVector0.elementAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      Object object0 = entryVector0.clone();
      assertNotSame(object0, entryVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      entryVector0.addElement((Entry) null);
      entryVector0.add((Entry) null);
      assertEquals(1, entryVector0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EntryVector entryVector0 = new EntryVector();
      boolean boolean0 = entryVector0.removeElement((Entry) null);
      assertFalse(boolean0);
  }
}
