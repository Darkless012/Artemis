/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:58:12 GMT 2018
 */

package uk.ac.sanger.artemis.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.FileNotFoundException;
import java.net.URL;
import javax.swing.JPasswordField;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.filetree.RemoteFileNode;
import uk.ac.sanger.artemis.j2ssh.SshLogin;
import uk.ac.sanger.artemis.util.DatabaseDocument;
import uk.ac.sanger.artemis.util.Document;
import uk.ac.sanger.artemis.util.InputStreamProgressListener;
import uk.ac.sanger.artemis.util.RemoteFileDocument;
import uk.ac.sanger.artemis.util.TextDocument;
import uk.ac.sanger.artemis.util.URLDocument;
import uk.ac.sanger.artemis.util.ZipFileDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Document_ESTest extends Document_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      RemoteFileDocument remoteFileDocument0 = new RemoteFileDocument(remoteFileNode0);
      remoteFileDocument0.setLocation(remoteFileNode0);
      assertTrue(remoteFileDocument0.readable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      RemoteFileDocument remoteFileDocument0 = new RemoteFileDocument(remoteFileNode0);
      Document document0 = remoteFileDocument0.getParent();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("org.biojava.bio.seq.io.AlternateTokenization");
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("org.biojava.bio.seq.io.AlternateTokenization", jPasswordField0, "uk.ac.sanger.artemis.util.Document", " category\">", true, inputStreamProgressListener0);
      DatabaseDocument databaseDocument1 = (DatabaseDocument)databaseDocument0.append(" category\">");
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDocument textDocument0 = new TextDocument();
      // Undeclared exception!
      try { 
        textDocument0.getWriter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GapContent gapContent0 = new GapContent(0);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JPasswordField jPasswordField0 = new JPasswordField(defaultStyledDocument0, "internal error - created a null Document", 871);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("internal error - created a null Document", jPasswordField0, "internal error - created a null Document", "internal error - created a null Document");
      // Undeclared exception!
      try { 
        databaseDocument0.getOutputStream();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLDocument uRLDocument0 = new URLDocument(uRL0);
      // Undeclared exception!
      try { 
        uRLDocument0.getLinePushBackReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.URLDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument((String) null, jPasswordField0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      RemoteFileDocument remoteFileDocument0 = new RemoteFileDocument(remoteFileNode0);
      // Undeclared exception!
      try { 
        remoteFileDocument0.getLinePushBackReader();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      RemoteFileDocument remoteFileDocument0 = new RemoteFileDocument(remoteFileNode0);
      remoteFileDocument0.addInputStreamProgressListener((InputStreamProgressListener) null);
      assertTrue(remoteFileDocument0.readable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, (String) null);
      try { 
        zipFileDocument0.getWriter();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDocument textDocument0 = new TextDocument();
      // Undeclared exception!
      try { 
        textDocument0.getReader();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }
}
