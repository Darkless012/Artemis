/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:05:26 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import javax.swing.JFrame;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.database.DatabaseEntrySource;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.BlastStreamFeature;
import uk.ac.sanger.artemis.io.DatabaseStreamFeature;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.EntryInformation;
import uk.ac.sanger.artemis.io.Feature;
import uk.ac.sanger.artemis.io.ReadAndWriteEntry;
import uk.ac.sanger.artemis.io.SimpleEntryInformation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReadAndWriteEntry_ESTest extends ReadAndWriteEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "n,q=vp)TI *4H2N^";
      stringArray0[1] = "-c";
      stringArray0[2] = "OBJECT_IN_USE";
      stringArray0[3] = "-s";
      stringArray0[4] = "-u";
      stringArray0[5] = "user=";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", ".gz");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.writeDatabaseEntryToFile((uk.ac.sanger.artemis.Entry) null, mockFile0, false, false, false, true, 0, (JFrame) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.GeneUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatabaseEntrySource databaseEntrySource0 = new DatabaseEntrySource();
      assertNotNull(databaseEntrySource0);
      assertEquals("Database", databaseEntrySource0.getSourceName());
      assertNull(databaseEntrySource0.getLocation());
      assertFalse(databaseEntrySource0.isReadOnly());
      assertTrue(databaseEntrySource0.isFullEntrySource());
      
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.getFeatureId(databaseEntrySource0, "D6E");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatabaseEntrySource databaseEntrySource0 = new DatabaseEntrySource();
      assertNotNull(databaseEntrySource0);
      assertFalse(databaseEntrySource0.isReadOnly());
      assertNull(databaseEntrySource0.getLocation());
      assertEquals("Database", databaseEntrySource0.getSourceName());
      assertTrue(databaseEntrySource0.isFullEntrySource());
      
      boolean boolean0 = databaseEntrySource0.setLocation(false);
      assertTrue(boolean0);
      assertFalse(databaseEntrySource0.isReadOnly());
      assertEquals("Database", databaseEntrySource0.getSourceName());
      assertEquals("jdbc:postgresql://localhost:5432/chado?user=", databaseEntrySource0.getLocation());
      assertTrue(databaseEntrySource0.isFullEntrySource());
      
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.getFeatureId(databaseEntrySource0, "");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.addQualifierToEntryInfo((EntryInformation) null, "-u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.ReadAndWriteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EntryInformation entryInformation0 = SimpleEntryInformation.getDefaultEntryInformation();
      assertNotNull(entryInformation0);
      assertFalse(entryInformation0.useEMBLFormat());
      
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.addAllKeysQualifiers(entryInformation0, (Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.ReadAndWriteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.readEntryFromDatabase("-h", (DatabaseEntrySource) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-flt";
      stringArray0[1] = ".";
      stringArray0[2] = "-p";
      stringArray0[3] = "+z1xcM`OHvKF@v/r";
      stringArray0[4] = ",~<7>5:-f\"7";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "8cJ";
      stringArray0[2] = "-flt";
      stringArray0[3] = "s0';A1Do$5'lu";
      stringArray0[4] = "T6~v]v";
      stringArray0[5] = "~%k]p`H";
      stringArray0[6] = "_";
      stringArray0[7] = "]FUz>`p73J\"7";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-p";
      stringArray0[1] = "-flt\tspace separated list of qualifiers to ignore (GFF only)";
      stringArray0[2] = "";
      stringArray0[3] = "-s";
      stringArray0[4] = "LEUim'}";
      stringArray0[5] = "v%?";
      stringArray0[6] = "sa";
      stringArray0[7] = "I}1%S?oyW|oHp+UxC7i";
      stringArray0[8] = ",to;LD.";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "xp1>{$zbIm?U";
      stringArray0[1] = "7R";
      stringArray0[2] = "0lH5rJzl";
      stringArray0[3] = "-fp";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ";";
      stringArray0[1] = "E ttl*|[#g'H@";
      stringArray0[2] = "-pp";
      stringArray0[3] = "E{an\"sHd%lS>>\"d;";
      stringArray0[4] = "8KXI<woVOSjL0oQFG$";
      stringArray0[5] = "-r";
      stringArray0[6] = "#98HZ~r#";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0)d";
      stringArray0[1] = "88]8ch~&.Vv";
      stringArray0[2] = ",i-";
      stringArray0[3] = "-np";
      stringArray0[4] = "$ub9h";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-fp\t the file path (the folder you want to save the files in)";
      stringArray0[1] = "";
      stringArray0[2] = "J";
      stringArray0[3] = "-s";
      stringArray0[4] = "-a";
      stringArray0[5] = "y<C0UNR!f&i0V";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "IkE[.l!{X'7% H";
      stringArray0[1] = "-f";
      stringArray0[2] = "-";
      stringArray0[3] = "-f\t[y|n] flatten the gene model, default is y";
      stringArray0[4] = "-f";
      stringArray0[5] = "-a";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-p";
      stringArray0[1] = "-flt\tspace separated list of qualifiers to ignore (GFF only)";
      stringArray0[2] = "";
      stringArray0[3] = "-s";
      stringArray0[4] = "LEUim'}";
      stringArray0[5] = "v%?";
      stringArray0[6] = "-flt\tspace separated list of qualifiers to ignore (GFF only)";
      stringArray0[7] = "-i";
      stringArray0[8] = ",to;LD.";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-J";
      stringArray0[1] = "Lda7$<D";
      stringArray0[2] = "-i";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0)d";
      stringArray0[1] = "0)d";
      stringArray0[2] = "-";
      stringArray0[3] = "NTd%&Y";
      stringArray0[4] = "$ub9h";
      stringArray0[5] = "-f";
      stringArray0[6] = "H";
      stringArray0[7] = "-f";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-]e8'2{=/:,2~$";
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.main((String[]) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(emblStreamFeature0);
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(blastStreamFeature0);
      ReadAndWriteEntry.addAllKeysQualifiers(blastEntryInformation0, databaseStreamFeature0);
      assertTrue(databaseStreamFeature0.isVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatabaseEntrySource databaseEntrySource0 = new DatabaseEntrySource();
      databaseEntrySource0.setLocation(false);
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.readEntryFromDatabase("Authentication cancelled", databaseEntrySource0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DatabaseEntrySource databaseEntrySource0 = new DatabaseEntrySource();
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.readEntryFromDatabase("Authentication cancelled", databaseEntrySource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.ReadAndWriteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.readEntryFromDatabase("Preferred configurator class: ");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatabaseEntrySource databaseEntrySource0 = ReadAndWriteEntry.getEntrySource();
      assertNull(databaseEntrySource0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReadAndWriteEntry.getFeatureId((DatabaseEntrySource) null, "hydrophobicity");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.ReadAndWriteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReadAndWriteEntry readAndWriteEntry0 = new ReadAndWriteEntry();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      ReadAndWriteEntry.addQualifierToEntryInfo(blastEntryInformation0, "");
      assertFalse(blastEntryInformation0.useEMBLFormat());
  }
}
