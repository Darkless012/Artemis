/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:28:35 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.EntryInformation;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.MSPcrunchEntryInformation;
import uk.ac.sanger.artemis.io.PublicDBStreamFeature;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.SimpleEntryInformation;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PublicDBStreamFeature_ESTest extends PublicDBStreamFeature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expected the first line of a feature");
      assertNotNull(stringReader0);
      
      EntryInformation entryInformation0 = SimpleEntryInformation.getDefaultEntryInformation();
      assertFalse(entryInformation0.useEMBLFormat());
      assertNotNull(entryInformation0);
      
      try { 
        PublicDBStreamFeature.readQualifiers(stringReader0, entryInformation0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // failed to read a qualifier name from this string: expected the first line of a feature
         //
         verifyException("uk.ac.sanger.artemis.io.StreamQualifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
      assertNotNull(mSPcrunchEntryInformation0);
      
      // Undeclared exception!
      try { 
        PublicDBStreamFeature.readQualifiers((Reader) null, mSPcrunchEntryInformation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      assertNotNull(bufferedReader0);
      
      EntryInformation entryInformation0 = SimpleEntryInformation.getDefaultEntryInformation();
      assertFalse(entryInformation0.useEMBLFormat());
      assertNotNull(entryInformation0);
      
      try { 
        PublicDBStreamFeature.readQualifiers(bufferedReader0, entryInformation0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        PublicDBStreamFeature.readFromStream((LinePushBackReader) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PublicDBStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader("##sequence-region ");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1782);
      assertNotNull(bufferedReader0);
      
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(bufferedReader0);
      assertEquals(0, linePushBackReader0.getLineNumber());
      assertNotNull(linePushBackReader0);
      
      bufferedReader0.close();
      try { 
        PublicDBStreamFeature.readFromStream(linePushBackReader0, 4186);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 276);
      assertNotNull(bufferedReader0);
      
      QualifierVector qualifierVector0 = PublicDBStreamFeature.readQualifiers(bufferedReader0, (EntryInformation) null);
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertNotNull(qualifierVector0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader("##sequence-region ");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1782);
      assertNotNull(bufferedReader0);
      
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(bufferedReader0);
      assertEquals(0, linePushBackReader0.getLineNumber());
      assertNotNull(linePushBackReader0);
      
      LinePushBackReader linePushBackReader1 = new LinePushBackReader(bufferedReader0);
      assertEquals(0, linePushBackReader1.getLineNumber());
      assertNotNull(linePushBackReader1);
      assertFalse(linePushBackReader1.equals((Object)linePushBackReader0));
      
      GenbankStreamFeature genbankStreamFeature0 = GenbankStreamFeature.readFromStream(linePushBackReader1);
      assertEquals(1, linePushBackReader1.getLineNumber());
      assertNull(genbankStreamFeature0);
      assertFalse(linePushBackReader1.equals((Object)linePushBackReader0));
      assertNotSame(linePushBackReader1, linePushBackReader0);
      
      GenbankStreamFeature genbankStreamFeature1 = GenbankStreamFeature.readFromStream(linePushBackReader0);
      assertEquals(0, linePushBackReader0.getLineNumber());
      assertNull(genbankStreamFeature1);
      assertFalse(linePushBackReader0.equals((Object)linePushBackReader1));
      assertNotSame(linePushBackReader0, linePushBackReader1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StringReader stringReader0 = new StringReader("##sequence-region ");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1782);
      assertNotNull(bufferedReader0);
      
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(bufferedReader0);
      assertEquals(0, linePushBackReader0.getLineNumber());
      assertNotNull(linePushBackReader0);
      
      EmblStreamFeature emblStreamFeature0 = EmblStreamFeature.readFromStream(linePushBackReader0);
      assertEquals(1, linePushBackReader0.getLineNumber());
      assertNull(emblStreamFeature0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("M=qDV[Z5K");
      assertEquals(9, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(9, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNotNull(genbankStreamSequence0);
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertEquals(9, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(9, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNotNull(bases0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      uk.ac.sanger.artemis.Entry entry0 = uk.ac.sanger.artemis.Entry.newEntry(bases0);
      uk.ac.sanger.artemis.Feature feature0 = entry0.createFeature();
      Reader reader0 = feature0.toReader();
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(reader0);
      PublicDBStreamFeature.readFromStream(linePushBackReader0, 0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      MockFile mockFile0 = new MockFile("ComponentFeatures can only be attached directly to SimpleAssembly objects");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      genbankStreamFeature0.writeToStream(mockPrintWriter0);
  }
}
