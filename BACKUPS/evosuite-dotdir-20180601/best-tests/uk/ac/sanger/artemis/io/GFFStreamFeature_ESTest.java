/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 10:45:56 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedReader;
import java.io.StringReader;
import java.sql.Timestamp;
import java.util.Hashtable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.ChadoCanonicalGene;
import uk.ac.sanger.artemis.io.DatabaseInferredFeature;
import uk.ac.sanger.artemis.io.DatabaseStreamFeature;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.Feature;
import uk.ac.sanger.artemis.io.GFF3AttributeBuilder;
import uk.ac.sanger.artemis.io.GFFStreamFeature;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.MSPcrunchStreamFeature;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RangeVector;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GFFStreamFeature_ESTest extends GFFStreamFeature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      assertNull(databaseStreamFeature0.getGffSeqName());
      assertNull(databaseStreamFeature0.getGffSource());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertNotNull(databaseStreamFeature0);
      
      GFF3AttributeBuilder gFF3AttributeBuilder0 = new GFF3AttributeBuilder();
      assertNotNull(gFF3AttributeBuilder0);
      
      databaseStreamFeature0.prepareProcessors(gFF3AttributeBuilder0);
      assertNull(databaseStreamFeature0.getGffSeqName());
      assertNull(databaseStreamFeature0.getGffSource());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      assertNull(databaseStreamFeature0.getGffSeqName());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertNull(databaseStreamFeature0.getGffSource());
      assertNotNull(databaseStreamFeature0);
      
      org.gmod.schema.sequence.Feature feature0 = new org.gmod.schema.sequence.Feature();
      assertNull(feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNotNull(feature0);
      
      databaseStreamFeature0.setChadoLazyFeature(feature0);
      assertNull(databaseStreamFeature0.getGffSeqName());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertNull(databaseStreamFeature0.getGffSource());
      assertNull(feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      org.gmod.schema.sequence.Feature feature1 = databaseStreamFeature0.getChadoLazyFeature();
      assertSame(feature1, feature0);
      assertNull(databaseStreamFeature0.getGffSeqName());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertNull(databaseStreamFeature0.getGffSource());
      assertEquals(0, feature1.getFeatureId());
      assertNull(feature1.getDisplayName());
      assertNull(feature1.getUniqueName());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getName());
      assertEquals((-1), feature1.getSeqLen());
      assertFalse(feature1.isObsolete());
      assertNotNull(feature1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertNull(gFFStreamFeature0.getGffSource());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNotNull(gFFStreamFeature0);
      
      // Undeclared exception!
      try { 
        gFFStreamFeature0.setLastModified((Timestamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        GFFStreamFeature.readFromStream((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(pipedReader0);
      assertEquals(0, linePushBackReader0.getLineNumber());
      assertNotNull(linePushBackReader0);
      
      try { 
        GFFStreamFeature.readFromStream(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      assertNull(databaseStreamFeature0.getGffSeqName());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertTrue(databaseStreamFeature0.isVisible());
      assertNull(databaseStreamFeature0.getGffSource());
      assertNotNull(databaseStreamFeature0);
      
      // Undeclared exception!
      try { 
        databaseStreamFeature0.getAutoNumber("org.biojava.bio.seq.io.FeatureTableParser", 'P');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertNotNull(qualifierVector0);
      
      GFFStreamFeature gFFStreamFeature0 = null;
      try {
        gFFStreamFeature0 = new GFFStreamFeature((Key) null, (Location) null, qualifierVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GFFStreamFeature gFFStreamFeature0 = null;
      try {
        gFFStreamFeature0 = new GFFStreamFeature((Feature) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GFFStreamFeature gFFStreamFeature0 = null;
      try {
        gFFStreamFeature0 = new GFFStreamFeature((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GFFStreamFeature gFFStreamFeature0 = null;
      try {
        gFFStreamFeature0 = new GFFStreamFeature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.StringVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GFFStreamFeature gFFStreamFeature0 = null;
      try {
        gFFStreamFeature0 = new GFFStreamFeature("feature_id");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // invalid GFF line: 8 fields needed (got 1 fields) from: feature_id
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(8);
      assertEquals(8, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertNotNull(range0);
      
      Location location0 = new Location(range0);
      assertEquals(8, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertNotNull(location0);
      
      QualifierVector qualifierVector0 = new QualifierVector();
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertNotNull(qualifierVector0);
      
      Key key0 = Key.CDS;
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertNotNull(key0);
      
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(key0, location0, qualifierVector0);
      assertEquals(8, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertNull(gFFStreamFeature0.getGffSource());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNotNull(gFFStreamFeature0);
      
      GFFStreamFeature gFFStreamFeature1 = new GFFStreamFeature(gFFStreamFeature0, false);
      assertEquals(8, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertNull(gFFStreamFeature0.getGffSource());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNull(gFFStreamFeature1.getGffSeqName());
      assertFalse(gFFStreamFeature1.isLazyLoaded());
      assertFalse(gFFStreamFeature1.isReadOnly());
      assertTrue(gFFStreamFeature1.isVisible());
      assertNull(gFFStreamFeature1.getGffSource());
      assertFalse(gFFStreamFeature1.equals((Object)gFFStreamFeature0));
      assertNotNull(gFFStreamFeature1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(genbankStreamFeature0, false);
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertNull(gFFStreamFeature0.getGffSource());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNotNull(gFFStreamFeature0);
      
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      assertEquals(0, chadoCanonicalGene0.getSeqlen());
      assertNotNull(chadoCanonicalGene0);
      
      gFFStreamFeature0.setChadoGene(chadoCanonicalGene0);
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertNull(gFFStreamFeature0.getGffSource());
      assertTrue(gFFStreamFeature0.isVisible());
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      assertEquals(0, chadoCanonicalGene0.getSeqlen());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertNull(databaseStreamFeature0.getGffSeqName());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertTrue(databaseStreamFeature0.isVisible());
      assertNull(databaseStreamFeature0.getGffSource());
      assertNotNull(databaseStreamFeature0);
      
      databaseStreamFeature0.setGffSource((String) null);
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertNull(databaseStreamFeature0.getGffSeqName());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertTrue(databaseStreamFeature0.isVisible());
      assertNull(databaseStreamFeature0.getGffSource());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Key key0 = new Key("");
      assertEquals("", key0.toString());
      assertEquals("", key0.getKeyString());
      assertEquals(0, key0.length());
      assertNotNull(key0);
      
      Range range0 = new Range(8);
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertEquals(8, range0.getStart());
      assertNotNull(range0);
      
      Location location0 = new Location(range0);
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertEquals(8, range0.getStart());
      assertNotNull(location0);
      
      QualifierVector qualifierVector0 = new QualifierVector();
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertNotNull(qualifierVector0);
      
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location0, qualifierVector0, (ChadoCanonicalGene) null);
      assertEquals("", key0.toString());
      assertEquals("", key0.getKeyString());
      assertEquals(0, key0.length());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertEquals(8, range0.getStart());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertNull(databaseInferredFeature0.getGffSource());
      assertNull(databaseInferredFeature0.getGffSeqName());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertTrue(databaseInferredFeature0.isVisible());
      assertNotNull(databaseInferredFeature0);
      
      String string0 = databaseInferredFeature0.getGffSource();
      assertEquals("", key0.toString());
      assertEquals("", key0.getKeyString());
      assertEquals(0, key0.length());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertEquals(8, range0.getStart());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertNull(databaseInferredFeature0.getGffSource());
      assertNull(databaseInferredFeature0.getGffSeqName());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertTrue(databaseInferredFeature0.isVisible());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Key key0 = new Key((String) null);
      assertNull(key0.getKeyString());
      assertNull(key0.toString());
      assertNotNull(key0);
      
      Range range0 = new Range(92, 92);
      assertEquals(92, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(92, range0.getEnd());
      assertNotNull(range0);
      
      Location location0 = new Location(range0);
      assertEquals(92, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(92, range0.getEnd());
      assertNotNull(location0);
      
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(key0, location0, (QualifierVector) null);
      assertNull(key0.getKeyString());
      assertNull(key0.toString());
      assertEquals(92, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(92, range0.getEnd());
      assertTrue(databaseStreamFeature0.isVisible());
      assertNull(databaseStreamFeature0.getGffSource());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertNull(databaseStreamFeature0.getGffSeqName());
      assertNotNull(databaseStreamFeature0);
      
      String string0 = databaseStreamFeature0.getGffSeqName();
      assertNull(key0.getKeyString());
      assertNull(key0.toString());
      assertEquals(92, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(92, range0.getEnd());
      assertTrue(databaseStreamFeature0.isVisible());
      assertNull(databaseStreamFeature0.getGffSource());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertNull(databaseStreamFeature0.getGffSeqName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      assertNull(gFFStreamFeature0.getGffSource());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNotNull(gFFStreamFeature0);
      
      MSPcrunchStreamFeature mSPcrunchStreamFeature0 = new MSPcrunchStreamFeature(gFFStreamFeature0);
      assertNull(gFFStreamFeature0.getGffSource());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNotNull(mSPcrunchStreamFeature0);
      
      boolean boolean0 = GFFStreamFeature.isGTF(mSPcrunchStreamFeature0);
      assertNull(gFFStreamFeature0.getGffSource());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertTrue(gFFStreamFeature0.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Key key0 = new Key("");
      assertEquals(0, key0.length());
      assertEquals("", key0.getKeyString());
      assertEquals("", key0.toString());
      assertNotNull(key0);
      
      Range range0 = new Range(8);
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getStart());
      assertNotNull(range0);
      
      Location location0 = new Location(range0);
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getStart());
      assertNotNull(location0);
      
      QualifierVector qualifierVector0 = new QualifierVector();
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertNotNull(qualifierVector0);
      
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location0, qualifierVector0, (ChadoCanonicalGene) null);
      assertEquals(0, key0.length());
      assertEquals("", key0.getKeyString());
      assertEquals("", key0.toString());
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getStart());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertNull(databaseInferredFeature0.getGffSeqName());
      assertNull(databaseInferredFeature0.getGffSource());
      assertTrue(databaseInferredFeature0.isVisible());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertNotNull(databaseInferredFeature0);
      
      boolean boolean0 = GFFStreamFeature.isGTF(databaseInferredFeature0);
      assertEquals(0, key0.length());
      assertEquals("", key0.getKeyString());
      assertEquals("", key0.toString());
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getStart());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertNull(databaseInferredFeature0.getGffSeqName());
      assertNull(databaseInferredFeature0.getGffSource());
      assertTrue(databaseInferredFeature0.isVisible());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNull(gFFStreamFeature0.getGffSource());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertNotNull(gFFStreamFeature0);
      
      boolean boolean0 = gFFStreamFeature0.isReadOnly();
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNull(gFFStreamFeature0.getGffSource());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      assertTrue(gFFStreamFeature0.isVisible());
      assertNull(gFFStreamFeature0.getGffSource());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertNotNull(gFFStreamFeature0);
      
      Timestamp timestamp0 = new Timestamp((-2580L));
      assertEquals("1969-12-31 23:59:57.42", timestamp0.toString());
      assertEquals(420000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      gFFStreamFeature0.setLastModified(timestamp0);
      assertTrue(gFFStreamFeature0.isVisible());
      assertNull(gFFStreamFeature0.getGffSource());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertEquals("1969-12-31 23:59:57.42", timestamp0.toString());
      assertEquals(420000000, timestamp0.getNanos());
      
      Timestamp timestamp1 = gFFStreamFeature0.getLastModified();
      assertSame(timestamp1, timestamp0);
      assertTrue(gFFStreamFeature0.isVisible());
      assertNull(gFFStreamFeature0.getGffSource());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertEquals("1969-12-31 23:59:57.42", timestamp1.toString());
      assertEquals(420000000, timestamp1.getNanos());
      assertNotNull(timestamp1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      assertNull(gFFStreamFeature0.getGffSource());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNotNull(gFFStreamFeature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      // Undeclared exception!
      try { 
        gFFStreamFeature0.writeToStream(charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(genbankStreamFeature0, false);
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertNull(gFFStreamFeature0.getGffSource());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNotNull(gFFStreamFeature0);
      
      Hashtable<String, Range> hashtable0 = gFFStreamFeature0.getSegmentRangeStore();
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertNull(gFFStreamFeature0.getGffSource());
      assertTrue(gFFStreamFeature0.isVisible());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      int int0 = gFFStreamFeature0.getAutoNumber("gff_seqname", ',');
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertNull(gFFStreamFeature0.getGffSource());
      assertTrue(gFFStreamFeature0.isVisible());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range(8);
      assertEquals(8, range0.getStart());
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertNotNull(range0);
      
      Location location0 = new Location(range0);
      assertEquals(8, range0.getStart());
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertNotNull(location0);
      
      QualifierVector qualifierVector0 = new QualifierVector();
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertEquals(7, qualifierVector0.capacity());
      assertTrue(qualifierVector0.isEmpty());
      assertNotNull(qualifierVector0);
      
      Key key0 = Key.CDS;
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertNotNull(key0);
      
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(key0, location0, qualifierVector0);
      assertEquals(8, range0.getStart());
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertEquals(7, qualifierVector0.capacity());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNull(gFFStreamFeature0.getGffSource());
      assertNotNull(gFFStreamFeature0);
      
      String[] stringArray0 = gFFStreamFeature0.getPrefix("DUP1-CDS:uk.ac.sanger.artemis.io.Range@0000000001", '.');
      assertEquals(2, stringArray0.length);
      assertEquals(8, range0.getStart());
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertEquals(7, qualifierVector0.capacity());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNull(gFFStreamFeature0.getGffSource());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertNull(gFFStreamFeature0.getGffSource());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNotNull(gFFStreamFeature0);
      
      String[] stringArray0 = gFFStreamFeature0.getPrefix("//", 'U');
      assertEquals(2, stringArray0.length);
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertNull(gFFStreamFeature0.getGffSource());
      assertTrue(gFFStreamFeature0.isVisible());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Key key0 = new Key("");
      assertEquals("", key0.getKeyString());
      assertEquals(0, key0.length());
      assertEquals("", key0.toString());
      assertNotNull(key0);
      
      Range range0 = new Range(8);
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getStart());
      assertNotNull(range0);
      
      Location location0 = new Location(range0);
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getStart());
      assertNotNull(location0);
      
      QualifierVector qualifierVector0 = new QualifierVector();
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertNotNull(qualifierVector0);
      
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location0, qualifierVector0, (ChadoCanonicalGene) null);
      assertEquals("", key0.getKeyString());
      assertEquals(0, key0.length());
      assertEquals("", key0.toString());
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getStart());
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertTrue(databaseInferredFeature0.isVisible());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertNull(databaseInferredFeature0.getGffSource());
      assertNull(databaseInferredFeature0.getGffSeqName());
      assertNotNull(databaseInferredFeature0);
      
      RangeVector rangeVector0 = new RangeVector();
      assertEquals(10, rangeVector0.capacity());
      assertEquals("[]", rangeVector0.toString());
      assertTrue(rangeVector0.isEmpty());
      assertEquals(0, rangeVector0.size());
      assertNotNull(rangeVector0);
      
      Hashtable<String, Range> hashtable0 = databaseInferredFeature0.getSegmentRangeStore();
      assertEquals("", key0.getKeyString());
      assertEquals(0, key0.length());
      assertEquals("", key0.toString());
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getStart());
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertTrue(databaseInferredFeature0.isVisible());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertNull(databaseInferredFeature0.getGffSource());
      assertNull(databaseInferredFeature0.getGffSeqName());
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = databaseInferredFeature0.getSegmentID(rangeVector0);
      assertEquals("", key0.getKeyString());
      assertEquals(0, key0.length());
      assertEquals("", key0.toString());
      assertEquals(8, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getStart());
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertTrue(databaseInferredFeature0.isVisible());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertNull(databaseInferredFeature0.getGffSource());
      assertNull(databaseInferredFeature0.getGffSeqName());
      assertEquals(10, rangeVector0.capacity());
      assertEquals("[]", rangeVector0.toString());
      assertTrue(rangeVector0.isEmpty());
      assertEquals(0, rangeVector0.size());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      assertNull(gFFStreamFeature0.getGffSource());
      assertTrue(gFFStreamFeature0.isVisible());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertNotNull(gFFStreamFeature0);
      
      RangeVector rangeVector0 = new RangeVector();
      assertEquals("[]", rangeVector0.toString());
      assertTrue(rangeVector0.isEmpty());
      assertEquals(10, rangeVector0.capacity());
      assertEquals(0, rangeVector0.size());
      assertNotNull(rangeVector0);
      
      String string0 = gFFStreamFeature0.getSegmentID(rangeVector0);
      assertNull(gFFStreamFeature0.getGffSource());
      assertTrue(gFFStreamFeature0.isVisible());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNull(gFFStreamFeature0.getGffSeqName());
      assertEquals("[]", rangeVector0.toString());
      assertTrue(rangeVector0.isEmpty());
      assertEquals(10, rangeVector0.capacity());
      assertEquals(0, rangeVector0.size());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Key key0 = new Key("");
      assertEquals("", key0.toString());
      assertEquals("", key0.getKeyString());
      assertEquals(0, key0.length());
      assertNotNull(key0);
      
      Range range0 = new Range(8);
      assertEquals(8, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertNotNull(range0);
      
      Location location0 = new Location(range0);
      assertEquals(8, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertNotNull(location0);
      
      Location location1 = location0.reverseComplement(1);
      assertNotSame(location0, location1);
      assertNotSame(location1, location0);
      assertEquals(8, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertFalse(location1.equals((Object)location0));
      assertNotNull(location1);
      
      QualifierVector qualifierVector0 = new QualifierVector();
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertNotNull(qualifierVector0);
      
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location1, qualifierVector0, (ChadoCanonicalGene) null);
      assertEquals("", key0.toString());
      assertEquals("", key0.getKeyString());
      assertEquals(0, key0.length());
      assertEquals(8, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertNull(databaseInferredFeature0.getGffSeqName());
      assertTrue(databaseInferredFeature0.isVisible());
      assertNull(databaseInferredFeature0.getGffSource());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertFalse(location0.equals((Object)location1));
      assertFalse(location1.equals((Object)location0));
      assertNotNull(databaseInferredFeature0);
      
      Hashtable<String, Range> hashtable0 = databaseInferredFeature0.getSegmentRangeStore();
      assertNotSame(location0, location1);
      assertNotSame(location1, location0);
      assertEquals("", key0.toString());
      assertEquals("", key0.getKeyString());
      assertEquals(0, key0.length());
      assertEquals(8, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertNull(databaseInferredFeature0.getGffSeqName());
      assertTrue(databaseInferredFeature0.isVisible());
      assertNull(databaseInferredFeature0.getGffSource());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertFalse(location0.equals((Object)location1));
      assertFalse(location1.equals((Object)location0));
      assertNotNull(hashtable0);
      
      String string0 = databaseInferredFeature0.getSegmentID(range0);
      assertNotSame(location0, location1);
      assertNotSame(location1, location0);
      assertEquals("", key0.toString());
      assertEquals("", key0.getKeyString());
      assertEquals(0, key0.length());
      assertEquals(8, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(8, range0.getEnd());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertNull(databaseInferredFeature0.getGffSeqName());
      assertTrue(databaseInferredFeature0.isVisible());
      assertNull(databaseInferredFeature0.getGffSource());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertFalse(location0.equals((Object)location1));
      assertFalse(location1.equals((Object)location0));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Key key0 = new Key("");
      Range range0 = new Range(8);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location0, qualifierVector0, (ChadoCanonicalGene) null);
      databaseInferredFeature0.getSegmentRangeStore();
      String string0 = databaseInferredFeature0.getSegmentID(range0);
      assertNotNull(string0);
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(8);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      Key key0 = Key.CDS;
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(key0, location0, qualifierVector0);
      String string0 = gFFStreamFeature0.getSegmentID(range0);
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertNotNull(string0);
      assertTrue(gFFStreamFeature0.isVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Key key0 = new Key("");
      Range range0 = new Range(8);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location0, qualifierVector0, (ChadoCanonicalGene) null);
      Hashtable<String, Range> hashtable0 = databaseInferredFeature0.getSegmentRangeStore();
      Hashtable<String, Range> hashtable1 = databaseInferredFeature0.getSegmentRangeStore();
      assertTrue(databaseInferredFeature0.isVisible());
      assertNotNull(hashtable1);
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertSame(hashtable1, hashtable0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cr(V<@\"<Cm)e(}h$Gh");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      try { 
        GFFStreamFeature.readFromStream(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // invalid GFF line: 8 fields needed (got 1 fields) from: Cr(V<@\"<Cm)e(}h$Gh
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(8);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      Key key0 = Key.CDS;
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(key0, location0, qualifierVector0);
      GFFStreamFeature gFFStreamFeature1 = new GFFStreamFeature(gFFStreamFeature0, true);
      assertFalse(gFFStreamFeature1.isReadOnly());
      assertFalse(gFFStreamFeature1.isLazyLoaded());
      assertTrue(gFFStreamFeature1.isVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Key key0 = new Key("");
      Range range0 = new Range(8);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location0, qualifierVector0, (ChadoCanonicalGene) null);
      Hashtable<String, Range> hashtable0 = databaseInferredFeature0.getSegmentRangeStore();
      assertNotNull(hashtable0);
      
      GFFStreamFeature gFFStreamFeature0 = (GFFStreamFeature)databaseInferredFeature0.copy();
      assertTrue(gFFStreamFeature0.isVisible());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertFalse(gFFStreamFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GFFStreamFeature.removeAttribute("1");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      databaseStreamFeature0.setLazyLoaded(false);
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertTrue(databaseStreamFeature0.isVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = blastEntryInformation0.getDefaultKey();
      Range range0 = new Range(1903, 180179);
      Location location0 = new Location(range0);
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(key0, location0, (QualifierVector) null);
      boolean boolean0 = databaseStreamFeature0.isVisible();
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Key key0 = new Key("");
      Range range0 = new Range(8);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location0, qualifierVector0, (ChadoCanonicalGene) null);
      Hashtable<String, Range> hashtable0 = databaseInferredFeature0.getSegmentRangeStore();
      assertNotNull(hashtable0);
      
      databaseInferredFeature0.setSegmentRangeStore(hashtable0);
      assertTrue(databaseInferredFeature0.isVisible());
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      gFFStreamFeature0.setNewIdMapToOldId(hashtable0);
      assertTrue(gFFStreamFeature0.isVisible());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertFalse(gFFStreamFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      org.gmod.schema.sequence.Feature feature0 = databaseStreamFeature0.getChadoLazyFeature();
      databaseStreamFeature0.setChadoLazyFeature(feature0);
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Key key0 = new Key("cLzD)/N&ptVZ|'P[GNg");
      Range range0 = new Range(8);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location0, qualifierVector0, (ChadoCanonicalGene) null);
      databaseInferredFeature0.getChadoGene();
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertTrue(databaseInferredFeature0.isVisible());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Key key0 = new Key("");
      Range range0 = new Range(8);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location0, qualifierVector0, (ChadoCanonicalGene) null);
      databaseInferredFeature0.getFeature_relationship_rank_store();
      assertFalse(databaseInferredFeature0.isReadOnly());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertTrue(databaseInferredFeature0.isVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      MSPcrunchStreamFeature mSPcrunchStreamFeature0 = new MSPcrunchStreamFeature(gFFStreamFeature0);
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(mSPcrunchStreamFeature0);
      databaseStreamFeature0.setVisible(false);
      assertTrue(gFFStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      gFFStreamFeature0.getNewIdMapToOldId();
      assertTrue(gFFStreamFeature0.isVisible());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      boolean boolean0 = databaseStreamFeature0.isLazyLoaded();
      assertFalse(boolean0);
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertTrue(databaseStreamFeature0.isVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      databaseStreamFeature0.setReadOnlyFeature(false);
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature(genbankStreamFeature0);
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0);
      gFFStreamFeature0.setFeature_relationship_rank_store((Hashtable<String, Integer>) null);
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertTrue(gFFStreamFeature0.isVisible());
      assertFalse(gFFStreamFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature(genbankStreamFeature0);
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0);
      gFFStreamFeature0.getLastModified();
      assertTrue(gFFStreamFeature0.isVisible());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GFFStreamFeature.includeAttribute("org.biojava.bio.BioException");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      databaseStreamFeature0.setGffSeqName("e)y3gHyU^Hv4-KsFOX0");
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertEquals("e)y3gHyU^Hv4-KsFOX0", databaseStreamFeature0.getGffSeqName());
      assertTrue(databaseStreamFeature0.isVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      MSPcrunchStreamFeature mSPcrunchStreamFeature0 = new MSPcrunchStreamFeature(gFFStreamFeature0);
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(mSPcrunchStreamFeature0);
      // Undeclared exception!
      try { 
        databaseStreamFeature0.prepareProcessors((GFF3AttributeBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }
}
