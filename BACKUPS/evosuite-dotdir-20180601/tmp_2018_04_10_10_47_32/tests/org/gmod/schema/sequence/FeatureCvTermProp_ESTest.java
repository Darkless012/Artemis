/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 13:09:32 GMT 2018
 */

package org.gmod.schema.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gmod.schema.cv.CvTerm;
import org.gmod.schema.sequence.FeatureCvTerm;
import org.gmod.schema.sequence.FeatureCvTermProp;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FeatureCvTermProp_ESTest extends FeatureCvTermProp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp();
      String string0 = featureCvTermProp0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp((CvTerm) null, (FeatureCvTerm) null, 1847);
      featureCvTermProp0.setValue("tip'5=F 1yT~<Ldt$N");
      featureCvTermProp0.getValue();
      assertEquals(1847, featureCvTermProp0.getRank());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp();
      int int0 = featureCvTermProp0.getRank();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp((CvTerm) null, (FeatureCvTerm) null, 1847);
      int int0 = featureCvTermProp0.getRank();
      assertEquals(1847, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp((CvTerm) null, (FeatureCvTerm) null, 1847);
      featureCvTermProp0.getFeatureCvTerm();
      assertEquals(1847, featureCvTermProp0.getRank());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp((CvTerm) null, (FeatureCvTerm) null, 1847);
      featureCvTermProp0.getCvTerm();
      assertEquals(1847, featureCvTermProp0.getRank());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cvTerm0).toString();
      FeatureCvTerm featureCvTerm0 = mock(FeatureCvTerm.class, new ViolatedAssumptionAnswer());
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp(cvTerm0, featureCvTerm0, "", (-2596));
      featureCvTermProp0.getCvTerm();
      assertEquals((-2596), featureCvTermProp0.getRank());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = mock(FeatureCvTerm.class, new ViolatedAssumptionAnswer());
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp(cvTerm0, featureCvTerm0, "", (-10));
      featureCvTermProp0.getValue();
      assertEquals((-10), featureCvTermProp0.getRank());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp();
      FeatureCvTerm featureCvTerm0 = mock(FeatureCvTerm.class, new ViolatedAssumptionAnswer());
      featureCvTermProp0.setFeatureCvTerm(featureCvTerm0);
      assertNull(featureCvTermProp0.getValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = mock(FeatureCvTerm.class, new ViolatedAssumptionAnswer());
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp(cvTerm0, featureCvTerm0, "", (-2596));
      CvTerm cvTerm1 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      featureCvTermProp0.setCvTerm(cvTerm1);
      assertEquals((-2596), featureCvTermProp0.getRank());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = mock(FeatureCvTerm.class, new ViolatedAssumptionAnswer());
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp(cvTerm0, featureCvTerm0, "", (-2596));
      int int0 = featureCvTermProp0.getRank();
      assertEquals((-2596), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = mock(FeatureCvTerm.class, new ViolatedAssumptionAnswer());
      FeatureCvTermProp featureCvTermProp0 = new FeatureCvTermProp(cvTerm0, featureCvTerm0, "", (-10));
      featureCvTermProp0.setRank((-10));
      assertEquals((-10), featureCvTermProp0.getRank());
  }
}
