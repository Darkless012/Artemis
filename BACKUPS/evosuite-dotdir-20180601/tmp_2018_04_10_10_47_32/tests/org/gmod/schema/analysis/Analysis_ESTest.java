/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 13:25:40 GMT 2018
 */

package org.gmod.schema.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Date;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gmod.schema.analysis.Analysis;
import org.gmod.schema.analysis.AnalysisFeature;
import org.gmod.schema.analysis.AnalysisProp;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Analysis_ESTest extends Analysis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setSourceVersion("iI+S.PJ[5;>T");
      String string0 = analysis0.getSourceVersion();
      assertEquals("iI+S.PJ[5;>T", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setSourceVersion("");
      String string0 = analysis0.getSourceVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setSourceUri("v>{{QFtQv-~s?");
      String string0 = analysis0.getSourceUri();
      assertEquals("v>{{QFtQv-~s?", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setSourceUri("");
      String string0 = analysis0.getSourceUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setSourceName("org.gmod.schema.analysis.Analysis");
      String string0 = analysis0.getSourceName();
      assertEquals("org.gmod.schema.analysis.Analysis", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setSourceName("");
      String string0 = analysis0.getSourceName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setProgramVersion(".Y_s");
      String string0 = analysis0.getProgramVersion();
      assertEquals(".Y_s", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setProgramVersion("");
      String string0 = analysis0.getProgramVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setProgram("M#]I?!gkyo");
      String string0 = analysis0.getProgram();
      assertEquals("M#]I?!gkyo", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setProgram("");
      String string0 = analysis0.getProgram();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setName("c7F:[?");
      String string0 = analysis0.getName();
      assertEquals("c7F:[?", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setName("");
      String string0 = analysis0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setDescription("mWmBJH-");
      String string0 = analysis0.getDescription();
      assertEquals("mWmBJH-", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setDescription("");
      String string0 = analysis0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setAnalysisId(3327);
      int int0 = analysis0.getAnalysisId();
      assertEquals(3327, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setAnalysisId((-1));
      int int0 = analysis0.getAnalysisId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setAlgorithm("Eh_y,G7?x*)pI");
      String string0 = analysis0.getAlgorithm();
      assertEquals("Eh_y,G7?x*)pI", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setAlgorithm("");
      String string0 = analysis0.getAlgorithm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      Collection<AnalysisProp> collection0 = analysis0.getAnalysisProps();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      String string0 = analysis0.getProgram();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      String string0 = analysis0.getSourceUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setAnalysisFeatures((Set<AnalysisFeature>) null);
      Collection<AnalysisFeature> collection0 = analysis0.getAnalysisFeatures();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      Collection<AnalysisFeature> collection0 = analysis0.getAnalysisFeatures();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      analysis0.setTimeExecuted((Date) null);
      assertNull(analysis0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      String string0 = analysis0.getSourceName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      String string0 = analysis0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      String string0 = analysis0.getSourceVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      String string0 = analysis0.getProgramVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      Date date0 = analysis0.getTimeExecuted();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      String string0 = analysis0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      int int0 = analysis0.getAnalysisId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Analysis analysis0 = new Analysis();
      String string0 = analysis0.getAlgorithm();
      assertNull(string0);
  }
}
