/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:49:18 GMT 2018
 */

package uk.ac.sanger.artemis.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.util.FastVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastVector_ESTest extends FastVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      fastVector0.add((Object) "");
      fastVector0.insertElementAfter("", fastVector0);
      assertFalse(fastVector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      fastVector0.insertElementAfter(",)PXb!fs{E4j", ",)PXb!fs{E4j");
      fastVector0.setElementAt(fastVector0, 0);
      assertFalse(fastVector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      fastVector0.add(0, (Object) null);
      Object object0 = fastVector0.lastElement();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      fastVector0.insertElementAfter(",)PXb!fs{E4j", ",)PXb!fs{E4j");
      Object object0 = fastVector0.lastElement();
      assertEquals(",)PXb!fs{E4j", object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      // Undeclared exception!
      try { 
        fastVector0.setElementAt("Vi.Z>oY*[M", 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      fastVector0.insertElementAfter((Object) null, (Object) null);
      fastVector0.insertElementAfter((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        fastVector0.mysort((Comparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      fastVector0.insertElementAfter(fastVector0, fastVector0);
      fastVector0.insertElementAfter((Object) null, fastVector0);
      // Undeclared exception!
      try { 
        fastVector0.mysort((Comparator) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FastVector fastVector1 = fastVector0.mysort(comparator0);
      fastVector1.add((Object) fastVector0);
      fastVector0.add((Object) fastVector1);
      // Undeclared exception!
      try { 
        fastVector1.add((Object) fastVector1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      fastVector0.insertElementAfter(",)PXb!fs{E4j", ",)PXb!fs{E4j");
      // Undeclared exception!
      try { 
        fastVector0.add((Object) ",)PXb!fs{E4j");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - object added a second time
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      // Undeclared exception!
      try { 
        fastVector0.add((Object) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      // Undeclared exception!
      try { 
        fastVector0.setElementAt(fastVector0, (-77));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FastVector fastVector1 = fastVector0.mysort(comparator0);
      fastVector1.add((Object) fastVector0);
      fastVector0.add((Object) fastVector1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FastVector fastVector2 = fastVector1.mysort(comparator1);
      // Undeclared exception!
      try { 
        fastVector1.insertElementAfter(fastVector2, fastVector0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      // Undeclared exception!
      try { 
        fastVector0.lastElement();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
