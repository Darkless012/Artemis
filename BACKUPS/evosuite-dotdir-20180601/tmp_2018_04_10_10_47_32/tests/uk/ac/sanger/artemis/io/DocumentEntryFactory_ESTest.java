/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:42:26 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import htsjdk.samtools.seekablestream.SeekableMemoryStream;
import htsjdk.samtools.util.BlockCompressedInputStream;
import java.awt.HeadlessException;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.LogReadListener;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.DocumentEntry;
import uk.ac.sanger.artemis.io.DocumentEntryFactory;
import uk.ac.sanger.artemis.io.EmblDocumentEntry;
import uk.ac.sanger.artemis.io.Entry;
import uk.ac.sanger.artemis.io.EntryInformation;
import uk.ac.sanger.artemis.io.GenbankDocumentEntry;
import uk.ac.sanger.artemis.io.KeyVector;
import uk.ac.sanger.artemis.io.MSPcrunchEntryInformation;
import uk.ac.sanger.artemis.io.PublicDBDocumentEntry;
import uk.ac.sanger.artemis.io.QualifierInfoHash;
import uk.ac.sanger.artemis.io.ReadListener;
import uk.ac.sanger.artemis.io.SimpleEntryInformation;
import uk.ac.sanger.artemis.util.Document;
import uk.ac.sanger.artemis.util.FileDocument;
import uk.ac.sanger.artemis.util.LinePushBackReader;
import uk.ac.sanger.artemis.util.TextDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocumentEntryFactory_ESTest extends DocumentEntryFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EntryInformation entryInformation0 = mock(EntryInformation.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(pipedReader0);
      assertNotNull(linePushBackReader0);
      assertEquals(0, linePushBackReader0.getLineNumber());
      
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn(pipedInputStream0).when(document0).getInputStream();
      doReturn(linePushBackReader0).when(document0).getLinePushBackReader();
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      try { 
        DocumentEntryFactory.makeDocumentEntry(entryInformation0, document0, readListener0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      assertNotNull(simpleEntryInformation0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
      
      MockFile mockFile0 = new MockFile("1.5.1.8.0_161");
      assertNotNull(mockFile0);
      
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      assertNotNull(fileDocument0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("1.5.1.8.0_161", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("1.5.1.8.0_161", mockFile0.getName());
      assertEquals("1.5.1.8.0_161", fileDocument0.getName());
      assertFalse(fileDocument0.writable());
      
      LogReadListener logReadListener0 = new LogReadListener((String) null);
      assertNotNull(logReadListener0);
      assertFalse(logReadListener0.seenMessage());
      
      try { 
        DocumentEntryFactory.makeDocumentEntry((EntryInformation) simpleEntryInformation0, (Document) fileDocument0, (ReadListener) logReadListener0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EntryInformation entryInformation0 = mock(EntryInformation.class, new ViolatedAssumptionAnswer());
      TextDocument textDocument0 = new TextDocument();
      assertNotNull(textDocument0);
      assertNull(textDocument0.getName());
      assertTrue(textDocument0.writable());
      assertTrue(textDocument0.readable());
      
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DocumentEntryFactory.makeDocumentEntry(entryInformation0, (Document) textDocument0, readListener0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EntryInformation entryInformation0 = mock(EntryInformation.class, new ViolatedAssumptionAnswer());
      doReturn((QualifierInfoHash) null).when(entryInformation0).getAllQualifierInfo();
      doReturn((KeyVector) null).when(entryInformation0).getUserKeys();
      doReturn((KeyVector) null).when(entryInformation0).getValidKeys();
      doReturn(false).when(entryInformation0).useEMBLFormat();
      // Undeclared exception!
      try { 
        DocumentEntryFactory.makeDocumentEntry(entryInformation0, (Entry) null, 1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleDocumentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      assertNotNull(blastEntryInformation0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
      
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(blastEntryInformation0);
      assertNotNull(emblDocumentEntry0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertFalse(emblDocumentEntry0.isReadOnly());
      assertTrue(PublicDBDocumentEntry.IGNORE_OBSOLETE_FEATURES);
      
      // Undeclared exception!
      DocumentEntryFactory.makeDocumentEntry((EntryInformation) blastEntryInformation0, (Entry) emblDocumentEntry0, 3, true);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      assertNotNull(mSPcrunchEntryInformation0);
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
      
      PublicDBDocumentEntry publicDBDocumentEntry0 = new PublicDBDocumentEntry(mSPcrunchEntryInformation0);
      assertNotNull(publicDBDocumentEntry0);
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
      assertFalse(publicDBDocumentEntry0.isReadOnly());
      assertTrue(PublicDBDocumentEntry.IGNORE_OBSOLETE_FEATURES);
      
      EmblDocumentEntry emblDocumentEntry0 = (EmblDocumentEntry)DocumentEntryFactory.makeDocumentEntry((EntryInformation) mSPcrunchEntryInformation0, (Entry) publicDBDocumentEntry0, 0, false);
      assertNotNull(emblDocumentEntry0);
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
      assertFalse(publicDBDocumentEntry0.isReadOnly());
      assertFalse(emblDocumentEntry0.isReadOnly());
      assertTrue(PublicDBDocumentEntry.IGNORE_OBSOLETE_FEATURES);
      assertTrue(PublicDBDocumentEntry.IGNORE_OBSOLETE_FEATURES);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EntryInformation entryInformation0 = mock(EntryInformation.class, new ViolatedAssumptionAnswer());
      doReturn((QualifierInfoHash) null, (QualifierInfoHash) null).when(entryInformation0).getAllQualifierInfo();
      doReturn((KeyVector) null, (KeyVector) null).when(entryInformation0).getUserKeys();
      doReturn((KeyVector) null, (KeyVector) null).when(entryInformation0).getValidKeys();
      doReturn(false, false).when(entryInformation0).useEMBLFormat();
      GenbankDocumentEntry genbankDocumentEntry0 = new GenbankDocumentEntry(entryInformation0);
      DocumentEntry documentEntry0 = DocumentEntryFactory.makeDocumentEntry(entryInformation0, (Entry) genbankDocumentEntry0, 0, true);
      assertFalse(documentEntry0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EntryInformation entryInformation0 = mock(EntryInformation.class, new ViolatedAssumptionAnswer());
      doReturn((QualifierInfoHash) null).when(entryInformation0).getAllQualifierInfo();
      doReturn((KeyVector) null).when(entryInformation0).getUserKeys();
      doReturn((KeyVector) null).when(entryInformation0).getValidKeys();
      doReturn(false).when(entryInformation0).useEMBLFormat();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-74);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)70, 289);
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader0).readLine();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn(byteArrayInputStream0).when(document0).getInputStream();
      doReturn(linePushBackReader0, (LinePushBackReader) null).when(document0).getLinePushBackReader();
      // Undeclared exception!
      try { 
        DocumentEntryFactory.makeDocumentEntry(entryInformation0, document0, (ReadListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LineGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EntryInformation entryInformation0 = mock(EntryInformation.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      SeekableMemoryStream seekableMemoryStream0 = new SeekableMemoryStream(byteArray0, "");
      BlockCompressedInputStream blockCompressedInputStream0 = new BlockCompressedInputStream(seekableMemoryStream0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, (byte)10);
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn(blockCompressedInputStream0).when(document0).getInputStream();
      doReturn(pipedReader0).when(document0).getLocation();
      // Undeclared exception!
      try { 
        DocumentEntryFactory.makeDocumentEntry(entryInformation0, document0, (ReadListener) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.PipedReader cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.io.DocumentEntryFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("Z}_-[D`k7[");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn(byteArrayInputStream0).when(document0).getInputStream();
      doReturn(linePushBackReader0, linePushBackReader0).when(document0).getLinePushBackReader();
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      DocumentEntry documentEntry0 = DocumentEntryFactory.makeDocumentEntry((EntryInformation) blastEntryInformation0, document0, readListener0);
      assertFalse(documentEntry0.isReadOnly());
  }
}
