/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:56:57 GMT 2018
 */

package uk.ac.sanger.artemis.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.ZipException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.util.ZipFileDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZipFileDocument_ESTest extends ZipFileDocument_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".gz";
      ZipFileDocument.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn("`F6c+>").when(file0).getAbsolutePath();
      doReturn(".class.zip").when(file0).getName();
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "LU3s(C^|`8ekBH_]c d");
      boolean boolean0 = zipFileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, (String) null);
      String string0 = zipFileDocument0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "");
      String string0 = zipFileDocument0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile("6,8+axS4A|AGW3j*9RV", "6,8+axS4A|AGW3j*9RV");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "6,8+axS4A|AGW3j*9RV");
      InputStream inputStream0 = zipFileDocument0.getInputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("uk.ac.sanger.artemis.util.ProgressInputStream", "1.5.");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, (String) null);
      // Undeclared exception!
      try { 
        zipFileDocument0.writeTmpFile(".gz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "");
      // Undeclared exception!
      try { 
        zipFileDocument0.writeTmpFile("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "xL48KrywdZ-S[hk0");
      try { 
        zipFileDocument0.writeTmpFile("uk.ac.sanger.artemis.util.ZipFileDocument");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("rYin]", "tmp");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/tmp2tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "tmp");
      zipFileDocument0.writeTmpFile("rYin]");
      try { 
        zipFileDocument0.writeTmpFile("tmp");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn((String) null).when(file0).getName();
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "tmp");
      // Undeclared exception!
      try { 
        zipFileDocument0.readable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "C]+ca?T|$/x=");
      zipFileDocument0.setLocation("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/C]+ca?T|$/x=1tmp");
      // Undeclared exception!
      try { 
        zipFileDocument0.readable();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipFileDocument.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.ZipFileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        ZipFileDocument.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("uk.ac.sanger.artemis.util.ZipFileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".gz/.gz");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "^*B~4{b57dsi");
      MockFile mockFile0 = new MockFile(".gz", ".gz");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "org.apache.oro.text.MalformedCachePatternException.zip");
      try { 
        zipFileDocument0.getInputStream();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      doReturn("CHok3czk.zip").when(file0).getName();
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "BkE>A#'5Ea)folO2AbS");
      // Undeclared exception!
      try { 
        zipFileDocument0.getInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("6,8+axS4A|AGW3j*9RV", "6,8+axS4A|AGW3j*9RV");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "6,8+axS4A|AGW3j*9RV");
      zipFileDocument0.setLocation("6,8+axS4A|AGW3j*9RV");
      // Undeclared exception!
      try { 
        zipFileDocument0.getInputStream();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/uk.ac.sanger.artemis.util.InputStreamProgressListenerVector0.zip");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      File file0 = MockFile.createTempFile("uk.ac.sanger.artemis.util.InputStreamProgressListenerVector", ".zip");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, ".py");
      try { 
        zipFileDocument0.getInputStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".gz", ".gz");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "org.apache.oro.text.MalformedCachePatternException.zip");
      mockFile0.createNewFile();
      try { 
        zipFileDocument0.getInputStream();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZipFileDocument zipFileDocument0 = null;
      try {
        zipFileDocument0 = new ZipFileDocument((File) null, "uk.ac.sanger.artemis.util.LinePushBackReader");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("rYinL]0tmp.zit");
      MockFile.createTempFile("rYinL]0tmp.zit", "rYinL]0tmp.zit");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "_%.2W|X%Ef");
      zipFileDocument0.writeTmpFile("-[Vg'MP\"={6");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/_%.2W|X%Ef1tmp";
      ZipFileDocument.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".gz", ".gz");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "org.apache.oro.text.MalformedCachePatternException.zip");
      mockFile0.createNewFile();
      boolean boolean0 = zipFileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).canRead();
      doReturn(true).when(file0).exists();
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "ctor");
      boolean boolean0 = zipFileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("rYinL]0tmp.zit");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "_%.2W|X%Ef");
      boolean boolean0 = zipFileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`&ig=wAQ,=>}+.zip", "`&ig=wAQ,=>}+.zip");
      File file0 = MockFile.createTempFile("`&ig=wAQ,=>}+.zip", "`&ig=wAQ,=>}+.zip", (File) mockFile0);
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "`&ig=wAQ,=>}+.zip");
      boolean boolean0 = zipFileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`&ig=wAQ,=>}+.zip", "`&ig=wAQ,=>}+.zip");
      File file0 = MockFile.createTempFile("`&ig=wAQ,=>}+.zip", "`&ig=wAQ,=>}+.zip", (File) mockFile0);
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "`&ig=wAQ,=>}+.zip");
      zipFileDocument0.getInputStream();
      zipFileDocument0.getInputStream();
      assertEquals("`&ig=wAQ,=>}+.zip.gz", zipFileDocument0.getName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("rYinL]0tmp.zit");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "_%.2W|X%Ef");
      try { 
        zipFileDocument0.getInputStream();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "ctor");
      String string0 = zipFileDocument0.getName();
      assertEquals("ctor", string0);
  }
}
