/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 10:28:14 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.datatransfer.Clipboard;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import java.util.Date;
import javax.swing.JPasswordField;
import org.apache.log4j.LogManager;
import org.apache.log4j.helpers.Loader;
import org.apache.log4j.helpers.LogLog;
import org.apache.log4j.spi.LoggerFactory;
import org.apache.log4j.spi.LoggerRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.EntryChangeEvent;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureChangeEvent;
import uk.ac.sanger.artemis.FeatureKeyQualifierPredicate;
import uk.ac.sanger.artemis.FeatureSegmentVector;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.OptionChangeEvent;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.SimpleGotoEventSource;
import uk.ac.sanger.artemis.io.ChadoCanonicalGene;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.Qualifier;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.sequence.AminoAcidSequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;
import uk.ac.sanger.artemis.util.DatabaseDocument;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Feature_ESTest extends Feature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, ">BL;");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry("BLASTCDS");
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      entry0.removeFeatureChangeListener(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 1);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(1, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(1, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      Location location0 = feature1.getLocation();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(location0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      charArrayWriter0.write("BLASTCDS");
      assertEquals("BLASTCDS", charArrayWriter0.toString());
      assertEquals(8, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(72, charArrayWriter0.size());
      assertEquals("BLASTCDS>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(134, charArrayWriter0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      Integer integer0 = new Integer(3);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string0 = feature0.getDownstreamBases(1483);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      Range range0 = feature2.getMaxRawRange();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature2.addSegment(range0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean3 = feature0.greaterThan(feature2);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">3L;", ">3L;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">3L;");
      assertFalse(boolean0);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, ">3L;");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(">3L;", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(">3L;", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(">3L;", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(">3L;", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      AminoAcidSequence aminoAcidSequence0 = bases0.getTranslation(range0, 262144, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(">3L;", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      assertEquals(".", aminoAcidSequence0.toString());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(">3L;", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(">3L;", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      String string0 = Bases.reverseComplement("LV1<P#bU6V:BAG:");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(">3L;", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature1.getPositionalBaseCount(2, 2);
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("LV1<P#bU6V:BAG:");
      assertEquals(15, charArrayWriter0.size());
      assertEquals("LV1<P#bU6V:BAG:", charArrayWriter0.toString());
      
      boolean boolean1 = feature0.rawGreaterThan(feature1);
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(boolean1 == boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(">3L;", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      assertNotSame(feature0, feature1);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(77, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      feature0.addFeatureChangeListener(entry0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(">3L;", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      int int2 = feature1.getResidueCount(0);
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      String string1 = feature0.getGeneName();
      assertFalse(feature0.equals((Object)feature1));
      assertNull(string1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(">3L;", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      entry0.removeFeatureChangeListener(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals("L<P#CU6VlBAG:>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(77, charArrayWriter0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(139, charArrayWriter0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      QualifierVector qualifierVector0 = feature2.getQualifiers();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(qualifierVector0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, qualifierVector0.capacity());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.moveTo(entry0, false);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("_%Nlu5-g8", "_%Nlu5-g8");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(1, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(9, int1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertFalse(feature2.isReadOnly());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertFalse(feature2.isReadOnly());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertFalse(feature2.isReadOnly());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string1 = feature0.getBases();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nnnnunngn", string1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean3 = feature1.hasValidStartCodon();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertTrue(boolean3);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      int int2 = feature2.getScore();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertFalse(feature2.isReadOnly());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      Marker marker0 = feature0.getPositionInSequence(4);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(marker0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(8, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(9, bases0.getLength());
      assertEquals(9, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(9, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      entry0.dispose();
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature0);
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      feature0.writeNative(charArrayWriter0);
      assertEquals(75, charArrayWriter0.size());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      FeatureSegmentVector featureSegmentVector0 = feature0.getSegments();
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      String string1 = feature0.getGeneName();
      assertNull(string1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      int int1 = new Integer(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      feature0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      entry0.removeFeatureChangeListener(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(77, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(139, charArrayWriter0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = new FeatureSegmentVector();
      assertNotNull(featureSegmentVector0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature0);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      QualifierVector qualifierVector0 = feature2.getQualifiers();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(qualifierVector0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals(0, qualifierVector0.capacity());
      assertEquals("[]", qualifierVector0.toString());
      assertEquals(0, qualifierVector0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean4 = feature2.hasRequiredQualifiers();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      entry0.removeFeatureChangeListener(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(77, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(139, charArrayWriter0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature0);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      QualifierVector qualifierVector0 = feature2.getQualifiers();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(qualifierVector0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertEquals(0, qualifierVector0.capacity());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      Range range0 = feature2.getMaxRawRange();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature2.addSegment(range0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">L;", ">L;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(3, int1);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature2.isReadOnly());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature2.isReadOnly());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean2);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature2.isReadOnly());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      LoggerRepository loggerRepository0 = LogManager.getLoggerRepository();
      assertNotNull(loggerRepository0);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string1 = feature0.getBases();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nnn", string1);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean3 = feature1.hasValidStartCodon();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertTrue(boolean3);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      int int2 = feature2.getScore();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature2.isReadOnly());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature1.setEntry(entry0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      try { 
        feature0.getPositionInSequence(4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 4
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(77, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(139, charArrayWriter0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      Qualifier qualifier0 = feature2.getQualifierByName("Connection not allowed by ruleset");
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNull(qualifier0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature2.setQualifier((Qualifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.QualifierVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("reverse", "reverse");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "reverse");
      assertFalse(boolean0);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(7, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(7, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(7, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(7, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(7, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(7, range0.getEnd());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(7, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(7, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(7, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      int int1 = feature1.getPositionalBaseCount(2, 1);
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("LV1<P#bU6V:BAG:");
      assertEquals(15, charArrayWriter0.size());
      assertEquals("LV1<P#bU6V:BAG:", charArrayWriter0.toString());
      
      boolean boolean1 = feature0.rawGreaterThan(feature1);
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(boolean1 == boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean1);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(7, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      assertNotSame(feature0, feature1);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(77, charArrayWriter0.size());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      int int2 = feature1.getResidueCount(0);
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      String string1 = feature0.getGeneName();
      assertFalse(feature0.equals((Object)feature1));
      assertNull(string1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(7, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(7, fastaStreamSequence0.getOtherCount());
      assertEquals(7, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(7, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(7, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL", ">BL");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "BLASTCDS", "BLASTCDS");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(77, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:>misc_feature misc_feature undefined product 1:3 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(139, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(3, int1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean3 = feature2.lessThan(feature1);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean3);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals("L<P#CU6VlBAG:>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(77, charArrayWriter0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(139, charArrayWriter0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      StringVector stringVector0 = StringVector.getStrings("WE<3w#-G", "BLASTCDS", false);
      assertNotNull(stringVector0);
      assertEquals("[WE<3w#-G]", stringVector0.toString());
      assertEquals(1, stringVector0.size());
      assertEquals(10, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      
      boolean boolean1 = feature0.findOrReplaceText("Connection not allowed by ruleset", true, true, false, stringVector0, ">BL;");
      assertTrue(boolean1 == boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("[WE<3w#-G]", stringVector0.toString());
      assertEquals(1, stringVector0.size());
      assertEquals(10, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean2 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean3 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      int int2 = feature2.getLastBase();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(77, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(139, charArrayWriter0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature0);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      Reader reader0 = feature2.toReader();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(reader0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      int int2 = feature2.getRawLastBase();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature0.removeFeatureChangeListener(simpleEntryGroup0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string1 = feature1.getBases();
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nnnn", string1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureVector featureVector0 = entry0.checkForNonEMBLKeys();
      assertNotNull(featureVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getEnd());
      assertEquals(4, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262137);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262137, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      entry0.dispose();
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262137, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature0);
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      feature0.writeNative(charArrayWriter0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureSegmentVector featureSegmentVector0 = feature0.getSegments();
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      String string1 = feature0.getGeneName();
      assertNull(string1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      String string0 = "LV1<P#bU6V:BAG:";
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 1);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      String string1 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertFalse(feature1.isReadOnly());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      try { 
        feature0.getPositionInSequence(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 0
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean1 = feature0.rawGreaterThan(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(77, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(139, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature0);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean3 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      int int2 = feature0.getAACount();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      entry0.removeFeatureChangeListener(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(77, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(139, charArrayWriter0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      String string0 = feature1.getTranslationBases();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(string0);
      assertEquals("nnn", string0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string1 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      QualifierVector qualifierVector0 = feature2.getQualifiers();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(qualifierVector0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature2.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, qualifierVector0.size());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals(0, qualifierVector0.capacity());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      Feature feature3 = feature1.duplicate(true);
      assertFalse(feature3.equals((Object)feature0));
      assertFalse(feature3.equals((Object)feature1));
      assertFalse(feature3.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertNotNull(feature3);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature3.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature3, feature0);
      assertNotSame(feature3, feature1);
      assertNotSame(feature3, feature2);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">3L;", ">3L;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">3L;");
      assertFalse(boolean0);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      String string0 = "LV1<P#bU6V:BAG:";
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getEnd());
      assertEquals(4, range0.getCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      String string1 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature1.getPositionalBaseCount(2, 1);
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      // Undeclared exception!
      try { 
        feature1.getResidueCount((-2687));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2687
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "<P#U6VlBA:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry("<P#U6VlBA:");
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("<P#U6VlBA:");
      assertEquals("<P#U6VlBA:", charArrayWriter0.toString());
      assertEquals(10, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals("<P#U6VlBA:>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(74, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(136, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature2.optionChanged((OptionChangeEvent) null);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals("L<P#CU6VlBAG:>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(77, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(139, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature0);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      int int2 = feature2.getRawLastBase();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">L;", ">L;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(3, int1);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature2.isReadOnly());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature1.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature0);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature2.isReadOnly());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean2);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature2.isReadOnly());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string1 = feature0.getBases();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nnn", string1);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean3 = feature1.hasValidStartCodon();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(boolean3);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature0);
      
      int int2 = feature2.getScore();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(3, bases0.getLength());
      assertEquals(3, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature2.isReadOnly());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      try { 
        feature0.getPositionInSequence(4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 4
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, ">BL;");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry("Connection not allowed by ruleset");
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, (-5));
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      Marker marker0 = feature1.getFirstCodingBaseMarker();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(marker0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("BLASTCDS");
      assertEquals(8, charArrayWriter0.size());
      assertEquals("BLASTCDS", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(70, charArrayWriter0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(boolean2);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      Color color0 = feature0.getColour();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(color0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry("Connection not allowed by ruleset");
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature0 = simpleEntryGroup0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      feature0.writeNative(charArrayWriter0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(62, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      FeatureSegmentVector featureSegmentVector0 = feature0.getSegments();
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      boolean boolean0 = filteredEntryGroup0.contains(feature0);
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      int int1 = feature0.getTranslationBasesLength();
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      boolean boolean0 = simpleEntryGroup0.hasUnsavedChanges();
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean1 = feature0.rawGreaterThan(feature1);
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(boolean1 == boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean1);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      assertNotSame(feature0, feature1);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      String string1 = feature0.getGeneName();
      assertFalse(feature0.equals((Object)feature1));
      assertNull(string1);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      
      String string2 = feature0.getBases();
      assertFalse(string2.equals((Object)string0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string2);
      assertEquals("nnnn", string2);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">3L;", ">3L;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "BLASTCDS");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getEnd());
      assertEquals(4, range0.getCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      String string0 = feature0.getProductString();
      assertNull(string0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      String string1 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string1);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      int int1 = feature0.getPositionalBaseCount(2, 1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write(">3L;");
      assertEquals(">3L;", charArrayWriter0.toString());
      assertEquals(4, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature0);
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      feature0.writeNative(charArrayWriter0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(66, charArrayWriter0.size());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FeatureSegmentVector featureSegmentVector0 = feature0.getSegments();
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      int int2 = feature0.getResidueCount(0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      String string2 = feature0.getGeneName();
      assertNull(string2);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature0);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      Marker marker0 = feature2.getFirstBaseMarker();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(marker0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean3 = feature1.hasValidStopCodon();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(boolean3);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getEnd());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      entry0.dispose();
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = featureKeyQualifierPredicate0.testPredicate(feature0);
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      boolean boolean1 = feature0.rawGreaterThan(feature0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      String string1 = feature0.getSystematicName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("misc_feature", string1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      feature0.writeNative(charArrayWriter0);
      assertEquals(75, charArrayWriter0.size());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      FeatureSegmentVector featureSegmentVector0 = feature0.getSegments();
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      String string2 = feature0.getGeneName();
      assertNull(string2);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      System.setCurrentTimeMillis((-59L));
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      entry0.dispose();
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = feature0.rawGreaterThan(feature0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      boolean boolean2 = feature0.hasValidStartCodon();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      FeatureSegmentVector featureSegmentVector0 = feature0.getSegments();
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      String string0 = feature0.getGeneName();
      assertNull(string0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      LogLog.setInternalDebugging(true);
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("LV1<P#bU6V:BAG:");
      assertEquals("LV1<P#bU6V:BAG:", charArrayWriter0.toString());
      assertEquals(15, charArrayWriter0.size());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "xLO,_S7BZEE;]y-1", "xLO,_S7BZEE;]y-1", true, false, true);
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "a@s@@ay@rv@h@w@@@t@a@n@n@@ag@nn@g");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getMaxRawRange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("LV1<P#bU6V:BAG:");
      assertEquals(15, charArrayWriter0.size());
      assertEquals("LV1<P#bU6V:BAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.removeQualifierByName("BLASTCDS");
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(77, charArrayWriter0.size());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      String string1 = feature0.getWriteRange();
      assertFalse(string1.equals((Object)string0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string1);
      assertEquals("1:4 forward", string1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      String string0 = feature1.getValueOfQualifier("L<P#CU6VlBAG:");
      assertFalse(feature1.equals((Object)feature0));
      assertNull(string0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string1 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      entry0.dispose();
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      boolean boolean0 = filteredEntryGroup0.removeElement(entry0);
      assertTrue(boolean0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean1 = feature0.rawGreaterThan(feature0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      feature0.writeNative(charArrayWriter0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      FeatureSegmentVector featureSegmentVector0 = feature0.getSegments();
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      String string1 = feature0.getGeneName();
      assertNull(string1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">BL;");
      assertFalse(boolean0);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      String string0 = "L<P#CU6VlBAG:";
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      entry0.dispose();
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      String string1 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      // Undeclared exception!
      try { 
        entry0.checkForMissingQualifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      String string0 = feature0.getUpstreamBases(5);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      boolean boolean0 = feature1.rawLessThan(feature0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      boolean boolean1 = feature0.rawGreaterThan(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(62, charArrayWriter0.size());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      String string1 = feature0.getGeneName();
      assertFalse(feature0.equals((Object)feature1));
      assertNull(string1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getEnd());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("LV1<P#bU6V:BAG:");
      assertEquals("LV1<P#bU6V:BAG:", charArrayWriter0.toString());
      assertEquals(15, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      boolean boolean1 = feature1.hasValidStopCodon(true);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(77, charArrayWriter0.size());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      String string1 = feature0.getWriteRange();
      assertFalse(string1.equals((Object)string0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string1);
      assertEquals("1:4 forward", string1);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      float float0 = feature0.getMolecularWeight();
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = new Key("BLAaSTCDS");
      assertNotNull(key0);
      assertEquals("BLAaSTCDS", key0.toString());
      assertEquals("BLAaSTCDS", key0.getKeyString());
      assertEquals(9, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLAaSTCDS", key0.toString());
      assertEquals("BLAaSTCDS", key0.getKeyString());
      assertEquals(9, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("BLAaSTCDS", key0.toString());
      assertEquals("BLAaSTCDS", key0.getKeyString());
      assertEquals(9, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry("Connection not allowed by ruleset");
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLAaSTCDS", key0.toString());
      assertEquals("BLAaSTCDS", key0.getKeyString());
      assertEquals(9, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLAaSTCDS", key0.toString());
      assertEquals("BLAaSTCDS", key0.getKeyString());
      assertEquals(9, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLAaSTCDS", key0.toString());
      assertEquals("BLAaSTCDS", key0.getKeyString());
      assertEquals(9, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLAaSTCDS", key0.toString());
      assertEquals("BLAaSTCDS", key0.getKeyString());
      assertEquals(9, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLAaSTCDS", key0.toString());
      assertEquals("BLAaSTCDS", key0.getKeyString());
      assertEquals(9, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLAaSTCDS", key0.toString());
      assertEquals("BLAaSTCDS", key0.getKeyString());
      assertEquals(9, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      int int1 = new Integer(3);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      // Undeclared exception!
      try { 
        feature0.getPositionalBaseCount(3, 16777228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      String string0 = "";
      URL uRL0 = Loader.getResource("");
      assertNotNull(uRL0);
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      
      String string1 = "ADD FEATUREPROP ";
      Clipboard clipboard0 = new Clipboard("ADD FEATUREPROP ");
      assertNotNull(clipboard0);
      assertEquals("ADD FEATUREPROP ", clipboard0.getName());
      
      EvoSuiteFile evoSuiteFile0 = null;
      JPasswordField jPasswordField0 = new JPasswordField(3594);
      assertNotNull(jPasswordField0);
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      
      String string2 = "qsW014Su";
      String string3 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        feature0.duplicate(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getEnd());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      String string0 = feature0.getUpstreamBases(5);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("LV1<P#bU6V:BAG:");
      assertEquals("LV1<P#bU6V:BAG:", charArrayWriter0.toString());
      assertEquals(15, charArrayWriter0.size());
      
      int int1 = feature1.getScore();
      assertFalse(int1 == int0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals((-1), int1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(77, charArrayWriter0.size());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      String string1 = feature0.getGeneName();
      assertFalse(feature0.equals((Object)feature1));
      assertNull(string1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      
      Date date0 = feature1.getDatestamp();
      assertFalse(feature1.equals((Object)feature0));
      assertNull(date0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      assertNotNull(chadoCanonicalGene0);
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      assertEquals(0, chadoCanonicalGene0.getSeqlen());
      
      GenbankStreamFeature genbankStreamFeature0 = null;
      try {
        genbankStreamFeature0 = new GenbankStreamFeature((uk.ac.sanger.artemis.io.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PublicDBStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature2.isReadOnly());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean3 = feature0.isForwardFeature();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      SequenceChangeEvent sequenceChangeEvent0 = null;
      try {
        sequenceChangeEvent0 = new SequenceChangeEvent(1676, 5, (Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("LV1<P#bU6V:BAG:");
      assertEquals("LV1<P#bU6V:BAG:", charArrayWriter0.toString());
      assertEquals(15, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(77, charArrayWriter0.size());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      String string1 = feature0.getWriteRange();
      assertFalse(string1.equals((Object)string0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string1);
      assertEquals("1:4 forward", string1);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry("Connection not allowed by ruleset");
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = simpleEntryGroup0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      feature0.writeNative(charArrayWriter0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FeatureSegmentVector featureSegmentVector0 = feature0.getSegments();
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      boolean boolean0 = filteredEntryGroup0.contains(feature0);
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      String string0 = feature0.getUpstreamBases(0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      String string0 = "";
      URL uRL0 = Loader.getResource("");
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      String string1 = "ADD FEATUREPROP ";
      // Undeclared exception!
      try { 
        feature0.getStrand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      String string0 = "";
      URL uRL0 = Loader.getResource("");
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      String string1 = "ADD FEATUREPROP ";
      Clipboard clipboard0 = new Clipboard("ADD FEATUREPROP ");
      assertNotNull(clipboard0);
      assertEquals("ADD FEATUREPROP ", clipboard0.getName());
      
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      assertNotNull(simpleGotoEventSource0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      Range range0 = new Range(23);
      assertNotNull(range0);
      assertEquals(1, range0.getCount());
      assertEquals(23, range0.getStart());
      assertEquals(23, range0.getEnd());
      
      // Undeclared exception!
      try { 
        feature0.addSegment(range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      String string0 = "L<P#CU6VlBAG:";
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      String string1 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      StringVector stringVector0 = feature0.getValuesOfQualifier("a@s@@ay@rv@h@w@@@t@a@n@n@@ag@nn@g");
      assertNull(stringVector0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      // Undeclared exception!
      try { 
        bases0.getMatchingCodons(range0, 1717, (StringVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getEnd());
      assertEquals(4, range0.getCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      entry0.dispose();
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature0);
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      feature0.writeNative(charArrayWriter0);
      assertEquals(75, charArrayWriter0.size());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureSegmentVector featureSegmentVector0 = feature0.getSegments();
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      String string1 = feature0.getGeneName();
      assertNull(string1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      URL uRL0 = Loader.getResource("");
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zB}dZE~>*;<+qEX");
      assertFalse(boolean0);
      
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      assertNotNull(simpleGotoEventSource0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Feature.getAllQualifierNames((FeatureVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      assertNotNull(chadoCanonicalGene0);
      assertEquals(0, chadoCanonicalGene0.getSeqlen());
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      
      chadoCanonicalGene0.setSeqlen((-2243));
      assertEquals((-2243), chadoCanonicalGene0.getSeqlen());
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      String string0 = feature0.getNote();
      assertNull(string0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getResidueCount((-2243));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      fastaStreamSequence0.setFromChar(bases0.letter_index);
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(1, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(5, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(5, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(1, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(5, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(5, bases0.getLength());
      assertEquals(5, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(5, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(1, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(5, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(5, bases0.getLength());
      assertEquals(5, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(1, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(5, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(5, bases0.getLength());
      assertEquals(5, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(5, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(1, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(5, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(5, bases0.getLength());
      assertEquals(5, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(1, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(5, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(5, bases0.getLength());
      assertEquals(5, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature1, feature0);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      assertNotNull(chadoCanonicalGene0);
      assertEquals(0, chadoCanonicalGene0.getSeqlen());
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      String string0 = feature0.getNote();
      assertNull(string0);
      assertFalse(feature0.isReadOnly());
      
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      Qualifier qualifier0 = feature0.getQualifierByName((String) null);
      assertNull(qualifier0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      assertNotNull(chadoCanonicalGene0);
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      assertEquals(0, chadoCanonicalGene0.getSeqlen());
      
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      String string0 = feature0.toString();
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      boolean boolean1 = feature0.rawGreaterThan(feature1);
      assertFalse(boolean1 == boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      Reader reader0 = feature0.toReader();
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(reader0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature1, feature0);
      
      Integer integer0 = new Integer(5);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      int int2 = feature2.getBaseCount(1);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, int2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      // Undeclared exception!
      try { 
        featureSegmentVector0.elementAt(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      LogLog.setInternalDebugging(true);
      int int0 = bases0.getACount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      int int1 = bases0.getGCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature1, feature0);
      
      Reader reader0 = feature0.toReader();
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(reader0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature1, feature0);
      
      Feature feature2 = feature0.duplicate();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      boolean boolean1 = feature2.isReadOnly();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertTrue(boolean1 == boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature2.isReadOnly());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("2", "2");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "2");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.getSequenceLength());
      assertEquals("2", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.getSequenceLength());
      assertEquals("2", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.getSequenceLength());
      assertEquals("2", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.getSequenceLength());
      assertEquals("2", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.getSequenceLength());
      assertEquals("2", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.getSequenceLength());
      assertEquals("2", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = simpleEntryGroup0.createEntry("");
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = simpleEntryGroup0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      feature0.writeNative(charArrayWriter0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FeatureSegmentVector featureSegmentVector0 = feature0.getSegments();
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      boolean boolean0 = feature0.hasValidStopCodon(true);
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      boolean boolean1 = feature0.isCDS();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(4, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getEnd());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(75, charArrayWriter0.size());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      String string1 = feature0.getGeneName();
      assertFalse(feature0.equals((Object)feature1));
      assertNull(string1);
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      String string1 = feature0.getGeneName();
      assertFalse(feature0.equals((Object)feature1));
      assertNull(string1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean1 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature2.equals((Object)feature0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertFalse(feature2.isReadOnly());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature2, feature1);
      assertNotSame(feature2, feature0);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string0 = feature0.getDownstreamBases(1463);
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean1 = feature0.rawGreaterThan(feature1);
      assertFalse(boolean1 == boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      InputStream inputStream0 = null;
      String string0 = "m> qdY.!8}";
      LoggerFactory loggerFactory0 = mock(LoggerFactory.class, new ViolatedAssumptionAnswer());
      doReturn((org.apache.log4j.Logger) null).when(loggerFactory0).makeNewLoggerInstance(anyString());
      String string1 = feature0.getIDString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string1);
      assertEquals("misc_feature", string1);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = feature1.trimStart(false, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean2);
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      // Undeclared exception!
      try { 
        org.apache.log4j.Logger.getLogger(">BL;", loggerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.Hierarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      assertNotNull(chadoCanonicalGene0);
      assertEquals(0, chadoCanonicalGene0.getSeqlen());
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      
      chadoCanonicalGene0.setSeqlen((-2243));
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      assertEquals((-2243), chadoCanonicalGene0.getSeqlen());
      
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      String string0 = feature0.getNote();
      assertNull(string0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.hasValidStartCodon(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      assertNotNull(chadoCanonicalGene0);
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      assertEquals(0, chadoCanonicalGene0.getSeqlen());
      
      chadoCanonicalGene0.setSeqlen((-2243));
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      assertEquals((-2243), chadoCanonicalGene0.getSeqlen());
      
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      Date date0 = feature0.getDatestamp();
      assertNull(date0);
      assertFalse(feature0.isReadOnly());
      
      String string0 = feature0.getNote();
      assertNull(string0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(262144, entryChangeEvent0.getType());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals(13, charArrayWriter0.size());
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals(8, key0.length());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(75, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotSame(feature1, feature0);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = new Range(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(range0);
      assertEquals(Integer.MAX_VALUE, range0.getEnd());
      assertEquals(Integer.MAX_VALUE, range0.getStart());
      assertEquals(1, range0.getCount());
      
      DatabaseDocument.EXONMODEL = null;
      DatabaseDocument.EXONMODEL = "!z3m/`NXB(2GUG`q2n";
      FeatureVector featureVector0 = new FeatureVector();
      assertNotNull(featureVector0);
      
      StringVector stringVector0 = Feature.getAllQualifierNames(featureVector0);
      assertNotNull(stringVector0);
      assertTrue(stringVector0.isEmpty());
      assertEquals("[]", stringVector0.toString());
      assertEquals(0, stringVector0.size());
      assertEquals(10, stringVector0.capacity());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      URL uRL0 = Loader.getResource("");
      assertNotNull(uRL0);
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      
      String string0 = "Could not parse organism: ";
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      String string1 = "ADD FEATUREPROP ";
      Clipboard clipboard0 = new Clipboard("ADD FEATUREPROP ");
      assertNotNull(clipboard0);
      assertEquals("ADD FEATUREPROP ", clipboard0.getName());
      
      Selection selection0 = new Selection(clipboard0);
      assertNotNull(selection0);
      assertEquals("ADD FEATUREPROP ", clipboard0.getName());
      
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      assertNotNull(simpleGotoEventSource0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      // Undeclared exception!
      try { 
        feature0.hasValidStopCodon(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = new Range(502);
      assertNotNull(range0);
      assertEquals(502, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(502, range0.getEnd());
      
      Location location0 = new Location(range0);
      assertNotNull(location0);
      assertEquals(502, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(502, range0.getEnd());
      
      Location location1 = location0.copy();
      assertFalse(location1.equals((Object)location0));
      assertNotNull(location1);
      assertEquals(502, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(502, range0.getEnd());
      assertNotSame(location0, location1);
      assertNotSame(location1, location0);
      
      Location location2 = location1.truncate(range0);
      assertFalse(location0.equals((Object)location1));
      assertFalse(location1.equals((Object)location0));
      assertFalse(location2.equals((Object)location0));
      assertFalse(location2.equals((Object)location1));
      assertNotNull(location2);
      assertEquals(502, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(502, range0.getEnd());
      assertNotSame(location0, location1);
      assertNotSame(location0, location2);
      assertNotSame(location1, location2);
      assertNotSame(location1, location0);
      assertNotSame(location2, location0);
      assertNotSame(location2, location1);
      
      QualifierVector qualifierVector0 = new QualifierVector();
      assertNotNull(qualifierVector0);
      assertTrue(qualifierVector0.isEmpty());
      assertEquals("[]", qualifierVector0.toString());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      
      QualifierVector qualifierVector1 = qualifierVector0.copy();
      assertTrue(qualifierVector1.equals((Object)qualifierVector0));
      assertNotNull(qualifierVector1);
      assertTrue(qualifierVector0.isEmpty());
      assertEquals("[]", qualifierVector0.toString());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      assertEquals(0, qualifierVector1.size());
      assertEquals("[]", qualifierVector1.toString());
      assertEquals(0, qualifierVector1.capacity());
      assertTrue(qualifierVector1.isEmpty());
      assertNotSame(qualifierVector0, qualifierVector1);
      assertNotSame(qualifierVector1, qualifierVector0);
      
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature((Key) null, location2, qualifierVector1);
      assertFalse(location0.equals((Object)location1));
      assertFalse(location0.equals((Object)location2));
      assertFalse(location1.equals((Object)location2));
      assertFalse(location1.equals((Object)location0));
      assertFalse(location2.equals((Object)location0));
      assertFalse(location2.equals((Object)location1));
      assertTrue(qualifierVector0.equals((Object)qualifierVector1));
      assertTrue(qualifierVector1.equals((Object)qualifierVector0));
      assertNotNull(emblStreamFeature0);
      assertEquals(502, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(502, range0.getEnd());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals("[]", qualifierVector0.toString());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      assertEquals(0, qualifierVector1.size());
      assertEquals("[]", qualifierVector1.toString());
      assertEquals(0, qualifierVector1.capacity());
      assertTrue(qualifierVector1.isEmpty());
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertFalse(location0.equals((Object)location1));
      assertFalse(location0.equals((Object)location2));
      assertFalse(location1.equals((Object)location2));
      assertFalse(location1.equals((Object)location0));
      assertFalse(location2.equals((Object)location0));
      assertFalse(location2.equals((Object)location1));
      assertTrue(qualifierVector0.equals((Object)qualifierVector1));
      assertTrue(qualifierVector1.equals((Object)qualifierVector0));
      assertNotNull(feature0);
      assertEquals(502, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(502, range0.getEnd());
      assertTrue(qualifierVector0.isEmpty());
      assertEquals("[]", qualifierVector0.toString());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals(0, qualifierVector0.size());
      assertEquals(0, qualifierVector1.size());
      assertEquals("[]", qualifierVector1.toString());
      assertEquals(0, qualifierVector1.capacity());
      assertTrue(qualifierVector1.isEmpty());
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Feature feature0 = null;
      try {
        feature0 = new Feature((uk.ac.sanger.artemis.io.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      assertNotNull(chadoCanonicalGene0);
      assertEquals(0, chadoCanonicalGene0.getSeqlen());
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      
      chadoCanonicalGene0.setSeqlen((-2243));
      assertEquals((-2243), chadoCanonicalGene0.getSeqlen());
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      
      uk.ac.sanger.artemis.io.Feature feature0 = chadoCanonicalGene0.getGene();
      assertNull(feature0);
      assertEquals((-2243), chadoCanonicalGene0.getSeqlen());
      assertEquals(0, chadoCanonicalGene0.getSrcfeature_id());
      
      Feature feature1 = null;
      try {
        feature1 = new Feature((uk.ac.sanger.artemis.io.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not alloed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("L<P#CU6VlBAG:");
      assertEquals("L<P#CU6VlBAG:", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      
      boolean boolean1 = feature0.rawGreaterThan(feature1);
      assertTrue(boolean1 == boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals("L<P#CU6VlBAG:>misc_feature misc_feature undefined product 1:4 forward MW:0\nX\n", charArrayWriter0.toString());
      assertEquals(77, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(139, charArrayWriter0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature0.getBaseCount();
      assertFalse(int1 == int0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(4, int1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      Feature feature2 = feature0.copyTo(entry0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(feature2);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean2 = filteredEntryGroup0.contains(feature1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean2);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature1.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature0);
      
      feature2.resetColour();
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      boolean boolean3 = feature2.rawGreaterThan(feature0);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      String string0 = feature2.getUpstreamBases(3);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature2.isReadOnly());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature1);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      feature0.resetColour();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
      
      int int2 = feature0.getAACount();
      assertFalse(feature0.equals((Object)feature2));
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals("Connection not alloed by ruleset", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature2);
      assertNotSame(feature0, feature1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">3L;", ">3L;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">3L;");
      assertFalse(boolean0);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      assertNotNull(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(262144, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, EntryChangeEvent.FEATURE_DELETED);
      assertEquals(3, EntryChangeEvent.NAME_CHANGED);
      assertEquals(4, EntryChangeEvent.HEADER_CHANGED);
      assertEquals(2, EntryChangeEvent.FEATURE_ADDED);
      
      String string0 = Bases.reverseComplement("Connection not allowed by ruleset");
      assertNotNull(string0);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int1 = feature1.getPositionalBaseCount(2, 1);
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("LV1<P#bU6V:BAG:");
      assertEquals(15, charArrayWriter0.size());
      assertEquals("LV1<P#bU6V:BAG:", charArrayWriter0.toString());
      
      boolean boolean1 = feature0.rawGreaterThan(feature1);
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(boolean1 == boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(boolean1);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      assertNotSame(feature0, feature1);
      
      feature1.writeNative(charArrayWriter0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(77, charArrayWriter0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      int int2 = feature1.getResidueCount(0);
      assertFalse(feature1.equals((Object)feature0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertFalse(feature1.isReadOnly());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature1, feature0);
      
      String string1 = feature0.getGeneName();
      assertFalse(feature0.equals((Object)feature1));
      assertNull(string1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Key key0 = new Key("BLASTCDS");
      assertNotNull(key0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Range range0 = feature0.getMaxRawRange();
      assertNotNull(range0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, range0.getStart());
      assertEquals(4, range0.getCount());
      assertEquals(4, range0.getEnd());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      LogLog.setInternalDebugging(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      assertNotNull(bufferedWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      feature0.writePIROfFeature(bufferedWriter0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(44, charArrayWriter0.size());
      assertEquals(">BL;misc_feature, null 1:4 forward MW:0\nX\n*\n", charArrayWriter0.toString());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      int int0 = bases0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature1 = simpleEntryGroup0.createFeature();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      assertFalse(charArrayWriter1.equals((Object)charArrayWriter0));
      assertNotNull(charArrayWriter1);
      assertEquals("", charArrayWriter1.toString());
      assertEquals(0, charArrayWriter1.size());
      
      charArrayWriter1.write("LV1<P#bU6V:BAG:");
      assertFalse(charArrayWriter1.equals((Object)charArrayWriter0));
      assertEquals(15, charArrayWriter1.size());
      assertEquals("LV1<P#bU6V:BAG:", charArrayWriter1.toString());
      assertNotSame(charArrayWriter1, charArrayWriter0);
      
      boolean boolean0 = feature0.rawGreaterThan(feature1);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(boolean0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      
      FeatureSegmentVector featureSegmentVector0 = feature1.getSegments();
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(featureSegmentVector0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(feature1.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature1, feature0);
      
      String string0 = feature0.getWriteRange();
      assertFalse(feature0.equals((Object)feature1));
      assertNotNull(string0);
      assertEquals("1:4 forward", string0);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, bases0.getLength());
      assertEquals(4, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals("BLASTCDS", key0.getKeyString());
      assertEquals(8, key0.length());
      assertEquals("BLASTCDS", key0.toString());
      assertEquals("Connection not allowed by ruleset", filteredEntryGroup0.getFilterName());
      assertEquals(4, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">3L;", ">3L;");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">3L;");
      Key key0 = new Key("BLASTCDS");
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "LV1<P#bU6V:BAG:");
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      Entry entry0 = filteredEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      feature0.getMaxRawRange();
      LogLog.setInternalDebugging(true);
      feature0.hasRequiredQualifiers();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      Bases.reverseComplement("Connection not allowed by ruleset");
      bases0.getGCount();
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      Feature feature1 = simpleEntryGroup0.createFeature();
      feature1.getPositionalBaseCount(2, 1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("LV1<P#bU6V:BAG:");
      feature0.rawGreaterThan(feature1);
      feature1.writeNative(charArrayWriter0);
      feature1.getSegments();
      feature0.getLastBaseMarker();
      feature1.getResidueCount(0);
      feature0.getGeneName();
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Key key0 = Key.CDS;
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      Entry entry0 = filteredEntryGroup0.createEntry("L<P#CU6VlBAG:");
      Feature feature0 = entry0.createFeature();
      entry0.removeFeatureChangeListener(simpleEntryGroup0);
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      bases0.getGCount();
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      Feature feature1 = simpleEntryGroup0.createFeature();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("L<P#CU6VlBAG:");
      feature0.rawGreaterThan(feature1);
      feature1.writeAminoAcidsOfFeature(charArrayWriter0);
      feature1.writeNative(charArrayWriter0);
      assertEquals(139, charArrayWriter0.size());
      
      feature1.getSegments();
      Integer integer0 = new Integer(3);
      Feature feature2 = feature0.copyTo(entry0);
      filteredEntryGroup0.contains(feature1);
      feature2.resetColour();
      feature2.rawGreaterThan(feature0);
      feature0.getDownstreamBases(1483);
      feature0.resetColour();
      feature2.getQualifiers();
      Range range0 = feature2.getMaxRawRange();
      feature2.addSegment(range0);
      assertEquals(4, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">L;", ">L;");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Key key0 = Key.CDS;
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<P#CU6VlBAG:");
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      Entry entry0 = filteredEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      bases0.reverseComplement();
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, false, 262144);
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      bases0.getGCount();
      Feature feature1 = simpleEntryGroup0.createFeature();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("L<P#CU6VlBAG:");
      feature0.rawGreaterThan(feature1);
      feature1.writeNative(charArrayWriter0);
      feature1.getSegments();
      feature0.getBaseCount();
      Feature feature2 = feature0.copyTo(entry0);
      filteredEntryGroup0.contains(feature1);
      feature2.resetColour();
      feature2.rawGreaterThan(feature0);
      feature1.isProteinFeature();
      feature0.getDownstreamBases(1463);
      feature0.resetColour();
      feature0.getBases();
      feature1.hasValidStartCodon();
      feature2.getScore();
      try { 
        feature0.getPositionInSequence(4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 4
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(">BL;", ">BL;");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Key key0 = new Key("BLASTCDS");
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "L<^#CUWX6VlBAG:");
      String string0 = "Connection not allowed by ruleset";
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "Connection not allowed by ruleset");
      Entry entry0 = filteredEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      Range range0 = new Range(1, 5);
      LogLog.setInternalDebugging(true);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 262144);
      entry0.dispose();
      simpleEntryGroup0.entryChanged(entryChangeEvent0);
      Bases.reverseComplement("Connection not allowed by ruleset");
      bases0.getGCount();
      filteredEntryGroup0.featureChanged((FeatureChangeEvent) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("L<^#CUWX6VlBAG:");
      feature0.rawGreaterThan(feature0);
      feature0.writeNative(charArrayWriter0);
      feature0.getSegments();
      feature0.getGeneName();
      // Undeclared exception!
      try { 
        feature0.getBaseCount(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
