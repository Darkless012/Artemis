/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:16:55 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.KeyVector;
import uk.ac.sanger.artemis.io.QualifierInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QualifierInfo_ESTest extends QualifierInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo((String) null, 11, (KeyVector) null, (KeyVector) null, true);
      boolean boolean0 = qualifierInfo0.isOnceOnly();
      assertTrue(boolean0);
      assertEquals(11, qualifierInfo0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo("modbase", 0, (KeyVector) null, (KeyVector) null, false);
      int int0 = qualifierInfo0.getType();
      assertFalse(qualifierInfo0.isOnceOnly());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo("#vQD7D6bC]o", (-1476), (KeyVector) null, (KeyVector) null, true);
      int int0 = qualifierInfo0.getType();
      assertEquals((-1476), int0);
      assertTrue(qualifierInfo0.isOnceOnly());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo((String) null, 2, (KeyVector) null, (KeyVector) null, false);
      qualifierInfo0.getName();
      assertFalse(qualifierInfo0.isOnceOnly());
      assertEquals(2, qualifierInfo0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo("", 452, (KeyVector) null, (KeyVector) null, true);
      qualifierInfo0.getName();
      assertEquals(452, qualifierInfo0.getType());
      assertTrue(qualifierInfo0.isOnceOnly());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = QualifierInfo.getQualifierTypeID("\"opt\"");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = QualifierInfo.getQualifierTypeID("none");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = QualifierInfo.getQualifierTypeID("text");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = QualifierInfo.getQualifierTypeID("\"list\"");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = QualifierInfo.getQualifierTypeID("\"text\"");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        QualifierInfo.getQualifierTypeID("");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // unknown type string: 
         //
         verifyException("uk.ac.sanger.artemis.io.QualifierInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = QualifierInfo.getQualifierTypeID("modbase");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo("modbase", 2, (KeyVector) null, (KeyVector) null, false);
      Key key0 = mock(Key.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = qualifierInfo0.isRequiredFor(key0);
      assertEquals(2, qualifierInfo0.getType());
      assertFalse(qualifierInfo0.isOnceOnly());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo("modbase", 2, (KeyVector) null, (KeyVector) null, false);
      Key key0 = mock(Key.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = qualifierInfo0.isValidFor(key0);
      assertTrue(boolean0);
      assertEquals(2, qualifierInfo0.getType());
      assertFalse(qualifierInfo0.isOnceOnly());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo("L", 0, (KeyVector) null, (KeyVector) null, false);
      qualifierInfo0.getRequiredKeys();
      assertEquals(0, qualifierInfo0.getType());
      assertFalse(qualifierInfo0.isOnceOnly());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo("modbase", 2, (KeyVector) null, (KeyVector) null, false);
      qualifierInfo0.getName();
      assertEquals(2, qualifierInfo0.getType());
      assertFalse(qualifierInfo0.isOnceOnly());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo("Y4BqqAcESNjjJ", 252, (KeyVector) null, (KeyVector) null, false);
      int int0 = qualifierInfo0.getType();
      assertFalse(qualifierInfo0.isOnceOnly());
      assertEquals(252, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo("modbase", 2, (KeyVector) null, (KeyVector) null, false);
      boolean boolean0 = qualifierInfo0.isOnceOnly();
      assertEquals(2, qualifierInfo0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QualifierInfo qualifierInfo0 = new QualifierInfo("Y4BqqAcESNjjJ", 252, (KeyVector) null, (KeyVector) null, false);
      qualifierInfo0.getValidKeys();
      assertEquals(252, qualifierInfo0.getType());
      assertFalse(qualifierInfo0.isOnceOnly());
  }
}
