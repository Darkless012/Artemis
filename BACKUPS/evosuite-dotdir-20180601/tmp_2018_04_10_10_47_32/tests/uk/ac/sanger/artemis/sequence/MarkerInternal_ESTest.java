/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:06:23 GMT 2018
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.MarkerInternal;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MarkerInternal_ESTest extends MarkerInternal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("a a g g g c a c g t c g c a t c g a c t c", "a a g g g c a c g t c g c a t c g a c t c").when(strand0).toString();
      doReturn(bases0).when(strand0).getBases();
      doReturn(5, 1).when(strand0).getSequenceLength();
      doReturn(true).when(strand0).isForwardStrand();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 2);
      markerInternal0.setPosition(1);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(sequenceChangeEvent0).getPosition();
      doReturn("").when(sequenceChangeEvent0).getSubSequence();
      doReturn(1, 0, 1648, 1).when(sequenceChangeEvent0).getType();
      markerInternal0.sequenceChanged(sequenceChangeEvent0);
      assertEquals(1, markerInternal0.getPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      doReturn(36).when(bases0).getLength();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(strand0).toString();
      doReturn(bases0).when(strand0).getBases();
      doReturn(1879).when(strand0).getSequenceLength();
      doReturn(false).when(strand0).isForwardStrand();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 1);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(421).when(sequenceChangeEvent0).getPosition();
      doReturn("w8x/_Fr{jueJ\u0000qw,e").when(sequenceChangeEvent0).getSubSequence();
      doReturn(1879, 1032, (-1), 2, 1032).when(sequenceChangeEvent0).getType();
      markerInternal0.sequenceChanged(sequenceChangeEvent0);
      assertEquals(18, markerInternal0.getPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(strand0).toString();
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(2461).when(strand0).getSequenceLength();
      doReturn(false).when(strand0).isForwardStrand();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 2);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn("C/O1BP:#G;VOBx").when(sequenceChangeEvent0).getSubSequence();
      doReturn((-5), 1, 2461, 0).when(sequenceChangeEvent0).getType();
      // Undeclared exception!
      try { 
        markerInternal0.sequenceChanged(sequenceChangeEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Sequence sequence0 = mock(Sequence.class, new ViolatedAssumptionAnswer());
      Bases bases1 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Bases bases2 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("a a g g g c a c g t c g c a t c g a c t c", "a a g g g c a c g t c g c a t c g a c t c", (String) null, (String) null).when(strand0).toString();
      doReturn(bases1, (Bases) null).when(strand0).getBases();
      doReturn(5, 1, 2).when(strand0).getSequenceLength();
      doReturn(true, false).when(strand0).isForwardStrand();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 2);
      markerInternal0.parent = null;
      markerInternal0.setPosition(1);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(sequenceChangeEvent0).getPosition();
      doReturn("").when(sequenceChangeEvent0).getSubSequence();
      doReturn(1, 0, 1648, 1).when(sequenceChangeEvent0).getType();
      markerInternal0.sequenceChanged(sequenceChangeEvent0);
      markerInternal0.setPosition(2);
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn("uk.ac.sanger.artemis.io.Partial3equence").when(sequenceChangeEvent1).getSubSequence();
      doReturn(114, 4625, 1, 0).when(sequenceChangeEvent1).getType();
      // Undeclared exception!
      try { 
        markerInternal0.sequenceChanged(sequenceChangeEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(1181, 0).when(strand0).getSequenceLength();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 5);
      // Undeclared exception!
      try { 
        markerInternal0.setPosition(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MarkerInternal markerInternal0 = null;
      try {
        markerInternal0 = new MarkerInternal((Strand) null, (-874));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      doReturn((Sequence) null).when(bases0).getSequence();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(2).when(strand0).getSequenceLength();
      MarkerInternal markerInternal0 = null;
      try {
        markerInternal0 = new MarkerInternal(strand0, 2426);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // position: 2426
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Bases bases1 = mock(Bases.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bases1).getLength();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("}`2sl9YGO;L", "").when(strand0).toString();
      doReturn(bases1).when(strand0).getBases();
      doReturn(40, 5).when(strand0).getSequenceLength();
      doReturn(false).when(strand0).isForwardStrand();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 1);
      markerInternal0.setPosition(1);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(sequenceChangeEvent0).getPosition();
      doReturn("Phe").when(sequenceChangeEvent0).getSubSequence();
      doReturn(1679, 445, 1423, 1, 0).when(sequenceChangeEvent0).getType();
      markerInternal0.sequenceChanged(sequenceChangeEvent0);
      assertEquals(4, markerInternal0.getPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("}`2sl9YGO;L").when(strand0).toString();
      doReturn(40).when(strand0).getSequenceLength();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 1);
      markerInternal0.getStrand();
      assertEquals(1, markerInternal0.getPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      doReturn((Sequence) null).when(bases0).getSequence();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(3370, 1).when(strand0).getSequenceLength();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 574);
      try { 
        markerInternal0.setPosition(574);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 574
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      doReturn(103).when(bases0).getLength();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(strand0).toString();
      doReturn(bases0).when(strand0).getBases();
      doReturn(1879).when(strand0).getSequenceLength();
      doReturn(false).when(strand0).isForwardStrand();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 1);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(sequenceChangeEvent0).getPosition();
      doReturn("").when(sequenceChangeEvent0).getSubSequence();
      doReturn(2, 1051, 2, 2, 9).when(sequenceChangeEvent0).getType();
      markerInternal0.sequenceChanged(sequenceChangeEvent0);
      assertEquals(1, markerInternal0.getPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      doReturn(103).when(bases0).getLength();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(strand0).toString();
      doReturn(bases0).when(strand0).getBases();
      doReturn(1879).when(strand0).getSequenceLength();
      doReturn(false).when(strand0).isForwardStrand();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 1);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(1426).when(sequenceChangeEvent0).getPosition();
      doReturn("Ser").when(sequenceChangeEvent0).getSubSequence();
      doReturn(3055, 1648, 1, 1, 1).when(sequenceChangeEvent0).getType();
      markerInternal0.sequenceChanged(sequenceChangeEvent0);
      assertEquals((-2), markerInternal0.getPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(strand0).getSequenceLength();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 2);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 5).when(sequenceChangeEvent0).getType();
      markerInternal0.sequenceChanged(sequenceChangeEvent0);
      assertEquals(2, markerInternal0.getPosition());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(40).when(strand0).getSequenceLength();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 1);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(1, 4).when(sequenceChangeEvent0).getType();
      markerInternal0.sequenceChanged(sequenceChangeEvent0);
      assertEquals(1, markerInternal0.getPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(strand0).getSequenceLength();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 2);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(sequenceChangeEvent0).getType();
      markerInternal0.sequenceChanged(sequenceChangeEvent0);
      assertEquals(2, markerInternal0.getPosition());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(strand0).getSequenceLength();
      MarkerInternal markerInternal0 = new MarkerInternal(strand0, 2);
      int int0 = markerInternal0.getPosition();
      assertEquals(2, int0);
  }
}
