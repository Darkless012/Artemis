/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:37:09 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JMenuItem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.ActionController;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.EntryChangeEvent;
import uk.ac.sanger.artemis.EntryGroupChangeEvent;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureChangeEvent;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActionController_ESTest extends ActionController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.startAction();
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(entry0).when(entryChangeEvent0).getEntry();
      doReturn(feature0).when(entryChangeEvent0).getFeature();
      doReturn(2, 5, (-1259), 2).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(entryGroupChangeEvent0).getType();
      actionController0.undo();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.undo();
      actionController0.redo();
      EntryGroupChangeEvent entryGroupChangeEvent1 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(1737).when(entryGroupChangeEvent1).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent1);
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn((Entry) null).when(feature0).getEntry();
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(featureChangeEvent0).featureHasChanged();
      doReturn(feature0).when(featureChangeEvent0).getFeature();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(feature1).when(entryChangeEvent0).getFeature();
      doReturn(293, 2).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem1);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.undo();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(entry0).when(feature0).getEntry();
      Entry entry1 = mock(Entry.class, new ViolatedAssumptionAnswer());
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(entry1).when(feature1).getEntry();
      Key key0 = mock(Key.class, new ViolatedAssumptionAnswer());
      Location location0 = mock(Location.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(featureChangeEvent0).featureHasChanged();
      doReturn(feature0, feature1).when(featureChangeEvent0).getFeature();
      doReturn((Key) null).when(featureChangeEvent0).getNewKey();
      doReturn((Location) null).when(featureChangeEvent0).getNewLocation();
      doReturn((QualifierVector) null).when(featureChangeEvent0).getNewQualifiers();
      doReturn((Key) null).when(featureChangeEvent0).getOldKey();
      doReturn((Location) null).when(featureChangeEvent0).getOldLocation();
      doReturn((QualifierVector) null).when(featureChangeEvent0).getOldQualifiers();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(2, 3, 55, 4981).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(12).when(entryGroupChangeEvent0).getType();
      actionController0.undo();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.undo();
      actionController0.redo();
      EntryGroupChangeEvent entryGroupChangeEvent1 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(319).when(entryGroupChangeEvent1).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent1);
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(entry0).when(feature0).getEntry();
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(featureChangeEvent0).featureHasChanged();
      doReturn(feature0).when(featureChangeEvent0).getFeature();
      doReturn((Key) null).when(featureChangeEvent0).getOldKey();
      doReturn((Location) null).when(featureChangeEvent0).getOldLocation();
      doReturn((QualifierVector) null).when(featureChangeEvent0).getOldQualifiers();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Entry) null).when(entryChangeEvent0).getEntry();
      doReturn((Feature) null).when(entryChangeEvent0).getFeature();
      doReturn(1).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        actionController0.undo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn((Entry) null, (Entry) null).when(feature0).getEntry();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(featureChangeEvent0).featureHasChanged();
      doReturn(feature0, (Feature) null).when(featureChangeEvent0).getFeature();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.undo();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.undo();
      actionController0.redo();
      EntryGroupChangeEvent entryGroupChangeEvent1 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(entryGroupChangeEvent1).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent1);
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent1);
      actionController0.canUndo();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn((Entry) null, (Entry) null).when(feature0).getEntry();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(featureChangeEvent0).featureHasChanged();
      doReturn(feature0, (Feature) null).when(featureChangeEvent0).getFeature();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.undo();
      actionController0.startAction();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.undo();
      // Undeclared exception!
      try { 
        actionController0.redo();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - in ActionController.undo() Action in progress
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Feature) null).when(entryChangeEvent0).getFeature();
      doReturn((-1719), 2).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        actionController0.undo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Entry) null).when(entryChangeEvent0).getEntry();
      doReturn((Feature) null).when(entryChangeEvent0).getFeature();
      doReturn(1).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        actionController0.undo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Feature) null).when(entryChangeEvent0).getFeature();
      doReturn(4, 5, 1).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(entryGroupChangeEvent0).getType();
      actionController0.undo();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.undo();
      // Undeclared exception!
      try { 
        actionController0.redo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Entry) null).when(entryChangeEvent0).getEntry();
      doReturn((Feature) null).when(entryChangeEvent0).getFeature();
      doReturn(1004, 3, 2, 2).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent1 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(entryGroupChangeEvent1).getType();
      actionController0.undo();
      actionController0.entryGroupChanged(entryGroupChangeEvent1);
      actionController0.undo();
      // Undeclared exception!
      try { 
        actionController0.redo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Entry) null).when(entryChangeEvent0).getEntry();
      doReturn((Feature) null).when(entryChangeEvent0).getFeature();
      doReturn(1008, 1, 5, 2).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(entryGroupChangeEvent0).getType();
      actionController0.undo();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.undo();
      // Undeclared exception!
      try { 
        actionController0.redo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(featureChangeEvent0).featureHasChanged();
      doReturn((Feature) null).when(featureChangeEvent0).getFeature();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        actionController0.undo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(4088, 5, (-3397), 5).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(30000).when(entryGroupChangeEvent0).getType();
      actionController0.undo();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.undo();
      actionController0.redo();
      EntryGroupChangeEvent entryGroupChangeEvent1 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(entryGroupChangeEvent1).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent1);
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.endAction();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0, 3).when(entryChangeEvent1).getType();
      actionController0.entryChanged(entryChangeEvent1);
      EntryChangeEvent entryChangeEvent2 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(3, 4).when(entryChangeEvent2).getType();
      actionController0.entryChanged(entryChangeEvent2);
      actionController0.sequenceChanged((SequenceChangeEvent) null);
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      actionController0.undo();
      EntryChangeEvent entryChangeEvent3 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent3);
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent1);
      actionController0.startAction();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(featureChangeEvent1).featureHasChanged();
      actionController0.featureChanged(featureChangeEvent1);
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent2).featureHasChanged();
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.undo();
      SequenceChangeEvent sequenceChangeEvent2 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent2);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.undo();
      actionController0.undo();
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.entryChanged((EntryChangeEvent) null);
      actionController0.redo();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      SequenceChangeEvent sequenceChangeEvent2 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent2);
      actionController0.sequenceChanged(sequenceChangeEvent1);
      actionController0.undo();
      EntryGroupChangeEvent entryGroupChangeEvent1 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(entryGroupChangeEvent1).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent1);
      actionController0.canUndo();
      EntryGroupChangeEvent entryGroupChangeEvent2 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(entryGroupChangeEvent2).getType();
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryGroupChanged(entryGroupChangeEvent2);
      EntryGroupChangeEvent entryGroupChangeEvent3 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(entryGroupChangeEvent3).getType();
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.entryGroupChanged(entryGroupChangeEvent3);
      actionController0.entryChanged((EntryChangeEvent) null);
      actionController0.canUndo();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent0);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.startAction();
      actionController0.undo();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.endAction();
      actionController0.featureChanged((FeatureChangeEvent) null);
      actionController0.endAction();
      actionController0.endAction();
      actionController0.startAction();
      EntryGroupChangeEvent entryGroupChangeEvent1 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent1).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent2 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent2).getType();
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem2);
      actionController0.entryGroupChanged(entryGroupChangeEvent2);
      // Undeclared exception!
      try { 
        actionController0.undo();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - in ActionController.undo() Action in progress
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.endAction();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(entryChangeEvent1).getType();
      actionController0.entryChanged(entryChangeEvent1);
      EntryChangeEvent entryChangeEvent2 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(entryChangeEvent2).getType();
      actionController0.entryChanged(entryChangeEvent2);
      actionController0.sequenceChanged((SequenceChangeEvent) null);
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      actionController0.undo();
      EntryChangeEvent entryChangeEvent3 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent3);
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent1);
      actionController0.startAction();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent1).featureHasChanged();
      actionController0.featureChanged(featureChangeEvent1);
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent2).featureHasChanged();
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.undo();
      SequenceChangeEvent sequenceChangeEvent2 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent2);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      EntryChangeEvent entryChangeEvent0 = null;
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.undo();
      actionController0.entryChanged((EntryChangeEvent) null);
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.sequenceChanged(sequenceChangeEvent1);
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem1);
      actionController0.startAction();
      actionController0.entryChanged(entryChangeEvent1);
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        actionController0.entryChanged((EntryChangeEvent) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unknown event type: null
         //
         verifyException("uk.ac.sanger.artemis.Action", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.endAction();
      actionController0.endAction();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.entryChanged(entryChangeEvent1);
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      actionController0.redo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      actionController0.featureChanged(featureChangeEvent1);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.undo();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.undo();
      actionController0.redo();
      EntryGroupChangeEvent entryGroupChangeEvent1 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent1).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent1);
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem0);
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem1);
      actionController0.sequenceChanged((SequenceChangeEvent) null);
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.endAction();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(entryChangeEvent1).getType();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.entryChanged(entryChangeEvent1);
      actionController0.endAction();
      actionController0.undo();
      actionController0.startAction();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.startAction();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.featureChanged(featureChangeEvent0);
      actionController0.redo();
      actionController0.endAction();
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent1);
      actionController0.canUndo();
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      actionController0.startAction();
      actionController0.redo();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.redo();
      actionController0.canUndo();
      actionController0.endAction();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.startAction();
      actionController0.undo();
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem0);
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      actionController0.redo();
      // Undeclared exception!
      try { 
        actionController0.featureChanged((FeatureChangeEvent) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unknown event type: null
         //
         verifyException("uk.ac.sanger.artemis.Action", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      actionController0.redo();
      actionController0.redo();
      actionController0.endAction();
      actionController0.entryChanged(entryChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.undo();
      actionController0.addUndoMenu(jMenuItem0);
      actionController0.redo();
      actionController0.sequenceChanged((SequenceChangeEvent) null);
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent1);
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent0);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.undo();
      // Undeclared exception!
      try { 
        actionController0.addUndoMenu((JMenuItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.endAction();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent0);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      actionController0.endAction();
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.startAction();
      actionController0.endAction();
      FeatureChangeEvent featureChangeEvent1 = null;
      actionController0.endAction();
      actionController0.featureChanged((FeatureChangeEvent) null);
      JMenuItem jMenuItem0 = null;
      // Undeclared exception!
      try { 
        actionController0.addRedoMenu((JMenuItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.startAction();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.featureChanged(featureChangeEvent0);
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.endAction();
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.redo();
      actionController0.redo();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.undo();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem0);
      assertFalse(actionController0.canUndo());
      
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.undo();
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      actionController0.startAction();
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem1);
      // Undeclared exception!
      try { 
        actionController0.entryGroupChanged((EntryGroupChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.startAction();
      actionController0.addRedoMenu(jMenuItem0);
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem2);
      actionController0.addRedoMenu(jMenuItem1);
      JMenuItem jMenuItem3 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem3);
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent1);
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      EntryChangeEvent entryChangeEvent2 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent2);
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent1);
      JMenuItem jMenuItem4 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        actionController0.startAction();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - ActionController.startAction() called twice
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.startAction();
      actionController0.undo();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.startAction();
      actionController0.redo();
      actionController0.canUndo();
      // Undeclared exception!
      try { 
        actionController0.startAction();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - ActionController.startAction() called twice
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.startAction();
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem0);
      actionController0.endAction();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      actionController0.startAction();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      assertFalse(actionController0.canUndo());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.redo();
      actionController0.redo();
      actionController0.endAction();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.canUndo();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      actionController0.featureChanged((FeatureChangeEvent) null);
      actionController0.sequenceChanged((SequenceChangeEvent) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      assertNotNull(actionController0);
      assertFalse(actionController0.canUndo());
      
      actionController0.startAction();
      assertFalse(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      boolean boolean0 = actionController0.redo();
      assertFalse(boolean0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertTrue(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent1);
      assertTrue(actionController0.canUndo());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      assertNotNull(actionController0);
      assertFalse(actionController0.canUndo());
      
      boolean boolean0 = actionController0.undo();
      assertFalse(boolean0);
      assertFalse(actionController0.canUndo());
      
      actionController0.startAction();
      assertFalse(actionController0.canUndo());
      
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem1);
      assertFalse(actionController0.canUndo());
      
      actionController0.addRedoMenu(jMenuItem0);
      assertFalse(actionController0.canUndo());
      
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      // Undeclared exception!
      try { 
        actionController0.startAction();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - ActionController.startAction() called twice
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      assertNotNull(actionController0);
      assertFalse(actionController0.canUndo());
      
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertFalse(actionController0.canUndo());
      
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(entry0).when(feature0).getEntry();
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      Location location0 = mock(Location.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(featureChangeEvent0).featureHasChanged();
      doReturn(feature0, (Feature) null).when(featureChangeEvent0).getFeature();
      doReturn((Key) null).when(featureChangeEvent0).getOldKey();
      doReturn((Location) null).when(featureChangeEvent0).getOldLocation();
      doReturn((QualifierVector) null).when(featureChangeEvent0).getOldQualifiers();
      actionController0.startAction();
      assertFalse(actionController0.canUndo());
      
      Entry entry1 = mock(Entry.class, new ViolatedAssumptionAnswer());
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(entry1).when(entryChangeEvent0).getEntry();
      doReturn(feature1).when(entryChangeEvent0).getFeature();
      doReturn(1, 0, 0).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.featureChanged(featureChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertTrue(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      assertTrue(actionController0.canUndo());
      
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      assertTrue(actionController0.canUndo());
      
      boolean boolean0 = actionController0.redo();
      assertFalse(boolean0);
      assertTrue(actionController0.canUndo());
      
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      assertTrue(actionController0.canUndo());
      
      actionController0.featureChanged(featureChangeEvent1);
      assertTrue(actionController0.canUndo());
      
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryGroupChangeEvent0).getType();
      boolean boolean1 = actionController0.undo();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(actionController0.canUndo());
      
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      boolean boolean2 = actionController0.canUndo();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(actionController0.canUndo());
      
      boolean boolean3 = actionController0.undo();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertFalse(actionController0.canUndo());
      
      // Undeclared exception!
      try { 
        actionController0.redo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      assertNotNull(actionController0);
      assertFalse(actionController0.canUndo());
      
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertFalse(actionController0.canUndo());
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn((Entry) null).when(feature0).getEntry();
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(featureChangeEvent0).featureHasChanged();
      doReturn(feature0).when(featureChangeEvent0).getFeature();
      actionController0.startAction();
      assertFalse(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(feature1).when(entryChangeEvent0).getFeature();
      doReturn(293, 2).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.featureChanged(featureChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertTrue(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem1);
      assertTrue(actionController0.canUndo());
      
      boolean boolean0 = actionController0.redo();
      assertFalse(boolean0);
      assertTrue(actionController0.canUndo());
      
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      assertTrue(actionController0.canUndo());
      
      actionController0.featureChanged(featureChangeEvent1);
      assertTrue(actionController0.canUndo());
      
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = actionController0.undo();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(actionController0.canUndo());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      assertNotNull(actionController0);
      assertFalse(actionController0.canUndo());
      
      actionController0.startAction();
      assertFalse(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.featureChanged(featureChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      boolean boolean0 = actionController0.redo();
      assertFalse(boolean0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertTrue(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent1);
      assertTrue(actionController0.canUndo());
      
      boolean boolean1 = actionController0.canUndo();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(actionController0.canUndo());
      
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent1);
      assertTrue(actionController0.canUndo());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      assertNotNull(actionController0);
      assertFalse(actionController0.canUndo());
      
      actionController0.startAction();
      assertFalse(actionController0.canUndo());
      
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertTrue(actionController0.canUndo());
      
      boolean boolean0 = actionController0.canUndo();
      assertTrue(boolean0);
      assertTrue(actionController0.canUndo());
      
      actionController0.startAction();
      assertTrue(actionController0.canUndo());
      
      boolean boolean1 = actionController0.canUndo();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(actionController0.canUndo());
      
      boolean boolean2 = actionController0.redo();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(actionController0.canUndo());
      
      actionController0.endAction();
      assertTrue(actionController0.canUndo());
      
      boolean boolean3 = actionController0.canUndo();
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertTrue(actionController0.canUndo());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      assertNotNull(actionController0);
      assertFalse(actionController0.canUndo());
      
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertFalse(actionController0.canUndo());
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn((Entry) null).when(feature0).getEntry();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(featureChangeEvent0).featureHasChanged();
      doReturn(feature0, (Feature) null).when(featureChangeEvent0).getFeature();
      actionController0.startAction();
      assertFalse(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.featureChanged(featureChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertTrue(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem1);
      assertTrue(actionController0.canUndo());
      
      boolean boolean0 = actionController0.redo();
      assertFalse(boolean0);
      assertTrue(actionController0.canUndo());
      
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      assertTrue(actionController0.canUndo());
      
      actionController0.featureChanged(featureChangeEvent1);
      assertTrue(actionController0.canUndo());
      
      boolean boolean1 = actionController0.undo();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(actionController0.canUndo());
      
      boolean boolean2 = actionController0.undo();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(actionController0.canUndo());
      
      // Undeclared exception!
      try { 
        actionController0.redo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      assertNotNull(actionController0);
      assertFalse(actionController0.canUndo());
      
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertFalse(actionController0.canUndo());
      
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.startAction();
      assertFalse(actionController0.canUndo());
      
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(entry0).when(entryChangeEvent0).getEntry();
      doReturn(feature0).when(entryChangeEvent0).getFeature();
      doReturn(2, 5, (-1259), 2).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.featureChanged(featureChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertTrue(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem1);
      assertTrue(actionController0.canUndo());
      
      actionController0.entryChanged(entryChangeEvent1);
      assertTrue(actionController0.canUndo());
      
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      assertTrue(actionController0.canUndo());
      
      boolean boolean0 = actionController0.redo();
      assertFalse(boolean0);
      assertTrue(actionController0.canUndo());
      
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.featureChanged(featureChangeEvent2);
      assertTrue(actionController0.canUndo());
      
      actionController0.featureChanged(featureChangeEvent1);
      assertTrue(actionController0.canUndo());
      
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(entryGroupChangeEvent0).getType();
      boolean boolean1 = actionController0.undo();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(actionController0.canUndo());
      
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.startAction();
      assertFalse(actionController0.canUndo());
      
      boolean boolean2 = actionController0.undo();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(actionController0.canUndo());
      
      // Undeclared exception!
      try { 
        actionController0.redo();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - in ActionController.undo() Action in progress
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      assertNotNull(actionController0);
      assertFalse(actionController0.canUndo());
      
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertFalse(actionController0.canUndo());
      
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(featureChangeEvent0).featureHasChanged();
      actionController0.startAction();
      assertFalse(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(873, 42, 3, 42).when(entryChangeEvent0).getType();
      actionController0.entryChanged(entryChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.featureChanged(featureChangeEvent0);
      assertFalse(actionController0.canUndo());
      
      actionController0.endAction();
      assertTrue(actionController0.canUndo());
      
      EntryChangeEvent entryChangeEvent1 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent1);
      assertTrue(actionController0.canUndo());
      
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      assertTrue(actionController0.canUndo());
      
      boolean boolean0 = actionController0.redo();
      assertFalse(boolean0);
      assertTrue(actionController0.canUndo());
      
      FeatureChangeEvent featureChangeEvent1 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      FeatureChangeEvent featureChangeEvent2 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(13).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      assertTrue(actionController0.canUndo());
      
      actionController0.featureChanged(featureChangeEvent2);
      assertTrue(actionController0.canUndo());
      
      actionController0.featureChanged(featureChangeEvent1);
      assertTrue(actionController0.canUndo());
      
      EntryGroupChangeEvent entryGroupChangeEvent1 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(entryGroupChangeEvent1).getType();
      boolean boolean1 = actionController0.undo();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(actionController0.canUndo());
      
      actionController0.entryGroupChanged(entryGroupChangeEvent1);
      assertFalse(actionController0.canUndo());
      
      boolean boolean2 = actionController0.undo();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(actionController0.canUndo());
      
      boolean boolean3 = actionController0.redo();
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertTrue(actionController0.canUndo());
      
      EntryGroupChangeEvent entryGroupChangeEvent2 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(entryGroupChangeEvent2).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent2);
      assertFalse(actionController0.canUndo());
      
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent1);
      assertFalse(actionController0.canUndo());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ActionController actionController0 = new ActionController();
      SequenceChangeEvent sequenceChangeEvent0 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent0);
      JMenuItem jMenuItem0 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.undo();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.entryChanged(entryChangeEvent0);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((-3397)).when(entryGroupChangeEvent0).getType();
      actionController0.entryGroupChanged(entryGroupChangeEvent0);
      actionController0.addRedoMenu(jMenuItem0);
      JMenuItem jMenuItem1 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem1);
      actionController0.startAction();
      SequenceChangeEvent sequenceChangeEvent1 = mock(SequenceChangeEvent.class, new ViolatedAssumptionAnswer());
      actionController0.sequenceChanged(sequenceChangeEvent1);
      actionController0.canUndo();
      JMenuItem jMenuItem2 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addUndoMenu(jMenuItem2);
      JMenuItem jMenuItem3 = mock(JMenuItem.class, new ViolatedAssumptionAnswer());
      actionController0.addRedoMenu(jMenuItem3);
      // Undeclared exception!
      try { 
        actionController0.startAction();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - ActionController.startAction() called twice
         //
         verifyException("uk.ac.sanger.artemis.ActionController", e);
      }
  }
}
