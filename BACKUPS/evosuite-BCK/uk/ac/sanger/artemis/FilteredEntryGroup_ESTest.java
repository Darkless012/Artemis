/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:29:15 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.ActionController;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.EntryChangeEvent;
import uk.ac.sanger.artemis.EntryChangeListener;
import uk.ac.sanger.artemis.EntryGroup;
import uk.ac.sanger.artemis.EntryGroupChangeEvent;
import uk.ac.sanger.artemis.EntryGroupChangeListener;
import uk.ac.sanger.artemis.EntryVector;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureChangeEvent;
import uk.ac.sanger.artemis.FeatureChangeListener;
import uk.ac.sanger.artemis.FeatureEnumeration;
import uk.ac.sanger.artemis.FeaturePredicate;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FilteredEntryGroup_ESTest extends FilteredEntryGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn(entryVector0).when(entryGroup0).getActiveEntries();
      doReturn(false).when(entryGroup0).hasUnsavedChanges();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.addElement((Entry) null);
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "                     ");
      filteredEntryGroup1.isReadOnly();
      filteredEntryGroup1.hasUnsavedChanges();
      filteredEntryGroup1.remove((Entry) null);
      filteredEntryGroup1.createFeature();
      filteredEntryGroup0.reverseComplement();
      filteredEntryGroup0.ref();
      filteredEntryGroup1.addElement((Entry) null);
      int int0 = 0;
      filteredEntryGroup0.elementAt(0);
      int int1 = 19;
      // Undeclared exception!
      try { 
        filteredEntryGroup1.featureAt(19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(featureVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("uk.ac.sanger.artemis.FilteredEntryGroup$3", "uk.ac.sanger.artemis.FilteredEntryGroup$3", "uk.ac.sanger.artemis.FilteredEntryGroup$3", "uk.ac.sanger.artemis.FilteredEntryGroup$3", "uk.ac.sanger.artemis.FilteredEntryGroup$3").when(entryGroup1).toString();
      doReturn(featureVector0).when(entryGroup1).getFeaturesInRange(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn("uk.ac.sanger.artemis.FilteredEntryGroup$3").when(featureVector1).toString();
      doReturn((-1)).when(featureVector1).size();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup1, featureVector1, "gtAs\"pM");
      FeatureVector featureVector2 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.getAllFeaturesCount();
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.featureChanged(featureChangeEvent0);
      filteredEntryGroup0.getFeaturesInRange((Range) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).getSequenceEntry();
      doReturn((EntryGroup) null).when(entryGroup0).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, (String) null);
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, (String) null);
      filteredEntryGroup1.getSequenceEntry();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(entryGroup1).toString();
      doReturn((Feature) null).when(entryGroup1).createFeature();
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featurePredicate1, "");
      filteredEntryGroup2.createFeature();
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.getFilterName();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.truncate(range0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(feature0).toString();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("", "atg", "atg", "", "").when(entryGroup0).toString();
      doReturn(feature0).when(entryGroup0).createFeature();
      doReturn(0).when(entryGroup0).refCount();
      doReturn((EntryGroup) null).when(entryGroup0).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "jI>KY#\"wA/r");
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate1, "atg");
      Feature feature1 = filteredEntryGroup1.createFeature();
      filteredEntryGroup1.ref();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn("jI>KY#\"wA/r").when(featureVector0).toString();
      doReturn(feature1).when(featureVector0).elementAt(anyInt());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "jI>KY#\"wA/r");
      filteredEntryGroup2.getFeaturesInIndexRange(0, 0);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup2.truncate(range0);
      filteredEntryGroup0.refCount();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null, (Feature) null).when(entryGroup0).createFeature();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn(false).when(entryGroup0).hasUnsavedChanges();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      doReturn("?p;X,]E", "").when(featurePredicate0).toString();
      doReturn(false, true).when(featurePredicate0).testPredicate(any(uk.ac.sanger.artemis.Feature.class));
      filteredEntryGroup0.addElement((Entry) null);
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "                     ");
      filteredEntryGroup1.isReadOnly();
      filteredEntryGroup1.hasUnsavedChanges();
      filteredEntryGroup1.remove((Entry) null);
      filteredEntryGroup1.createFeature();
      filteredEntryGroup0.reverseComplement();
      filteredEntryGroup0.ref();
      filteredEntryGroup1.addElement((Entry) null);
      filteredEntryGroup0.elementAt(0);
      filteredEntryGroup1.createFeature();
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((Feature) null, (Feature) null).when(featureVector1).elementAt(anyInt());
      doReturn(19, 19).when(featureVector1).size();
      // Undeclared exception!
      try { 
        filteredEntryGroup1.filterFeatures(featureVector1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Bases) null).when(entryGroup0).getBases();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, (FeaturePredicate) null, "Od(*r.&:Qucs(*J34R>");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, (String) null);
      filteredEntryGroup0.createFeature();
      filteredEntryGroup1.getBases();
      filteredEntryGroup1.getActiveEntries();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("rm}peH5r,!29I<0;", "uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", "uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", "rm}peH5r,!29I<0;", "uk.ac.sanger.artemis.FeatureVector").when(entryGroup1).toString();
      doReturn((Feature) null).when(entryGroup1).createFeature();
      doReturn((EntryVector) null).when(entryGroup1).getActiveEntries();
      doReturn((Bases) null).when(entryGroup1).getBases();
      doReturn((-1928)).when(entryGroup1).size();
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featureVector1, "'(tS+");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      doReturn("'(tS+").when(featurePredicate0).toString();
      doReturn(false).when(featurePredicate0).testPredicate(any(uk.ac.sanger.artemis.Feature.class));
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featurePredicate0, "<}vkB HM?:LJ");
      filteredEntryGroup3.getBases();
      filteredEntryGroup2.size();
      filteredEntryGroup3.createFeature();
      filteredEntryGroup3.contains((Feature) null);
      // Undeclared exception!
      try { 
        filteredEntryGroup3.getAllFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn(entryVector0).when(entryGroup0).getActiveEntries();
      doReturn(false).when(entryGroup0).hasUnsavedChanges();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.addElement((Entry) null);
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "                     ");
      filteredEntryGroup1.isReadOnly();
      filteredEntryGroup1.hasUnsavedChanges();
      filteredEntryGroup1.remove((Entry) null);
      filteredEntryGroup1.createFeature();
      filteredEntryGroup0.reverseComplement();
      filteredEntryGroup0.ref();
      filteredEntryGroup1.addElement((Entry) null);
      int int0 = 0;
      filteredEntryGroup0.elementAt(0);
      int int1 = 19;
      // Undeclared exception!
      try { 
        filteredEntryGroup1.featureAt((-3264));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn(0).when(entryGroup0).indexOf(any(uk.ac.sanger.artemis.Entry.class));
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "9&]m~");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureVector0).toString();
      doReturn(0).when(featureVector0).size();
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator");
      filteredEntryGroup1.reverseComplement();
      filteredEntryGroup1.getActionController();
      filteredEntryGroup1.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryChanged(entryChangeEvent0);
      filteredEntryGroup1.removeEntryChangeListener(filteredEntryGroup0);
      filteredEntryGroup1.getAllFeaturesCount();
      filteredEntryGroup1.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup1.setIsActive(0, false);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryGroupChanged(entryGroupChangeEvent0);
      filteredEntryGroup1.createEntry();
      filteredEntryGroup1.setIsActive((Entry) null, true);
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getFeaturesInIndexRange(1983, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Entry) null).when(entryGroup0).getDefaultEntry();
      doReturn(0).when(entryGroup0).indexOf(any(uk.ac.sanger.artemis.Entry.class));
      doReturn(0, 0).when(entryGroup0).size();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "L[ohRvyei`UfR?D.v");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "");
      filteredEntryGroup1.getDefaultEntry();
      filteredEntryGroup1.add((Entry) null);
      filteredEntryGroup1.size();
      filteredEntryGroup1.setDefaultEntry((Entry) null);
      filteredEntryGroup0.indexOf((Entry) null);
      filteredEntryGroup0.size();
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getAllFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).getDefaultEntry();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn(false).when(entryGroup0).removeElement(any(uk.ac.sanger.artemis.Entry.class));
      doReturn((EntryGroup) null, (EntryGroup) null).when(entryGroup0).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "");
      filteredEntryGroup1.addFeatureChangeListener(filteredEntryGroup0);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.truncate(range0);
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.truncate(range1);
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryGroupChanged(entryGroupChangeEvent0);
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate1, "uk.ac.sanger.artemis.FilteredEntryGroup");
      filteredEntryGroup2.addFeatureChangeListener(filteredEntryGroup1);
      filteredEntryGroup2.getDefaultEntry();
      filteredEntryGroup0.removeElement((Entry) null);
      filteredEntryGroup1.setIsActive(113, false);
      filteredEntryGroup0.isReadOnly();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Entry) null).when(entryGroup0).getDefaultEntry();
      doReturn(0).when(entryGroup0).indexOf(any(uk.ac.sanger.artemis.Entry.class));
      doReturn(0, 0).when(entryGroup0).size();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "L[ohRvyei`UfR?D.v");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "");
      filteredEntryGroup1.getDefaultEntry();
      filteredEntryGroup1.add((Entry) null);
      filteredEntryGroup1.size();
      filteredEntryGroup1.setDefaultEntry((Entry) null);
      filteredEntryGroup0.indexOf((Entry) null);
      filteredEntryGroup0.size();
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getAllFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((Bases) null).when(entryGroup0).getBases();
      doReturn(0).when(entryGroup0).getSequenceLength();
      doReturn(false).when(entryGroup0).hasUnsavedChanges();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureVector0).toString();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featurePredicate0).toString();
      doReturn(false).when(featurePredicate0).testPredicate(any(uk.ac.sanger.artemis.Feature.class));
      filteredEntryGroup0.addElement((Entry) null);
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "                     ");
      filteredEntryGroup1.isReadOnly();
      filteredEntryGroup1.hasUnsavedChanges();
      filteredEntryGroup1.remove((Entry) null);
      filteredEntryGroup1.createFeature();
      filteredEntryGroup0.reverseComplement();
      filteredEntryGroup0.ref();
      filteredEntryGroup1.addElement((Entry) null);
      filteredEntryGroup0.elementAt(0);
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((Feature) null).when(featureVector1).elementAt(anyInt());
      doReturn(99999999, 0).when(featureVector1).size();
      filteredEntryGroup1.filterFeatures(featureVector1);
      filteredEntryGroup0.getSequenceLength();
      filteredEntryGroup0.getBases();
      filteredEntryGroup0.getAllFeatures();
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryChanged(entryChangeEvent0);
      ActionController actionController0 = filteredEntryGroup1.getActionController();
      filteredEntryGroup1.removeEntryGroupChangeListener(actionController0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Bases) null).when(entryGroup0).getBases();
      doReturn(0).when(entryGroup0).size();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "'(tS+");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featurePredicate0).toString();
      doReturn(false).when(featurePredicate0).testPredicate(any(uk.ac.sanger.artemis.Feature.class));
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "<}vkB HM?:LJ");
      filteredEntryGroup1.getBases();
      filteredEntryGroup0.size();
      filteredEntryGroup1.createFeature();
      filteredEntryGroup1.contains((Feature) null);
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getAllFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-5);
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn((-5)).when(entryVector0).size();
      EntryVector entryVector1 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn("uk.ac.sanger.artemis.sequence.BasePatternFormatException").when(entryVector1).toString();
      doReturn((Entry) null).when(entryVector1).elementAt(anyInt());
      doReturn(3997).when(entryVector1).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, "v4H3qn/2o/mQ").when(entryGroup0).toString();
      doReturn(entryVector0, entryVector1).when(entryGroup0).getActiveEntries();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureVector0).toString();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "mrh>p");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "mrh>p");
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((-653)).when(featureVector1).size();
      filteredEntryGroup1.filterFeatures(featureVector1);
      filteredEntryGroup0.features();
      filteredEntryGroup0.getAllFeatures();
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = null;
      try {
        filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup1.new FeatureEnumerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((Entry) null).when(entryGroup0).getDefaultEntry();
      doReturn(0).when(entryGroup0).refCount();
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      doReturn(false).when(entryGroup0).removeElement(any(uk.ac.sanger.artemis.Entry.class));
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureVector0).toString();
      doReturn((Feature) null).when(featureVector0).elementAt(anyInt());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "");
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.featureChanged(featureChangeEvent0);
      filteredEntryGroup0.createEntry();
      filteredEntryGroup1.setDefaultEntry((Entry) null);
      filteredEntryGroup1.reverseComplement();
      filteredEntryGroup1.getDefaultEntry();
      filteredEntryGroup0.remove((Entry) null);
      filteredEntryGroup1.featureAt((-3250));
      filteredEntryGroup0.ref();
      filteredEntryGroup0.refCount();
      filteredEntryGroup1.removeElement((Entry) null);
      // Undeclared exception!
      try { 
        filteredEntryGroup1.contains((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, ",aa:Sec)");
      filteredEntryGroup0.elementAt(1057);
      filteredEntryGroup0.getActionController();
      filteredEntryGroup0.getActiveEntries();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("uk.ac.sanger.artemis.EntryGroupChangeEvent", "uk.ac.sanger.artemis.EntryGroupChangeEvent", "uk.ac.sanger.artemis.EntryGroupChangeEvent", (String) null, ",aa:Sec)").when(entryGroup1).toString();
      doReturn((ActionController) null).when(entryGroup1).getActionController();
      doReturn(1057).when(entryGroup1).indexOf(any(uk.ac.sanger.artemis.Entry.class));
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(entryGroup1, featurePredicate1, "9&]m~");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup1, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator");
      filteredEntryGroup2.reverseComplement();
      filteredEntryGroup1.add((Entry) null);
      filteredEntryGroup2.getActionController();
      filteredEntryGroup2.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup2.entryChanged(entryChangeEvent0);
      filteredEntryGroup2.indexOf((Entry) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "Ile");
      filteredEntryGroup1.elementAt((-591));
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryVector0).size();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("'#GKFzn9Z|7bZ", "vQp'KEG_LFLF2qmd<", ";{m'R?Oys4", ";{m'R?Oys4", "vQp'KEG_LFLF2qmd<").when(entryGroup1).toString();
      doReturn(entryVector0).when(entryGroup1).getActiveEntries();
      doReturn((Entry) null).when(entryGroup1).getDefaultEntry();
      doReturn((-2948)).when(entryGroup1).getSequenceLength();
      doReturn(true).when(entryGroup1).removeElement(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featureVector1, (String) null);
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featurePredicate1, (String) null);
      FeatureVector featureVector2 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup4 = new FilteredEntryGroup(filteredEntryGroup3, featureVector2, "vk7:eqs dRT?eq?4VR_");
      filteredEntryGroup4.getDefaultEntry();
      filteredEntryGroup3.removeElement((Entry) null);
      filteredEntryGroup2.getSequenceLength();
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup2.new FeatureEnumerator();
      try { 
        filteredEntryGroup_FeatureEnumerator0.nextFeature();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Bases) null).when(entryGroup0).getBases();
      doReturn((Entry) null).when(entryGroup0).getDefaultEntry();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn(false).when(entryGroup0).removeElement(any(uk.ac.sanger.artemis.Entry.class));
      doReturn((EntryGroup) null, (EntryGroup) null).when(entryGroup0).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "");
      filteredEntryGroup1.addFeatureChangeListener(filteredEntryGroup0);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.truncate(range0);
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.truncate(range1);
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryGroupChanged(entryGroupChangeEvent0);
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate1, "uk.ac.sanger.artemis.FilteredEntryGroup");
      filteredEntryGroup2.addFeatureChangeListener(filteredEntryGroup1);
      filteredEntryGroup2.getDefaultEntry();
      filteredEntryGroup0.removeElement((Entry) null);
      filteredEntryGroup1.setIsActive(113, false);
      filteredEntryGroup0.isReadOnly();
      filteredEntryGroup2.getBases();
      filteredEntryGroup2.addElement((Entry) null);
      filteredEntryGroup1.addFeatureChangeListener((FeatureChangeListener) null);
      filteredEntryGroup2.setIsActive((-5), false);
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = null;
      try {
        filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup1.new FeatureEnumerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((Entry) null).when(entryGroup0).createEntry(anyString());
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((FeatureVector) null).when(entryGroup0).getFeaturesInRange(any(uk.ac.sanger.artemis.io.Range.class));
      doReturn((Entry) null).when(entryGroup0).getSequenceEntry();
      doReturn(false).when(entryGroup0).hasUnsavedChanges();
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn("").when(featureVector0).toString();
      doReturn(3972).when(featureVector0).indexOf(any(uk.ac.sanger.artemis.Feature.class));
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "");
      filteredEntryGroup1.getSequenceEntry();
      filteredEntryGroup1.remove((Entry) null);
      filteredEntryGroup1.createFeature();
      filteredEntryGroup0.indexOf((Feature) null);
      filteredEntryGroup0.getActionController();
      filteredEntryGroup1.createEntry();
      filteredEntryGroup1.elementAt(0);
      filteredEntryGroup1.addElement((Entry) null);
      filteredEntryGroup1.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup1.hasUnsavedChanges();
      filteredEntryGroup1.createEntry("");
      filteredEntryGroup0.getFilterName();
      filteredEntryGroup0.getFilterName();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.unref();
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getFeaturesInRange(range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "ApM|#$!6Q@");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$1");
      filteredEntryGroup1.getActionController();
      filteredEntryGroup0.getActiveEntries();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("J[?O}ydYOt(", "", "ID", "J[?O}ydYOt(", "").when(entryGroup1).toString();
      doReturn((ActionController) null).when(entryGroup1).getActionController();
      doReturn((EntryVector) null).when(entryGroup1).getActiveEntries();
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featurePredicate1, "ID");
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featureVector1, "ID");
      filteredEntryGroup3.getActionController();
      filteredEntryGroup2.getActiveEntries();
      EntryGroup entryGroup2 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("ApM|#$!6Q@", "ID", "J[?O}ydYOt(", "ApM|#$!6Q@", "ID").when(entryGroup2).toString();
      doReturn((ActionController) null).when(entryGroup2).getActionController();
      doReturn((EntryVector) null).when(entryGroup2).getActiveEntries();
      doReturn(0).when(entryGroup2).getSequenceLength();
      doReturn(true).when(entryGroup2).isReadOnly();
      doReturn(0).when(entryGroup2).size();
      doReturn(filteredEntryGroup3).when(entryGroup2).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector2 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup4 = new FilteredEntryGroup(entryGroup2, featureVector2, "1qv'sSH_MAB0o#gg1=$");
      FeaturePredicate featurePredicate2 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup4.ref();
      FilteredEntryGroup filteredEntryGroup5 = new FilteredEntryGroup(filteredEntryGroup4, featurePredicate2, "U*pJPi,n@L'2#=S");
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup4.getActionController();
      filteredEntryGroup5.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup5.featureChanged(featureChangeEvent0);
      filteredEntryGroup4.getSequenceLength();
      filteredEntryGroup5.isReadOnly();
      filteredEntryGroup5.size();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup4.truncate(range0);
      filteredEntryGroup4.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = null;
      try {
        filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup4.new FeatureEnumerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "^&v;ig");
      filteredEntryGroup0.elementAt(2077);
      filteredEntryGroup0.getActionController();
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("^&v;ig", "m.>", ".WhWm(8", "4XkFu7{rx*_f{i&|\"", "^`P.5;w@NJp!").when(entryGroup1).toString();
      doReturn((ActionController) null).when(entryGroup1).getActionController();
      doReturn((Entry) null).when(entryGroup1).getDefaultEntry();
      doReturn((-2028)).when(entryGroup1).indexOf(any(uk.ac.sanger.artemis.Entry.class));
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(entryGroup1, featurePredicate1, "9&]m~");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup1, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator");
      filteredEntryGroup2.reverseComplement();
      filteredEntryGroup2.getActionController();
      filteredEntryGroup2.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup2.indexOf((Entry) null);
      filteredEntryGroup1.getDefaultEntry();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Bases) null).when(entryGroup0).getBases();
      doReturn((Entry) null).when(entryGroup0).getDefaultEntry();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn(false).when(entryGroup0).removeElement(any(uk.ac.sanger.artemis.Entry.class));
      doReturn((EntryGroup) null, (EntryGroup) null).when(entryGroup0).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "");
      filteredEntryGroup1.addFeatureChangeListener(filteredEntryGroup0);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.truncate(range0);
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.truncate(range1);
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryGroupChanged(entryGroupChangeEvent0);
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate1, "uk.ac.sanger.artemis.FilteredEntryGroup");
      filteredEntryGroup2.addFeatureChangeListener(filteredEntryGroup1);
      filteredEntryGroup2.getDefaultEntry();
      filteredEntryGroup0.removeElement((Entry) null);
      filteredEntryGroup1.setIsActive(113, false);
      filteredEntryGroup0.isReadOnly();
      filteredEntryGroup2.getBases();
      filteredEntryGroup2.addElement((Entry) null);
      filteredEntryGroup1.addFeatureChangeListener((FeatureChangeListener) null);
      filteredEntryGroup2.setIsActive((-5), false);
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = null;
      try {
        filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup1.new FeatureEnumerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "ID");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "ID");
      filteredEntryGroup1.getActionController();
      filteredEntryGroup0.getActiveEntries();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("ApM|#$!6Q@", "ID", "J[?O}ydYOt(", "ApM|#$!6Q@", "ID").when(entryGroup1).toString();
      doReturn((ActionController) null).when(entryGroup1).getActionController();
      doReturn((EntryVector) null).when(entryGroup1).getActiveEntries();
      doReturn(0).when(entryGroup1).getSequenceLength();
      doReturn(true).when(entryGroup1).isReadOnly();
      doReturn(0).when(entryGroup1).size();
      doReturn(filteredEntryGroup1).when(entryGroup1).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featureVector1, "1qv'sSH_MAB0o#gg1=$");
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup2.ref();
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featurePredicate1, "U*pJPi,n@L'2#=S");
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup2.getActionController();
      filteredEntryGroup3.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup3.featureChanged(featureChangeEvent0);
      filteredEntryGroup2.getSequenceLength();
      filteredEntryGroup3.isReadOnly();
      filteredEntryGroup3.size();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup2.truncate(range0);
      filteredEntryGroup2.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = null;
      try {
        filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup2.new FeatureEnumerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "uk.ac.sanger.artemis.FilteredEntryGroup$1");
      filteredEntryGroup0.createFeature();
      filteredEntryGroup0.getActionController();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "uk.ac.sanger.artemis.FilteredEntryGroup$1", "[uK!o").when(entryGroup1).toString();
      doReturn((Feature) null).when(entryGroup1).createFeature();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(entryGroup1, featureVector0, "To1P@i");
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      doReturn("DZZ>=$]!RQN17;DD").when(featurePredicate1).toString();
      doReturn(true).when(featurePredicate1).testPredicate(any(uk.ac.sanger.artemis.Feature.class));
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup1, featurePredicate1, "three_prime_UTR");
      filteredEntryGroup2.reverseComplement();
      filteredEntryGroup2.createFeature();
      // Undeclared exception!
      try { 
        filteredEntryGroup2.contains((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(entryVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, (FeaturePredicate) null, "H;;");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, (String) null);
      filteredEntryGroup1.getActiveEntries();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, "FH", (String) null, "v4H3qn/2o/mQ").when(entryGroup1).toString();
      doReturn(entryVector0, (EntryVector) null).when(entryGroup1).getActiveEntries();
      doReturn(true).when(entryGroup1).hasUnsavedChanges();
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureVector1).toString();
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featureVector1, "mrh>p");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featurePredicate0, "mrh>p");
      FeatureVector featureVector2 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FeatureVector featureVector3 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((-653)).when(featureVector3).size();
      filteredEntryGroup3.hasUnsavedChanges();
      filteredEntryGroup3.filterFeatures(featureVector3);
      FilteredEntryGroup filteredEntryGroup4 = new FilteredEntryGroup(filteredEntryGroup3, featureVector2, "");
      filteredEntryGroup2.features();
      filteredEntryGroup2.getAllFeatures();
      filteredEntryGroup4.entryGroupChanged((EntryGroupChangeEvent) null);
      // Undeclared exception!
      try { 
        filteredEntryGroup4.getFeaturesInIndexRange(1287, 1287);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn(0).when(entryGroup0).getSequenceLength();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureVector0).toString();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "uk.ac.sanger.artemis.FilteredEntryGroup");
      filteredEntryGroup1.unref();
      filteredEntryGroup1.getActionController();
      filteredEntryGroup0.getSequenceLength();
      filteredEntryGroup0.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup0.getAllFeatures();
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = null;
      try {
        filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup0.new FeatureEnumerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(entryVector0).toString();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "").when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn(entryVector0).when(entryGroup0).getActiveEntries();
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn(",aa:").when(featureVector0).toString();
      doReturn(4754).when(featureVector0).size();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "e}lN#]R?]U");
      filteredEntryGroup1.addFeatureChangeListener(filteredEntryGroup0);
      filteredEntryGroup1.getActiveEntries();
      filteredEntryGroup0.getAllFeaturesCount();
      filteredEntryGroup0.elementAt((-1));
      filteredEntryGroup0.remove((Entry) null);
      filteredEntryGroup1.setIsActive((-1), true);
      filteredEntryGroup0.reverseComplement();
      filteredEntryGroup0.setDefaultEntry((Entry) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "Ile");
      filteredEntryGroup1.elementAt((-591));
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("'#GKFzn9Z|7bZ", "vQp'KEG_LFLF2qmd<", ";{m'R?Oys4", ";{m'R?Oys4", "vQp'KEG_LFLF2qmd<").when(entryGroup1).toString();
      doReturn((EntryVector) null).when(entryGroup1).getActiveEntries();
      doReturn((Entry) null).when(entryGroup1).getDefaultEntry();
      doReturn(0).when(entryGroup1).getSequenceLength();
      doReturn(true).when(entryGroup1).removeElement(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featureVector1, (String) null);
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featurePredicate1, (String) null);
      FeatureVector featureVector2 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup4 = new FilteredEntryGroup(filteredEntryGroup3, featureVector2, "vk7:eqs dRT?eq?4VR_");
      filteredEntryGroup4.getDefaultEntry();
      filteredEntryGroup3.removeElement((Entry) null);
      filteredEntryGroup2.getSequenceLength();
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = null;
      try {
        filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup2.new FeatureEnumerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn("w").when(entryVector0).toString();
      doReturn((Entry) null).when(entryVector0).elementAt(anyInt());
      doReturn(24).when(entryVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "").when(entryGroup0).toString();
      doReturn(entryVector0).when(entryGroup0).getActiveEntries();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "/]|.ttneYQ}");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.entryGroupChanged(entryGroupChangeEvent0);
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "Y<dl|fUo*G|o;n");
      // Undeclared exception!
      try { 
        filteredEntryGroup1.features();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((Entry) null).when(entryGroup0).getDefaultEntry();
      doReturn(0).when(entryGroup0).size();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "!1I`");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureVector0).toString();
      doReturn((Feature) null).when(featureVector0).elementAt(anyInt());
      doReturn(0).when(featureVector0).size();
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "");
      filteredEntryGroup1.getAllFeaturesCount();
      filteredEntryGroup1.getDefaultEntry();
      filteredEntryGroup0.getActionController();
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(featureVector1).size();
      filteredEntryGroup1.filterFeatures(featureVector1);
      filteredEntryGroup1.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup0.setDefaultEntry((Entry) null);
      filteredEntryGroup0.elementAt(0);
      filteredEntryGroup1.addFeatureChangeListener((FeatureChangeListener) null);
      filteredEntryGroup0.size();
      filteredEntryGroup0.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getFeaturesInIndexRange(0, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "operation cannot be applied to this entry");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "f:Dx!O4Egr5");
      filteredEntryGroup1.getActionController();
      filteredEntryGroup1.getActiveEntries();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("operation cannot be applied to this entry", "while reading a feature", "f:Dx!O4Egr5", "~JZq.`j3p[FGgtp", "operation cannot be applied to this entry").when(entryGroup1).toString();
      doReturn((ActionController) null).when(entryGroup1).getActionController();
      doReturn((EntryVector) null).when(entryGroup1).getActiveEntries();
      doReturn(3958).when(entryGroup1).getSequenceLength();
      doReturn(false).when(entryGroup1).isReadOnly();
      doReturn(3958).when(entryGroup1).size();
      doReturn(filteredEntryGroup0).when(entryGroup1).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featureVector1, "1qv'sSH_MAB0o#gg1=$");
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup2.ref();
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featurePredicate1, "U*pJPi,n@L'2#=S");
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup2.getActionController();
      filteredEntryGroup3.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup3.featureChanged(featureChangeEvent0);
      filteredEntryGroup2.getSequenceLength();
      filteredEntryGroup3.isReadOnly();
      filteredEntryGroup3.size();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup2.truncate(range0);
      filteredEntryGroup2.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = null;
      try {
        filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup2.new FeatureEnumerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).getSequenceEntry();
      doReturn(0).when(entryGroup0).indexOf(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, (String) null);
      filteredEntryGroup1.getSequenceEntry();
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("<8&Z", (String) null, "", "#(Ud", "").when(entryGroup1).toString();
      doReturn((Entry) null).when(entryGroup1).createEntry();
      doReturn((Entry) null).when(entryGroup1).getDefaultEntry();
      doReturn(true).when(entryGroup1).remove(any(uk.ac.sanger.artemis.Entry.class));
      filteredEntryGroup1.setIsActive((Entry) null, true);
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featurePredicate1, "");
      FeatureVector featureVector2 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featureVector2, "");
      filteredEntryGroup3.createEntry();
      filteredEntryGroup3.getDefaultEntry();
      filteredEntryGroup2.remove((Entry) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ActionController actionController0 = mock(ActionController.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(actionController0).toString();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "{|]I$c6]?B(XWh", "Z=h(|]XBT7SSJ4EI", "{|]I$c6]?B(XWh", (String) null).when(entryGroup0).toString();
      doReturn(actionController0).when(entryGroup0).getActionController();
      doReturn(0).when(entryGroup0).getSequenceLength();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "polypeptide");
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, (FeaturePredicate) null, "vnXZl6g");
      ActionController actionController1 = filteredEntryGroup1.getActionController();
      filteredEntryGroup1.addEntryGroupChangeListener(actionController1);
      filteredEntryGroup1.getSequenceLength();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Entry) null).when(entryGroup0).getSequenceEntry();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "o5!Z0-E");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "o5!Z0-E");
      filteredEntryGroup0.getSequenceEntry();
      filteredEntryGroup1.add((Entry) null);
      filteredEntryGroup1.createEntry();
      // Undeclared exception!
      try { 
        filteredEntryGroup1.featureAt(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("", "uk.ac.sanger.artemis.FilteredEntryGroup", "/z9[`hId", "uk.ac.sanger.artemis.FilteredEntryGroup", "2BuM*j>G").when(entryGroup0).toString();
      doReturn(entryVector0).when(entryGroup0).getActiveEntries();
      doReturn(0).when(entryGroup0).getSequenceLength();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn("+", "EC_number").when(featureVector0).toString();
      doReturn((Feature) null).when(featureVector0).elementAt(anyInt());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$2");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featurePredicate0).toString();
      doReturn(false).when(featurePredicate0).testPredicate(any(uk.ac.sanger.artemis.Feature.class));
      filteredEntryGroup0.getFeaturesInIndexRange(39, 0);
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "uk.ac.sanger.artemis.FilteredEntryGroup$2");
      filteredEntryGroup0.featureAt(3112);
      filteredEntryGroup1.indexOf((Feature) null);
      filteredEntryGroup1.contains((Feature) null);
      filteredEntryGroup0.getSequenceLength();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(entryVector0).toString();
      doReturn(0, 0).when(entryVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, "FH", (String) null, "v4H3qn/2o/mQ").when(entryGroup0).toString();
      doReturn(entryVector0, (EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn(true).when(entryGroup0).hasUnsavedChanges();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureVector0).toString();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "mrh>p");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "mrh>p");
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FeatureVector featureVector2 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((-653)).when(featureVector2).size();
      filteredEntryGroup1.hasUnsavedChanges();
      filteredEntryGroup1.filterFeatures(featureVector2);
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup1, featureVector1, "");
      filteredEntryGroup0.features();
      filteredEntryGroup0.getAllFeatures();
      filteredEntryGroup2.entryGroupChanged((EntryGroupChangeEvent) null);
      // Undeclared exception!
      try { 
        filteredEntryGroup2.getFeaturesInIndexRange(1287, 1287);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1287, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(entryVector0).toString();
      doReturn(0).when(entryVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("-i2", "d-mtNTWxc3", "-i2", "%", (String) null).when(entryGroup0).toString();
      doReturn(entryVector0).when(entryGroup0).getActiveEntries();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "1");
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.entryGroupChanged(entryGroupChangeEvent0);
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      String string0 = "F";
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "F");
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryChanged(entryChangeEvent0);
      filteredEntryGroup1.unref();
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup1.new FeatureEnumerator();
      try { 
        filteredEntryGroup_FeatureEnumerator0.nextFeature();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(entryVector0).toString();
      doReturn(0, 0).when(entryVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "", (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn(entryVector0, (EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn(false).when(entryGroup0).hasUnsavedChanges();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureVector0).toString();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "mrh>p");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(featurePredicate0).toString();
      doReturn(false, false, false, false, false).when(featurePredicate0).testPredicate(any(uk.ac.sanger.artemis.Feature.class));
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "mrh>p");
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FeatureVector featureVector2 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((Feature) null, (Feature) null, (Feature) null, (Feature) null, (Feature) null).when(featureVector2).elementAt(anyInt());
      doReturn(3998, 0, 0, 0, 0).when(featureVector2).size();
      filteredEntryGroup1.hasUnsavedChanges();
      filteredEntryGroup1.filterFeatures(featureVector2);
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup1, featureVector1, "");
      filteredEntryGroup0.features();
      filteredEntryGroup0.getAllFeatures();
      filteredEntryGroup2.entryGroupChanged((EntryGroupChangeEvent) null);
      // Undeclared exception!
      try { 
        filteredEntryGroup2.getFeaturesInIndexRange(1287, 1287);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1287, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(featureVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("v`c", ">Y'wh?", "uk.ac.sanger.artemis.FilteredEntryGroup$1", ">Y'wh?", "").when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn(featureVector0).when(entryGroup0).getFeaturesInRange(any(uk.ac.sanger.artemis.io.Range.class));
      doReturn(false).when(entryGroup0).hasUnsavedChanges();
      doReturn(false).when(entryGroup0).isReadOnly();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "{!PM/");
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, (FeatureVector) null, "5l68YP9:LoT-");
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.getFeaturesInRange(range0);
      filteredEntryGroup0.getActionController();
      filteredEntryGroup1.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup1.hasUnsavedChanges();
      filteredEntryGroup0.removeFeatureChangeListener((FeatureChangeListener) null);
      filteredEntryGroup0.isReadOnly();
      filteredEntryGroup0.createEntry();
      filteredEntryGroup0.add((Entry) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Bases) null).when(entryGroup0).getBases();
      doReturn((Entry) null).when(entryGroup0).getDefaultEntry();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "54S)tl!b5");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "54S)tl!b5");
      filteredEntryGroup1.getActiveEntries();
      filteredEntryGroup0.getBases();
      filteredEntryGroup1.getDefaultEntry();
      filteredEntryGroup1.unref();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("bdV#L:`R{ PP", "bdV#L:`R{ PP", "54S)tl!b5", "bdV#L:`R{ PP", "bdV#L:`R{ PP").when(entryGroup1).toString();
      doReturn((EntryVector) null).when(entryGroup1).getActiveEntries();
      doReturn((Bases) null).when(entryGroup1).getBases();
      doReturn((Entry) null).when(entryGroup1).getDefaultEntry();
      doReturn(filteredEntryGroup0, filteredEntryGroup0).when(entryGroup1).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featureVector1, "");
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featurePredicate1, "");
      filteredEntryGroup3.addFeatureChangeListener(filteredEntryGroup2);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup3.truncate(range0);
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup2.truncate(range1);
      FeaturePredicate featurePredicate2 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup3.entryGroupChanged(entryGroupChangeEvent0);
      FilteredEntryGroup filteredEntryGroup4 = new FilteredEntryGroup(filteredEntryGroup2, featurePredicate2, "uk.ac.sanger.artemis.FilteredEntryGroup");
      filteredEntryGroup4.addFeatureChangeListener(filteredEntryGroup3);
      filteredEntryGroup4.getBases();
      filteredEntryGroup4.getDefaultEntry();
      // Undeclared exception!
      try { 
        filteredEntryGroup3.featureAt(447);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("}B]/)PP?+Qk9fh", "}B]/)PP?+Qk9fh", "}B]/)PP?+Qk9fh", "}B]/)PP?+Qk9fh", "70bI36u2 uOSG").when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn(1).when(entryGroup0).refCount();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, (FeatureVector) null, "<A[C5=GxR,sd|/V;]");
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, (FeaturePredicate) null, "<A[C5=GxR,sd|/V;]");
      filteredEntryGroup1.refCount();
      filteredEntryGroup1.elementAt((-1673));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry(anyString());
      doReturn((FeatureEnumeration) null).when(entryGroup0).features();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn(false).when(entryGroup0).removeElement(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      String string0 = "stop_codon_redefined_as_selenocysteine";
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "stop_codon_redefined_as_selenocysteine");
      filteredEntryGroup0.createEntry("stop_codon_redefined_as_selenocysteine");
      filteredEntryGroup0.removeElement((Entry) null);
      filteredEntryGroup0.getActionController();
      filteredEntryGroup0.addEntryGroupChangeListener((EntryGroupChangeListener) null);
      // Undeclared exception!
      try { 
        filteredEntryGroup0.filterFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, (String) null);
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "");
      filteredEntryGroup1.getActiveEntries();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("", " 83K;@Gch0O6TTD9_S", "U|mS!", "orthologous_to", "").when(entryGroup1).toString();
      doReturn((EntryVector) null).when(entryGroup1).getActiveEntries();
      doReturn(39).when(entryGroup1).size();
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featurePredicate1, "O6_CK8{bnMd");
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featureVector1, "");
      filteredEntryGroup3.reverseComplement();
      filteredEntryGroup3.setDefaultEntry((Entry) null);
      filteredEntryGroup2.size();
      filteredEntryGroup2.getActiveEntries();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("wztOi}MsDgrxRs'", "wztOi}MsDgrxRs'", "wztOi}MsDgrxRs'", "wztOi}MsDgrxRs'", "+c9Xn&").when(entryGroup0).toString();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "l:h\"U;(`[i,U\"lCwi");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator");
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((-2671)).when(featureVector1).size();
      filteredEntryGroup1.filterFeatures(featureVector1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((FeatureEnumeration) null).when(entryGroup0).features();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "uk.ac.sanger.artemis.FilteredEntryGroup$2");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$2");
      filteredEntryGroup1.addFeatureChangeListener(filteredEntryGroup0);
      filteredEntryGroup0.reverseComplement();
      filteredEntryGroup0.reverseComplement();
      int int0 = 0;
      // Undeclared exception!
      try { 
        filteredEntryGroup0.featureAt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn((ActionController) null, (ActionController) null).when(entryGroup0).getActionController();
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureVector0).toString();
      doReturn((Feature) null).when(featureVector0).elementAt(anyInt());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "");
      filteredEntryGroup1.getFilterName();
      filteredEntryGroup0.elementAt(0);
      filteredEntryGroup1.remove((Entry) null);
      filteredEntryGroup1.getActionController();
      filteredEntryGroup0.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup0.featureAt(4355);
      filteredEntryGroup0.ref();
      filteredEntryGroup0.getActionController();
      filteredEntryGroup1.addEntryGroupChangeListener((EntryGroupChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, (FeatureVector) null, "a>0ZX<ZPy");
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, (FeaturePredicate) null, "");
      filteredEntryGroup1.createFeature();
      // Undeclared exception!
      try { 
        filteredEntryGroup1.indexOf((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "9]`3u.3G=");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureVector0).toString();
      doReturn((Feature) null, (Feature) null).when(featureVector0).elementAt(anyInt());
      String string0 = null;
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, (String) null);
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.featureAt(2);
      filteredEntryGroup1.removeEntryChangeListener((EntryChangeListener) null);
      filteredEntryGroup1.featureChanged(featureChangeEvent0);
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getFeaturesInIndexRange(3, 16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureVector0).toString();
      doReturn((Feature) null).when(featureVector0).elementAt(anyInt());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$2");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.getFeaturesInIndexRange(39, 0);
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "uk.ac.sanger.artemis.FilteredEntryGroup$2");
      filteredEntryGroup0.featureAt(3112);
      // Undeclared exception!
      try { 
        filteredEntryGroup1.indexOf((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, (FeaturePredicate) null, "uk.ac.sanger.artemis.FilteredEntryGroup");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.createEntry();
      String string0 = "";
      filteredEntryGroup0.getActionController();
      filteredEntryGroup0.addEntryGroupChangeListener((EntryGroupChangeListener) null);
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "");
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.featureChanged(featureChangeEvent0);
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryGroupChanged(entryGroupChangeEvent0);
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getAllFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((FeatureVector) null).when(entryGroup0).getFeaturesInRange(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureVector0).toString();
      doReturn((Feature) null).when(featureVector0).elementAt(anyInt());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featurePredicate0).toString();
      doReturn(false).when(featurePredicate0).testPredicate(any(uk.ac.sanger.artemis.Feature.class));
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "");
      filteredEntryGroup1.setIsActive(2291, true);
      filteredEntryGroup0.featureAt((-1));
      filteredEntryGroup1.contains((Feature) null);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getFeaturesInRange(range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "jIw+M");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureVector0).toString();
      doReturn(0).when(featureVector0).indexOf(any(uk.ac.sanger.artemis.Feature.class));
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "tkJ:t^=GzT=");
      filteredEntryGroup0.createFeature();
      filteredEntryGroup1.indexOf((Feature) null);
      // Undeclared exception!
      try { 
        filteredEntryGroup1.filterFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.getActionController();
      filteredEntryGroup0.addEntryChangeListener((EntryChangeListener) null);
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "");
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(featureVector1).size();
      filteredEntryGroup1.filterFeatures(featureVector1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).getSequenceEntry();
      doReturn(false).when(entryGroup0).isReadOnly();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "]nXY%1t");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureVector0).toString();
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "]nXY%1t");
      filteredEntryGroup0.getSequenceEntry();
      filteredEntryGroup1.setDefaultEntry((Entry) null);
      filteredEntryGroup1.getAllFeatures();
      filteredEntryGroup1.isReadOnly();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn(0).when(entryGroup0).getSequenceLength();
      doReturn(0).when(entryGroup0).indexOf(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.createEntry();
      filteredEntryGroup0.setDefaultEntry((Entry) null);
      filteredEntryGroup0.getSequenceLength();
      filteredEntryGroup0.indexOf((Entry) null);
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, (String) null);
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = null;
      try {
        filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup1.new FeatureEnumerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Entry) null).when(entryGroup0).getDefaultEntry();
      doReturn(0).when(entryGroup0).indexOf(any(uk.ac.sanger.artemis.Entry.class));
      doReturn((EntryGroup) null).when(entryGroup0).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "nQK");
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.truncate(range0);
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "COMMENT");
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup1, featureVector1, "GFF_source:");
      filteredEntryGroup2.getDefaultEntry();
      filteredEntryGroup1.setIsActive((Entry) null, false);
      filteredEntryGroup1.createEntry();
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getAllFeaturesCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, (FeatureVector) null, "uk.ac.sanger.artemis.FilteredEntryGroup$2");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "uk.ac.sanger.artemis.FilteredEntryGroup$2");
      filteredEntryGroup1.getActionController();
      filteredEntryGroup1.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      // Undeclared exception!
      try { 
        filteredEntryGroup1.filterFeatures((FeatureVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureVector0).toString();
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "");
      filteredEntryGroup1.getAllFeatures();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      FilteredEntryGroup filteredEntryGroup0 = null;
      try {
        filteredEntryGroup0 = new FilteredEntryGroup((EntryGroup) null, featureVector0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "jI>KY#\"wA/r");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureVector0).toString();
      doReturn((Feature) null).when(featureVector0).elementAt(anyInt());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "jI>KY#\"wA/r");
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getFeaturesInIndexRange(0, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "uk.ac.sanger.artemis.FilteredEntryGroup$2");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureVector0).toString();
      doReturn((Feature) null).when(featureVector0).elementAt(anyInt());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$2");
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(featureVector1).size();
      filteredEntryGroup1.filterFeatures(featureVector1);
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getFeaturesInIndexRange(0, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry(anyString());
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn((EntryGroup) null).when(entryGroup0).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.truncate(range0);
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "M-Z-8WF.[]Nb_g\"=TjD");
      filteredEntryGroup1.elementAt(0);
      filteredEntryGroup0.add((Entry) null);
      filteredEntryGroup1.createEntry("+T.b_0AJcIgvv`|a");
      filteredEntryGroup1.removeEntryChangeListener(filteredEntryGroup0);
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup1, featurePredicate1, "");
      filteredEntryGroup2.isReadOnly();
      filteredEntryGroup2.entryGroupChanged((EntryGroupChangeEvent) null);
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup2.featureChanged(featureChangeEvent0);
      // Undeclared exception!
      try { 
        filteredEntryGroup2.getFeaturesInIndexRange(2513, 2513);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn(0).when(entryGroup0).getSequenceLength();
      doReturn(false).when(entryGroup0).hasUnsavedChanges();
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "]o!<*YC~ZU[");
      filteredEntryGroup0.getSequenceLength();
      filteredEntryGroup0.hasUnsavedChanges();
      filteredEntryGroup0.createEntry();
      filteredEntryGroup0.remove((Entry) null);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((FeatureEnumeration) null).when(entryGroup0).features();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn(0).when(entryGroup0).refCount();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, " is not a valid ");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "*}UTavn)L>k");
      filteredEntryGroup1.getActionController();
      filteredEntryGroup0.removeEntryChangeListener((EntryChangeListener) null);
      filteredEntryGroup1.addFeatureChangeListener(filteredEntryGroup0);
      filteredEntryGroup1.addEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup1.refCount();
      filteredEntryGroup1.isReadOnly();
      // Undeclared exception!
      try { 
        filteredEntryGroup0.featureAt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn(0).when(entryGroup0).getSequenceLength();
      doReturn(0).when(entryGroup0).size();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "]o!<*YC~ZU[");
      filteredEntryGroup0.getSequenceLength();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "]o!<*YC~ZU[");
      filteredEntryGroup1.ref();
      filteredEntryGroup1.getActionController();
      filteredEntryGroup1.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      filteredEntryGroup1.createEntry();
      filteredEntryGroup1.size();
      // Undeclared exception!
      try { 
        filteredEntryGroup1.features();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "l:h\"U;(`[i,U\"lCwi");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator");
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(featureVector1).size();
      filteredEntryGroup1.filterFeatures(featureVector1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry(anyString());
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "pc6u%dzz+8tTl8E");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "pc6u%dzz+8tTl8E");
      filteredEntryGroup1.createEntry("pc6u%dzz+8tTl8E");
      filteredEntryGroup1.add((Entry) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn(0).when(entryGroup0).size();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "O6_CK8{bnMd");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "");
      filteredEntryGroup1.reverseComplement();
      filteredEntryGroup1.setDefaultEntry((Entry) null);
      filteredEntryGroup0.size();
      filteredEntryGroup0.getActiveEntries();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn(false).when(entryGroup0).isActive(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "RG8B&0=j8n'1");
      filteredEntryGroup0.elementAt(826);
      filteredEntryGroup1.isActive((Entry) null);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((FeatureVector) null).when(entryGroup0).getFeaturesInRange(any(uk.ac.sanger.artemis.io.Range.class));
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "yaNwaX=1OG3[T4H");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate1, "W");
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getFeaturesInRange(range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = null;
      try {
        filteredEntryGroup0 = new FilteredEntryGroup((EntryGroup) null, featurePredicate0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((FeatureEnumeration) null).when(entryGroup0).features();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      String string0 = "wO";
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "wO");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "wO");
      filteredEntryGroup1.createEntry();
      // Undeclared exception!
      try { 
        filteredEntryGroup0.filterFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((FeatureVector) null).when(entryGroup0).getFeaturesInRange(any(uk.ac.sanger.artemis.io.Range.class));
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "fXCNX:");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "fXCNX:");
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getFeaturesInRange(range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "uk.ac.sanger.artemis.FilteredEntryGroup");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "cannot recognise format of binary file");
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup0.entryChanged(entryChangeEvent0);
      filteredEntryGroup1.createFeature();
      filteredEntryGroup0.getFilterName();
      filteredEntryGroup1.getActionController();
      filteredEntryGroup0.addEntryGroupChangeListener((EntryGroupChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "");
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "");
      filteredEntryGroup1.elementAt(1519);
      filteredEntryGroup1.remove((Entry) null);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "internal error - created a null Document", "internal error - created a null Document", "").when(entryGroup0).toString();
      doReturn((Entry) null, (Entry) null, (Entry) null).when(entryGroup0).createEntry(anyString());
      doReturn(entryVector0, (EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Entry) null).when(entryGroup0).getSequenceEntry();
      doReturn(0, 0).when(entryGroup0).getSequenceLength();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn(false).when(entryGroup0).removeElement(any(uk.ac.sanger.artemis.Entry.class));
      doReturn(0).when(entryGroup0).size();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureVector0).toString();
      doReturn((Feature) null).when(featureVector0).elementAt(anyInt());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "jFcM<#>@e8b({|?");
      assertNotNull(filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featurePredicate0).toString();
      doReturn(false).when(featurePredicate0).testPredicate(any(uk.ac.sanger.artemis.Feature.class));
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "jFcM<#>@e8b({|?");
      assertNotNull(filteredEntryGroup1);
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      FeatureVector featureVector1 = filteredEntryGroup1.filterFeatures();
      assertNotNull(featureVector1);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertFalse(featureVector1.equals((Object)featureVector0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      Entry entry0 = filteredEntryGroup1.createEntry("jFcM<#>@e8b({|?");
      assertNull(entry0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      int int0 = filteredEntryGroup1.size();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, int0);
      
      filteredEntryGroup1.unref();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      filteredEntryGroup0.add((Entry) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      
      Entry entry1 = filteredEntryGroup0.createEntry("|?CBNUr5I");
      assertNull(entry1);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      
      filteredEntryGroup0.removeEntryChangeListener(filteredEntryGroup1);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      boolean boolean0 = filteredEntryGroup1.removeElement((Entry) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertFalse(boolean0);
      
      boolean boolean1 = filteredEntryGroup1.isReadOnly();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertFalse(boolean1);
      
      Feature feature0 = filteredEntryGroup0.featureAt(0);
      assertNull(feature0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      
      boolean boolean2 = filteredEntryGroup1.contains((Feature) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertFalse(boolean2);
      
      Entry entry2 = filteredEntryGroup1.getSequenceEntry();
      assertNull(entry2);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      filteredEntryGroup0.removeFeatureChangeListener((FeatureChangeListener) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      
      Entry entry3 = filteredEntryGroup0.createEntry("");
      assertNull(entry3);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryChanged(entryChangeEvent0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      int int1 = filteredEntryGroup1.getSequenceLength();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertTrue(int1 == int0);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, int1);
      
      int int2 = filteredEntryGroup0.getSequenceLength();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals("jFcM<#>@e8b({|?", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, int2);
      
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = null;
      try {
        filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup0.new FeatureEnumerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((Entry) null).when(entryGroup0).elementAt(anyInt());
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Bases) null).when(entryGroup0).getBases();
      doReturn(0).when(entryGroup0).getSequenceLength();
      doReturn(false).when(entryGroup0).hasUnsavedChanges();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn("h7hb.yW(", "#^c\"qoFBA@s?qG/F*").when(featureVector0).toString();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featurePredicate0).toString();
      doReturn(false).when(featurePredicate0).testPredicate(any(uk.ac.sanger.artemis.Feature.class));
      filteredEntryGroup0.addElement((Entry) null);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "                     ");
      assertNotNull(filteredEntryGroup1);
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("                     ", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      boolean boolean0 = filteredEntryGroup1.isReadOnly();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("                     ", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertFalse(boolean0);
      
      boolean boolean1 = filteredEntryGroup1.hasUnsavedChanges();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("                     ", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertFalse(boolean1);
      
      boolean boolean2 = filteredEntryGroup1.remove((Entry) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("                     ", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertFalse(boolean2);
      
      Feature feature0 = filteredEntryGroup1.createFeature();
      assertNull(feature0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("                     ", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      filteredEntryGroup0.reverseComplement();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      
      filteredEntryGroup0.ref();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      
      filteredEntryGroup1.addElement((Entry) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("                     ", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      Entry entry0 = filteredEntryGroup0.elementAt(0);
      assertNull(entry0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((Feature) null).when(featureVector1).elementAt(anyInt());
      doReturn(19, 0).when(featureVector1).size();
      FeatureVector featureVector2 = filteredEntryGroup1.filterFeatures(featureVector1);
      assertNotNull(featureVector2);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertFalse(featureVector2.equals((Object)featureVector0));
      assertFalse(featureVector2.equals((Object)featureVector1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("                     ", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      int int0 = filteredEntryGroup0.getSequenceLength();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, int0);
      
      Bases bases0 = filteredEntryGroup0.getBases();
      assertNull(bases0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      
      FeatureVector featureVector3 = filteredEntryGroup0.getAllFeatures();
      assertNotNull(featureVector3);
      assertFalse(featureVector3.equals((Object)featureVector2));
      assertFalse(featureVector3.equals((Object)featureVector1));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertSame(featureVector3, featureVector0);
      assertNotSame(featureVector3, featureVector1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryChanged(entryChangeEvent0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("                     ", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      ActionController actionController0 = filteredEntryGroup1.getActionController();
      assertNull(actionController0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("                     ", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      filteredEntryGroup1.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("                     ", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      EntryVector entryVector0 = filteredEntryGroup1.getActiveEntries();
      assertNull(entryVector0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("                     ", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      
      String string0 = filteredEntryGroup0.getFilterName();
      assertNotNull(string0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Bases) null).when(entryGroup0).getBases();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "TPRnm<7R+2:g`#'");
      assertNotNull(filteredEntryGroup0);
      assertEquals("TPRnm<7R+2:g`#'", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "TPRnm<7R+2:g`#'");
      assertNotNull(filteredEntryGroup1);
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertEquals("TPRnm<7R+2:g`#'", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("TPRnm<7R+2:g`#'", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      Feature feature0 = filteredEntryGroup1.createFeature();
      assertNull(feature0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("TPRnm<7R+2:g`#'", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("TPRnm<7R+2:g`#'", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      EntryVector entryVector0 = filteredEntryGroup0.getActiveEntries();
      assertNull(entryVector0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals("TPRnm<7R+2:g`#'", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      
      Bases bases0 = filteredEntryGroup1.getBases();
      assertNull(bases0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("TPRnm<7R+2:g`#'", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("TPRnm<7R+2:g`#'", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("TPRnm<7R+2:g`#'", "TPRnm<7R+2:g`#'", "TPRnm<7R+2:g`#'", (String) null, "If\"gU|qA,>Dh").when(entryGroup1).toString();
      doReturn((Feature) null).when(entryGroup1).createFeature();
      doReturn((Bases) null).when(entryGroup1).getBases();
      doReturn(2).when(entryGroup1).size();
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featureVector1, "'(tS+");
      assertNotNull(filteredEntryGroup2);
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertEquals(2, filteredEntryGroup2.size());
      assertEquals("'(tS+", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.refCount());
      
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      doReturn("%8ZO-n2HJrA):JFt").when(featurePredicate1).toString();
      doReturn(true).when(featurePredicate1).testPredicate(any(uk.ac.sanger.artemis.Feature.class));
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featurePredicate1, "<}vkB HM?:LJ");
      assertNotNull(filteredEntryGroup3);
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertFalse(filteredEntryGroup3.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup3.equals((Object)filteredEntryGroup0));
      assertFalse(filteredEntryGroup3.equals((Object)filteredEntryGroup1));
      assertEquals(2, filteredEntryGroup2.size());
      assertEquals("'(tS+", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.refCount());
      assertEquals("<}vkB HM?:LJ", filteredEntryGroup3.getFilterName());
      assertEquals(0, filteredEntryGroup3.refCount());
      assertEquals(2, filteredEntryGroup3.size());
      
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.featureChanged(featureChangeEvent0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup3));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup3));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup3);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup3);
      assertEquals("TPRnm<7R+2:g`#'", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("TPRnm<7R+2:g`#'", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      Bases bases1 = filteredEntryGroup3.getBases();
      assertNull(bases1);
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup3));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertFalse(filteredEntryGroup3.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup3.equals((Object)filteredEntryGroup0));
      assertFalse(filteredEntryGroup3.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup2, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup3);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup0);
      assertNotSame(filteredEntryGroup3, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup3, filteredEntryGroup0);
      assertNotSame(filteredEntryGroup3, filteredEntryGroup1);
      assertEquals(2, filteredEntryGroup2.size());
      assertEquals("'(tS+", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.refCount());
      assertEquals("<}vkB HM?:LJ", filteredEntryGroup3.getFilterName());
      assertEquals(0, filteredEntryGroup3.refCount());
      assertEquals(2, filteredEntryGroup3.size());
      
      int int0 = filteredEntryGroup2.size();
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup3));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup2, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup3);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup0);
      assertEquals(2, filteredEntryGroup2.size());
      assertEquals("'(tS+", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.refCount());
      assertEquals(2, int0);
      
      Feature feature1 = filteredEntryGroup3.createFeature();
      assertNull(feature1);
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup3));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertFalse(filteredEntryGroup3.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup3.equals((Object)filteredEntryGroup0));
      assertFalse(filteredEntryGroup3.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup2, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup3);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup0);
      assertNotSame(filteredEntryGroup3, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup3, filteredEntryGroup0);
      assertNotSame(filteredEntryGroup3, filteredEntryGroup1);
      assertEquals(2, filteredEntryGroup2.size());
      assertEquals("'(tS+", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.refCount());
      assertEquals("<}vkB HM?:LJ", filteredEntryGroup3.getFilterName());
      assertEquals(0, filteredEntryGroup3.refCount());
      assertEquals(2, filteredEntryGroup3.size());
      
      // Undeclared exception!
      try { 
        filteredEntryGroup3.contains((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((ActionController) null).when(entryGroup0).getActionController();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn(0).when(entryGroup0).indexOf(any(uk.ac.sanger.artemis.Entry.class));
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "9&]m~");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureVector0).toString();
      doReturn(0).when(featureVector0).size();
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator");
      assertNotNull(filteredEntryGroup1);
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      filteredEntryGroup1.reverseComplement();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      ActionController actionController0 = filteredEntryGroup1.getActionController();
      assertNull(actionController0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      filteredEntryGroup1.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      EntryChangeEvent entryChangeEvent0 = mock(EntryChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryChanged(entryChangeEvent0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      filteredEntryGroup1.removeEntryChangeListener(filteredEntryGroup0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      int int0 = filteredEntryGroup1.getAllFeaturesCount();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, int0);
      
      filteredEntryGroup1.removeEntryGroupChangeListener((EntryGroupChangeListener) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      filteredEntryGroup1.setIsActive(0, false);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryGroupChanged(entryGroupChangeEvent0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      Entry entry0 = filteredEntryGroup1.createEntry();
      assertNull(entry0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      filteredEntryGroup1.setIsActive((Entry) null, true);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("9&]m~", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      
      // Undeclared exception!
      try { 
        filteredEntryGroup1.getFeaturesInIndexRange(1983, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entryVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("uk.ac.sanger.artemis.FilteredEntryGroup$3", "4R=~E?ttJ;zA", "4R=~E?ttJ;zA", "at,E}#J", "").when(entryGroup0).toString();
      doReturn(entryVector0).when(entryGroup0).getActiveEntries();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, (String) null);
      assertNotNull(filteredEntryGroup0);
      assertNull(filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      
      filteredEntryGroup0.ref();
      assertNull(filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      
      int int0 = 9962;
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup0.new FeatureEnumerator();
      assertNotNull(filteredEntryGroup_FeatureEnumerator0);
      assertNull(filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      
      boolean boolean0 = filteredEntryGroup_FeatureEnumerator0.hasMoreFeatures();
      assertNull(filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(boolean0);
      
      try { 
        filteredEntryGroup_FeatureEnumerator0.nextFeature();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      doReturn((Bases) null).when(entryGroup0).getBases();
      doReturn((Entry) null).when(entryGroup0).getDefaultEntry();
      doReturn(false).when(entryGroup0).isReadOnly();
      doReturn(false).when(entryGroup0).removeElement(any(uk.ac.sanger.artemis.Entry.class));
      doReturn((EntryGroup) null, (EntryGroup) null).when(entryGroup0).truncate(any(uk.ac.sanger.artemis.io.Range.class));
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      assertNotNull(filteredEntryGroup0);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "");
      assertNotNull(filteredEntryGroup1);
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      
      filteredEntryGroup1.addFeatureChangeListener(filteredEntryGroup0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      EntryGroup entryGroup1 = filteredEntryGroup1.truncate(range0);
      assertNull(entryGroup1);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      EntryGroup entryGroup2 = filteredEntryGroup0.truncate(range1);
      assertNull(entryGroup2);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      EntryGroupChangeEvent entryGroupChangeEvent0 = mock(EntryGroupChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.entryGroupChanged(entryGroupChangeEvent0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate1, "uk.ac.sanger.artemis.FilteredEntryGroup");
      assertNotNull(filteredEntryGroup2);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.refCount());
      assertEquals(0, filteredEntryGroup2.size());
      
      filteredEntryGroup2.addFeatureChangeListener(filteredEntryGroup1);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup0);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.refCount());
      assertEquals(0, filteredEntryGroup2.size());
      
      Entry entry0 = filteredEntryGroup2.getDefaultEntry();
      assertNull(entry0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup0);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.refCount());
      assertEquals(0, filteredEntryGroup2.size());
      
      boolean boolean0 = filteredEntryGroup0.removeElement((Entry) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup2));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup2);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(boolean0);
      
      filteredEntryGroup1.setIsActive(113, false);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup2));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup2);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      
      boolean boolean1 = filteredEntryGroup0.isReadOnly();
      assertTrue(boolean1 == boolean0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup2));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup2);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(boolean1);
      
      Bases bases0 = filteredEntryGroup2.getBases();
      assertNull(bases0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup0);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.refCount());
      assertEquals(0, filteredEntryGroup2.size());
      
      filteredEntryGroup2.addElement((Entry) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup0);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.refCount());
      assertEquals(0, filteredEntryGroup2.size());
      
      filteredEntryGroup1.addFeatureChangeListener((FeatureChangeListener) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup2));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup2);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      
      filteredEntryGroup2.setIsActive((-5), false);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup2));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup2);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup2, filteredEntryGroup0);
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("uk.ac.sanger.artemis.FilteredEntryGroup", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.refCount());
      assertEquals(0, filteredEntryGroup2.size());
      
      FilteredEntryGroup.FeatureEnumerator filteredEntryGroup_FeatureEnumerator0 = null;
      try {
        filteredEntryGroup_FeatureEnumerator0 = filteredEntryGroup1.new FeatureEnumerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((Entry) null).when(entryGroup0).createEntry();
      doReturn((Entry) null).when(entryGroup0).getDefaultEntry();
      doReturn(0).when(entryGroup0).refCount();
      doReturn(false).when(entryGroup0).remove(any(uk.ac.sanger.artemis.Entry.class));
      doReturn(false).when(entryGroup0).removeElement(any(uk.ac.sanger.artemis.Entry.class));
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureVector0).toString();
      doReturn((Feature) null).when(featureVector0).elementAt(anyInt());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "");
      assertNotNull(filteredEntryGroup1);
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      
      FeatureChangeEvent featureChangeEvent0 = mock(FeatureChangeEvent.class, new ViolatedAssumptionAnswer());
      filteredEntryGroup1.featureChanged(featureChangeEvent0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNull(entry0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      
      filteredEntryGroup1.setDefaultEntry((Entry) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      
      filteredEntryGroup1.reverseComplement();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      
      Entry entry1 = filteredEntryGroup1.getDefaultEntry();
      assertNull(entry1);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      
      boolean boolean0 = filteredEntryGroup0.remove((Entry) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertFalse(boolean0);
      
      Feature feature0 = filteredEntryGroup1.featureAt((-3250));
      assertNull(feature0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      
      filteredEntryGroup0.ref();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      
      int int0 = filteredEntryGroup0.refCount();
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, int0);
      
      boolean boolean1 = filteredEntryGroup1.removeElement((Entry) null);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals("", filteredEntryGroup1.getFilterName());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        filteredEntryGroup1.contains((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn("", "atg", "atg", "", "").when(entryGroup0).toString();
      doReturn((Feature) null).when(entryGroup0).createFeature();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featurePredicate0, "jI>KY#\"wA/r");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jI>KY#\"wA/r", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate1, "atg");
      assertNotNull(filteredEntryGroup1);
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jI>KY#\"wA/r", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("atg", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      
      Feature feature0 = filteredEntryGroup1.createFeature();
      assertNull(feature0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertNotSame(filteredEntryGroup0, filteredEntryGroup1);
      assertNotSame(filteredEntryGroup1, filteredEntryGroup0);
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jI>KY#\"wA/r", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("atg", filteredEntryGroup1.getFilterName());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals(0, filteredEntryGroup1.refCount());
      
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn("jI>KY#\"wA/r").when(featureVector0).toString();
      doReturn((Feature) null).when(featureVector0).elementAt(anyInt());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(filteredEntryGroup0, featureVector0, "jI>KY#\"wA/r");
      assertNotNull(filteredEntryGroup2);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup0));
      assertFalse(filteredEntryGroup2.equals((Object)filteredEntryGroup1));
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("jI>KY#\"wA/r", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup2.refCount());
      assertEquals("jI>KY#\"wA/r", filteredEntryGroup2.getFilterName());
      assertEquals(0, filteredEntryGroup2.size());
      
      // Undeclared exception!
      try { 
        filteredEntryGroup2.getFeaturesInIndexRange(0, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      EntryVector entryVector0 = mock(EntryVector.class, new ViolatedAssumptionAnswer());
      doReturn((Entry) null).when(entryVector0).elementAt(anyInt());
      doReturn(1464).when(entryVector0).size();
      EntryGroup entryGroup0 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(entryGroup0).toString();
      doReturn((EntryVector) null).when(entryGroup0).getActiveEntries();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "FH");
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featurePredicate0, "v4H3qn/2o/mQ");
      filteredEntryGroup1.getActiveEntries();
      EntryGroup entryGroup1 = mock(EntryGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, "FH", (String) null, "v4H3qn/2o/mQ").when(entryGroup1).toString();
      doReturn(entryVector0).when(entryGroup1).getActiveEntries();
      doReturn(true).when(entryGroup1).hasUnsavedChanges();
      FeatureVector featureVector1 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup2 = new FilteredEntryGroup(entryGroup1, featureVector1, "mrh>p");
      FeaturePredicate featurePredicate1 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup3 = new FilteredEntryGroup(filteredEntryGroup2, featurePredicate1, "mrh>p");
      FeatureVector featureVector2 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      FeatureVector featureVector3 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(featureVector3).size();
      filteredEntryGroup3.hasUnsavedChanges();
      filteredEntryGroup3.filterFeatures(featureVector3);
      FilteredEntryGroup filteredEntryGroup4 = new FilteredEntryGroup(filteredEntryGroup3, featureVector2, "");
      // Undeclared exception!
      try { 
        filteredEntryGroup2.features();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup$FeatureEnumerator", e);
      }
  }
}
