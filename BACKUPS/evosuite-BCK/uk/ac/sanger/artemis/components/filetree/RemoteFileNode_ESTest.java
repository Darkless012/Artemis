/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:47:29 GMT 2018
 */

package uk.ac.sanger.artemis.components.filetree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sshtools.sftp.SftpFileAttributes;
import java.awt.HeadlessException;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import javax.swing.JProgressBar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.filetree.FileList;
import uk.ac.sanger.artemis.components.filetree.RemoteFileNode;
import uk.ac.sanger.artemis.j2ssh.FTProgress;
import uk.ac.sanger.artemis.j2ssh.SshFileManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemoteFileNode_ESTest extends RemoteFileNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("", "", (FileList) null, "(\"z/ie$e", true);
      boolean boolean0 = remoteFileNode0.isLeaf();
      assertEquals("", remoteFileNode0.getRootDir());
      assertFalse(remoteFileNode0.isExplored());
      assertFalse(boolean0);
      assertEquals("/(\"z/ie$e", remoteFileNode0.getPathName());
      assertEquals("(\"z/ie$e/", remoteFileNode0.getFullName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      boolean boolean0 = remoteFileNode0.isDirectory();
      assertFalse(remoteFileNode0.isExplored());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      DataFlavor dataFlavor0 = DataFlavor.javaFileListFlavor;
      boolean boolean0 = remoteFileNode0.isDataFlavorSupported(dataFlavor0);
      assertFalse(boolean0);
      assertFalse(remoteFileNode0.isExplored());
      assertTrue(remoteFileNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("Wcv qVmEJj*nP^", "Wcv qVmEJj*nP^", (FileList) null, "Wcv qVmEJj*nP^", true);
      String string0 = remoteFileNode0.getPathName();
      assertFalse(remoteFileNode0.isExplored());
      assertEquals("Wcv qVmEJj*nP^/Wcv qVmEJj*nP^", string0);
      assertTrue(remoteFileNode0.getAllowsChildren());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("Wcv qVmEJj*nP^", "Wcv qVmEJj*nP^", (FileList) null, "Wcv qVmEJj*nP^", true);
      remoteFileNode0.getFullName();
      assertEquals("Wcv qVmEJj*nP^/Wcv qVmEJj*nP^", remoteFileNode0.getPathName());
      assertFalse(remoteFileNode0.isLeaf());
      assertFalse(remoteFileNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("Wcv qVmEJj*nP^", "Wcv qVmEJj*nP^", (FileList) null, "Wcv qVmEJj*nP^", true);
      remoteFileNode0.getFile();
      assertFalse(remoteFileNode0.isExplored());
      assertTrue(remoteFileNode0.isDirectory());
      assertEquals("Wcv qVmEJj*nP^/Wcv qVmEJj*nP^", remoteFileNode0.getPathName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("", "", (FileList) null, "", true);
      remoteFileNode0.getFile();
      assertEquals("/", remoteFileNode0.getPathName());
      assertFalse(remoteFileNode0.isExplored());
      assertTrue(remoteFileNode0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      boolean boolean0 = remoteFileNode0.getAllowsChildren();
      assertTrue(boolean0);
      assertFalse(remoteFileNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      MockFile mockFile0 = new MockFile("");
      JProgressBar jProgressBar0 = new JProgressBar();
      FTProgress fTProgress0 = new FTProgress(jProgressBar0, "");
      // Undeclared exception!
      try { 
        remoteFileNode0.put("", (File) mockFile0, fTProgress0, true);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("Wcv qVmEJj*nP^", "Wcv qVmEJj*nP^", (FileList) null, "Wcv qVmEJj*nP^", true);
      // Undeclared exception!
      try { 
        remoteFileNode0.isDataFlavorSupported((DataFlavor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.RemoteFileNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      // Undeclared exception!
      try { 
        remoteFileNode0.getTransferData((DataFlavor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.RemoteFileNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      // Undeclared exception!
      try { 
        remoteFileNode0.getServerName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      DataFlavor dataFlavor0 = new DataFlavor();
      try { 
        remoteFileNode0.getTransferData(dataFlavor0);
        fail("Expecting exception: UnsupportedFlavorException");
      
      } catch(UnsupportedFlavorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.RemoteFileNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      remoteFileNode0.getFullName();
      assertFalse(remoteFileNode0.isExplored());
      assertFalse(remoteFileNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      remoteFileNode0.getRootDir();
      assertTrue(remoteFileNode0.isLeaf());
      assertFalse(remoteFileNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      boolean boolean0 = remoteFileNode0.isDirectory();
      assertFalse(remoteFileNode0.isExplored());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = null;
      try {
        remoteFileNode0 = new RemoteFileNode("YP", "YP", (FileList) null, "[E9;eTz0VoJ'@s", (SftpFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.RemoteFileNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      RemoteFileNode remoteFileNode1 = (RemoteFileNode)remoteFileNode0.getTransferData(remoteFileNode0.REMOTEFILENODE);
      assertTrue(remoteFileNode1.isDirectory());
      assertFalse(remoteFileNode1.isExplored());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("", "", (FileList) null, "", true);
      DataFlavor dataFlavor0 = DataFlavor.stringFlavor;
      boolean boolean0 = remoteFileNode0.isDataFlavorSupported(dataFlavor0);
      assertFalse(remoteFileNode0.isExplored());
      assertEquals("/", remoteFileNode0.getPathName());
      assertTrue(remoteFileNode0.isDirectory());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      boolean boolean0 = remoteFileNode0.isDataFlavorSupported(remoteFileNode0.REMOTEFILENODE);
      assertFalse(remoteFileNode0.isExplored());
      assertTrue(boolean0);
      assertTrue(remoteFileNode0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      MockFile mockFile0 = new MockFile((File) null, "eY ;T%q7vy$a");
      // Undeclared exception!
      try { 
        remoteFileNode0.put((File) mockFile0, (FTProgress) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      Object[] objectArray0 = remoteFileNode0.getChildren();
      assertNotNull(objectArray0);
      assertFalse(remoteFileNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      Object[] objectArray0 = remoteFileNode0.getChildren();
      assertNull(objectArray0);
      assertFalse(remoteFileNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("", "", (FileList) null, "", true);
      // Undeclared exception!
      try { 
        remoteFileNode0.getChildren();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("Wcv qVmEJj*nP^", "Wcv qVmEJj*nP^", (FileList) null, "Wcv qVmEJj*nP^", true);
      String string0 = remoteFileNode0.getServerName();
      assertFalse(remoteFileNode0.isExplored());
      assertEquals("Wcv qVmEJj*nP^/Wcv qVmEJj*nP^/Wcv qVmEJj*nP^", string0);
      assertTrue(remoteFileNode0.getAllowsChildren());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("", "", (FileList) null, "", true);
      DataFlavor dataFlavor0 = DataFlavor.stringFlavor;
      dataFlavor0.getReaderForText(remoteFileNode0);
      assertEquals("/", remoteFileNode0.getPathName());
      assertFalse(remoteFileNode0.isExplored());
      assertTrue(remoteFileNode0.getAllowsChildren());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      boolean boolean0 = remoteFileNode0.isLeaf();
      assertTrue(boolean0);
      assertFalse(remoteFileNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("; }} qDhR~u@n<", "~/", (FileList) null, "~/", true);
      String string0 = remoteFileNode0.getRootDir();
      assertEquals("~//~/", remoteFileNode0.getFullName());
      assertFalse(remoteFileNode0.isExplored());
      assertEquals("; }} qDhR~u@n</~/", remoteFileNode0.getPathName());
      assertTrue(remoteFileNode0.getAllowsChildren());
      assertEquals("; }} qDhR~u@n<", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileList fileList0 = new FileList((SshFileManager) null);
      RemoteFileNode remoteFileNode0 = null;
      try {
        remoteFileNode0 = new RemoteFileNode("~/", "U", fileList0, "org.bouncycastle.jcajce.provider.symmetric.Skipjack/.", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.FileList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode((String) null, (String) null, (FileList) null, (String) null, true);
      assertFalse(remoteFileNode0.isLeaf());
      assertFalse(remoteFileNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      boolean boolean0 = remoteFileNode0.isExplored();
      assertFalse(boolean0);
      assertTrue(remoteFileNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      remoteFileNode0.length();
      assertFalse(remoteFileNode0.isExplored());
      assertFalse(remoteFileNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("Wcv qVmEJj*nP^", "Wcv qVmEJj*nP^", (FileList) null, "Wcv qVmEJj*nP^", true);
      FTProgress fTProgress0 = new FTProgress((JProgressBar) null, "Wcv qVmEJj*nP^");
      // Undeclared exception!
      try { 
        remoteFileNode0.getFileContents(fTProgress0, "Wcv qVmEJj*nP^");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      // Undeclared exception!
      try { 
        remoteFileNode0.delete();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      // Undeclared exception!
      try { 
        remoteFileNode0.mkdir((String) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      FTProgress fTProgress0 = new FTProgress((JProgressBar) null, (String) null);
      // Undeclared exception!
      try { 
        remoteFileNode0.put((File) null, fTProgress0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      boolean boolean0 = remoteFileNode0.getAllowsChildren();
      assertFalse(boolean0);
      assertFalse(remoteFileNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      remoteFileNode0.getTransferDataFlavors();
      assertTrue(remoteFileNode0.isDirectory());
      assertFalse(remoteFileNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      remoteFileNode0.reset();
      assertFalse(remoteFileNode0.isDirectory());
      assertFalse(remoteFileNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      remoteFileNode0.getPathName();
      assertFalse(remoteFileNode0.isExplored());
      assertFalse(remoteFileNode0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      // Undeclared exception!
      try { 
        remoteFileNode0.getFileContents((FTProgress) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      remoteFileNode0.getParentNode();
      assertFalse(remoteFileNode0.isExplored());
      assertTrue(remoteFileNode0.getAllowsChildren());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      // Undeclared exception!
      try { 
        remoteFileNode0.rename("Remote file");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      remoteFileNode0.getModifiedTime();
      assertTrue(remoteFileNode0.isLeaf());
      assertFalse(remoteFileNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      remoteFileNode0.setParentNode((RemoteFileNode) null);
      assertFalse(remoteFileNode0.isExplored());
      assertTrue(remoteFileNode0.getAllowsChildren());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode("", "", (FileList) null, "", true);
      // Undeclared exception!
      try { 
        remoteFileNode0.stat();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      remoteFileNode0.getFile();
      assertFalse(remoteFileNode0.isExplored());
      assertTrue(remoteFileNode0.isLeaf());
  }
}
