/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:10:25 GMT 2018
 */

package uk.ac.sanger.artemis.components.genebuilder.ortholog;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Stack;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPasswordField;
import javax.swing.JTable;
import javax.swing.TransferHandler;
import javax.swing.event.UndoableEditEvent;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.undo.CompoundEdit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.components.SelectionViewer;
import uk.ac.sanger.artemis.components.genebuilder.ortholog.AbstractMatchTable;
import uk.ac.sanger.artemis.components.genebuilder.ortholog.OrthoParalogTable;
import uk.ac.sanger.artemis.components.genebuilder.ortholog.SimilarityTable;
import uk.ac.sanger.artemis.io.BlastDocumentEntry;
import uk.ac.sanger.artemis.io.DatabaseStreamFeature;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.Feature;
import uk.ac.sanger.artemis.io.GFFEntryInformation;
import uk.ac.sanger.artemis.io.GFFStreamFeature;
import uk.ac.sanger.artemis.io.GenbankDocumentEntry;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.MSPcrunchStreamFeature;
import uk.ac.sanger.artemis.io.Qualifier;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RangeVector;
import uk.ac.sanger.artemis.plot.CoilFeatureAlgorithm;
import uk.ac.sanger.artemis.util.ByteBuffer;
import uk.ac.sanger.artemis.util.DatabaseDocument;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractMatchTable_ESTest extends AbstractMatchTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringVector stringVector0 = StringVector.getStrings("w", "w");
      Qualifier qualifier0 = mock(Qualifier.class, new ViolatedAssumptionAnswer());
      doReturn(stringVector0).when(qualifier0).getValues();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      SimilarityTable similarityTable0 = new SimilarityTable(qualifier0, databaseDocument0);
      JCheckBox jCheckBox0 = mock(JCheckBox.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument1 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        similarityTable0.openArtemis(databaseDocument1, (-833));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringVector stringVector0 = StringVector.getStrings("GBSeq_contig");
      Qualifier qualifier0 = new Qualifier("GBSeq_contig", stringVector0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      stringVector0.add("GBSeq_contig");
      qualifier0.copy();
      stringVector0.addAll(0, (Collection<? extends String>) linkedList0);
      SimilarityTable similarityTable0 = new SimilarityTable(qualifier0, (DatabaseDocument) null);
      similarityTable0.getOtherValues(qualifier0);
      AbstractMatchTable.TableTransferHandler abstractMatchTable_TableTransferHandler0 = similarityTable0.new TableTransferHandler();
      JCheckBox jCheckBox0 = new JCheckBox("GBSeq_contig", true);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stringVector0, 84);
      AbstractMatchTable.LinkEditor abstractMatchTable_LinkEditor0 = similarityTable0.new LinkEditor(jCheckBox0, defaultTableModel0, (DatabaseDocument) null);
      CompoundEdit compoundEdit0 = new CompoundEdit();
      UndoableEditEvent undoableEditEvent0 = new UndoableEditEvent("GBSeq_contig", compoundEdit0);
      abstractMatchTable_LinkEditor0.isCellEditable(undoableEditEvent0);
      abstractMatchTable_LinkEditor0.fireEditingStopped();
      similarityTable0.isRowOfType("GBSeq_contig", 84);
      similarityTable0.getInfoLevelButton();
      MSPcrunchStreamFeature mSPcrunchStreamFeature0 = null;
      try {
        mSPcrunchStreamFeature0 = new MSPcrunchStreamFeature((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.MSPcrunchStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Qualifier qualifier0 = new Qualifier("", "+Y?h*wVT;KqPD4K/%Y3");
      JPasswordField jPasswordField0 = new JPasswordField("+Y?h*wVT;KqPD4K/%Y3", 68);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "]", (String) null, true);
      DatabaseDocument databaseDocument1 = databaseDocument0.createDatabaseDocument();
      SimilarityTable similarityTable0 = new SimilarityTable(qualifier0, databaseDocument1);
      AbstractMatchTable.TableTransferHandler abstractMatchTable_TableTransferHandler0 = similarityTable0.new TableTransferHandler();
      TransferHandler.getCutAction();
      Clipboard clipboard0 = new Clipboard("){uqm,=W@%Dg{*rioh");
      Selection selection0 = new Selection(clipboard0);
      abstractMatchTable_TableTransferHandler0.getVisualRepresentation(selection0);
      JCheckBox jCheckBox0 = new JCheckBox("iK~j2mNn<h15z", (Icon) null);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      AbstractMatchTable.LinkEditor abstractMatchTable_LinkEditor0 = similarityTable0.new LinkEditor(jCheckBox0, defaultTableModel0, databaseDocument0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      abstractMatchTable_LinkEditor0.removeCellEditorListener(jTable0);
      abstractMatchTable_LinkEditor0.getCellEditorValue();
      abstractMatchTable_TableTransferHandler0.getSourceActions(jCheckBox0);
      String string0 = "";
      StringVector stringVector0 = SelectionViewer.getBaseSummary("){uqm,=W@%Dg{*rioh");
      stringVector0.add("");
      // Undeclared exception!
      try { 
        OrthoParalogTable.containsStringInStringVector("", stringVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Qualifier qualifier0 = new Qualifier("uk.ac.sanger.artemis.plot.BaseAlgorithm", "]|hWk%F4");
      JPasswordField jPasswordField0 = new JPasswordField("uk.ac.sanger.artemis.components.genebuilder.ortholog.AbstractMatchTable$LinkEditor$1", 267);
      ByteBuffer byteBuffer0 = new ByteBuffer();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("]|hWk%F4", jPasswordField0, "]|hWk%F4", "]|hWk%F4", byteBuffer0, "uk.ac.sanger.artemis.plot.BaseAlgorithm");
      SimilarityTable similarityTable0 = new SimilarityTable(qualifier0, databaseDocument0);
      JCheckBox jCheckBox0 = new JCheckBox("Gene", false);
      Stack<Integer> stack0 = new Stack<Integer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 1230);
      DatabaseDocument databaseDocument1 = new DatabaseDocument("]|hWk%F4", jPasswordField0, "uk.ac.sanger.artemis.components.genebuilder.ortholog.AbstractMatchTable$LinkEditor$1", "CC_", false);
      AbstractMatchTable.ButtonEditor abstractMatchTable_ButtonEditor0 = similarityTable0.new ButtonEditor(jCheckBox0, defaultTableModel0, "uk.ac.sanger.artemis.components.genebuilder.ortholog.AbstractMatchTable$LinkEditor$1", databaseDocument1);
      JTable jTable0 = similarityTable0.getTable();
      abstractMatchTable_ButtonEditor0.getTableCellEditorComponent(jTable0, "]|hWk%F4", false, 7, 267);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "l5mcY8C";
      String string1 = AbstractMatchTable.getField("DXrx(hLbC", "l5mcY8C");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Qualifier qualifier0 = null;
      Range range0 = new Range((-2395), (-2395));
      assertEquals((-2395), range0.getStart());
      assertEquals((-2395), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertNotNull(range0);
      
      RangeVector rangeVector0 = new RangeVector(range0);
      assertEquals((-2395), range0.getStart());
      assertEquals((-2395), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals("[-2395]", rangeVector0.toString());
      assertEquals(1, rangeVector0.size());
      assertEquals(10, rangeVector0.capacity());
      assertFalse(rangeVector0.isEmpty());
      assertNotNull(rangeVector0);
      
      Location location0 = new Location(rangeVector0, true);
      assertEquals((-2395), range0.getStart());
      assertEquals((-2395), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals("[-2395]", rangeVector0.toString());
      assertEquals(1, rangeVector0.size());
      assertEquals(10, rangeVector0.capacity());
      assertFalse(rangeVector0.isEmpty());
      assertNotNull(location0);
      
      QualifierVector qualifierVector0 = new QualifierVector();
      assertEquals(0, qualifierVector0.size());
      assertEquals(7, qualifierVector0.capacity());
      assertEquals("[]", qualifierVector0.toString());
      assertTrue(qualifierVector0.isEmpty());
      assertNotNull(qualifierVector0);
      
      DatabaseStreamFeature databaseStreamFeature0 = null;
      try {
        databaseStreamFeature0 = new DatabaseStreamFeature((Key) null, location0, qualifierVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = AbstractMatchTable.getField("dntc)}w`q2LZ_l", "dntc)}w`q2LZ_l");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Qualifier qualifier0 = new Qualifier("urn:sequence/fasta:", "urn:sequence/fasta:");
      assertEquals("urn:sequence/fasta:", qualifier0.getName());
      assertNotNull(qualifier0);
      
      SimilarityTable similarityTable0 = new SimilarityTable(qualifier0, (DatabaseDocument) null);
      assertEquals("urn:sequence/fasta:", qualifier0.getName());
      assertNotNull(similarityTable0);
      
      JTable jTable0 = similarityTable0.getTable();
      assertEquals("urn:sequence/fasta:", qualifier0.getName());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        AbstractMatchTable.getField((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ortholog.AbstractMatchTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      Qualifier qualifier0 = new Qualifier();
      assertNull(qualifier0.getName());
      assertNotNull(qualifier0);
      
      uk.ac.sanger.artemis.Feature feature0 = mock(uk.ac.sanger.artemis.Feature.class, new ViolatedAssumptionAnswer());
      OrthoParalogTable orthoParalogTable0 = null;
      try {
        orthoParalogTable0 = new OrthoParalogTable(databaseDocument0, qualifier0, qualifier0, feature0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      Qualifier qualifier0 = mock(Qualifier.class, new ViolatedAssumptionAnswer());
      doReturn((StringVector) null).when(qualifier0).getValues();
      uk.ac.sanger.artemis.Feature feature0 = mock(uk.ac.sanger.artemis.Feature.class, new ViolatedAssumptionAnswer());
      OrthoParalogTable orthoParalogTable0 = null;
      try {
        orthoParalogTable0 = new OrthoParalogTable(databaseDocument0, qualifier0, qualifier0, feature0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Qualifier qualifier0 = mock(Qualifier.class, new ViolatedAssumptionAnswer());
      GFFStreamFeature gFFStreamFeature0 = mock(GFFStreamFeature.class, new ViolatedAssumptionAnswer());
      String string0 = "sasCHdV3UjU!%>?";
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JPasswordField jPasswordField0 = null;
      try {
        jPasswordField0 = new JPasswordField(defaultStyledDocument0, "FKi~1.CX", (-28));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // columns less than zero.
         //
         verifyException("javax.swing.JTextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringVector stringVector0 = StringVector.getStrings("aD*r*,6I(E\f*8Wuy_!");
      Qualifier qualifier0 = mock(Qualifier.class, new ViolatedAssumptionAnswer());
      doReturn(stringVector0).when(qualifier0).getValues();
      DatabaseDocument databaseDocument0 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      SimilarityTable similarityTable0 = new SimilarityTable(qualifier0, databaseDocument0);
      JCheckBox jCheckBox0 = mock(JCheckBox.class, new ViolatedAssumptionAnswer());
      DefaultTableModel defaultTableModel0 = mock(DefaultTableModel.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument1 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      AbstractMatchTable.ButtonEditor abstractMatchTable_ButtonEditor0 = similarityTable0.new ButtonEditor(jCheckBox0, defaultTableModel0, "", databaseDocument1);
      abstractMatchTable_ButtonEditor0.stopCellEditing();
      abstractMatchTable_ButtonEditor0.getCellEditorListeners();
      abstractMatchTable_ButtonEditor0.getCellEditorValue();
      JCheckBox jCheckBox1 = mock(JCheckBox.class, new ViolatedAssumptionAnswer());
      DefaultTableModel defaultTableModel1 = mock(DefaultTableModel.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument2 = mock(DatabaseDocument.class, new ViolatedAssumptionAnswer());
      AbstractMatchTable.LinkEditor abstractMatchTable_LinkEditor0 = similarityTable0.new LinkEditor(jCheckBox1, defaultTableModel1, databaseDocument2);
      abstractMatchTable_LinkEditor0.fireEditingStopped();
      abstractMatchTable_LinkEditor0.fireEditingStopped();
      JButton jButton0 = similarityTable0.getInfoLevelButton();
      AbstractMatchTable.TableTransferHandler abstractMatchTable_TableTransferHandler0 = similarityTable0.new TableTransferHandler();
      // Undeclared exception!
      try { 
        abstractMatchTable_TableTransferHandler0.canImport((JComponent) jButton0, (DataFlavor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ortholog.AbstractMatchTable$StringTransferHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "PtVA0^f~BrY*qSl";
      // Undeclared exception!
      try { 
        StringVector.getStrings((String) null, ",", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.StringVector", e);
      }
  }
}
