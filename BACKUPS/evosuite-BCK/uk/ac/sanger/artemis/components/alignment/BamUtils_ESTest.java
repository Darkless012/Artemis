/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 10:58:57 GMT 2018
 */

package uk.ac.sanger.artemis.components.alignment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import htsjdk.samtools.SAMFileHeader;
import htsjdk.samtools.SAMRecord;
import htsjdk.samtools.SamReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import javax.swing.BoundedRangeModel;
import javax.swing.JProgressBar;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.components.alignment.BamUtils;
import uk.ac.sanger.artemis.components.alignment.BamView;
import uk.ac.sanger.artemis.components.alignment.CRAMReferenceSequenceFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BamUtils_ESTest extends BamUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAMRecord sAMRecord0 = new SAMRecord((SAMFileHeader) null);
      // Undeclared exception!
      try { 
        BamUtils.samRecordEqualityCheck(sAMRecord0, (SAMRecord) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.BamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = BamUtils.constructIndexFilename((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "Created local index file from remote... ");
      mockFile0.mkdirs();
      try { 
        BamUtils.createIndexFileFromScratch("Created local index file from remote... ", mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = BamUtils.isCramFile(".bam");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = BamUtils.isBamFile("9HqUN}];$2>8x-G7BbU");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/bamview_ftp_socket_timeout0.bai");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("20U{%Md}", "20U{%Md}", 35, "bamview_ftp_socket_timeout", uRLStreamHandler0);
      File file0 = BamUtils.createTempIndexFile(uRL0);
      assertEquals("bamview_ftp_socket_timeout0.bai", file0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("|h7^zI#bL`SITS~QD6", "|h7^zI#bL`SITS~QD6", 10000, ".bam", uRLStreamHandler0);
      File file0 = BamUtils.createTempIndexFile(uRL0);
      assertEquals(".bam0.bai", file0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/_Users_kp11_workspace_applications_Artemis-build-ci_Artemis_0.tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("");
      URL uRL0 = mockFile0.toURL();
      File file0 = BamUtils.createTempIndexFile(uRL0);
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        BamUtils.validateSAMFile((SamReader) null, (CRAMReferenceSequenceFile) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("htsjdk.samtools.SamFileValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        BamUtils.getFeatureLength((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.BamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        BamUtils.getCount((BamView) null, 626, 626, "MISMATCH_FILE_SEQ_DICT", true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.BamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        BamUtils.createTempIndexFile((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      // Undeclared exception!
      try { 
        BamUtils.createTempIndexFile(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        BamUtils.createTempIndexFile(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        BamUtils.createIndexFileFromScratch("2{1c9>]$~b_7_!g", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.BamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        BamUtils.countOverRange((BamView) null, "g`f]?7kt?b", (-1153), (-366), (-1153), (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.BamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        BamUtils.count((BamView) null, "Creating BAM index file from scratch: ", 0, 0, true, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.BamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JScrollPane jScrollPane0 = new JScrollPane();
      JScrollBar jScrollBar0 = jScrollPane0.createVerticalScrollBar();
      BoundedRangeModel boundedRangeModel0 = jScrollBar0.getModel();
      JProgressBar jProgressBar0 = new JProgressBar(boundedRangeModel0);
      // Undeclared exception!
      try { 
        BamUtils.calc((BamView) null, "Cannot locate a remote index file: ", 10000, true, jProgressBar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.BamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("20U{%Md}", "20U{%Md}", 35, "bamview_ftp_socket_timeout", uRLStreamHandler0);
      File file0 = BamUtils.createTempIndexFile(uRL0);
      // Undeclared exception!
      try { 
        BamUtils.createIndexFileFromScratch("20U{%Md}", file0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException: File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("htsjdk.samtools.FileInputResource$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = BamUtils.constructIndexFilename("mw");
      assertEquals("mw.crai", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = BamUtils.isBamFile((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = BamUtils.getFtpBufferSize();
      assertEquals(10485760, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BamUtils.getFtpSocketTimeout();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".cram.crai");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = BamUtils.getIndexFile(".cram");
      assertFalse(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        BamUtils.getIndexFile("ftp");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: ftp.bai
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        BamUtils.getIndexFile("http.cram");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: http.cram.crai
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      try { 
        BamUtils.getIndexFile("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Alignment file is not a known file type. The file suffix may be incorrect.
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.BamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      File file0 = MockFile.createTempFile("ftpCreated local index file from remote... ", (String) null);
      try { 
        BamUtils.createIndexFileFromScratch("ftpCreated local index file from remote... ", file0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: ftpCreated local index file from remote... 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      BamUtils.createIndexFileFromScratch("", mockFile0);
      assertEquals("", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!;&z!");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "G&k#");
      try { 
        BamUtils.getIndexFile("!;&z!/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         // An index file could not be created.
         // The BAM/CRAM file needs to be accessible, sorted and indexed.
         // Indexing and sorting can be done using samtools (http://www.htslib.org). For example: 
         // 
         // samtools sort <in.bam> -o <sorted.bam>
         // samtools index <sorted.bam>
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.BamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" D/Y", " D/Y");
      URL uRL0 = mockFile0.toURL();
      File file0 = BamUtils.createTempIndexFile(uRL0);
      assertEquals("_Users_kp11_workspace_applications_Artemis-build-ci_Artemis__D_Y__D_Y0.crai", file0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = BamUtils.constructIndexFilename("BAM VIEW FTP SOCKET TIMEOUT=");
      assertEquals("BAM VIEW FTP SOCKET TIMEOUT=.bai", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAMFileHeader sAMFileHeader0 = new SAMFileHeader();
      SAMRecord sAMRecord0 = new SAMRecord(sAMFileHeader0);
      // Undeclared exception!
      try { 
        BamUtils.samRecordEqualityCheck((SAMRecord) null, sAMRecord0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.BamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = BamUtils.samRecordEqualityCheck((SAMRecord) null, (SAMRecord) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = BamUtils.isCramFile(".bai");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BamUtils bamUtils0 = new BamUtils();
  }
}
