/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:19:53 GMT 2018
 */

package uk.ac.sanger.artemis.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.components.TransferFeaturePredicate;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.BlastStreamFeature;
import uk.ac.sanger.artemis.io.ChadoCanonicalGene;
import uk.ac.sanger.artemis.io.DatabaseInferredFeature;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RangeVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransferFeaturePredicate_ESTest extends TransferFeaturePredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SSH-2.0-SOFTWARE_VERSION_COMMENTS";
      TransferFeaturePredicate transferFeaturePredicate0 = new TransferFeaturePredicate("SSH-2.0-SOFTWARE_VERSION_COMMENTS", false, false, stringArray0);
      Key key0 = new Key("SSH-2.0-SOFTWARE_VERSION_COMMENTS");
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(key0).when(feature0).getKey();
      doReturn("SSH-2.0-SOFTWARE_VERSION_COMMENTS").when(feature0).getSystematicName();
      transferFeaturePredicate0.testPredicate(feature0);
      transferFeaturePredicate0.getGeneName();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[3];
      TransferFeaturePredicate transferFeaturePredicate0 = new TransferFeaturePredicate("", true, true, stringArray0);
      Key key0 = new Key("");
      Range range0 = new Range(3094);
      Location location0 = new Location(range0);
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(key0, location0, (QualifierVector) null);
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(blastStreamFeature0).when(feature0).getEmblFeature();
      doReturn(key0).when(feature0).getKey();
      // Undeclared exception!
      try { 
        transferFeaturePredicate0.testPredicate(feature0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.io.BlastStreamFeature cannot be cast to uk.ac.sanger.artemis.io.GFFStreamFeature
         //
         verifyException("uk.ac.sanger.artemis.components.TransferFeaturePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      TransferFeaturePredicate transferFeaturePredicate0 = new TransferFeaturePredicate("", false, false, stringArray0);
      Key key0 = new Key("");
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(key0).when(feature0).getKey();
      doReturn("").when(feature0).getSystematicName();
      transferFeaturePredicate0.testPredicate(feature0);
      transferFeaturePredicate0.getGeneName();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      TransferFeaturePredicate transferFeaturePredicate0 = new TransferFeaturePredicate("", false, false, stringArray0);
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = blastEntryInformation0.getDefaultKey();
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(key0).when(feature0).getKey();
      doReturn("G").when(feature0).getSystematicName();
      transferFeaturePredicate0.testPredicate(feature0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[8];
      TransferFeaturePredicate transferFeaturePredicate0 = new TransferFeaturePredicate("v:RRon/ox", true, true, stringArray0);
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      Feature feature0 = new Feature(emblStreamFeature0);
      transferFeaturePredicate0.testPredicate(feature0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[3];
      TransferFeaturePredicate transferFeaturePredicate0 = new TransferFeaturePredicate("", true, true, stringArray0);
      Key key0 = new Key("");
      Range range0 = new Range((-1843225120), (-1843225120));
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, false);
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location0, (QualifierVector) null, chadoCanonicalGene0);
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(databaseInferredFeature0).when(feature0).getEmblFeature();
      doReturn(key0).when(feature0).getKey();
      // Undeclared exception!
      try { 
        transferFeaturePredicate0.testPredicate(feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.ChadoCanonicalGene", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[3];
      TransferFeaturePredicate transferFeaturePredicate0 = new TransferFeaturePredicate("", false, false, stringArray0);
      String string0 = transferFeaturePredicate0.getGeneName();
      assertNull(string0);
  }
}
