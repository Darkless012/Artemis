/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 10:53:56 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sshtools.util.ByteArrayReader;
import java.awt.Color;
import java.awt.Font;
import java.awt.SystemColor;
import java.awt.datatransfer.Clipboard;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.net.URL;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import javax.swing.DebugGraphics;
import javax.swing.JPasswordField;
import javax.swing.plaf.FontUIResource;
import org.apache.log4j.Category;
import org.apache.log4j.LogManager;
import org.apache.log4j.helpers.Loader;
import org.apache.log4j.helpers.LogLog;
import org.apache.log4j.helpers.OptionConverter;
import org.apache.log4j.spi.LoggerRepository;
import org.apache.log4j.spi.RepositorySelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.postgresql.largeobject.LargeObject;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.ExternalProgramVector;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.OptionChangeListener;
import uk.ac.sanger.artemis.Options;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.components.Splash;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.EntryInformation;
import uk.ac.sanger.artemis.io.GFFDocumentEntry;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.QualifierInfoVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RangeVector;
import uk.ac.sanger.artemis.io.SimpleEntryInformation;
import uk.ac.sanger.artemis.j2ssh.SshLogin;
import uk.ac.sanger.artemis.util.DatabaseDocument;
import uk.ac.sanger.artemis.util.InputStreamProgressListener;
import uk.ac.sanger.artemis.util.LargeObjectDocument;
import uk.ac.sanger.artemis.util.StringVector;
import uk.ac.sanger.artemis.util.ZipFileDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      boolean boolean0 = options0.highlightActiveEntryFlag();
      assertFalse(boolean0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(28, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals(16, stringVector0.size());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      
      boolean boolean2 = options0.highlightActiveEntryFlag();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      String string0 = options0.getDefaultSequenceFileName();
      assertNull(string0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      ExternalProgramVector externalProgramVector0 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(28, externalProgramVector0.size());
      
      boolean boolean3 = options0.isEukaryoticMode();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      StringVector stringVector1 = options0.getOptionValues("MessageDigest.RIPEMD160");
      assertNull(stringVector1);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      int int0 = options0.getUndoLevels();
      assertEquals(20, int0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      options0.setEukaryoticMode(true);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      ExternalProgramVector externalProgramVector1 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector1);
      assertNotSame(externalProgramVector1, externalProgramVector0);
      assertFalse(externalProgramVector1.equals((Object)externalProgramVector0));
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(5, externalProgramVector1.size());
      
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      assertNotNull(entryInformation0);
      assertTrue(entryInformation0.useEMBLFormat());
      
      byte[] byteArray0 = new byte[2];
      options0.clear();
      assertFalse(options0.isUnixHost());
      assertEquals(0, options0.size());
      assertTrue(options0.isEmpty());
      
      boolean boolean4 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertEquals(2, byteArray0.length);
      
      boolean boolean5 = options0.getPropertyTruthValue("eukaryotic");
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      assertFalse(options0.isUnixHost());
      assertEquals(0, options0.size());
      assertTrue(options0.isEmpty());
      
      boolean boolean6 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6);
      
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-15);
      boolean boolean7 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-15)}, byteArray0);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7);
      assertEquals(2, byteArray0.length);
      
      StringVector stringVector2 = options0.getInvisibleQualifiers(false);
      assertNotNull(stringVector2);
      assertNotSame(stringVector2, stringVector0);
      assertFalse(stringVector2.equals((Object)stringVector0));
      assertFalse(options0.isUnixHost());
      assertEquals(0, options0.size());
      assertTrue(options0.isEmpty());
      assertEquals(0, stringVector2.size());
      assertEquals(10, stringVector2.capacity());
      assertEquals("[]", stringVector2.toString());
      assertTrue(stringVector2.isEmpty());
      
      int int1 = options0.getMinimumORFSize();
      assertFalse(int1 == int0);
      assertEquals(100, int1);
      assertFalse(options0.isUnixHost());
      assertEquals(0, options0.size());
      assertTrue(options0.isEmpty());
      
      ExternalProgramVector externalProgramVector2 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector2);
      assertNotSame(externalProgramVector2, externalProgramVector1);
      assertSame(externalProgramVector2, externalProgramVector0);
      assertFalse(externalProgramVector2.equals((Object)externalProgramVector1));
      assertFalse(options0.isUnixHost());
      assertEquals(0, options0.size());
      assertTrue(options0.isEmpty());
      assertEquals(28, externalProgramVector2.size());
      
      StringVector stringVector3 = options0.getAllGeneNames();
      assertNotNull(stringVector3);
      assertSame(stringVector3, stringVector0);
      assertNotSame(stringVector3, stringVector2);
      assertFalse(stringVector3.equals((Object)stringVector2));
      assertFalse(options0.isUnixHost());
      assertEquals(0, options0.size());
      assertTrue(options0.isEmpty());
      assertEquals(28, stringVector3.capacity());
      assertEquals(16, stringVector3.size());
      assertFalse(stringVector3.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector3.toString());
      
      ExternalProgramVector externalProgramVector3 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector3);
      assertNotSame(externalProgramVector3, externalProgramVector0);
      assertNotSame(externalProgramVector3, externalProgramVector2);
      assertSame(externalProgramVector3, externalProgramVector1);
      assertFalse(externalProgramVector3.equals((Object)externalProgramVector0));
      assertFalse(externalProgramVector3.equals((Object)externalProgramVector2));
      assertFalse(options0.isUnixHost());
      assertEquals(0, options0.size());
      assertTrue(options0.isEmpty());
      assertEquals(5, externalProgramVector3.size());
      
      // Undeclared exception!
      try { 
        options0.getExtraQualifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(138, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nF/ipU&l`el9,#n@(R");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Set<String> set0 = options0.stringPropertyNames();
      assertNotNull(set0);
      assertFalse(set0.contains("nF/ipU&l`el9,#n@(R"));
      assertEquals(138, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertFalse(set0.isEmpty());
      assertEquals(138, set0.size());
      
      String string0 = options0.getDefaultSequenceFileName();
      assertNull(string0);
      assertEquals(138, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      String string1 = "Proxy-Authorization";
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Proxy-Authorization");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertEquals(138, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertFalse(stringVector0.isEmpty());
      assertEquals(16, stringVector0.size());
      assertEquals(28, stringVector0.capacity());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      
      EntryInformation entryInformation0 = Options.getArtemisEntryInformation();
      assertNotNull(entryInformation0);
      assertFalse(entryInformation0.useEMBLFormat());
      
      int int0 = options0.getUndoLevels();
      assertEquals(20, int0);
      assertEquals(138, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      boolean boolean3 = options0.isBuggyLinuxVM();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(138, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      boolean boolean4 = Options.isNoddyMode();
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      StringVector stringVector1 = options0.getAllGeneNames();
      assertNotNull(stringVector1);
      assertSame(stringVector1, stringVector0);
      assertEquals(138, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector1.toString());
      assertEquals(28, stringVector1.capacity());
      assertFalse(stringVector1.isEmpty());
      assertEquals(16, stringVector1.size());
      
      StringVector stringVector2 = options0.getAllGeneNames();
      assertNotNull(stringVector2);
      assertSame(stringVector2, stringVector0);
      assertSame(stringVector2, stringVector1);
      assertEquals(138, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector2.toString());
      assertEquals(28, stringVector2.capacity());
      assertEquals(16, stringVector2.size());
      assertFalse(stringVector2.isEmpty());
      
      StringVector stringVector3 = options0.getOptionValues("q&Mn,2");
      assertNull(stringVector3);
      assertEquals(138, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      LargeObject largeObject0 = mock(LargeObject.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(largeObject0).getInputStream();
      LargeObjectDocument largeObjectDocument0 = new LargeObjectDocument("/Users/kp11/.artemis/cache/", "/Users/kp11/.artemis/cache/", largeObject0);
      assertNotNull(largeObjectDocument0);
      assertEquals("/Users/kp11/.artemis/cache/", largeObjectDocument0.getName());
      assertFalse(largeObjectDocument0.readable());
      assertFalse(largeObjectDocument0.writable());
      
      // Undeclared exception!
      try { 
        largeObjectDocument0.getInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(128, qualifierInfoVector0.size());
      
      Options options1 = Options.getOptions();
      assertNotNull(options1);
      assertSame(options1, options0);
      assertEquals(247, options1.size());
      assertFalse(options1.isUnixHost());
      assertFalse(options1.isEmpty());
      
      StringVector stringVector0 = StringVector.getStrings("/Users/kp11/.artemis/cache/", "/Users/kp11/.artemis/cache/");
      assertNotNull(stringVector0);
      assertEquals(10, stringVector0.capacity());
      assertEquals("[Users/kp11/.artemis/cache/]", stringVector0.toString());
      assertFalse(stringVector0.isEmpty());
      assertEquals(1, stringVector0.size());
      
      boolean boolean0 = Options.isNoddyMode();
      assertTrue(boolean0);
      
      options1.clear();
      assertSame(options1, options0);
      assertTrue(options1.isEmpty());
      assertFalse(options1.isUnixHost());
      assertEquals(0, options1.size());
      
      Options options2 = Options.getOptions();
      assertNotNull(options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertFalse(options2.isUnixHost());
      assertEquals(0, options2.size());
      assertTrue(options2.isEmpty());
      
      // Undeclared exception!
      try { 
        options1.getStartCodons();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      options0.setDirectEdit(true);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      options0.clear();
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      assertNotNull(entryInformation0);
      assertTrue(entryInformation0.useEMBLFormat());
      
      int int0 = options0.getMinimumORFSize();
      assertEquals(100, int0);
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      LogManager.setRepositorySelector(repositorySelector0, repositorySelector0);
      StringVector stringVector0 = options0.getOptionValues("O1G");
      assertNull(stringVector0);
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean0 = Options.isUnixHost();
      assertFalse(boolean0);
      
      EntryInformation entryInformation1 = Options.getDBEntryInformation();
      assertNotNull(entryInformation1);
      assertSame(entryInformation1, entryInformation0);
      assertTrue(entryInformation1.useEMBLFormat());
      
      boolean boolean1 = options0.canDirectEdit();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-118);
      Enumeration<Object> enumeration0 = options0.keys();
      assertNotNull(enumeration0);
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)113;
      byteArray0[7] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)47, (byte) (-30), (byte) (-118), (byte)25, (byte)113, (byte)0, (byte)4}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        options0.getExtraGffQualifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      options0.clear();
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      boolean boolean0 = options0.isEukaryoticMode();
      assertTrue(boolean0);
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(2, stringVector0.capacity());
      assertEquals("[gene, gene]", stringVector0.toString());
      assertFalse(stringVector0.isEmpty());
      assertEquals(2, stringVector0.size());
      
      Properties properties0 = SshLogin.getProperties();
      assertNull(properties0);
      
      // Undeclared exception!
      try { 
        Options.getPropertyValues((Properties) null, "/Users/kp11/.artemis/cache/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      Color color0 = options0.getColorFromColourNumber(5);
      assertNotNull(color0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Diana.ini");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)67}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      boolean boolean1 = options0.canDirectEdit();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      StringVector stringVector0 = options0.getDisplayQualifierNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(10, stringVector0.capacity());
      assertEquals("[primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(9, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      Feature feature0 = new Feature(genbankStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      options0.removeOptionChangeListener(feature0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(feature0.isReadOnly());
      
      boolean boolean2 = Options.isBlackBeltMode();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      StringVector stringVector1 = options0.getAllGeneNames();
      assertNotNull(stringVector1);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector1.toString());
      assertEquals(28, stringVector1.capacity());
      assertEquals(16, stringVector1.size());
      assertFalse(stringVector1.isEmpty());
      
      StringVector stringVector2 = options0.getInvisibleQualifiers(false);
      assertNotNull(stringVector2);
      assertNotSame(stringVector2, stringVector0);
      assertNotSame(stringVector2, stringVector1);
      assertFalse(stringVector2.equals((Object)stringVector0));
      assertFalse(stringVector2.equals((Object)stringVector1));
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(60, stringVector2.size());
      assertEquals(80, stringVector2.capacity());
      assertEquals("[CHROMO_LINK, C_processing, C_processing_BigPi, C_processing_DGPI, COM_NAME, FEAT_NAME, LOCUS, PUB_LOCUS, PUB_COMMENT, REPEAT_TYPE, SNP, bicsw_file, blast_file, blast_score, blastn_file, blastp+go_file, blastp_file, blastx_file, cds_id, chloroplast, chromoplast, codon, comment_Cterm, comment_Nterm, created, cyanelle, end_phase, exception, exon_id, fasta_file, fasta_match, gene_id, go_from_interpro, hp_match, hth_file, interpro, map, mitochondrion, modified, number, obsolete_gene_name, pepstats_file, percent_id, pfam_match, prosite_match, pseudo, psu_domain, reserved_gene_name, query_id, sigcleave_file, score, smart_file, start_phase, tblastn_file, tblastx_file, temporary_systematic_id, transl_table, translation, type, usedin]", stringVector2.toString());
      assertFalse(stringVector2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fmin=fmin+");
      assertFalse(boolean0);
      
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(5, externalProgramVector0.size());
      
      LoggerRepository loggerRepository0 = LogManager.getLoggerRepository();
      assertNotNull(loggerRepository0);
      
      StringVector stringVector0 = options0.getSystematicQualifierNames();
      assertNotNull(stringVector0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(7, stringVector0.size());
      assertEquals(10, stringVector0.capacity());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name]", stringVector0.toString());
      assertFalse(stringVector0.isEmpty());
      
      StringVector stringVector1 = options0.getStartCodons();
      assertNotNull(stringVector1);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(1, stringVector1.size());
      assertEquals(10, stringVector1.capacity());
      assertFalse(stringVector1.isEmpty());
      assertEquals("[atg]", stringVector1.toString());
      
      boolean boolean2 = Options.readWritePossible();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = Options.isNoddyMode();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ebd#-R]");
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/Users/kp11/.artemis/cache/");
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5);
      
      boolean boolean6 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/Users/kp11/.artemis/cache/");
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6);
      
      boolean boolean7 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7);
      
      Key key0 = new Key("xK{6=,");
      assertNotNull(key0);
      assertEquals("xK{6=,", key0.toString());
      assertEquals(6, key0.length());
      assertEquals("xK{6=,", key0.getKeyString());
      
      Color color0 = options0.getDefaultFeatureColour(key0);
      assertNull(color0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals("xK{6=,", key0.toString());
      assertEquals(6, key0.length());
      assertEquals("xK{6=,", key0.getKeyString());
      
      ExternalProgramVector externalProgramVector1 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector1);
      assertNotSame(externalProgramVector1, externalProgramVector0);
      assertFalse(externalProgramVector1.equals((Object)externalProgramVector0));
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(28, externalProgramVector1.size());
      
      EntryInformation entryInformation0 = Options.getArtemisEntryInformation();
      assertNotNull(entryInformation0);
      assertFalse(entryInformation0.useEMBLFormat());
      
      String string0 = options0.getDefaultFeatureFileName();
      assertNull(string0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      options0.clear();
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      
      // Undeclared exception!
      try { 
        options0.getExtraQualifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      assertNotNull(entryInformation0);
      assertTrue(entryInformation0.useEMBLFormat());
      
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      BiFunction<Object, Object, Color> biFunction0 = (BiFunction<Object, Object, Color>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      boolean boolean0 = Options.isBlackBeltMode();
      assertFalse(boolean0);
      
      boolean boolean1 = options0.highlightActiveEntryFlag();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      // Undeclared exception!
      try { 
        options0.replaceAll(biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      Enumeration<Object> enumeration0 = options0.elements();
      assertNotNull(enumeration0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      boolean boolean0 = Options.isNoddyMode();
      assertTrue(boolean0);
      
      options0.setDisplayNameQualifiers("yI7!zrY!C;0cTC");
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      options0.setDirectEdit(true);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      options0.setEukaryoticMode(true);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(5, externalProgramVector0.size());
      
      Color color0 = options0.getColorFromColourNumber(10);
      assertNotNull(color0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(255, color0.getRed());
      assertEquals((-23296), color0.getRGB());
      assertEquals(165, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = Options.isBlackBeltMode();
      assertFalse(boolean0);
      
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      assertNotNull(entryInformation0);
      assertTrue(entryInformation0.useEMBLFormat());
      
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean1 = options0.highlightActiveEntryFlag();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("/Users/kp11/.artemis/cache/", (Object) null).when(biFunction0).apply(any() , any());
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraGffQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(27, qualifierInfoVector0.size());
      
      Enumeration<Object> enumeration0 = options0.keys();
      assertNotNull(enumeration0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      // Undeclared exception!
      try { 
        options0.replaceAll(biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      
      Collection<Object> collection0 = options0.values();
      assertNotNull(collection0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      
      boolean boolean0 = options0.isEukaryoticMode();
      assertTrue(boolean0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      
      StringVector stringVector0 = options0.getDisplayQualifierNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertEquals("[primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(10, stringVector0.capacity());
      assertEquals(9, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      
      Options options1 = Options.getOptions();
      assertNotNull(options1);
      assertSame(options1, options0);
      assertEquals(247, options1.size());
      assertFalse(options1.isEmpty());
      assertFalse(options1.isUnixHost());
      
      StringVector stringVector1 = options0.getDisplayQualifierNames();
      assertNotNull(stringVector1);
      assertSame(options0, options1);
      assertSame(stringVector1, stringVector0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertEquals("[primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector1.toString());
      assertEquals(10, stringVector1.capacity());
      assertEquals(9, stringVector1.size());
      assertFalse(stringVector1.isEmpty());
      
      int int0 = options0.getMinimumORFSize();
      assertSame(options0, options1);
      assertEquals(100, int0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      DatabaseDocument.EXONMODEL = "/Users/kp11/.artemis/cache/";
      StringVector stringVector0 = options0.getStartCodons();
      assertNotNull(stringVector0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[atg]", stringVector0.toString());
      assertEquals(1, stringVector0.size());
      assertEquals(10, stringVector0.capacity());
      
      JPasswordField jPasswordField0 = new JPasswordField("/Users/kp11/.artemis/cache/");
      assertNotNull(jPasswordField0);
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument((String) null, jPasswordField0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      
      // Undeclared exception!
      try { 
        Locale.Category.valueOf("/Users/kp11/.artemis/cache/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.Category./Users/kp11/.artemis/cache/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      
      options0.setDefaultColourMap();
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      
      Color color0 = options0.getDefaultFeatureColour(key0);
      assertNotNull(color0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      ExternalProgramVector externalProgramVector0 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertEquals(28, externalProgramVector0.size());
      
      options0.setHighlightActiveEntryFlag(false);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      
      String string0 = options0.getDefaultFeatureFileName();
      assertNull(string0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      
      Color color1 = options0.getColorFromColourNumber(15);
      assertNotNull(color1);
      assertNotSame(color1, color0);
      assertFalse(color1.equals((Object)color0));
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertEquals(1, color1.getTransparency());
      assertEquals(63, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertEquals(63, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals((-49345), color1.getRGB());
      
      ByteArrayReader byteArrayReader0 = null;
      try {
        byteArrayReader0 = new ByteArrayReader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.sshtools.util.ByteArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Set<Object> set0 = options0.keySet();
      assertNotNull(set0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(set0.isEmpty());
      assertEquals(247, set0.size());
      
      Locale.Category[] locale_CategoryArray0 = Locale.Category.values();
      assertNotNull(locale_CategoryArray0);
      assertEquals(2, locale_CategoryArray0.length);
      
      Object object0 = options0.remove((Object) locale_Category0);
      assertNull(object0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      int int0 = options0.getUndoLevels();
      assertEquals(20, int0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      Object object1 = options0.remove((Object) "/Users/kp11/.artemis/cache/");
      assertNull(object1);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(5, externalProgramVector0.size());
      
      // Undeclared exception!
      try { 
        Options.getPropertyValues(options0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = Options.isUnixHost();
      assertFalse(boolean0);
      
      boolean boolean1 = Options.isUnixHost();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        options0.setSystematicQualifierNames((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      // Undeclared exception!
      try { 
        options0.getOptionValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      boolean boolean0 = options0.getPropertyTruthValue("f");
      assertFalse(boolean0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertTrue(options1.equals((Object)options0));
      assertFalse(options1.isEmpty());
      assertEquals(247, options1.size());
      assertFalse(options1.isUnixHost());
      
      StringVector stringVector0 = options1.getStartCodons();
      assertNotNull(stringVector0);
      assertNotSame(options1, options0);
      assertTrue(options1.equals((Object)options0));
      assertFalse(options1.isEmpty());
      assertEquals(247, options1.size());
      assertFalse(options1.isUnixHost());
      assertEquals(10, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals(1, stringVector0.size());
      assertEquals("[atg]", stringVector0.toString());
      
      Key key0 = new Key("MdS6v2-t}qLm/usgV");
      assertNotNull(key0);
      assertEquals("MdS6v2-t}qLm/usgV", key0.toString());
      assertEquals(17, key0.length());
      assertEquals("MdS6v2-t}qLm/usgV", key0.getKeyString());
      
      Color color0 = options0.getDefaultFeatureColour(key0);
      assertNull(color0);
      assertNotSame(options0, options1);
      assertTrue(options0.equals((Object)options1));
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals("MdS6v2-t}qLm/usgV", key0.toString());
      assertEquals(17, key0.length());
      assertEquals("MdS6v2-t}qLm/usgV", key0.getKeyString());
      
      stringVector0.removeAllElements();
      assertNotSame(options1, options0);
      assertTrue(options1.equals((Object)options0));
      assertFalse(options1.isEmpty());
      assertEquals(247, options1.size());
      assertFalse(options1.isUnixHost());
      assertEquals(10, stringVector0.capacity());
      assertTrue(stringVector0.isEmpty());
      assertEquals("[]", stringVector0.toString());
      assertEquals(0, stringVector0.size());
      
      Object object0 = options0.getOrDefault(stringVector0, "f");
      assertNotNull(object0);
      assertNotSame(options0, options1);
      assertNotSame(options1, options0);
      assertTrue(options0.equals((Object)options1));
      assertTrue(options1.equals((Object)options0));
      assertEquals("f", object0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertFalse(options1.isEmpty());
      assertEquals(247, options1.size());
      assertFalse(options1.isUnixHost());
      assertEquals(10, stringVector0.capacity());
      assertTrue(stringVector0.isEmpty());
      assertEquals("[]", stringVector0.toString());
      assertEquals(0, stringVector0.size());
      
      boolean boolean1 = options0.getPropertyTruthValue("v`MI@0L.::b|=b");
      assertNotSame(options0, options1);
      assertTrue(options0.equals((Object)options1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      String string0 = options0.getDefaultSequenceFileName();
      assertNull(string0);
      assertNotSame(options0, options1);
      assertTrue(options0.equals((Object)options1));
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertNotSame(options0, options1);
      assertTrue(options0.equals((Object)options1));
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(128, qualifierInfoVector0.size());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      try { 
        options1.load((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      Options.CACHE_PATH = "yes";
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(5, externalProgramVector0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      StringVector stringVector0 = options0.getInvisibleQualifiers(true);
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals(320, stringVector0.capacity());
      assertEquals(163, stringVector0.size());
      
      boolean boolean0 = true;
      LogLog.setQuietMode(true);
      StringVector stringVector1 = options0.getInvisibleQualifiers(true);
      assertNotNull(stringVector1);
      assertSame(stringVector1, stringVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(stringVector1.isEmpty());
      assertEquals(320, stringVector1.capacity());
      assertEquals(163, stringVector1.size());
      
      StringVector stringVector2 = options0.getAllGeneNames();
      assertNotNull(stringVector2);
      assertNotSame(stringVector2, stringVector1);
      assertNotSame(stringVector2, stringVector0);
      assertFalse(stringVector2.equals((Object)stringVector1));
      assertFalse(stringVector2.equals((Object)stringVector0));
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(stringVector2.isEmpty());
      assertEquals(16, stringVector2.size());
      assertEquals(28, stringVector2.capacity());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector2.toString());
      
      Clipboard clipboard0 = new Clipboard("/Users/kp11/.artemis/cache/");
      assertNotNull(clipboard0);
      assertEquals("/Users/kp11/.artemis/cache/", clipboard0.getName());
      
      Selection selection0 = new Selection(clipboard0);
      assertNotNull(selection0);
      assertEquals("/Users/kp11/.artemis/cache/", clipboard0.getName());
      
      FeatureVector featureVector0 = selection0.getAllFeatures();
      assertNotNull(featureVector0);
      assertEquals("/Users/kp11/.artemis/cache/", clipboard0.getName());
      
      // Undeclared exception!
      try { 
        featureVector0.elementAt((-152));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      Set<Object> set0 = options0.keySet();
      assertNotNull(set0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(set0.isEmpty());
      assertEquals(248, set0.size());
      
      Enumeration<Object> enumeration0 = options0.keys();
      assertNotNull(enumeration0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setDirectEdit(true);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      FontUIResource fontUIResource0 = options0.getFontUIResource();
      assertNotNull(fontUIResource0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(0, fontUIResource0.getStyle());
      assertFalse(fontUIResource0.hasUniformLineMetrics());
      assertTrue(fontUIResource0.isPlain());
      assertFalse(fontUIResource0.isItalic());
      assertFalse(fontUIResource0.isTransformed());
      assertEquals("Monospaced", fontUIResource0.getName());
      assertFalse(fontUIResource0.isBold());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertFalse(fontUIResource0.hasLayoutAttributes());
      
      options0.setHighlightActiveEntryFlag(true);
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector0 = options0.getSystematicQualifierNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name]", stringVector0.toString());
      assertEquals(7, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals(10, stringVector0.capacity());
      
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      Enumeration<Object> enumeration1 = options0.keys();
      assertNotNull(enumeration1);
      assertNotSame(enumeration1, enumeration0);
      assertFalse(enumeration1.equals((Object)enumeration0));
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.list(printStream0);
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setDisplayNameQualifiers("Linux");
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean0 = Options.isBlackBeltMode();
      assertFalse(boolean0);
      
      boolean boolean1 = options0.highlightActiveEntryFlag();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      
      Set<Map.Entry<Object, Object>> set1 = (Set<Map.Entry<Object, Object>>)options0.entrySet();
      assertNotNull(set1);
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(set1.isEmpty());
      assertEquals(249, set1.size());
      
      boolean boolean2 = Options.isNoddyMode();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ExternalProgramVector externalProgramVector0 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(28, externalProgramVector0.size());
      
      options0.setDisplayNameQualifiers("no");
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setEukaryoticMode(true);
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setHighlightActiveEntryFlag(false);
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      
      String string0 = options0.getDefaultFeatureFileName();
      assertNull(string0);
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      Enumeration<Object> enumeration0 = options0.elements();
      assertNotNull(enumeration0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      int int0 = options0.getMinimumORFSize();
      assertEquals(100, int0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      EntryInformation entryInformation0 = Options.getArtemisEntryInformation();
      assertNotNull(entryInformation0);
      assertFalse(entryInformation0.useEMBLFormat());
      
      boolean boolean0 = options0.remove((Object) enumeration0, (Object) entryInformation0);
      assertFalse(boolean0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertFalse(entryInformation0.useEMBLFormat());
      
      Color color0 = options0.getColorFromColourNumber(119);
      assertNull(color0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      options0.setHighlightActiveEntryFlag(false);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      int int1 = options0.getUndoLevels();
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      boolean boolean1 = Options.isUnixHost();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      
      StringVector stringVector0 = options0.getStartCodons();
      assertNotNull(stringVector0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertEquals(1, stringVector0.size());
      assertEquals("[atg]", stringVector0.toString());
      assertFalse(stringVector0.isEmpty());
      assertEquals(10, stringVector0.capacity());
      
      options0.reset();
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      
      Options options1 = (Options)options0.clone();
      assertNotNull(options1);
      assertNotSame(options0, options1);
      assertNotSame(options1, options0);
      assertTrue(options1.equals((Object)options0));
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options1.isUnixHost());
      assertFalse(options1.isEmpty());
      assertEquals(247, options1.size());
      
      options0.setHighlightActiveEntryFlag(true);
      assertNotSame(options0, options1);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      
      SimpleEntryInformation simpleEntryInformation0 = (SimpleEntryInformation)Options.getArtemisEntryInformation();
      assertNotNull(simpleEntryInformation0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
      
      int int0 = options0.getMinimumORFSize();
      assertNotSame(options0, options1);
      assertFalse(options0.equals((Object)options1));
      assertEquals(100, int0);
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      
      boolean boolean0 = Options.isNoddyMode();
      assertTrue(boolean0);
      
      options0.setHighlightActiveEntryFlag(true);
      assertNotSame(options0, options1);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      
      // Undeclared exception!
      try { 
        options0.load((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Properties$LineReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      Color color0 = options0.getDefaultFeatureColour((Key) null);
      assertNull(color0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      Enumeration<?> enumeration0 = options0.propertyNames();
      assertNotNull(enumeration0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      boolean boolean0 = options0.canDirectEdit();
      assertTrue(boolean0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      LoggerRepository loggerRepository0 = LogManager.getLoggerRepository();
      assertNotNull(loggerRepository0);
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(128, qualifierInfoVector0.size());
      
      options0.clear();
      assertTrue(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(0, options0.size());
      
      options0.setDisplayNameQualifiers("org.biojava.bio.dist.OrderNDistributionFactory");
      assertEquals(1, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      boolean boolean1 = options0.isBuggyLinuxVM();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertEquals(1, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(2, stringVector0.size());
      assertEquals("[gene, org.biojava.bio.dist.OrderNDistributionFactory]", stringVector0.toString());
      assertFalse(stringVector0.isEmpty());
      assertEquals(2, stringVector0.capacity());
      
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      assertNotNull(entryInformation0);
      assertTrue(entryInformation0.useEMBLFormat());
      
      boolean boolean2 = Options.isBlackBeltMode();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      options0.setHighlightActiveEntryFlag(true);
      assertEquals(2, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      OptionChangeListener optionChangeListener0 = null;
      // Undeclared exception!
      try { 
        options0.addOptionChangeListener((OptionChangeListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(16, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(28, stringVector0.capacity());
      
      StringVector stringVector1 = Options.getPropertyValues(options0, "false");
      assertNull(stringVector1);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      LogLog.setQuietMode(true);
      boolean boolean0 = options0.getPropertyTruthValue("");
      assertFalse(boolean0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      EntryInformation entryInformation0 = Options.getArtemisEntryInformation();
      assertNotNull(entryInformation0);
      assertFalse(entryInformation0.useEMBLFormat());
      
      options0.setDisplayNameQualifiers("Complement");
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      String string0 = options0.getDefaultFeatureFileName();
      assertNull(string0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      Color color0 = options0.getColorFromColourNumber((-2164));
      assertNull(color0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      String string1 = options0.getDefaultSequenceFileName();
      assertNull(string1);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      
      boolean boolean0 = options0.getPropertyTruthValue("colour_4");
      assertTrue(boolean0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      
      // Undeclared exception!
      try { 
        options0.getIntegerProperty("colour_4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0 0 255\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      Object object0 = options0.setProperty("Range out of bounds: ", "com.sshtools.ssh.compression.SshCompression");
      assertNull(object0);
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      String string0 = options0.getDefaultSequenceFileName();
      assertNull(string0);
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      Font font0 = options0.getFont();
      assertNotNull(font0);
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("Monospaced", font0.getName());
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      
      boolean boolean0 = options0.getPropertyTruthValue("Range out of bounds: ");
      assertTrue(boolean0);
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraGffQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(27, qualifierInfoVector0.size());
      
      StringVector stringVector0 = options0.getDisplayQualifierNames();
      assertNotNull(stringVector0);
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertFalse(stringVector0.isEmpty());
      assertEquals(10, stringVector0.capacity());
      assertEquals(9, stringVector0.size());
      assertEquals("[primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      
      // Undeclared exception!
      try { 
        options0.setDisplayNameQualifiers((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      options0.setDefaultColourMap();
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      String string0 = "0 255 0";
      Integer integer0 = options0.getIntegerProperty("0 255 0");
      assertNull(integer0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      
      Color color0 = options0.getDefaultFeatureColour(key0);
      assertNotNull(color0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      boolean boolean0 = options0.isBuggyLinuxVM();
      assertFalse(boolean0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      options0.setDirectEdit(false);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      Integer integer1 = options0.getIntegerProperty("0 255 0");
      assertNull(integer1);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      options0.setDefaultColourMap();
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      Integer integer2 = options0.getIntegerProperty("0 255 0");
      assertNull(integer2);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      boolean boolean1 = options0.highlightActiveEntryFlag();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      boolean boolean2 = Options.isBlackBeltMode();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      options0.reset();
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(16, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals(28, stringVector0.capacity());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      
      ExternalProgramVector externalProgramVector0 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(28, externalProgramVector0.size());
      
      options0.setSystematicQualifierNames("0 255 0");
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      options0.setDirectEdit(false);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      // Undeclared exception!
      try { 
        options0.removeOptionChangeListener((OptionChangeListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setSystematicQualifierNames("no");
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean0 = options0.canDirectEdit();
      assertTrue(boolean0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector0 = options0.getDisplayQualifierNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(10, stringVector0.capacity());
      assertEquals(9, stringVector0.size());
      
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      Feature feature0 = new Feature(genbankStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      options0.removeOptionChangeListener(feature0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(feature0.isReadOnly());
      
      boolean boolean1 = Options.isBlackBeltMode();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringVector stringVector1 = options0.getAllGeneNames();
      assertNotNull(stringVector1);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(16, stringVector1.capacity());
      assertEquals(10, stringVector1.size());
      assertEquals("[no, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector1.toString());
      assertFalse(stringVector1.isEmpty());
      
      StringVector stringVector2 = options0.getInvisibleQualifiers(false);
      assertNotNull(stringVector2);
      assertNotSame(stringVector2, stringVector0);
      assertNotSame(stringVector2, stringVector1);
      assertFalse(stringVector2.equals((Object)stringVector0));
      assertFalse(stringVector2.equals((Object)stringVector1));
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals("[CHROMO_LINK, C_processing, C_processing_BigPi, C_processing_DGPI, COM_NAME, FEAT_NAME, LOCUS, PUB_LOCUS, PUB_COMMENT, REPEAT_TYPE, SNP, bicsw_file, blast_file, blast_score, blastn_file, blastp+go_file, blastp_file, blastx_file, cds_id, chloroplast, chromoplast, codon, comment_Cterm, comment_Nterm, created, cyanelle, end_phase, exception, exon_id, fasta_file, fasta_match, gene_id, go_from_interpro, hp_match, hth_file, interpro, map, mitochondrion, modified, number, obsolete_gene_name, pepstats_file, percent_id, pfam_match, prosite_match, pseudo, psu_domain, reserved_gene_name, query_id, sigcleave_file, score, smart_file, start_phase, tblastn_file, tblastx_file, temporary_systematic_id, transl_table, translation, type, usedin]", stringVector2.toString());
      assertFalse(stringVector2.isEmpty());
      assertEquals(60, stringVector2.size());
      assertEquals(80, stringVector2.capacity());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      // Undeclared exception!
      try { 
        options0.getIntegerProperty("direct_edit");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yes\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      StringVector stringVector0 = options0.getStartCodons();
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertEquals(1, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[atg]", stringVector0.toString());
      assertEquals(10, stringVector0.capacity());
      
      StringVector stringVector1 = options0.getAllGeneNames();
      assertNotNull(stringVector1);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(stringVector1.isEmpty());
      assertEquals(16, stringVector1.size());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector1.toString());
      assertEquals(28, stringVector1.capacity());
      
      DatabaseDocument.TRANSCRIPT = "/Users/kp11/.artemis/cache/";
      options0.setDirectEdit(true);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      boolean boolean0 = Options.readWritePossible();
      assertTrue(boolean0);
      
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertEquals(5, externalProgramVector0.size());
      
      StringVector stringVector2 = options0.getSystematicQualifierNames();
      assertNotNull(stringVector2);
      assertNotSame(stringVector2, stringVector0);
      assertNotSame(stringVector2, stringVector1);
      assertFalse(stringVector2.equals((Object)stringVector0));
      assertFalse(stringVector2.equals((Object)stringVector1));
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(stringVector2.isEmpty());
      assertEquals(10, stringVector2.capacity());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name]", stringVector2.toString());
      assertEquals(7, stringVector2.size());
      
      boolean boolean1 = Options.isBlackBeltMode();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      assertNotNull(entryInformation0);
      assertTrue(entryInformation0.useEMBLFormat());
      
      options0.setHighlightActiveEntryFlag(true);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      MockFile mockFile0 = new MockFile("/Users/kp11/.artemis/cache/");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertEquals("/Users/kp11/.artemis", mockFile0.getParent());
      assertEquals("/Users/kp11/.artemis/cache", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      boolean boolean1 = mockFile0.mkdirs();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("/Users/kp11/.artemis", mockFile0.getParent());
      assertEquals("/Users/kp11/.artemis/cache", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "/Users/kp11/.artemis/cache/");
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("/Users/kp11/.artemis", mockFile0.getParent());
      assertEquals("/Users/kp11/.artemis/cache", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      
      options0.list(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals("/Users/kp11/.artemis", mockFile0.getParent());
      assertEquals("/Users/kp11/.artemis/cache", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      
      ExternalProgramVector externalProgramVector0 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(28, externalProgramVector0.size());
      
      // Undeclared exception!
      try { 
        options0.setGeneticCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      // Undeclared exception!
      try { 
        options0.getPropertyTruthValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(128, qualifierInfoVector0.size());
      
      Object object0 = options0.put("no", "no");
      assertNull(object0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      LogLog.setInternalDebugging(true);
      StringVector stringVector0 = options0.getOptionValues("no");
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(10, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals(1, stringVector0.size());
      assertEquals("[no]", stringVector0.toString());
      
      StringVector stringVector1 = options0.getSystematicQualifierNames();
      assertNotNull(stringVector1);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(7, stringVector1.size());
      assertEquals(10, stringVector1.capacity());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name]", stringVector1.toString());
      assertFalse(stringVector1.isEmpty());
      
      Options options1 = Options.getOptions();
      assertNotNull(options1);
      assertSame(options1, options0);
      assertEquals(248, options1.size());
      assertFalse(options1.isEmpty());
      assertFalse(options1.isUnixHost());
      
      int int0 = options1.getMinimumORFSize();
      assertSame(options1, options0);
      assertEquals(100, int0);
      assertEquals(248, options1.size());
      assertFalse(options1.isEmpty());
      assertFalse(options1.isUnixHost());
      
      // Undeclared exception!
      try { 
        options1.setDisplayNameQualifiers((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      String string0 = options0.getDefaultFeatureFileName();
      assertNull(string0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      String string1 = options0.getDefaultFeatureFileName();
      assertNull(string1);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      StringVector stringVector0 = options0.getDisplayQualifierNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(9, stringVector0.size());
      assertEquals("[primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(10, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      
      int int0 = options0.getMinimumORFSize();
      assertEquals(100, int0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      options0.clear();
      assertFalse(options0.isUnixHost());
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      
      options0.setDirectEdit(true);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(1, options0.size());
      
      StringVector stringVector1 = Options.getPropertyValues(options0, "/Users/kp11/.artemis/cache/");
      assertNull(stringVector1);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(1, options0.size());
      
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(1, options0.size());
      assertEquals(0, externalProgramVector0.size());
      
      ExternalProgramVector externalProgramVector1 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector1);
      assertNotSame(externalProgramVector1, externalProgramVector0);
      assertFalse(externalProgramVector1.equals((Object)externalProgramVector0));
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(1, options0.size());
      assertEquals(0, externalProgramVector1.size());
      
      StringVector stringVector2 = Options.getPropertyValues(options0, "");
      assertNull(stringVector2);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(1, options0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector0 = options0.getSystematicQualifierNames();
      assertNotNull(stringVector0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name]", stringVector0.toString());
      assertFalse(stringVector0.isEmpty());
      assertEquals(7, stringVector0.size());
      assertEquals(10, stringVector0.capacity());
      
      boolean boolean0 = Options.readWritePossible();
      assertTrue(boolean0);
      
      StringVector stringVector1 = options0.getAllGeneNames();
      assertNotNull(stringVector1);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertFalse(stringVector1.isEmpty());
      assertEquals(16, stringVector1.size());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector1.toString());
      assertEquals(28, stringVector1.capacity());
      
      StringVector stringVector2 = options0.getStartCodons();
      assertNotNull(stringVector2);
      assertNotSame(stringVector2, stringVector0);
      assertNotSame(stringVector2, stringVector1);
      assertFalse(stringVector2.equals((Object)stringVector0));
      assertFalse(stringVector2.equals((Object)stringVector1));
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(1, stringVector2.size());
      assertEquals(10, stringVector2.capacity());
      assertFalse(stringVector2.isEmpty());
      assertEquals("[atg]", stringVector2.toString());
      
      int int0 = options0.getUndoLevels();
      assertEquals(20, int0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector3 = options0.getInvisibleQualifiers(true);
      assertNotNull(stringVector3);
      assertNotSame(stringVector3, stringVector1);
      assertNotSame(stringVector3, stringVector2);
      assertNotSame(stringVector3, stringVector0);
      assertFalse(stringVector3.equals((Object)stringVector1));
      assertFalse(stringVector3.equals((Object)stringVector2));
      assertFalse(stringVector3.equals((Object)stringVector0));
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(163, stringVector3.size());
      assertEquals(320, stringVector3.capacity());
      assertFalse(stringVector3.isEmpty());
      
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(5, externalProgramVector0.size());
      
      int int1 = options0.getUndoLevels();
      assertTrue(int1 == int0);
      assertEquals(20, int1);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      assertNotNull(entryInformation0);
      assertTrue(entryInformation0.useEMBLFormat());
      
      EntryInformation entryInformation1 = Options.getDBEntryInformation();
      assertNotNull(entryInformation1);
      assertSame(entryInformation1, entryInformation0);
      assertTrue(entryInformation1.useEMBLFormat());
      
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      Set<Object> set0 = options0.keySet();
      assertNotNull(set0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, set0.size());
      assertFalse(set0.isEmpty());
      
      Set<Object> set1 = options0.keySet();
      assertNotNull(set1);
      assertSame(set1, set0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, set1.size());
      assertFalse(set1.isEmpty());
      
      URL uRL0 = Loader.getResource("/Users/kp11/.artemis/cache/");
      assertNull(uRL0);
      
      options0.setEukaryoticMode(false);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      Enumeration<Object> enumeration0 = options0.elements();
      assertNotNull(enumeration0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector0 = options0.getInvisibleQualifiers(true);
      assertNotNull(stringVector0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertFalse(stringVector0.isEmpty());
      assertEquals(163, stringVector0.size());
      assertEquals(320, stringVector0.capacity());
      
      options0.setDefaultColourMap();
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      options0.setEukaryoticMode(true);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector1 = options0.getSystematicQualifierNames();
      assertNotNull(stringVector1);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(10, stringVector1.capacity());
      assertEquals(7, stringVector1.size());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name]", stringVector1.toString());
      assertFalse(stringVector1.isEmpty());
      
      ExternalProgramVector externalProgramVector0 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(28, externalProgramVector0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      int int0 = options0.getUndoLevels();
      assertEquals(20, int0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean0 = options0.getPropertyTruthValue("");
      assertFalse(boolean0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      
      boolean boolean0 = options0.getPropertyTruthValue("VariantContext FLAG fields ");
      assertFalse(boolean0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      
      boolean boolean1 = options0.isBuggyLinuxVM();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(5, externalProgramVector0.size());
      
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      assertNotNull(entryInformation0);
      assertTrue(entryInformation0.useEMBLFormat());
      
      Font font0 = options0.getFont();
      assertNotNull(font0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals("Monospaced", font0.getName());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)38;
      ByteArrayReader byteArrayReader0 = new ByteArrayReader(byteArray0);
      assertNotNull(byteArrayReader0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)126, (byte) (-2), (byte) (-60), (byte)1, (byte)38}, byteArray0);
      assertTrue(ByteArrayReader.encode);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayReader0.available());
      assertEquals("UTF8", byteArrayReader0.getCharsetEncoding());
      assertEquals(0, byteArrayReader0.getPosition());
      
      options0.load((InputStream) byteArrayReader0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)126, (byte) (-2), (byte) (-60), (byte)1, (byte)38}, byteArray0);
      assertTrue(ByteArrayReader.encode);
      assertEquals(6, byteArray0.length);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(6, byteArrayReader0.getPosition());
      assertEquals(0, byteArrayReader0.available());
      assertEquals("UTF8", byteArrayReader0.getCharsetEncoding());
      
      // Undeclared exception!
      try { 
        options0.getIntegerProperty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      options0.setEukaryoticMode(false);
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      
      EntryInformation entryInformation0 = Options.getArtemisEntryInformation();
      assertNotNull(entryInformation0);
      assertFalse(entryInformation0.useEMBLFormat());
      
      StringVector stringVector0 = options0.getSystematicQualifierNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(7, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals(10, stringVector0.capacity());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name]", stringVector0.toString());
      
      EntryInformation entryInformation1 = Options.getDBEntryInformation();
      assertNotNull(entryInformation1);
      assertNotSame(entryInformation1, entryInformation0);
      assertFalse(entryInformation1.equals((Object)entryInformation0));
      assertTrue(entryInformation1.useEMBLFormat());
      
      StringVector stringVector1 = options0.getDisplayQualifierNames();
      assertNotNull(stringVector1);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(10, stringVector1.capacity());
      assertEquals("[primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector1.toString());
      assertEquals(9, stringVector1.size());
      assertFalse(stringVector1.isEmpty());
      
      options0.setDisplayNameQualifiers(":>");
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector0 = options0.getOptionValues("yes");
      assertNull(stringVector0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      options0.setHighlightActiveEntryFlag(true);
      assertEquals(249, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      boolean boolean0 = Options.isBlackBeltMode();
      assertFalse(boolean0);
      
      options0.setHighlightActiveEntryFlag(true);
      assertEquals(249, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraGffQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertEquals(249, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(27, qualifierInfoVector0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      boolean boolean0 = options0.highlightActiveEntryFlag();
      assertFalse(boolean0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      options0.setEukaryoticMode(true);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      int int0 = options0.getUndoLevels();
      assertEquals(20, int0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setDirectEdit(false);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)options0.entrySet();
      assertNotNull(set0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(247, set0.size());
      assertFalse(set0.isEmpty());
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(28, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals(16, stringVector0.size());
      
      boolean boolean0 = stringVector0.removeElement(options0);
      assertFalse(boolean0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(28, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals(16, stringVector0.size());
      
      StringVector stringVector1 = new StringVector("/Users/kp11/.artemis/cache/");
      assertNotNull(stringVector1);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertEquals(1, stringVector1.size());
      assertEquals("[/Users/kp11/.artemis/cache/]", stringVector1.toString());
      assertEquals(10, stringVector1.capacity());
      assertFalse(stringVector1.isEmpty());
      
      stringVector0.add(stringVector1);
      assertNotSame(stringVector0, stringVector1);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector0.equals((Object)stringVector1));
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(17, stringVector0.size());
      assertEquals(28, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID, /Users/kp11/.artemis/cache/]", stringVector0.toString());
      assertEquals(1, stringVector1.size());
      assertEquals("[/Users/kp11/.artemis/cache/]", stringVector1.toString());
      assertEquals(10, stringVector1.capacity());
      assertFalse(stringVector1.isEmpty());
      
      boolean boolean1 = Options.isNoddyMode();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = options0.putIfAbsent(stringVector0, stringVector0);
      assertNull(object0);
      assertNotSame(stringVector0, stringVector1);
      assertFalse(stringVector0.equals((Object)stringVector1));
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(17, stringVector0.size());
      assertEquals(28, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID, /Users/kp11/.artemis/cache/]", stringVector0.toString());
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraGffQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(27, qualifierInfoVector0.size());
      
      options0.setDirectEdit(false);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      options0.forEach(biConsumer0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean2 = Options.isUnixHost();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(5, externalProgramVector0.size());
      
      Font font0 = options0.getFont();
      assertNotNull(font0);
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertEquals("Monospaced", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean3 = options0.isEukaryoticMode();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector2 = Options.getPropertyValues(options0, "");
      assertNull(stringVector2);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setSystematicQualifierNames("intron");
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector3 = options0.getOptionValues("intron");
      assertNull(stringVector3);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      String string0 = options0.getDefaultFeatureFileName();
      assertNull(string0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean4 = Options.isNoddyMode();
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      
      Color color0 = options0.getDefaultFeatureColour(key0);
      assertNotNull(color0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      boolean boolean5 = options0.highlightActiveEntryFlag();
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector4 = Options.getPropertyValues(options0, "");
      assertNull(stringVector4);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setGeneticCode("org.gmod.schema.sequence.FeatureRelationshipPub");
      assertEquals(249, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(28, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals(16, stringVector0.size());
      
      StringVector stringVector1 = options0.getStartCodons();
      assertNotNull(stringVector1);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(10, stringVector1.capacity());
      assertEquals("[atg]", stringVector1.toString());
      assertFalse(stringVector1.isEmpty());
      assertEquals(1, stringVector1.size());
      
      Options options1 = (Options)options0.clone();
      assertNotNull(options1);
      assertNotSame(options0, options1);
      assertNotSame(options1, options0);
      assertTrue(options1.equals((Object)options0));
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(247, options1.size());
      assertFalse(options1.isEmpty());
      assertFalse(options1.isUnixHost());
      
      options0.setDisplayNameQualifiers("E");
      assertNotSame(options0, options1);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      
      String string0 = options0.getDefaultFeatureFileName();
      assertNull(string0);
      assertNotSame(options0, options1);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector2 = options0.getAllGeneNames();
      assertNotNull(stringVector2);
      assertNotSame(options0, options1);
      assertNotSame(stringVector2, stringVector1);
      assertSame(stringVector2, stringVector0);
      assertFalse(options0.equals((Object)options1));
      assertFalse(stringVector2.equals((Object)stringVector1));
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(16, stringVector2.size());
      assertEquals(28, stringVector2.capacity());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector2.toString());
      assertFalse(stringVector2.isEmpty());
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument((DatabaseDocument) null, "run_quietly", "E", true, inputStreamProgressListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      ExternalProgramVector externalProgramVector0 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(28, externalProgramVector0.size());
      
      options0.setDisplayNameQualifiers("([S~u");
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      boolean boolean0 = Options.readWritePossible();
      assertTrue(boolean0);
      
      Color color0 = options0.getColorFromColourNumber(1149);
      assertNull(color0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(128, qualifierInfoVector0.size());
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      
      Color color0 = options0.getDefaultFeatureColour(key0);
      assertNotNull(color0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      
      boolean boolean0 = options0.isEukaryoticMode();
      assertTrue(boolean0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      boolean boolean1 = options0.isEukaryoticMode();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      String string0 = options0.getDefaultFeatureFileName();
      assertNull(string0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(28, stringVector0.capacity());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(16, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      
      // Undeclared exception!
      try { 
        options0.getOptionValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = Options.isNoddyMode();
      assertTrue(boolean0);
      
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      int int0 = options0.getUndoLevels();
      assertEquals(20, int0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      FontUIResource fontUIResource0 = options0.getFontUIResource();
      assertNotNull(fontUIResource0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(0, fontUIResource0.getStyle());
      assertFalse(fontUIResource0.hasLayoutAttributes());
      assertEquals(12, fontUIResource0.getSize());
      assertTrue(fontUIResource0.isPlain());
      assertFalse(fontUIResource0.isBold());
      assertFalse(fontUIResource0.isItalic());
      assertEquals("Monospaced", fontUIResource0.getName());
      assertFalse(fontUIResource0.isTransformed());
      assertFalse(fontUIResource0.hasUniformLineMetrics());
      
      URL uRL0 = Loader.getResource("/Users/kp11/.artemis/cache/");
      assertNull(uRL0);
      
      StringVector stringVector0 = Options.getPropertyValues(options0, "hMV!t] v!-BL1ug=21a");
      assertNull(stringVector0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      boolean boolean1 = Options.isBlackBeltMode();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = options0.highlightActiveEntryFlag();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      MockFile mockFile0 = new MockFile(";,fzY", "/Users/kp11/.artemis/cache/");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("End_range=.,.;", "/Users/kp11/.artemis/cache/", (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache/End_range=.,.;0/Users/kp11/.artemis/cache", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache/End_range=.,.;0/Users/kp11/.artemis", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("cache", file0.getName());
      
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "/Users/kp11/.artemis/cache/");
      assertNotNull(zipFileDocument0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache/End_range=.,.;0/Users/kp11/.artemis/cache", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache/End_range=.,.;0/Users/kp11/.artemis", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("cache", file0.getName());
      assertEquals("/Users/kp11/.artemis/cache/", zipFileDocument0.getName());
      assertTrue(zipFileDocument0.writable());
      
      DatabaseDocument.CHADO_INFER_CDS = false;
      InputStream inputStream0 = zipFileDocument0.getInputStream();
      assertNotNull(inputStream0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache/End_range=.,.;0/Users/kp11/.artemis/cache", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache/End_range=.,.;0/Users/kp11/.artemis", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("cache", file0.getName());
      assertEquals("/Users/kp11/.artemis/cache/", zipFileDocument0.getName());
      assertTrue(zipFileDocument0.writable());
      
      options0.load(inputStream0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache/End_range=.,.;0/Users/kp11/.artemis/cache", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/;,fzY/Users/kp11/.artemis/cache/End_range=.,.;0/Users/kp11/.artemis", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("cache", file0.getName());
      assertEquals("/Users/kp11/.artemis/cache/", zipFileDocument0.getName());
      assertTrue(zipFileDocument0.writable());
      
      options0.setDirectEdit(false);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean0 = Options.isBlackBeltMode();
      assertFalse(boolean0);
      
      boolean boolean1 = options0.canDirectEdit();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = Options.isNoddyMode();
      assertTrue(boolean0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      Color color0 = options0.getColorFromColourNumber(22);
      assertNull(color0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setDirectEdit(false);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.reset();
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector0);
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(5, externalProgramVector0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraGffQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals(27, qualifierInfoVector0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      Integer integer0 = options0.getIntegerProperty("euk");
      assertNull(integer0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector0 = options0.getStartCodons();
      assertNotNull(stringVector0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(1, stringVector0.size());
      assertEquals(10, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[atg]", stringVector0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      options0.setGeneticCode("");
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(16, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(28, stringVector0.capacity());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector0 = options0.getDisplayQualifierNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertEquals(247, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(9, stringVector0.size());
      assertEquals("[primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(10, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      options0.setSystematicQualifierNames("<xD");
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      StringVector stringVector0 = options0.getInvisibleQualifiers(true);
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals(320, stringVector0.capacity());
      assertEquals(163, stringVector0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      boolean boolean0 = options0.highlightActiveEntryFlag();
      assertFalse(boolean0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(28, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals(16, stringVector0.size());
      
      boolean boolean2 = options0.highlightActiveEntryFlag();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      String string0 = options0.getDefaultSequenceFileName();
      assertNull(string0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      ExternalProgramVector externalProgramVector0 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(28, externalProgramVector0.size());
      
      boolean boolean3 = options0.isEukaryoticMode();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector1 = options0.getOptionValues("MessageDigest.RIPEMD160");
      assertNull(stringVector1);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      int int0 = options0.getUndoLevels();
      assertEquals(20, int0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      options0.setEukaryoticMode(true);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      assertNotNull(entryInformation0);
      assertTrue(entryInformation0.useEMBLFormat());
      
      byte[] byteArray0 = new byte[2];
      options0.clear();
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean4 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      assertEquals(2, byteArray0.length);
      
      boolean boolean5 = options0.getPropertyTruthValue("eukaryotic");
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-15);
      boolean boolean6 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-15)}, byteArray0);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6);
      assertEquals(2, byteArray0.length);
      
      StringVector stringVector2 = options0.getInvisibleQualifiers(false);
      assertNotNull(stringVector2);
      assertNotSame(stringVector2, stringVector0);
      assertFalse(stringVector2.equals((Object)stringVector0));
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      assertTrue(stringVector2.isEmpty());
      assertEquals(0, stringVector2.size());
      assertEquals(10, stringVector2.capacity());
      assertEquals("[]", stringVector2.toString());
      
      int int1 = options0.getMinimumORFSize();
      assertFalse(int1 == int0);
      assertEquals(100, int1);
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      
      ExternalProgramVector externalProgramVector1 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector1);
      assertSame(externalProgramVector1, externalProgramVector0);
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(28, externalProgramVector1.size());
      
      StringVector stringVector3 = options0.getAllGeneNames();
      assertNotNull(stringVector3);
      assertSame(stringVector3, stringVector0);
      assertNotSame(stringVector3, stringVector2);
      assertFalse(stringVector3.equals((Object)stringVector2));
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(16, stringVector3.size());
      assertEquals(28, stringVector3.capacity());
      assertFalse(stringVector3.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector3.toString());
      
      ExternalProgramVector externalProgramVector2 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector2);
      assertNotSame(externalProgramVector2, externalProgramVector1);
      assertNotSame(externalProgramVector2, externalProgramVector0);
      assertFalse(externalProgramVector2.equals((Object)externalProgramVector1));
      assertFalse(externalProgramVector2.equals((Object)externalProgramVector0));
      assertTrue(options0.isEmpty());
      assertEquals(0, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(0, externalProgramVector2.size());
      
      // Undeclared exception!
      try { 
        options0.getExtraQualifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      Set<Object> set0 = options0.keySet();
      assertNotNull(set0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(set0.isEmpty());
      assertEquals(248, set0.size());
      
      Enumeration<Object> enumeration0 = options0.keys();
      assertNotNull(enumeration0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      options0.setDirectEdit(true);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      FontUIResource fontUIResource0 = options0.getFontUIResource();
      assertNotNull(fontUIResource0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertEquals("Monospaced", fontUIResource0.getName());
      assertFalse(fontUIResource0.hasLayoutAttributes());
      assertFalse(fontUIResource0.isTransformed());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(12, fontUIResource0.getSize());
      assertTrue(fontUIResource0.isPlain());
      assertFalse(fontUIResource0.isItalic());
      assertFalse(fontUIResource0.isBold());
      assertFalse(fontUIResource0.hasUniformLineMetrics());
      
      options0.setHighlightActiveEntryFlag(true);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      
      StringVector stringVector0 = options0.getSystematicQualifierNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertEquals(10, stringVector0.capacity());
      assertEquals(7, stringVector0.size());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name]", stringVector0.toString());
      assertFalse(stringVector0.isEmpty());
      
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      Enumeration<Object> enumeration1 = options0.keys();
      assertNotNull(enumeration1);
      assertNotSame(enumeration1, enumeration0);
      assertFalse(enumeration1.equals((Object)enumeration0));
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      
      options0.list(printStream0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      
      options0.setDisplayNameQualifiers("Linux");
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      
      boolean boolean0 = Options.isBlackBeltMode();
      assertFalse(boolean0);
      
      boolean boolean1 = options0.highlightActiveEntryFlag();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      
      Set<Map.Entry<Object, Object>> set1 = (Set<Map.Entry<Object, Object>>)options0.entrySet();
      assertNotNull(set1);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertEquals(249, set1.size());
      assertFalse(set1.isEmpty());
      
      boolean boolean2 = Options.isNoddyMode();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ExternalProgramVector externalProgramVector0 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertEquals(28, externalProgramVector0.size());
      
      options0.setDisplayNameQualifiers("/Users/kp11/.artemis/cache/");
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      
      options0.setEukaryoticMode(true);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      
      options0.setHighlightActiveEntryFlag(false);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      
      String string0 = options0.getDefaultFeatureFileName();
      assertNull(string0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      Splash.appendToLog("/Users/kp11/.artemis/cache/");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Color color0 = options0.getColorFromColourNumber((-2656));
      assertNull(color0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      DatabaseDocument.TRANSCRIPT = null;
      options0.setDirectEdit(false);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      Color color1 = Color.ORANGE;
      assertNotNull(color1);
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getBlue());
      assertEquals((-14336), color1.getRGB());
      assertEquals(255, color1.getRed());
      assertEquals(200, color1.getGreen());
      
      SystemColor systemColor0 = SystemColor.menu;
      assertNotNull(systemColor0);
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Color color2 = Color.getColor("Network unreachable");
      assertNull(color2);
      
      SystemColor systemColor1 = (SystemColor)options0.merge(color1, systemColor0, biFunction0);
      assertNotNull(systemColor1);
      assertSame(systemColor0, systemColor1);
      assertSame(systemColor1, systemColor0);
      assertEquals(249, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getBlue());
      assertEquals((-14336), color1.getRGB());
      assertEquals(255, color1.getRed());
      assertEquals(200, color1.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor1.getBlue());
      assertEquals(192, systemColor1.getRed());
      assertEquals(255, systemColor1.getAlpha());
      assertEquals(1, systemColor1.getTransparency());
      assertEquals(192, systemColor1.getGreen());
      assertEquals((-4144960), systemColor1.getRGB());
      
      Object object0 = options0.remove((Object) systemColor1);
      assertNull(object0);
      assertSame(systemColor0, systemColor1);
      assertSame(systemColor1, systemColor0);
      assertEquals(249, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getBlue());
      assertEquals((-14336), color1.getRGB());
      assertEquals(255, color1.getRed());
      assertEquals(200, color1.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor1.getBlue());
      assertEquals(192, systemColor1.getRed());
      assertEquals(255, systemColor1.getAlpha());
      assertEquals(1, systemColor1.getTransparency());
      assertEquals(192, systemColor1.getGreen());
      assertEquals((-4144960), systemColor1.getRGB());
      
      boolean boolean1 = Options.readWritePossible();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = options0.isEukaryoticMode();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(249, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-91);
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)68, (byte)24, (byte)105, (byte) (-91)}, byteArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(5, byteArray0.length);
      
      StringVector stringVector0 = options0.getStartCodons();
      assertNotNull(stringVector0);
      assertEquals(249, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      assertEquals(1, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[atg]", stringVector0.toString());
      assertEquals(10, stringVector0.capacity());
      
      // Undeclared exception!
      try { 
        options0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean0 = options0.highlightActiveEntryFlag();
      assertFalse(boolean0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(stringVector0.isEmpty());
      assertEquals(16, stringVector0.size());
      assertEquals(28, stringVector0.capacity());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      
      boolean boolean2 = options0.highlightActiveEntryFlag();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      String string0 = options0.getDefaultSequenceFileName();
      assertNull(string0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      ExternalProgramVector externalProgramVector0 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(28, externalProgramVector0.size());
      
      boolean boolean3 = options0.isEukaryoticMode();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector1 = options0.getOptionValues("MessageDigest.RIPEMD160");
      assertNull(stringVector1);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      int int0 = options0.getUndoLevels();
      assertEquals(20, int0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setEukaryoticMode(true);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      ExternalProgramVector externalProgramVector1 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector1);
      assertNotSame(externalProgramVector1, externalProgramVector0);
      assertFalse(externalProgramVector1.equals((Object)externalProgramVector0));
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(5, externalProgramVector1.size());
      
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      assertNotNull(entryInformation0);
      assertTrue(entryInformation0.useEMBLFormat());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean4 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      assertEquals(2, byteArray0.length);
      
      boolean boolean5 = options0.getPropertyTruthValue("eukaryotic");
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean6 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6);
      
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-15);
      boolean boolean7 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-15)}, byteArray0);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7);
      assertEquals(2, byteArray0.length);
      
      StringVector stringVector2 = options0.getInvisibleQualifiers(false);
      assertNotNull(stringVector2);
      assertNotSame(stringVector2, stringVector0);
      assertFalse(stringVector2.equals((Object)stringVector0));
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals("[CHROMO_LINK, C_processing, C_processing_BigPi, C_processing_DGPI, COM_NAME, FEAT_NAME, LOCUS, PUB_LOCUS, PUB_COMMENT, REPEAT_TYPE, SNP, bicsw_file, blast_file, blast_score, blastn_file, blastp+go_file, blastp_file, blastx_file, cds_id, chloroplast, chromoplast, codon, comment_Cterm, comment_Nterm, created, cyanelle, end_phase, exception, exon_id, fasta_file, fasta_match, gene_id, go_from_interpro, hp_match, hth_file, interpro, map, mitochondrion, modified, number, obsolete_gene_name, pepstats_file, percent_id, pfam_match, prosite_match, pseudo, psu_domain, reserved_gene_name, query_id, sigcleave_file, score, smart_file, start_phase, tblastn_file, tblastx_file, temporary_systematic_id, transl_table, translation, type, usedin]", stringVector2.toString());
      assertEquals(60, stringVector2.size());
      assertFalse(stringVector2.isEmpty());
      assertEquals(80, stringVector2.capacity());
      
      int int1 = options0.getMinimumORFSize();
      assertFalse(int1 == int0);
      assertEquals(100, int1);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      
      ExternalProgramVector externalProgramVector2 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector2);
      assertSame(externalProgramVector2, externalProgramVector0);
      assertNotSame(externalProgramVector2, externalProgramVector1);
      assertFalse(externalProgramVector2.equals((Object)externalProgramVector1));
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(28, externalProgramVector2.size());
      
      StringVector stringVector3 = options0.getAllGeneNames();
      assertNotNull(stringVector3);
      assertSame(stringVector3, stringVector0);
      assertNotSame(stringVector3, stringVector2);
      assertFalse(stringVector3.equals((Object)stringVector2));
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector3.toString());
      assertEquals(16, stringVector3.size());
      assertFalse(stringVector3.isEmpty());
      assertEquals(28, stringVector3.capacity());
      
      ExternalProgramVector externalProgramVector3 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector3);
      assertNotSame(externalProgramVector3, externalProgramVector0);
      assertNotSame(externalProgramVector3, externalProgramVector2);
      assertSame(externalProgramVector3, externalProgramVector1);
      assertFalse(externalProgramVector3.equals((Object)externalProgramVector0));
      assertFalse(externalProgramVector3.equals((Object)externalProgramVector2));
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(5, externalProgramVector3.size());
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(128, qualifierInfoVector0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      boolean boolean0 = Options.isNoddyMode();
      assertTrue(boolean0);
      
      int int0 = options0.getMinimumORFSize();
      assertEquals(100, int0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      int int1 = options0.getMinimumORFSize();
      assertTrue(int1 == int0);
      assertEquals(100, int1);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector0 = options0.getInvisibleQualifiers(true);
      assertNotNull(stringVector0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(163, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals(320, stringVector0.capacity());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringVector stringVector1 = options0.getOptionValues("Stylesheet PIs found, stop the parse");
      assertNull(stringVector1);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector2 = options0.getSystematicQualifierNames();
      assertNotNull(stringVector2);
      assertNotSame(stringVector2, stringVector0);
      assertFalse(stringVector2.equals((Object)stringVector0));
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name]", stringVector2.toString());
      assertFalse(stringVector2.isEmpty());
      assertEquals(10, stringVector2.capacity());
      assertEquals(7, stringVector2.size());
      
      LoggerRepository loggerRepository0 = LogManager.getLoggerRepository();
      assertNotNull(loggerRepository0);
      
      StringVector stringVector3 = options0.getStartCodons();
      assertNotNull(stringVector3);
      assertNotSame(stringVector3, stringVector0);
      assertNotSame(stringVector3, stringVector2);
      assertFalse(stringVector3.equals((Object)stringVector0));
      assertFalse(stringVector3.equals((Object)stringVector2));
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(10, stringVector3.capacity());
      assertEquals(1, stringVector3.size());
      assertEquals("[atg]", stringVector3.toString());
      assertFalse(stringVector3.isEmpty());
      
      String string0 = options0.getDefaultFeatureFileName();
      assertNull(string0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      FontUIResource fontUIResource0 = options0.getFontUIResource();
      assertNotNull(fontUIResource0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(fontUIResource0.isItalic());
      assertTrue(fontUIResource0.isPlain());
      assertFalse(fontUIResource0.hasUniformLineMetrics());
      assertEquals(0, fontUIResource0.getStyle());
      assertFalse(fontUIResource0.isTransformed());
      assertEquals("Monospaced", fontUIResource0.getName());
      assertFalse(fontUIResource0.isBold());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertFalse(fontUIResource0.hasLayoutAttributes());
      assertEquals(12, fontUIResource0.getSize());
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertEquals(128, qualifierInfoVector0.size());
      
      StringVector stringVector4 = Options.getPropertyValues(options0, "/Users/kp11/.artemis/cache/");
      assertNull(stringVector4);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      int int2 = options0.getMinimumORFSize();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(100, int2);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      StringVector stringVector5 = options0.getOptionValues("B}e:#`=}");
      assertNull(stringVector5);
      assertFalse(options0.isUnixHost());
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      
      EntryInformation entryInformation0 = Options.getArtemisEntryInformation();
      assertNotNull(entryInformation0);
      assertFalse(entryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Options options0 = Options.getOptions();
      assertNotNull(options0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      assertEquals(128, qualifierInfoVector0.size());
      
      Options options1 = Options.getOptions();
      assertNotNull(options1);
      assertSame(options1, options0);
      assertFalse(options1.isUnixHost());
      assertEquals(247, options1.size());
      assertFalse(options1.isEmpty());
      
      StringVector stringVector0 = options1.getDisplayQualifierNames();
      assertNotNull(stringVector0);
      assertSame(options1, options0);
      assertFalse(options1.isUnixHost());
      assertEquals(247, options1.size());
      assertFalse(options1.isEmpty());
      assertEquals(10, stringVector0.capacity());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(9, stringVector0.size());
      
      boolean boolean0 = options0.isBuggyLinuxVM();
      assertSame(options0, options1);
      assertFalse(boolean0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options0.size());
      
      Options options2 = Options.getOptions();
      assertNotNull(options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertFalse(options2.isEmpty());
      assertEquals(247, options2.size());
      assertFalse(options2.isUnixHost());
      
      StringVector stringVector1 = options1.getStartCodons();
      assertNotNull(stringVector1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertFalse(options1.isUnixHost());
      assertEquals(247, options1.size());
      assertFalse(options1.isEmpty());
      assertEquals(1, stringVector1.size());
      assertEquals(10, stringVector1.capacity());
      assertFalse(stringVector1.isEmpty());
      assertEquals("[atg]", stringVector1.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      assertEquals(247, options1.size());
      assertFalse(options1.isUnixHost());
      assertFalse(options1.isEmpty());
      
      BiFunction<Object, Object, StringVector> biFunction0 = (BiFunction<Object, Object, StringVector>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = options0.computeIfPresent(options1, biFunction0);
      assertNull(object0);
      assertNotSame(options0, options1);
      assertNotSame(options1, options0);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options1.equals((Object)options0));
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(247, options1.size());
      assertFalse(options1.isUnixHost());
      assertFalse(options1.isEmpty());
      
      boolean boolean0 = options0.isBuggyLinuxVM();
      assertNotSame(options0, options1);
      assertFalse(options0.equals((Object)options1));
      assertFalse(boolean0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      ExternalProgramVector externalProgramVector0 = options0.getExternalPrograms();
      assertNotNull(externalProgramVector0);
      assertNotSame(options0, options1);
      assertFalse(options0.equals((Object)options1));
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(28, externalProgramVector0.size());
      
      boolean boolean1 = Options.isBlackBeltMode();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      assertNotNull(blastEntryInformation0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
      
      Key key0 = blastEntryInformation0.getDefaultKey();
      assertNotNull(key0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertEquals(12, key0.length());
      assertEquals("misc_feature", key0.toString());
      assertEquals("misc_feature", key0.getKeyString());
      
      Color color0 = options0.getDefaultFeatureColour(key0);
      assertNotNull(color0);
      assertNotSame(options0, options1);
      assertFalse(options0.equals((Object)options1));
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertEquals(12, key0.length());
      assertEquals("misc_feature", key0.toString());
      assertEquals("misc_feature", key0.getKeyString());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getGreen());
      
      boolean boolean2 = options1.canDirectEdit();
      assertNotSame(options1, options0);
      assertFalse(options1.equals((Object)options0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(247, options1.size());
      assertFalse(options1.isUnixHost());
      assertFalse(options1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      int int0 = options0.getUndoLevels();
      assertEquals(20, int0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setDirectEdit(false);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)options0.entrySet();
      assertNotNull(set0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(248, set0.size());
      assertFalse(set0.isEmpty());
      
      StringVector stringVector0 = options0.getAllGeneNames();
      assertNotNull(stringVector0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(16, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(28, stringVector0.capacity());
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      stringVector0.replaceAll(unaryOperator0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(16, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(28, stringVector0.capacity());
      
      boolean boolean0 = stringVector0.removeElement(options0);
      assertFalse(boolean0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(16, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID]", stringVector0.toString());
      assertEquals(28, stringVector0.capacity());
      
      StringVector stringVector1 = new StringVector("/Users/kp11/.artemis/cache/");
      assertNotNull(stringVector1);
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertEquals(10, stringVector1.capacity());
      assertEquals("[/Users/kp11/.artemis/cache/]", stringVector1.toString());
      assertFalse(stringVector1.isEmpty());
      assertEquals(1, stringVector1.size());
      
      stringVector0.add(stringVector1);
      assertNotSame(stringVector0, stringVector1);
      assertNotSame(stringVector1, stringVector0);
      assertFalse(stringVector0.equals((Object)stringVector1));
      assertFalse(stringVector1.equals((Object)stringVector0));
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(17, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals(28, stringVector0.capacity());
      assertEquals("[systematic_id, temporary_systematic_id, locus_tag, gene, label, ID, Name, primary_name, Name, synonym, systematic_id, temporary_systematic_id, gene, locus_tag, label, ID, /Users/kp11/.artemis/cache/]", stringVector0.toString());
      assertEquals(10, stringVector1.capacity());
      assertEquals("[/Users/kp11/.artemis/cache/]", stringVector1.toString());
      assertFalse(stringVector1.isEmpty());
      assertEquals(1, stringVector1.size());
      
      boolean boolean1 = Options.isNoddyMode();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      QualifierInfoVector qualifierInfoVector0 = options0.getExtraGffQualifiers();
      assertNotNull(qualifierInfoVector0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(27, qualifierInfoVector0.size());
      
      options0.setDirectEdit(false);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      options0.forEach(biConsumer0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      boolean boolean2 = Options.isUnixHost();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      assertNotNull(externalProgramVector0);
      assertEquals(5, externalProgramVector0.size());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      Font font0 = options0.getFont();
      assertNotNull(font0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals("Monospaced", font0.getName());
      
      boolean boolean3 = options0.isEukaryoticMode();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector2 = Options.getPropertyValues(options0, "");
      assertNull(stringVector2);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setSystematicQualifierNames("");
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector3 = options0.getOptionValues("");
      assertNull(stringVector3);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      String string0 = options0.getDefaultFeatureFileName();
      assertNull(string0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      
      Color color0 = options0.getDefaultFeatureColour(key0);
      assertNotNull(color0);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(255, color0.getGreen());
      
      boolean boolean4 = options0.highlightActiveEntryFlag();
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      StringVector stringVector4 = Options.getPropertyValues(options0, "");
      assertNull(stringVector4);
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      
      options0.setGeneticCode("org.gmod.schema.sequence.FeatureRelationshipPub");
      assertFalse(options0.isEmpty());
      assertEquals(249, options0.size());
      assertFalse(options0.isUnixHost());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      assertNotNull(simpleEntryInformation0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
      
      GFFDocumentEntry gFFDocumentEntry0 = new GFFDocumentEntry(simpleEntryInformation0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(248, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      options0.setGeneticCode("/Users/kp11/.artemis/cache/");
      assertEquals(249, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      DatabaseDocument.TRANSCRIPT = "/Users/kp11/.artemis/cache/";
      boolean boolean0 = Options.readWritePossible();
      assertTrue(boolean0);
      
      Color color0 = options0.getColorFromColourNumber(1051);
      assertNull(color0);
      assertEquals(249, options0.size());
      assertFalse(options0.isEmpty());
      assertFalse(options0.isUnixHost());
      
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      assertNotNull(blastEntryInformation0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
      
      Key key0 = blastEntryInformation0.getDefaultKey();
      assertNotNull(key0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertEquals(12, key0.length());
      assertEquals("misc_feature", key0.getKeyString());
      assertEquals("misc_feature", key0.toString());
      
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-904));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertEquals(247, options0.size());
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      
      options0.setGeneticCode("d%y#(Ei,`7!',\"");
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      DatabaseDocument.TRANSCRIPT = "d%y#(Ei,`7!',\"";
      boolean boolean0 = Options.readWritePossible();
      assertTrue(boolean0);
      
      Color color0 = options0.getColorFromColourNumber(1051);
      assertNull(color0);
      assertFalse(options0.isUnixHost());
      assertFalse(options0.isEmpty());
      assertEquals(248, options0.size());
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      Entry entry0 = simpleEntryGroup0.createEntry("/Users/kp11/.artemis/cache/");
      assertNotNull(entry0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      assertNotNull(blastEntryInformation0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
      
      Key key0 = blastEntryInformation0.getDefaultKey();
      assertNotNull(key0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertEquals("misc_feature", key0.toString());
      assertEquals("misc_feature", key0.getKeyString());
      assertEquals(12, key0.length());
      
      Range range0 = new Range(1051, 1051);
      assertNotNull(range0);
      assertEquals(1051, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1051, range0.getEnd());
      
      RangeVector rangeVector0 = new RangeVector(range0);
      assertNotNull(rangeVector0);
      assertEquals(1051, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1051, range0.getEnd());
      assertEquals(1, rangeVector0.size());
      assertFalse(rangeVector0.isEmpty());
      assertEquals(10, rangeVector0.capacity());
      assertEquals("[1051]", rangeVector0.toString());
      
      Location location0 = new Location(rangeVector0, false);
      assertNotNull(location0);
      assertEquals(1051, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1051, range0.getEnd());
      assertEquals(1, rangeVector0.size());
      assertFalse(rangeVector0.isEmpty());
      assertEquals(10, rangeVector0.capacity());
      assertEquals("[1051]", rangeVector0.toString());
      
      Location location1 = location0.copy();
      assertNotNull(location1);
      assertNotSame(location0, location1);
      assertNotSame(location1, location0);
      assertFalse(location1.equals((Object)location0));
      assertEquals(1051, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1051, range0.getEnd());
      assertEquals(1, rangeVector0.size());
      assertFalse(rangeVector0.isEmpty());
      assertEquals(10, rangeVector0.capacity());
      assertEquals("[1051]", rangeVector0.toString());
      
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-904));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Options options0 = new Options();
      options0.getSystematicQualifierNames();
      options0.highlightActiveEntryFlag();
      options0.getDefaultFeatureFileName();
      Options options1 = Options.getOptions();
      options0.getDefaultSequenceFileName();
      options0.getFontUIResource();
      options0.getInvisibleQualifiers(false);
      options0.isEukaryoticMode();
      assertEquals(248, options0.size());
      
      options1.setDirectEdit(true);
      options0.reset();
      options1.getExternalPrograms();
      assertTrue(options1.equals((Object)options0));
      
      boolean boolean0 = Options.isNoddyMode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Options options0 = new Options();
      options0.setDirectEdit(true);
      options0.clear();
      Options.getDBEntryInformation();
      options0.getMinimumORFSize();
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      LogManager.setRepositorySelector(repositorySelector0, repositorySelector0);
      options0.getOptionValues("O1G");
      Options.isUnixHost();
      Options.getDBEntryInformation();
      options0.canDirectEdit();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        options0.replace((Object) "/Users/kp11/.artemis/cache/", (Object) null, (Object) byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Options.isBlackBeltMode();
      Options options0 = new Options();
      options0.setDisplayNameQualifiers("255 200 200");
      options0.isBuggyLinuxVM();
      options0.getUndoLevels();
      options0.setSystematicQualifierNames("colour_3");
      options0.setDisplayNameQualifiers("255 200 200");
      ExternalProgramVector externalProgramVector0 = options0.getNCBIPrograms();
      options0.setProperty("f", "=jK#.2Q(HBX.?)U!0^");
      options0.setEukaryoticMode(false);
      Options.isBlackBeltMode();
      options0.setEukaryoticMode(false);
      LogLog.setQuietMode(false);
      options0.getOrDefault("=jK#.2Q(HBX.?)U!0^", "colour_3");
      Options.isBlackBeltMode();
      options0.getIntegerProperty("Xjg~7'QkfmwIN`!");
      Options.isBlackBeltMode();
      options0.getFont();
      options0.getMinimumORFSize();
      options0.highlightActiveEntryFlag();
      Options options1 = Options.getOptions();
      // Undeclared exception!
      try { 
        options1.put(externalProgramVector0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Options options0 = new Options();
      options0.getStartCodons();
      options0.setSystematicQualifierNames("yes");
      options0.clear();
      StringVector stringVector0 = options0.getInvisibleQualifiers(false);
      assertEquals(10, stringVector0.capacity());
  }
}
