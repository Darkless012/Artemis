/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:57:24 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.Entry;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.LineGroup;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.io.StreamSequence;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GenbankStreamSequence_ESTest extends GenbankStreamSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("#]q;x9d\u0001");
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("356", (String) null, (String) null, (String) null, (String) null).when(linePushBackReader0).readLine();
      // Undeclared exception!
      genbankStreamSequence0.readSequence(linePushBackReader0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("BASE COUNT", "O5F|!*ex;:").when(linePushBackReader0).readLine();
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("BASE COUNT");
      LinePushBackReader linePushBackReader1 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader1).readLine();
      genbankStreamSequence0.readSequence(linePushBackReader1);
      GenbankStreamSequence genbankStreamSequence1 = null;
      try {
        genbankStreamSequence1 = new GenbankStreamSequence(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Genbank sequence data should have \"ORIGIN\" on the second line
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("uk.ac.sanger.artemis.io.InvalidRelationException", (String) null, (String) null, (String) null, (String) null).when(linePushBackReader0).readLine();
      // Undeclared exception!
      genbankStreamSequence0.readSequence(linePushBackReader0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("#]q;x9d\u0001");
      String string0 = "dd.MM.yyyy hh:mm:ss z";
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(linePushBackReader0).getLineNumber();
      doReturn("dd.MM.yyyy hh:mm:ss z").when(linePushBackReader0).readLine();
      try { 
        genbankStreamSequence0.readSequence(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // GENBANK sequence file contains a character that is not a letter: :
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("U");
      genbankStreamSequence0.setHeader("U");
      genbankStreamSequence0.setHeader("U");
      genbankStreamSequence0.setHeader(" g");
      genbankStreamSequence0.copy();
      LineGroup.getLineType("U");
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("ORIGIN", (String) null, (String) null, (String) null, (String) null).when(linePushBackReader0).readLine();
      genbankStreamSequence0.forceReset();
      // Undeclared exception!
      genbankStreamSequence0.readSequence(linePushBackReader0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("y");
      genbankStreamSequence0.setHeader("y");
      genbankStreamSequence0.setHeader("y");
      genbankStreamSequence0.setHeader(" g");
      genbankStreamSequence0.copy();
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null, (String) null, (String) null, (String) null).when(linePushBackReader0).readLine();
      genbankStreamSequence0.forceReset();
      // Undeclared exception!
      genbankStreamSequence0.readSequence(linePushBackReader0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("BASE COUNTGENBANK sequence file contains a character that is not a letter: ", (String) null).when(linePushBackReader0).readLine();
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Genbank sequence data should have \"ORIGIN\" on the second line
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      StreamSequence streamSequence0 = genbankStreamSequence0.copy();
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("//").when(linePushBackReader0).readLine();
      genbankStreamSequence0.forceReset();
      genbankStreamSequence0.readSequence(linePushBackReader0);
      genbankStreamSequence0.forceReset();
      GenbankStreamSequence genbankStreamSequence1 = new GenbankStreamSequence(streamSequence0);
      LineGroup.getLineType("RgsMax(pb{");
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.charAt(2359);
      // Undeclared exception!
      try { 
        genbankStreamSequence1.getCharSubSequence(2048, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("dN^T{*a26N|/)1&]ML");
      LineGroup.getLineType("dN^T{*a26N|/)1&]ML");
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("Eq8B^LK1m?'x;!-m").when(linePushBackReader0).readLine();
      try { 
        genbankStreamSequence0.readHeader(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Genbank sequence data should begin with \"BASE COUNT\" or \"ORIGIN\"
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("Wg[").when(linePushBackReader0).readLine();
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Genbank sequence data should begin with \"BASE COUNT\" or \"ORIGIN\"
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("UaLkYW}<S>&nJSDV").when(linePushBackReader0).readLine();
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Genbank sequence data should begin with \"BASE COUNT\" or \"ORIGIN\"
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(" t");
      genbankStreamSequence0.copy();
      String string0 = "";
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      String string1 = "Eq8B^LK1m?'x;!-m";
      LinePushBackReader linePushBackReader1 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(linePushBackReader1).getLineNumber();
      doReturn("Eq8B^LK1m?'x;!-m").when(linePushBackReader1).readLine();
      try { 
        genbankStreamSequence0.readSequence(linePushBackReader1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // GENBANK sequence file contains a character that is not a letter: 8
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(linePushBackReader0).getLineNumber();
      doReturn("ORIGINBASE COUNTGENBANK sequence file contains a character that is not a letter: ", (String) null).when(linePushBackReader0).readLine();
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // GENBANK sequence file contains a character that is not a letter: :
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader0).readLine();
      genbankStreamSequence0.forceReset();
      genbankStreamSequence0.readSequence(linePushBackReader0);
      genbankStreamSequence0.getHeader();
      genbankStreamSequence0.copy();
      genbankStreamSequence0.getFormatType();
      genbankStreamSequence0.getFormatType();
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '%';
      charArray0[2] = 'l';
      genbankStreamSequence0.setFromChar(charArray0);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      LineGroup.getLineType("");
      LineGroup.writeEndOfEMBLEntry(writer0);
      LinePushBackReader linePushBackReader1 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader1).readLine();
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      LineGroup.readNextLineGroup(linePushBackReader1, entry0);
      genbankStreamSequence0.getHeader();
      genbankStreamSequence0.setSequencePackingCapacity(2);
      genbankStreamSequence0.setHeader("Tk(QufL- 2!P.");
      String string0 = "";
      genbankStreamSequence0.setHeader("");
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.writeToStream(writer1);
      // Undeclared exception!
      try { 
        genbankStreamSequence0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("uk.ac.sanger.artemis.io.BioJavaEntry");
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.setCounts();
      Writer writer1 = null;
      // Undeclared exception!
      try { 
        genbankStreamSequence0.writeToStream((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("Start_range");
      genbankStreamSequence0.forceReset();
      genbankStreamSequence0.getSubSequence(3979, 3782);
      genbankStreamSequence0.setHeader("Start_range");
      genbankStreamSequence0.getHeader();
      genbankStreamSequence0.copy();
      genbankStreamSequence0.getHeader();
      genbankStreamSequence0.getFormatType();
      genbankStreamSequence0.setHeader("Start_range");
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader0).readLine();
      // Undeclared exception!
      try { 
        genbankStreamSequence0.readHeader(linePushBackReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("=rF(@`J`x");
      genbankStreamSequence0.setHeader("=rF(@`J`x");
      genbankStreamSequence0.copy();
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '?';
      charArray0[2] = ')';
      charArray0[3] = 'T';
      charArray0[4] = 'f';
      genbankStreamSequence0.setFromChar(charArray0);
      genbankStreamSequence0.getFormatType();
      // Undeclared exception!
      try { 
        genbankStreamSequence0.writeToStream((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence((Sequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("p5`!zx1@8oLE");
      genbankStreamSequence0.setHeader("");
      genbankStreamSequence0.copy();
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader0).readLine();
      genbankStreamSequence0.readSequence(linePushBackReader0);
      genbankStreamSequence0.getHeader();
      genbankStreamSequence0.setSequencePackingCapacity(90);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.writeToStream(writer0);
      genbankStreamSequence0.setHeader("");
      genbankStreamSequence0.getHeader();
      LinePushBackReader linePushBackReader1 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader1).readLine();
      genbankStreamSequence0.readSequence(linePushBackReader1);
      genbankStreamSequence0.getFormatType();
      genbankStreamSequence0.getFormatType();
      // Undeclared exception!
      try { 
        genbankStreamSequence0.readSequence((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("cQ");
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader0).readLine();
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      LineGroup.readNextLineGroup(linePushBackReader0, entry0);
      genbankStreamSequence0.forceReset();
      genbankStreamSequence0.setCounts();
      genbankStreamSequence0.setHeader("cQ");
      genbankStreamSequence0.setHeader("cQ");
      genbankStreamSequence0.copy();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("uk.ac.sanger.artemis.io.StreamFeatureTable");
      LineGroup.getLineType("uk.ac.sanger.artemis.io.StreamFeatureTable");
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.writeToStream(writer0);
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.writeToStream(writer1);
      Writer writer2 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.writeToStream(writer2);
      genbankStreamSequence0.setHeader("");
      genbankStreamSequence0.getFormatType();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(" t");
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.setCounts();
      char[] charArray0 = new char[0];
      genbankStreamSequence0.appendChar(charArray0);
      genbankStreamSequence0.writeToStream(writer0);
      genbankStreamSequence0.copy();
      genbankStreamSequence0.getFormatType();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      StreamSequence streamSequence0 = genbankStreamSequence0.copy();
      GenbankStreamSequence genbankStreamSequence1 = new GenbankStreamSequence(streamSequence0);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence1.writeToStream(writer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("~I]G\"Iy`cK");
      genbankStreamSequence0.setHeader("~I]G\"Iy`cK");
      genbankStreamSequence0.getFormatType();
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '%';
      charArray0[2] = 'e';
      charArray0[3] = 'N';
      genbankStreamSequence0.setFromChar(charArray0);
      // Undeclared exception!
      try { 
        genbankStreamSequence0.writeToStream((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("U");
      genbankStreamSequence0.setHeader("U");
      genbankStreamSequence0.setHeader("U");
      genbankStreamSequence0.setHeader(" g");
      genbankStreamSequence0.copy();
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader0).readLine();
      genbankStreamSequence0.forceReset();
      genbankStreamSequence0.readSequence(linePushBackReader0);
      LinePushBackReader linePushBackReader1 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        genbankStreamSequence0.readHeader((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("hqs0?sfsR+D^3z&");
      GenbankStreamSequence genbankStreamSequence1 = new GenbankStreamSequence(genbankStreamSequence0);
      genbankStreamSequence1.setHeader("hqs0?sfsR+D^3z&");
      genbankStreamSequence1.getHeader();
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader0).readLine();
      // Undeclared exception!
      try { 
        genbankStreamSequence1.readHeader(linePushBackReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("L{J$1sUU");
      StreamSequence streamSequence0 = genbankStreamSequence0.copy();
      GenbankStreamSequence genbankStreamSequence1 = new GenbankStreamSequence(streamSequence0);
      genbankStreamSequence1.getFormatType();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(" is not a valid ");
      StreamSequence streamSequence0 = genbankStreamSequence0.copy();
      GenbankStreamSequence genbankStreamSequence1 = new GenbankStreamSequence(streamSequence0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("J|4}");
      genbankStreamSequence0.setHeader("J|4}");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      genbankStreamSequence0.getFormatType();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("0C52fpJ|A>JsV(");
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader0).readLine();
      genbankStreamSequence0.readSequence(linePushBackReader0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("1DbkZpKvZKQT ZWhQ-");
      // Undeclared exception!
      try { 
        genbankStreamSequence0.readSequence((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      GenbankStreamSequence genbankStreamSequence1 = new GenbankStreamSequence(genbankStreamSequence0);
      genbankStreamSequence1.getHeader();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader0).readLine();
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence(linePushBackReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linePushBackReader0).readLine();
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence(linePushBackReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("#");
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(linePushBackReader0).getLineNumber();
      doReturn(" A!4C{P}{(58^>*W(").when(linePushBackReader0).readLine();
      genbankStreamSequence0.setHeader(">jst2R>kl6}wp<)5I");
      try { 
        genbankStreamSequence0.readSequence(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // GENBANK sequence file contains a character that is not a letter: !
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'b';
      charArray0[2] = '`';
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("BASE COUNTqyHg[dfCJcaVWyfu$j[", (String) null).when(linePushBackReader0).readLine();
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence(linePushBackReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("/VwNCsJrB").when(linePushBackReader0).readLine();
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Genbank sequence data should begin with \"BASE COUNT\" or \"ORIGIN\"
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("356");
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.writeToStream(writer0);
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.writeToStream(writer1);
      genbankStreamSequence0.getHeader();
      genbankStreamSequence0.getFormatType();
      Writer writer2 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.writeToStream(writer2);
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("356").when(linePushBackReader0).readLine();
      try { 
        genbankStreamSequence0.readHeader(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Genbank sequence data should begin with \"BASE COUNT\" or \"ORIGIN\"
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_M}23sHR1J*X;6K");
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      genbankStreamSequence0.writeToStream(writer0);
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("_M}23sHR1J*X;6K").when(linePushBackReader0).readLine();
      int int0 = LineGroup.GFF_MISC;
      try { 
        genbankStreamSequence0.readHeader(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Genbank sequence data should begin with \"BASE COUNT\" or \"ORIGIN\"
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      LinePushBackReader linePushBackReader1 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      LineGroup.writeEndOfEMBLEntry(writer1);
      Writer writer2 = mock(Writer.class, new ViolatedAssumptionAnswer());
      LinePushBackReader linePushBackReader2 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("uk.ac.sanger.artemis.io.EMBLObject");
      String string0 = "_";
      genbankStreamSequence0.setHeader("_");
      genbankStreamSequence0.setCounts();
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = 'G';
      charArray0[2] = '2';
      charArray0[3] = '9';
      genbankStreamSequence0.setFromChar(charArray0);
      genbankStreamSequence0.forceReset();
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(linePushBackReader0).getLineNumber();
      doReturn("_").when(linePushBackReader0).readLine();
      genbankStreamSequence0.copy();
      try { 
        genbankStreamSequence0.readSequence(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // GENBANK sequence file contains a character that is not a letter: _
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }
}
