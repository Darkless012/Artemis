/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 10:15:12 GMT 2018
 */

package uk.ac.sanger.artemis.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JPasswordField;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyledEditorKit;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gmod.schema.sequence.Feature;
import org.gmod.schema.sequence.FeatureLoc;
import org.gmod.schema.sequence.FeatureRelationship;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.chado.ChadoTransaction;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.GFFStreamFeature;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.KeyVector;
import uk.ac.sanger.artemis.io.PublicDBDocumentEntry;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.j2ssh.SshLogin;
import uk.ac.sanger.artemis.util.ByteBuffer;
import uk.ac.sanger.artemis.util.DatabaseDocument;
import uk.ac.sanger.artemis.util.InputStreamProgressListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatabaseDocument_ESTest extends DatabaseDocument_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DatabaseDocument.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<FeatureLoc> vector0 = new Vector<FeatureLoc>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((FeatureLoc) null);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatabaseDocument.getFeatureLoc(vector0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatabaseDocument databaseDocument0 = new DatabaseDocument("hiJCh[1J", (JPasswordField) null, "-@1#U~XRJ~YWrZLM", "hiJCh[1J");
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.isSingleSchema());
      assertEquals("-@1#U~XRJ~YWrZLM", databaseDocument0.getSrcFeatureId());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument1 = new DatabaseDocument(databaseDocument0, "genedb_products", (Feature) null, (Range) null, inputStreamProgressListener0);
      assertFalse(databaseDocument1.equals((Object)databaseDocument0));
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.isSingleSchema());
      assertEquals("-@1#U~XRJ~YWrZLM", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument1.readable());
      assertEquals("-1", databaseDocument1.getSrcFeatureId());
      assertTrue(databaseDocument1.writable());
      assertTrue(databaseDocument1.isLazyFeatureLoad());
      assertTrue(databaseDocument1.isSingleSchema());
      assertNotNull(databaseDocument1);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("Failed to create sftp client connection. Retrying.", 8814);
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("Failed to create sftp client connection. Retrying.", jPasswordField0, "QHt:?C3LG", "");
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.readable());
      assertEquals("QHt:?C3LG", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.writable());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      DatabaseDocument databaseDocument1 = (DatabaseDocument)databaseDocument0.append("I4BIi|j&;ov}<rNNNSg");
      assertNotSame(databaseDocument0, databaseDocument1);
      assertNotSame(databaseDocument1, databaseDocument0);
      assertFalse(databaseDocument1.equals((Object)databaseDocument0));
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.readable());
      assertEquals("QHt:?C3LG", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.writable());
      assertEquals("1", databaseDocument1.getSrcFeatureId());
      assertTrue(databaseDocument1.isSingleSchema());
      assertTrue(databaseDocument1.isLazyFeatureLoad());
      assertTrue(databaseDocument1.readable());
      assertTrue(databaseDocument1.writable());
      assertNotNull(databaseDocument1);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      assertNotNull(styledEditorKit0);
      
      javax.swing.text.Document document0 = styledEditorKit0.createDefaultDocument();
      assertNotNull(document0);
      
      JPasswordField jPasswordField0 = new JPasswordField(document0, "", 1019);
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("/some_dir/some.jar", jPasswordField0, "", "/some_dir/some.jar", true);
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.writable());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getUserName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseLocationParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabaseDocument.getUpdateResiduesColumnTransactions((ChadoTransaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField(0);
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertNotNull(jPasswordField0);
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "", "", true, inputStreamProgressListener0);
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(databaseDocument0.writable());
      assertEquals("", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      KeyVector keyVector0 = new KeyVector();
      assertTrue(keyVector0.isEmpty());
      assertEquals(0, keyVector0.size());
      assertNotNull(keyVector0);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getSimilarityMatches(keyVector0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      assertNotNull(sshLogin0);
      
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0);
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.writable());
      assertEquals("1", databaseDocument0.getSrcFeatureId());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getPartOfFeatures("m'T9!, /dpo(");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      assertNotNull(sshLogin0);
      
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0);
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals("1", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getOutputStream();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringContent stringContent0 = new StringContent();
      assertNotNull(stringContent0);
      
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      assertNotNull(plainDocument0);
      
      JPasswordField jPasswordField0 = new JPasswordField(plainDocument0, "", 3405);
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "", "", (ByteBuffer) null, "");
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertEquals("", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.readable());
      assertEquals("", databaseDocument0.getName());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getGraphs();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", (JPasswordField) null, "LE{0kz\"", "hQ8V", true);
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("LE{0kz\"", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getGraphData((-38), "hQ8V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("##gff-version 3\n", jPasswordField0, "..", "##gff-version 3\n");
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.isSingleSchema());
      assertEquals("..", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.readable());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getGffDocuments("..", "C:a_-$-?LrO", "-+cW6TUL__u c]7t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabaseDocument databaseDocument0 = new DatabaseDocument("hiJCh[1J", (JPasswordField) null, "-@1#U~XRJ~YWrZLM", "hiJCh[1J");
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("-@1#U~XRJ~YWrZLM", databaseDocument0.getSrcFeatureId());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getDatabaseNames();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabaseDocument.getCvterms(".seq.", ".seq.", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabaseDocument.getCvtermID("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabaseDocument.getCvtermFromGoId("Lkep(G.B]=VaPyyL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabaseDocument.getCvTermByCvTermName("99sJO[\"d^pfej}; ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabaseDocument.getCvTermByCvPartAndCvTerm("mRNA", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabaseDocument.getCvTermByCvAndCvTerm("RILEY", "+},B@S22dX: R/hXH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("_:[SJsNZ", 0);
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("e+\"{IP*J216", jPasswordField0, "_:[SJsNZ", "e+\"{IP*J216");
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertEquals("_:[SJsNZ", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.readable());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getChadoGeneByAnyCurrentName("false");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField(11);
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertNotNull(jPasswordField0);
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("%3B", jPasswordField0, "%3B", "<@W19TO(:&&", false, inputStreamProgressListener0);
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertEquals("%3B", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.writable());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getCdsFeatureLocsByTranscriptName("JDBC.Password");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("period: 0 (expected: != 0)", 0);
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("period: 0 (expected: != 0)", jPasswordField0);
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("1", databaseDocument0.getSrcFeatureId());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getCdsFeatureLocsByPeptideName("period: 0 (expected: != 0)");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range(748, 748);
      assertEquals(748, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(748, range0.getEnd());
      assertNotNull(range0);
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument((DatabaseDocument) null, "o{ZA'^0W6|8)n&65", (Feature) null, range0, inputStreamProgressListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument((DatabaseDocument) null, "", "", false, inputStreamProgressListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument("-l'4WZQz&O2", (JPasswordField) null, "Setting featureId for:", "-l'4WZQz&O2", true, inputStreamProgressListener0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertNotNull(jPasswordField0);
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument((String) null, jPasswordField0, (String) null, "", true, inputStreamProgressListener0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("", 8318);
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument("uaaOqgM@'cjLMYsPioy", jPasswordField0, "", "cF~p", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      assertNotNull(sshLogin0);
      
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument((String) null, jPasswordField0, "GFF_source:", (String) null, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      assertNotNull(sshLogin0);
      
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertNotNull(jPasswordField0);
      
      ByteBuffer byteBuffer0 = new ByteBuffer();
      assertEquals(0, byteBuffer0.size());
      assertNotNull(byteBuffer0);
      
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument("GOid=", jPasswordField0, "", "", byteBuffer0, "GOid=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField(3329);
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertNotNull(jPasswordField0);
      
      ByteBuffer byteBuffer0 = new ByteBuffer();
      assertEquals(0, byteBuffer0.size());
      assertNotNull(byteBuffer0);
      
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument((String) null, jPasswordField0, "Can't access template fields", (String) null, byteBuffer0, "Can't access template fields");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("XzTe");
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument("XzTe", jPasswordField0, "XzTe", (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField((String) null, 8929);
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument((String) null, jPasswordField0, ".", "*>jN,W");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("0.?35clsz");
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument("0.?35clsz", jPasswordField0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument((String) null, jPasswordField0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", (JPasswordField) null);
      assertEquals("1", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.isSingleSchema());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      String string0 = databaseDocument0.getUserName();
      assertEquals("chado", string0);
      assertEquals("1", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.isSingleSchema());
      assertNotNull(string0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DatabaseDocument.initMDC((DatabaseDocument) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector<FeatureLoc> vector0 = new Vector<FeatureLoc>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      FeatureLoc featureLoc0 = DatabaseDocument.getFeatureLoc(vector0, (-1));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(featureLoc0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertNotNull(blastEntryInformation0);
      
      Key key0 = blastEntryInformation0.getDefaultKey();
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertEquals("misc_feature", key0.getKeyString());
      assertEquals("misc_feature", key0.toString());
      assertEquals(12, key0.length());
      assertNotNull(key0);
      
      KeyVector keyVector0 = new KeyVector(key0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertEquals("misc_feature", key0.getKeyString());
      assertEquals("misc_feature", key0.toString());
      assertEquals(12, key0.length());
      assertEquals(1, keyVector0.size());
      assertFalse(keyVector0.isEmpty());
      assertNotNull(keyVector0);
      
      // Undeclared exception!
      try { 
        DatabaseDocument.getFeatureLoc(keyVector0, (-1718));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.io.Key cannot be cast to org.gmod.schema.sequence.FeatureLoc
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("");
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertNotNull(jPasswordField0);
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "#{N0PUIf)n7l", "", false, inputStreamProgressListener0);
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("#{N0PUIf)n7l", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.writable());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      Stack<ChadoTransaction> stack0 = new Stack<ChadoTransaction>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        databaseDocument0.commit(stack0, false);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlainDocument plainDocument0 = new PlainDocument();
      assertNotNull(plainDocument0);
      
      JPasswordField jPasswordField0 = new JPasswordField(plainDocument0, "+=v/=R|/4v.4", 0);
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("ikoMFy`?Kme,OLry.L=%T+Qe8>@&CIDlv4S4*", jPasswordField0, "mUgH;]Pz??c~P!|59I", "7>73kybC~w5", true);
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals("ikoMFy`", databaseDocument0.getName());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("mUgH;]Pz??c~P!|59I", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      OutputStream outputStream0 = databaseDocument0.getOutputStream();
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals("ikoMFy`", databaseDocument0.getName());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("mUgH;]Pz??c~P!|59I", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertNotNull(outputStream0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = DatabaseDocument.isCvThreadAlive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabaseDocument.getSynonymTypeNames("=dsN", (GFFStreamFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabaseDocument.getCvControledCurationNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringContent stringContent0 = new StringContent(204);
      assertNotNull(stringContent0);
      
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      assertNotNull(plainDocument0);
      
      JPasswordField jPasswordField0 = new JPasswordField(plainDocument0, ")i:?\"4 ", 260);
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument(")i:?\"4 ", jPasswordField0);
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals("1", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.readable());
      assertEquals(")i:", databaseDocument0.getName());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.writable());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getOrganismNames();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      assertNotNull(sshLogin0);
      
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("=WP<R+4", jPasswordField0, "=WP<R+4", "AV}");
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("=WP<R+4", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.readable());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getCvTermsByCvName("mRNA");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabaseDocument.getCvTermByCvTermId(114, (uk.ac.sanger.artemis.io.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertNotNull(jPasswordField0);
      
      ByteBuffer byteBuffer0 = new ByteBuffer();
      assertEquals(0, byteBuffer0.size());
      assertNotNull(byteBuffer0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("hI*/QX%MTL", jPasswordField0, "hI*/QX%MTL", "hI*/QX%MTL", byteBuffer0, (String) null);
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(0, byteBuffer0.size());
      assertTrue(databaseDocument0.writable());
      assertEquals("hI*/QX%MTL", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("Couldn't alter annotation", (JPasswordField) null, "ICCRc>}UK6`_m#uY", "", false, inputStreamProgressListener0);
      assertEquals("ICCRc>}UK6`_m#uY", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getInputStream();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("");
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertNotNull(jPasswordField0);
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "", "", true, inputStreamProgressListener0);
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertEquals("", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      // Undeclared exception!
      try { 
        databaseDocument0.getName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteBuffer byteBuffer0 = new ByteBuffer();
      assertEquals(0, byteBuffer0.size());
      assertNotNull(byteBuffer0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("B4vb:L;zd~^", (JPasswordField) null, "B4vb:L;zd~^", "", byteBuffer0, "");
      assertEquals(0, byteBuffer0.size());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.readable());
      assertEquals("B4vb:L;zd~^", databaseDocument0.getSrcFeatureId());
      assertEquals("", databaseDocument0.getName());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      try { 
        databaseDocument0.getOutputStream();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("");
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertNotNull(jPasswordField0);
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "", "", true, inputStreamProgressListener0);
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertTrue(databaseDocument0.readable());
      assertEquals("", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      databaseDocument0.reset();
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertTrue(databaseDocument0.readable());
      assertEquals("", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField(",7>'");
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("^w}73Xp)6gsw&sNP=z5Cq8", jPasswordField0);
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals("1", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.readable());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      String string0 = databaseDocument0.getSrcFeatureId();
      assertEquals("1", string0);
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals("1", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.readable());
      assertNotNull(string0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      assertNotNull(sshLogin0);
      
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "2++vd-vBcz", "", true, (InputStreamProgressListener) null);
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertEquals("2++vd-vBcz", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.readable());
      assertNotNull(databaseDocument0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      DatabaseDocument.LocationComarator databaseDocument_LocationComarator0 = databaseDocument0.new LocationComarator();
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertEquals("2++vd-vBcz", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.readable());
      assertNotNull(databaseDocument_LocationComarator0);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL;
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      Short short0 = new Short((short) (-10548));
      assertEquals((short) (-10548), (short)short0);
      assertNotNull(short0);
      
      FeatureLoc featureLoc0 = new FeatureLoc((Feature) null, (Feature) null, integer0, true, integer0, false, short0, integer0, 1264, (-407391493));
      assertEquals(0, featureLoc0.getFeatureLocId());
      assertFalse(featureLoc0.isFmaxPartial());
      assertEquals(1264, featureLoc0.getLocGroup());
      assertEquals((short) (-10548), (short)featureLoc0.getStrand());
      assertEquals(0, featureLoc0.getSrcFeatureId());
      assertEquals(4, (int)featureLoc0.getFmin());
      assertTrue(featureLoc0.isFminPartial());
      assertEquals(4, (int)featureLoc0.getPhase());
      assertNull(featureLoc0.getResidueInfo());
      assertEquals((-407391493), featureLoc0.getRank());
      assertEquals(4, (int)featureLoc0.getFmax());
      assertNotNull(featureLoc0);
      
      int int0 = databaseDocument_LocationComarator0.compare(featureLoc0, featureLoc0);
      assertEquals(0, int0);
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertEquals("2++vd-vBcz", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.readable());
      assertEquals(0, featureLoc0.getFeatureLocId());
      assertFalse(featureLoc0.isFmaxPartial());
      assertEquals(1264, featureLoc0.getLocGroup());
      assertEquals((short) (-10548), (short)featureLoc0.getStrand());
      assertEquals(0, featureLoc0.getSrcFeatureId());
      assertEquals(4, (int)featureLoc0.getFmin());
      assertTrue(featureLoc0.isFminPartial());
      assertEquals(4, (int)featureLoc0.getPhase());
      assertNull(featureLoc0.getResidueInfo());
      assertEquals((-407391493), featureLoc0.getRank());
      assertEquals(4, (int)featureLoc0.getFmax());
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "2++vd-vBcz", "", true, (InputStreamProgressListener) null);
      // Undeclared exception!
      try { 
        databaseDocument0.getChadoSequence("");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField(1999);
      ByteBuffer byteBuffer0 = new ByteBuffer();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("}8{&4;B=T", jPasswordField0, "}8{&4;B=T", "}8{&4;B=T", byteBuffer0, "}8{&4;B=T");
      // Undeclared exception!
      try { 
        databaseDocument0.loadCvTerms();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error initializing DbSqlConfig class.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error occurred.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error parsing XML.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error parsing XPath '/sqlMapConfig/sqlMap'.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error parsing XML.  Cause: org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("uk.ac.sanger.artemis.chado.DbSqlConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", (JPasswordField) null, "t'N|4Hq@", "", false, inputStreamProgressListener0);
      // Undeclared exception!
      try { 
        databaseDocument0.getClustersByFeatureIds((List) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "", "", true);
      // Undeclared exception!
      try { 
        databaseDocument0.getFeaturesByListOfIds((List) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("", 740);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "", "");
      databaseDocument0.getParent();
      assertEquals("", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DatabaseDocument databaseDocument0 = new DatabaseDocument("yYbCN8t|;gBvx>", (JPasswordField) null, "yYbCN8t|;gBvx>", "yYbCN8t|;gBvx>");
      databaseDocument0.setName("yYbCN8t|;gBvx>");
      assertEquals("yYbCN8t|;gBvx>", databaseDocument0.getName());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("yYbCN8t|;gBvx>", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", (JPasswordField) null, "", "", false);
      DatabaseDocument databaseDocument1 = databaseDocument0.createDatabaseDocument();
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument1.isLazyFeatureLoad());
      assertEquals("", databaseDocument1.getSrcFeatureId());
      assertTrue(databaseDocument1.isSingleSchema());
      assertTrue(databaseDocument0.isSingleSchema());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      javax.swing.text.Document document0 = styledEditorKit0.createDefaultDocument();
      JPasswordField jPasswordField0 = new JPasswordField(document0, "", 1015);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("^6q+`i%9&Vh4HF", jPasswordField0, "", "^6q+`i%9&Vh4HF", true);
      boolean boolean0 = databaseDocument0.isLazyFeatureLoad();
      assertEquals("", databaseDocument0.getSrcFeatureId());
      assertTrue(boolean0);
      assertTrue(databaseDocument0.isSingleSchema());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DatabaseDocument databaseDocument0 = new DatabaseDocument("}", (JPasswordField) null, "org.biojava.bio.seq.RemoteFeature$Region", "=WP<R+4", false);
      // Undeclared exception!
      try { 
        databaseDocument0.getOrganismByCommonName("=WP<R+4");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[][][] stringArray0 = DatabaseDocument.getTYPES();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField(">oG5Ny^R\"gkq]^;V}", 0);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("End of parsing for \"", jPasswordField0, ">oG5Ny^R\"gkq]^;V}", "GET FEATURES IN RANGE:: ", true);
      // Undeclared exception!
      try { 
        databaseDocument0.getFeatureLocsByListOfIds((List) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("", 1);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "", "");
      boolean boolean0 = databaseDocument0.readable();
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("", databaseDocument0.getSrcFeatureId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("##gff-version 3\n", jPasswordField0, "..", "##gff-version 3\n");
      databaseDocument0.setReadChildren(true);
      assertEquals("..", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertTrue(databaseDocument0.isSingleSchema());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("j)$W/w=RN_n(<bE");
      DatabaseDocument databaseDocument0 = new DatabaseDocument("j)$W/w=RN_n(<bE", jPasswordField0, "j)$W/w=RN_n(<bE", "", false);
      // Undeclared exception!
      try { 
        databaseDocument0.showCvTermLookUp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error initializing DbSqlConfig class.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error occurred.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error parsing XML.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error parsing XPath '/sqlMapConfig/sqlMap'.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error parsing XML.  Cause: org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("uk.ac.sanger.artemis.chado.DbSqlConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      ByteBuffer byteBuffer0 = new ByteBuffer();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("CSsIw#c%(", jPasswordField0, "CSsIw#c%(", "CSsIw#c%(", byteBuffer0, "CSsIw#c%(");
      databaseDocument0.getIdFeatureStore();
      assertEquals("CSsIw#c%(", databaseDocument0.getName());
      assertEquals("CSsIw#c%(", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("Q;=FA\"py/*_", jPasswordField0, ">?~vvs", ">?~vvs", true, inputStreamProgressListener0);
      databaseDocument0.setRange((Range) null);
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals(">?~vvs", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.isSingleSchema());
      assertEquals("Q;=>", databaseDocument0.getName());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("RJKv~{.euAL.';kNe", jPasswordField0, "RJKv~{.euAL.';kNe", "Uk|w", false);
      ArrayList<PublicDBDocumentEntry> arrayList0 = new ArrayList<PublicDBDocumentEntry>();
      // Undeclared exception!
      try { 
        databaseDocument0.getFeaturePropByFeatureIds(arrayList0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("", 1015);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("^6q+`i%9&Vh4HF", jPasswordField0);
      Vector<FeatureRelationship> vector0 = new Vector<FeatureRelationship>();
      // Undeclared exception!
      try { 
        databaseDocument0.getParentFeaturesByChildFeatureIds(vector0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DatabaseDocument databaseDocument0 = new DatabaseDocument("V,Kfx+B|C\u0002K", (JPasswordField) null, "", "V,Kfx+B|C\u0002K", false);
      // Undeclared exception!
      try { 
        databaseDocument0.getOrganismsContainingSrcFeatures();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("}", 0);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("#xFMc(.g%ysz", jPasswordField0, "", ">!!}ph~Ia]", false);
      boolean boolean0 = databaseDocument0.isSingleSchema();
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("", databaseDocument0.getSrcFeatureId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("s.dAia`GY", jPasswordField0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        databaseDocument0.getFeatureDbXRefsByFeatureId(vector0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      javax.swing.text.Document document0 = styledEditorKit0.createDefaultDocument();
      JPasswordField jPasswordField0 = new JPasswordField(document0, "d7R-,kx8|9)ak/FHU)", 8968);
      ByteBuffer byteBuffer0 = new ByteBuffer();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("GFF:\n", jPasswordField0, "GFF:\n", "RQu]wHgsv~sV[", byteBuffer0, "RQu]wHgsv~sV[");
      // Undeclared exception!
      try { 
        databaseDocument0.ping();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error initializing DbSqlConfig class.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error occurred.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error parsing XML.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error parsing XPath '/sqlMapConfig/sqlMap'.  Cause: org.evosuite.runtime.mock.java.lang.MockThrowable: Error parsing XML.  Cause: org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("uk.ac.sanger.artemis.chado.DbSqlConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", (JPasswordField) null, "", "", false);
      String string0 = databaseDocument0.getSrcFeatureId();
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("", string0);
      assertTrue(databaseDocument0.isSingleSchema());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      ByteBuffer byteBuffer0 = new ByteBuffer();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("CSsIw#c%(", jPasswordField0, "CSsIw#c%(", "CSsIw#c%(", byteBuffer0, "CSsIw#c%(");
      boolean boolean0 = databaseDocument0.writable();
      assertTrue(boolean0);
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("CSsIw#c%(", databaseDocument0.getSrcFeatureId());
      assertEquals("CSsIw#c%(", databaseDocument0.getName());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      ByteBuffer byteBuffer0 = new ByteBuffer();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("CSsIw#c%(", jPasswordField0, "CSsIw#c%(", "CSsIw#c%(", byteBuffer0, "CSsIw#c%(");
      // Undeclared exception!
      try { 
        databaseDocument0.getPolypeptideFeatures("com.sshtools.util.ByteArrayReader");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("");
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "", "", true, inputStreamProgressListener0);
      InputStreamProgressListener inputStreamProgressListener1 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument1 = new DatabaseDocument(databaseDocument0, (String) null, "", false, inputStreamProgressListener1);
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals("", databaseDocument0.getSrcFeatureId());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("FMzk", (JPasswordField) null, "", "", false, inputStreamProgressListener0);
      // Undeclared exception!
      try { 
        databaseDocument0.append("FMzk");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("Q;=FA\"py/*_", jPasswordField0, ">?~vvs", ">?~vvs", true, inputStreamProgressListener0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      // Undeclared exception!
      try { 
        databaseDocument0.getResidueFeatures(integer0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String[][][] stringArray0 = new String[2][2][8];
      DatabaseDocument.setTYPES(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      DatabaseDocument databaseDocument0 = new DatabaseDocument(".'UV5VwI", jPasswordField0, "", "g");
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      
      databaseDocument0.setLazyFeatureLoad(false);
      assertFalse(databaseDocument0.isLazyFeatureLoad());
  }
}
