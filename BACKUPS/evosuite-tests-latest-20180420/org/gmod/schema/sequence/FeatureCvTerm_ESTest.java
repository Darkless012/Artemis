/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 13:17:46 GMT 2018
 */

package org.gmod.schema.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gmod.schema.cv.CvTerm;
import org.gmod.schema.pub.Pub;
import org.gmod.schema.sequence.Feature;
import org.gmod.schema.sequence.FeatureCvTerm;
import org.gmod.schema.sequence.FeatureCvTermDbXRef;
import org.gmod.schema.sequence.FeatureCvTermProp;
import org.gmod.schema.sequence.FeatureCvTermPub;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FeatureCvTerm_ESTest extends FeatureCvTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setNot(true);
      boolean boolean0 = featureCvTerm0.isNot();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setRank(2323);
      int int0 = featureCvTerm0.getRank();
      assertEquals(2323, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      Pub pub0 = mock(Pub.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm(cvTerm0, feature0, pub0, true, (-1));
      int int0 = featureCvTerm0.getRank();
      assertEquals((-1), int0);
      assertTrue(featureCvTerm0.isNot());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setFeatureCvTermPubs((Collection<FeatureCvTermPub>) null);
      Collection<FeatureCvTermPub> collection0 = featureCvTerm0.getFeatureCvTermPubs();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setFeatureCvTermProps((Collection<FeatureCvTermProp>) null);
      Collection<FeatureCvTermProp> collection0 = featureCvTerm0.getFeatureCvTermProps();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setFeatureCvTermId(447);
      int int0 = featureCvTerm0.getFeatureCvTermId();
      assertEquals(447, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setFeatureCvTermId((-2179));
      int int0 = featureCvTerm0.getFeatureCvTermId();
      assertEquals((-2179), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setFeatureCvTermDbXRefs((Collection<FeatureCvTermDbXRef>) null);
      Collection<FeatureCvTermDbXRef> collection0 = featureCvTerm0.getFeatureCvTermDbXRefs();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      featureCvTerm0.setFeature(feature0);
      assertFalse(featureCvTerm0.isNot());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      int int0 = featureCvTerm0.getRank();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      CvTerm cvTerm0 = featureCvTerm0.getCvTerm();
      assertNull(cvTerm0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      int int0 = featureCvTerm0.getFeatureCvTermId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      Collection<FeatureCvTermProp> collection0 = featureCvTerm0.getFeatureCvTermProps();
      featureCvTerm0.setFeatureCvTermProps(collection0);
      assertEquals(0, featureCvTerm0.getFeatureCvTermId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      featureCvTerm0.setCvTerm(cvTerm0);
      assertEquals(0, featureCvTerm0.getRank());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      Feature feature0 = featureCvTerm0.getFeature();
      assertNull(feature0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      Pub pub0 = featureCvTerm0.getPub();
      assertNull(pub0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      boolean boolean0 = featureCvTerm0.isNot();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      Collection<FeatureCvTermDbXRef> collection0 = featureCvTerm0.getFeatureCvTermDbXRefs();
      featureCvTerm0.setFeatureCvTermDbXRefs(collection0);
      assertEquals(0, featureCvTerm0.getFeatureCvTermId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      Collection<FeatureCvTermPub> collection0 = featureCvTerm0.getFeatureCvTermPubs();
      featureCvTerm0.setFeatureCvTermPubs(collection0);
      assertEquals(0, featureCvTerm0.getFeatureCvTermId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setPub((Pub) null);
      assertFalse(featureCvTerm0.isNot());
  }
}
