/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 13:14:51 GMT 2018
 */

package org.gmod.schema.phylogeny;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Collection;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gmod.schema.cv.CvTerm;
import org.gmod.schema.phylogeny.Phylonode;
import org.gmod.schema.phylogeny.PhylonodeDbXRef;
import org.gmod.schema.phylogeny.PhylonodeOrganism;
import org.gmod.schema.phylogeny.PhylonodeProp;
import org.gmod.schema.phylogeny.PhylonodePub;
import org.gmod.schema.phylogeny.PhylonodeRelationship;
import org.gmod.schema.phylogeny.Phylotree;
import org.gmod.schema.sequence.Feature;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Phylonode_ESTest extends Phylonode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      CvTerm cvTerm0 = phylonode0.getCvTerm();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(cvTerm0);
      
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(phylotree0).toString();
      phylonode0.setPhylotree(phylotree0);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(collection0);
      
      Double double0 = phylonode0.getDistance();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(double0);
      
      phylonode0.setCvTerm((CvTerm) null);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setLabel("");
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setPhylonodeId(1);
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(1, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      Phylotree phylotree1 = phylonode0.getPhylotree();
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(1, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylotree1.getComment());
      assertEquals(0, phylotree1.getPhylotreeId());
      assertNull(phylotree1.getName());
      assertNotNull(phylotree1);
      assertSame(phylotree1, phylotree0);
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(1, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn("").when(feature1).toString();
      phylonode0.setFeature(feature1);
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(1, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      Collection<PhylonodePub> collection1 = phylonode0.getPhylonodePubs();
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(1, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(collection1);
      
      int int0 = phylonode0.getPhylonodeId();
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(1, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(1, int0);
      
      phylonode0.setParent(phylonode0);
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(1, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      int int1 = phylonode0.getPhylonodeId();
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(1, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      Phylotree phylotree2 = phylonode0.getPhylotree();
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(1, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylotree2.getComment());
      assertNull(phylotree2.getName());
      assertEquals(0, phylotree2.getPhylotreeId());
      assertNotNull(phylotree2);
      assertSame(phylotree2, phylotree1);
      assertSame(phylotree2, phylotree0);
      
      phylonode0.setPhylonodeId((-4909));
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      String string0 = phylonode0.getLabel();
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Collection<PhylonodeOrganism> collection2 = phylonode0.getPhylonodeOrganisms();
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(collection2);
      
      phylonode0.setParent(phylonode0);
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setLabel("S1>#_$}Slow");
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("S1>#_$}Slow", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      Feature feature2 = phylonode0.getFeature();
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("S1>#_$}Slow", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, feature2.getSeqLen());
      assertNull(feature2.getName());
      assertNull(feature2.getUniqueName());
      assertNull(feature2.getDisplayName());
      assertFalse(feature2.isObsolete());
      assertFalse(feature2.isAnalysis());
      assertNull(feature2.getMd5Checksum());
      assertEquals(0, feature2.getFeatureId());
      assertFalse(feature2.equals((Object)feature0));
      assertNotNull(feature2);
      assertNotSame(feature2, feature0);
      assertSame(feature2, feature1);
      
      phylonode0.setParent(phylonode0);
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("S1>#_$}Slow", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      Collection<PhylonodeRelationship> collection3 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("S1>#_$}Slow", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(collection3);
      assertSame(collection3, collection0);
      
      Collection<PhylonodeProp> collection4 = phylonode0.getPhylonodeProps();
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("S1>#_$}Slow", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(collection4);
      
      Collection<PhylonodeRelationship> collection5 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("S1>#_$}Slow", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertTrue(collection5.equals((Object)collection0));
      assertTrue(collection5.equals((Object)collection3));
      assertNotNull(collection5);
      assertNotSame(collection5, collection0);
      assertNotSame(collection5, collection3);
      
      phylonode0.setPhylonodePubs((Set<PhylonodePub>) null);
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("S1>#_$}Slow", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      Phylonode phylonode1 = phylonode0.getParent();
      assertEquals((-4909), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("S1>#_$}Slow", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals("S1>#_$}Slow", phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals((-4909), phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNotNull(phylonode1);
      assertSame(phylonode0, phylonode1);
      assertSame(phylonode1, phylonode0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode(0, phylotree0, 0, 0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNotNull(phylonode0);
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode0.setPhylotree(phylotree1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(feature0).toString();
      phylonode0.setFeature(feature0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      Collection<PhylonodeOrganism> collection0 = phylonode0.getPhylonodeOrganisms();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNotNull(collection0);
      
      phylonode0.setDistance((Double) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      phylonode0.setLeftIdx(0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      phylonode0.setPhylonodeProps((Set<PhylonodeProp>) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      Collection<PhylonodeRelationship> collection1 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNotNull(collection1);
      
      phylonode0.setLabel((String) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      Collection<Phylonode> collection2 = phylonode0.getPhylonodes();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNotNull(collection2);
      assertFalse(collection2.contains(phylonode0));
      
      Collection<Phylonode> collection3 = phylonode0.getPhylonodes();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNotNull(collection3);
      assertFalse(collection3.contains(phylonode0));
      assertSame(collection3, collection2);
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      phylonode0.setCvTerm(cvTerm0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      CvTerm cvTerm1 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(cvTerm1).toString();
      phylonode0.setCvTerm(cvTerm1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      phylonode0.setPhylonodeId(0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      Collection<PhylonodeRelationship> collection4 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNotNull(collection4);
      assertSame(collection4, collection1);
      
      CvTerm cvTerm2 = phylonode0.getCvTerm();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNull(cvTerm2.getName());
      assertEquals(0, cvTerm2.getCvTermId());
      assertEquals(0, cvTerm2.getIsRelationshipType());
      assertNull(cvTerm2.getDefinition());
      assertEquals(0, cvTerm2.getIsObsolete());
      assertFalse(cvTerm2.equals((Object)cvTerm0));
      assertNotNull(cvTerm2);
      assertNotSame(cvTerm2, cvTerm0);
      assertSame(cvTerm2, cvTerm1);
      
      Collection<PhylonodeRelationship> collection5 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertTrue(collection5.equals((Object)collection1));
      assertTrue(collection5.equals((Object)collection4));
      assertNotNull(collection5);
      assertNotSame(collection5, collection1);
      assertNotSame(collection5, collection4);
      
      Collection<PhylonodeRelationship> collection6 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertTrue(collection6.equals((Object)collection5));
      assertNotNull(collection6);
      assertSame(collection6, collection1);
      assertSame(collection6, collection4);
      assertNotSame(collection6, collection5);
      
      String string0 = phylonode0.getLabel();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNull(string0);
      
      phylonode0.setLeftIdx(0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      phylonode0.setPhylonodeId(1763);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(1763, phylonode0.getPhylonodeId());
      
      phylonode0.setLeftIdx(2731);
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(1763, phylonode0.getPhylonodeId());
      assertEquals(2731, phylonode0.getLeftIdx());
      
      phylonode0.setLabel("org.gmod.schema.phylogeny.Phylonode");
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", phylonode0.getLabel());
      assertEquals(1763, phylonode0.getPhylonodeId());
      assertEquals(2731, phylonode0.getLeftIdx());
      
      Collection<PhylonodeRelationship> collection7 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", phylonode0.getLabel());
      assertEquals(1763, phylonode0.getPhylonodeId());
      assertEquals(2731, phylonode0.getLeftIdx());
      assertTrue(collection7.equals((Object)collection5));
      assertNotNull(collection7);
      assertSame(collection7, collection4);
      assertNotSame(collection7, collection5);
      assertSame(collection7, collection1);
      assertSame(collection7, collection6);
      
      CvTerm cvTerm3 = phylonode0.getCvTerm();
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", phylonode0.getLabel());
      assertEquals(1763, phylonode0.getPhylonodeId());
      assertEquals(2731, phylonode0.getLeftIdx());
      assertEquals(0, cvTerm3.getCvTermId());
      assertNull(cvTerm3.getName());
      assertNull(cvTerm3.getDefinition());
      assertEquals(0, cvTerm3.getIsObsolete());
      assertEquals(0, cvTerm3.getIsRelationshipType());
      assertFalse(cvTerm3.equals((Object)cvTerm0));
      assertNotNull(cvTerm3);
      assertSame(cvTerm3, cvTerm1);
      assertSame(cvTerm3, cvTerm2);
      assertNotSame(cvTerm3, cvTerm0);
      
      Collection<PhylonodeProp> collection8 = phylonode0.getPhylonodeProps();
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", phylonode0.getLabel());
      assertEquals(1763, phylonode0.getPhylonodeId());
      assertEquals(2731, phylonode0.getLeftIdx());
      assertNull(collection8);
      
      Feature feature1 = phylonode0.getFeature();
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", phylonode0.getLabel());
      assertEquals(1763, phylonode0.getPhylonodeId());
      assertEquals(2731, phylonode0.getLeftIdx());
      assertEquals(0, feature1.getFeatureId());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.isAnalysis());
      assertEquals(0, feature1.getSeqLen());
      assertNull(feature1.getMd5Checksum());
      assertNull(feature1.getName());
      assertNotNull(feature1);
      assertSame(feature1, feature0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = new Phylonode(2891, phylotree0, 624, 2891);
      assertNull(phylonode1.getLabel());
      assertEquals(624, phylonode1.getLeftIdx());
      assertEquals(2891, phylonode1.getRightIdx());
      assertEquals(2891, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getDistance());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(624, phylonode1.getLeftIdx());
      assertEquals(2891, phylonode1.getRightIdx());
      assertEquals(2891, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      Phylotree phylotree1 = phylonode0.getPhylotree();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(phylotree1);
      assertNotSame(phylonode0, phylonode1);
      
      Phylonode phylonode2 = phylonode1.getParent();
      assertNull(phylonode1.getLabel());
      assertEquals(624, phylonode1.getLeftIdx());
      assertEquals(2891, phylonode1.getRightIdx());
      assertEquals(2891, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getDistance());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNull(phylonode2);
      assertNotSame(phylonode1, phylonode0);
      
      Phylonode phylonode3 = phylonode0.getParent();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode3.getLabel());
      assertEquals(2891, phylonode3.getPhylonodeId());
      assertEquals(624, phylonode3.getLeftIdx());
      assertEquals(2891, phylonode3.getRightIdx());
      assertNull(phylonode3.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode3.equals((Object)phylonode0));
      assertNotNull(phylonode3);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode3);
      assertSame(phylonode3, phylonode1);
      assertNotSame(phylonode3, phylonode0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(phylonode0);
      
      phylonode0.setDistance((Double) null);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      
      phylonode0.setPhylonodeRelationshipsForObjectId((Set<PhylonodeRelationship>) null);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      
      phylonode0.setLeftIdx((-1403));
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setLabel("");
      assertEquals("", phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setPhylonodeId(2054);
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      
      phylonode0.setRightIdx(2615);
      assertEquals("", phylonode0.getLabel());
      assertEquals(2615, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      
      Double double0 = phylonode0.getDistance();
      assertEquals("", phylonode0.getLabel());
      assertEquals(2615, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertNull(double0);
      
      phylonode0.setRightIdx((-1403));
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      
      Collection<PhylonodeDbXRef> collection0 = phylonode0.getPhylonodeDbXRefs();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertNotNull(collection0);
      
      Feature feature0 = phylonode0.getFeature();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertNull(feature0);
      
      Feature feature1 = phylonode0.getFeature();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertNull(feature1);
      
      Feature feature2 = phylonode0.getFeature();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertNull(feature2);
      
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = new Phylonode(0, phylotree0, 1, (-882));
      assertEquals((-882), phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(1, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode1.setPhylotree(phylotree1);
      assertEquals((-882), phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(1, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      phylonode1.setPhylonodeDbXRefs((Set<PhylonodeDbXRef>) null);
      assertEquals((-882), phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(1, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setParent(phylonode1);
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertEquals((-882), phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(1, phylonode1.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      Double double1 = phylonode0.getDistance();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(double1);
      assertNotSame(phylonode0, phylonode1);
      
      CvTerm cvTerm0 = phylonode0.getCvTerm();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(cvTerm0);
      assertNotSame(phylonode0, phylonode1);
      
      Phylonode phylonode2 = phylonode0.getParent();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertEquals(1, phylonode2.getLeftIdx());
      assertEquals((-882), phylonode2.getRightIdx());
      assertNull(phylonode2.getDistance());
      assertNull(phylonode2.getLabel());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNotNull(phylonode2);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode2, phylonode0);
      assertSame(phylonode2, phylonode1);
      
      phylonode2.setPhylonodeId(606);
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertEquals(1, phylonode2.getLeftIdx());
      assertEquals((-882), phylonode2.getRightIdx());
      assertNull(phylonode2.getDistance());
      assertNull(phylonode2.getLabel());
      assertEquals(606, phylonode2.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode2, phylonode0);
      assertSame(phylonode2, phylonode1);
      
      Collection<PhylonodeProp> collection1 = phylonode0.getPhylonodeProps();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertNotNull(collection1);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      
      Double double2 = phylonode0.getDistance();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertNull(double2);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      
      Collection<PhylonodeDbXRef> collection2 = phylonode2.getPhylonodeDbXRefs();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertEquals(1, phylonode2.getLeftIdx());
      assertEquals((-882), phylonode2.getRightIdx());
      assertNull(phylonode2.getDistance());
      assertNull(phylonode2.getLabel());
      assertEquals(606, phylonode2.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNull(collection2);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode2, phylonode0);
      assertSame(phylonode2, phylonode1);
      
      Collection<PhylonodeProp> collection3 = phylonode0.getPhylonodeProps();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertNotNull(collection3);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertSame(collection3, collection1);
      
      Double double3 = phylonode0.getDistance();
      assertEquals((-1403), phylonode0.getRightIdx());
      assertEquals("", phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-1403), phylonode0.getLeftIdx());
      assertEquals(2054, phylonode0.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertNull(double3);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNotNull(phylonode0);
      
      Phylonode phylonode1 = new Phylonode();
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setLeftIdx((-1));
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      CvTerm cvTerm0 = phylonode0.getCvTerm();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(cvTerm0);
      assertNotSame(phylonode0, phylonode1);
      
      Phylotree phylotree0 = phylonode0.getPhylotree();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(phylotree0);
      assertNotSame(phylonode0, phylonode1);
      
      Phylonode phylonode2 = phylonode0.getParent();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode2.getLabel());
      assertEquals(0, phylonode2.getLeftIdx());
      assertEquals(0, phylonode2.getRightIdx());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNotNull(phylonode2);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode2, phylonode0);
      assertSame(phylonode2, phylonode1);
      
      CvTerm cvTerm1 = phylonode1.getCvTerm();
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNull(cvTerm1);
      assertSame(phylonode1, phylonode2);
      assertNotSame(phylonode1, phylonode0);
      
      phylonode2.setCvTerm((CvTerm) null);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode2.getLabel());
      assertEquals(0, phylonode2.getLeftIdx());
      assertEquals(0, phylonode2.getRightIdx());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode2, phylonode0);
      assertSame(phylonode2, phylonode1);
      
      phylonode2.setCvTerm((CvTerm) null);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode2.getLabel());
      assertEquals(0, phylonode2.getLeftIdx());
      assertEquals(0, phylonode2.getRightIdx());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode2, phylonode0);
      assertSame(phylonode2, phylonode1);
      
      phylonode1.setLabel((String) null);
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertSame(phylonode1, phylonode2);
      assertNotSame(phylonode1, phylonode0);
      
      CvTerm cvTerm2 = phylonode2.getCvTerm();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode2.getLabel());
      assertEquals(0, phylonode2.getLeftIdx());
      assertEquals(0, phylonode2.getRightIdx());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNull(cvTerm2);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode2, phylonode0);
      assertSame(phylonode2, phylonode1);
      
      phylonode1.setParent(phylonode2);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode2.getLabel());
      assertEquals(0, phylonode2.getLeftIdx());
      assertEquals(0, phylonode2.getRightIdx());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode1);
      assertSame(phylonode1, phylonode2);
      assertNotSame(phylonode1, phylonode0);
      assertNotSame(phylonode2, phylonode0);
      assertSame(phylonode2, phylonode1);
      
      CvTerm cvTerm3 = phylonode1.getCvTerm();
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNull(cvTerm3);
      assertSame(phylonode1, phylonode2);
      assertNotSame(phylonode1, phylonode0);
      
      CvTerm cvTerm4 = phylonode1.getCvTerm();
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNull(cvTerm4);
      assertSame(phylonode1, phylonode2);
      assertNotSame(phylonode1, phylonode0);
      
      Collection<PhylonodeProp> collection0 = phylonode1.getPhylonodeProps();
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(collection0);
      assertSame(phylonode1, phylonode2);
      assertNotSame(phylonode1, phylonode0);
      
      Collection<PhylonodeDbXRef> collection1 = phylonode0.getPhylonodeDbXRefs();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection1);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode1);
      
      Phylonode phylonode3 = phylonode0.getParent();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode3.getRightIdx());
      assertEquals(0, phylonode3.getPhylonodeId());
      assertNull(phylonode3.getDistance());
      assertEquals(0, phylonode3.getLeftIdx());
      assertNull(phylonode3.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode3.equals((Object)phylonode0));
      assertNotNull(phylonode3);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode3, phylonode0);
      assertSame(phylonode3, phylonode1);
      assertSame(phylonode3, phylonode2);
      
      Phylonode phylonode4 = phylonode0.getParent();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode4.getLeftIdx());
      assertEquals(0, phylonode4.getRightIdx());
      assertNull(phylonode4.getLabel());
      assertEquals(0, phylonode4.getPhylonodeId());
      assertNull(phylonode4.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode4.equals((Object)phylonode0));
      assertNotNull(phylonode4);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode4, phylonode0);
      assertSame(phylonode4, phylonode1);
      assertSame(phylonode4, phylonode2);
      assertSame(phylonode4, phylonode3);
      
      phylonode4.setPhylonodeId(2881);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode4.getLeftIdx());
      assertEquals(0, phylonode4.getRightIdx());
      assertNull(phylonode4.getLabel());
      assertEquals(2881, phylonode4.getPhylonodeId());
      assertNull(phylonode4.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode4.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode4, phylonode0);
      assertSame(phylonode4, phylonode1);
      assertSame(phylonode4, phylonode2);
      assertSame(phylonode4, phylonode3);
      
      phylonode3.setPhylotree((Phylotree) null);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode3.getRightIdx());
      assertEquals(2881, phylonode3.getPhylonodeId());
      assertNull(phylonode3.getDistance());
      assertEquals(0, phylonode3.getLeftIdx());
      assertNull(phylonode3.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode3.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode3, phylonode0);
      assertSame(phylonode3, phylonode4);
      assertSame(phylonode3, phylonode1);
      assertSame(phylonode3, phylonode2);
      
      Collection<PhylonodeProp> collection2 = phylonode3.getPhylonodeProps();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode3.getRightIdx());
      assertEquals(2881, phylonode3.getPhylonodeId());
      assertNull(phylonode3.getDistance());
      assertEquals(0, phylonode3.getLeftIdx());
      assertNull(phylonode3.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode3.equals((Object)phylonode0));
      assertNotNull(collection2);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode3, phylonode0);
      assertSame(phylonode3, phylonode4);
      assertSame(phylonode3, phylonode1);
      assertSame(phylonode3, phylonode2);
      assertSame(collection2, collection0);
      
      Feature feature1 = phylonode3.getFeature();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode3.getRightIdx());
      assertEquals(2881, phylonode3.getPhylonodeId());
      assertNull(phylonode3.getDistance());
      assertEquals(0, phylonode3.getLeftIdx());
      assertNull(phylonode3.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode3.equals((Object)phylonode0));
      assertNull(feature1);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode3, phylonode0);
      assertSame(phylonode3, phylonode4);
      assertSame(phylonode3, phylonode1);
      assertSame(phylonode3, phylonode2);
      
      Collection<PhylonodeProp> collection3 = phylonode0.getPhylonodeProps();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertTrue(collection3.equals((Object)collection0));
      assertTrue(collection3.equals((Object)collection2));
      assertNotNull(collection3);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(collection3, collection0);
      assertNotSame(collection3, collection2);
      
      Phylonode phylonode5 = phylonode0.getParent();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode5.getLeftIdx());
      assertNull(phylonode5.getDistance());
      assertEquals(0, phylonode5.getRightIdx());
      assertEquals(2881, phylonode5.getPhylonodeId());
      assertNull(phylonode5.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode5.equals((Object)phylonode0));
      assertNotNull(phylonode5);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode0, phylonode5);
      assertSame(phylonode5, phylonode1);
      assertNotSame(phylonode5, phylonode0);
      assertSame(phylonode5, phylonode2);
      assertSame(phylonode5, phylonode4);
      assertSame(phylonode5, phylonode3);
      
      Phylonode phylonode6 = phylonode0.getParent();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode6.getDistance());
      assertNull(phylonode6.getLabel());
      assertEquals(2881, phylonode6.getPhylonodeId());
      assertEquals(0, phylonode6.getRightIdx());
      assertEquals(0, phylonode6.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode0.equals((Object)phylonode5));
      assertFalse(phylonode6.equals((Object)phylonode0));
      assertNotNull(phylonode6);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode6);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode0, phylonode5);
      assertSame(phylonode6, phylonode3);
      assertSame(phylonode6, phylonode5);
      assertSame(phylonode6, phylonode2);
      assertSame(phylonode6, phylonode1);
      assertSame(phylonode6, phylonode4);
      assertNotSame(phylonode6, phylonode0);
      
      Double double0 = phylonode6.getDistance();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode6.getDistance());
      assertNull(phylonode6.getLabel());
      assertEquals(2881, phylonode6.getPhylonodeId());
      assertEquals(0, phylonode6.getRightIdx());
      assertEquals(0, phylonode6.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode6));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode0.equals((Object)phylonode5));
      assertFalse(phylonode6.equals((Object)phylonode0));
      assertNull(double0);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode6);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode0, phylonode5);
      assertSame(phylonode6, phylonode3);
      assertSame(phylonode6, phylonode5);
      assertSame(phylonode6, phylonode2);
      assertSame(phylonode6, phylonode1);
      assertSame(phylonode6, phylonode4);
      assertNotSame(phylonode6, phylonode0);
      
      Phylotree phylotree1 = phylonode0.getPhylotree();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode6));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode0.equals((Object)phylonode5));
      assertNull(phylotree1);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode6);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode0, phylonode5);
      
      Feature feature2 = phylonode3.getFeature();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode3.getRightIdx());
      assertEquals(2881, phylonode3.getPhylonodeId());
      assertNull(phylonode3.getDistance());
      assertEquals(0, phylonode3.getLeftIdx());
      assertNull(phylonode3.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode6));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode0.equals((Object)phylonode5));
      assertFalse(phylonode3.equals((Object)phylonode0));
      assertNull(feature2);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode6);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode0, phylonode5);
      assertSame(phylonode3, phylonode5);
      assertNotSame(phylonode3, phylonode0);
      assertSame(phylonode3, phylonode4);
      assertSame(phylonode3, phylonode1);
      assertSame(phylonode3, phylonode2);
      assertSame(phylonode3, phylonode6);
      
      CvTerm cvTerm5 = phylonode5.getCvTerm();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode5.getLeftIdx());
      assertNull(phylonode5.getDistance());
      assertEquals(0, phylonode5.getRightIdx());
      assertEquals(2881, phylonode5.getPhylonodeId());
      assertNull(phylonode5.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode6));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode0.equals((Object)phylonode5));
      assertFalse(phylonode5.equals((Object)phylonode0));
      assertNull(cvTerm5);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode6);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode0, phylonode5);
      assertSame(phylonode5, phylonode1);
      assertNotSame(phylonode5, phylonode0);
      assertSame(phylonode5, phylonode6);
      assertSame(phylonode5, phylonode2);
      assertSame(phylonode5, phylonode4);
      assertSame(phylonode5, phylonode3);
      
      Phylonode phylonode7 = phylonode5.getParent();
      assertNull(phylonode7.getDistance());
      assertEquals(2881, phylonode7.getPhylonodeId());
      assertEquals(0, phylonode7.getRightIdx());
      assertNull(phylonode7.getLabel());
      assertEquals(0, phylonode7.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode5.getLeftIdx());
      assertNull(phylonode5.getDistance());
      assertEquals(0, phylonode5.getRightIdx());
      assertEquals(2881, phylonode5.getPhylonodeId());
      assertNull(phylonode5.getLabel());
      assertFalse(phylonode7.equals((Object)phylonode0));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode6));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode0.equals((Object)phylonode5));
      assertFalse(phylonode5.equals((Object)phylonode0));
      assertNotNull(phylonode7);
      assertSame(phylonode7, phylonode5);
      assertSame(phylonode7, phylonode6);
      assertSame(phylonode7, phylonode4);
      assertSame(phylonode7, phylonode3);
      assertSame(phylonode7, phylonode2);
      assertSame(phylonode7, phylonode1);
      assertNotSame(phylonode7, phylonode0);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode6);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode0, phylonode5);
      assertNotSame(phylonode0, phylonode7);
      assertSame(phylonode5, phylonode1);
      assertNotSame(phylonode5, phylonode0);
      assertSame(phylonode5, phylonode6);
      assertSame(phylonode5, phylonode2);
      assertSame(phylonode5, phylonode4);
      assertSame(phylonode5, phylonode3);
      assertSame(phylonode5, phylonode7);
      
      Phylotree phylotree2 = phylonode7.getPhylotree();
      assertNull(phylonode7.getDistance());
      assertEquals(2881, phylonode7.getPhylonodeId());
      assertEquals(0, phylonode7.getRightIdx());
      assertNull(phylonode7.getLabel());
      assertEquals(0, phylonode7.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode5.getLeftIdx());
      assertNull(phylonode5.getDistance());
      assertEquals(0, phylonode5.getRightIdx());
      assertEquals(2881, phylonode5.getPhylonodeId());
      assertNull(phylonode5.getLabel());
      assertFalse(phylonode7.equals((Object)phylonode0));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode6));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode0.equals((Object)phylonode5));
      assertFalse(phylonode0.equals((Object)phylonode7));
      assertFalse(phylonode5.equals((Object)phylonode0));
      assertNull(phylotree2);
      assertSame(phylonode7, phylonode5);
      assertSame(phylonode7, phylonode6);
      assertSame(phylonode7, phylonode4);
      assertSame(phylonode7, phylonode3);
      assertSame(phylonode7, phylonode2);
      assertSame(phylonode7, phylonode1);
      assertNotSame(phylonode7, phylonode0);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode6);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode0, phylonode5);
      assertNotSame(phylonode0, phylonode7);
      assertSame(phylonode5, phylonode1);
      assertNotSame(phylonode5, phylonode0);
      assertSame(phylonode5, phylonode6);
      assertSame(phylonode5, phylonode2);
      assertSame(phylonode5, phylonode4);
      assertSame(phylonode5, phylonode3);
      assertSame(phylonode5, phylonode7);
      
      Phylotree phylotree3 = phylonode6.getPhylotree();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode6.getDistance());
      assertNull(phylonode6.getLabel());
      assertEquals(2881, phylonode6.getPhylonodeId());
      assertEquals(0, phylonode6.getRightIdx());
      assertEquals(0, phylonode6.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode0.equals((Object)phylonode4));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode6));
      assertFalse(phylonode0.equals((Object)phylonode3));
      assertFalse(phylonode0.equals((Object)phylonode5));
      assertFalse(phylonode0.equals((Object)phylonode7));
      assertFalse(phylonode6.equals((Object)phylonode0));
      assertNull(phylotree3);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode4);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode6);
      assertNotSame(phylonode0, phylonode3);
      assertNotSame(phylonode0, phylonode5);
      assertNotSame(phylonode0, phylonode7);
      assertSame(phylonode6, phylonode3);
      assertSame(phylonode6, phylonode5);
      assertSame(phylonode6, phylonode2);
      assertSame(phylonode6, phylonode1);
      assertSame(phylonode6, phylonode4);
      assertSame(phylonode6, phylonode7);
      assertNotSame(phylonode6, phylonode0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNotNull(phylonode0);
      
      Double double0 = new Double((-217.2521828));
      assertNotNull(double0);
      assertEquals((-217.2521828), (double)double0, 0.01);
      
      phylonode0.setDistance(double0);
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      
      phylonode0.setPhylotree((Phylotree) null);
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      
      phylonode0.setPhylotree((Phylotree) null);
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      
      int int0 = phylonode0.getLeftIdx();
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, int0);
      
      Phylonode phylonode1 = new Phylonode();
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode1.setParent(phylonode0);
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setParent(phylonode1);
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      doReturn("6&mig|D*C:'!v/@ye").when(cvTerm0).toString();
      phylonode1.setCvTerm(cvTerm0);
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      int int1 = phylonode0.getLeftIdx();
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(phylonode0, phylonode1);
      
      phylonode1.setParent(phylonode0);
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature1);
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      int int2 = phylonode0.getRightIdx();
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setLeftIdx(482);
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(482, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      String string0 = phylonode0.getLabel();
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(482, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(string0);
      assertNotSame(phylonode0, phylonode1);
      
      String string1 = phylonode0.getLabel();
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals(482, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(string1);
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setLeftIdx((-2843));
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals((-2843), phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setPhylonodeId(0);
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals((-2843), phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals((-2843), phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      int int3 = phylonode1.getPhylonodeId();
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertEquals(0, int3);
      assertNotSame(phylonode1, phylonode0);
      
      Feature feature2 = phylonode1.getFeature();
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNull(feature2);
      assertNotSame(phylonode1, phylonode0);
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals((-2843), phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection0);
      assertNotSame(phylonode0, phylonode1);
      
      Collection<Phylonode> collection1 = phylonode1.getPhylonodes();
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(collection1);
      assertFalse(collection1.contains(phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      phylonode1.setDistance(double1);
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(0.0, phylonode1.getDistance(), 0.01);
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotSame(phylonode1, phylonode0);
      
      CvTerm cvTerm1 = phylonode1.getCvTerm();
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(0.0, phylonode1.getDistance(), 0.01);
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(cvTerm1.getName());
      assertNull(cvTerm1.getDefinition());
      assertEquals(0, cvTerm1.getIsObsolete());
      assertEquals(0, cvTerm1.getIsRelationshipType());
      assertEquals(0, cvTerm1.getCvTermId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(cvTerm1);
      assertNotSame(phylonode1, phylonode0);
      assertSame(cvTerm1, cvTerm0);
      
      Collection<PhylonodeDbXRef> collection2 = phylonode1.getPhylonodeDbXRefs();
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(0.0, phylonode1.getDistance(), 0.01);
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(collection2);
      assertNotSame(phylonode1, phylonode0);
      
      Phylonode phylonode2 = phylonode0.getParent();
      assertEquals(0, phylonode2.getRightIdx());
      assertEquals(0.0, phylonode2.getDistance(), 0.01);
      assertNull(phylonode2.getLabel());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertEquals(0, phylonode2.getLeftIdx());
      assertEquals((-217.2521828), phylonode0.getDistance(), 0.01);
      assertEquals((-2843), phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(phylonode2);
      assertSame(phylonode2, phylonode1);
      assertNotSame(phylonode2, phylonode0);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(phylonode0, phylonode1);
      
      Phylonode phylonode3 = phylonode1.getParent();
      assertEquals((-2843), phylonode3.getLeftIdx());
      assertEquals((-217.2521828), phylonode3.getDistance(), 0.01);
      assertEquals(0, phylonode3.getRightIdx());
      assertNull(phylonode3.getLabel());
      assertEquals(0, phylonode3.getPhylonodeId());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(0.0, phylonode1.getDistance(), 0.01);
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode3.equals((Object)phylonode1));
      assertFalse(phylonode3.equals((Object)phylonode2));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode3);
      assertSame(phylonode3, phylonode0);
      assertNotSame(phylonode3, phylonode1);
      assertNotSame(phylonode3, phylonode2);
      assertSame(phylonode1, phylonode2);
      assertNotSame(phylonode1, phylonode0);
      assertNotSame(phylonode1, phylonode3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(phylonode0);
      
      Collection<PhylonodeOrganism> collection0 = phylonode0.getPhylonodeOrganisms();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(collection0);
      
      Collection<PhylonodeRelationship> collection1 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(collection1);
      
      Phylonode phylonode1 = new Phylonode();
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      Phylonode phylonode2 = phylonode0.getParent();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getLabel());
      assertNull(phylonode2.getDistance());
      assertEquals(0, phylonode2.getRightIdx());
      assertEquals(0, phylonode2.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNotNull(phylonode2);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertSame(phylonode2, phylonode1);
      assertNotSame(phylonode2, phylonode0);
      
      Collection<PhylonodeRelationship> collection2 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertTrue(collection2.equals((Object)collection1));
      assertNotNull(collection2);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertNotSame(collection2, collection1);
      
      int int0 = phylonode2.getLeftIdx();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getLabel());
      assertNull(phylonode2.getDistance());
      assertEquals(0, phylonode2.getRightIdx());
      assertEquals(0, phylonode2.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertEquals(0, int0);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertSame(phylonode2, phylonode1);
      assertNotSame(phylonode2, phylonode0);
      
      Phylotree phylotree0 = phylonode2.getPhylotree();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getLabel());
      assertNull(phylonode2.getDistance());
      assertEquals(0, phylonode2.getRightIdx());
      assertEquals(0, phylonode2.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNull(phylotree0);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertSame(phylonode2, phylonode1);
      assertNotSame(phylonode2, phylonode0);
      
      Collection<PhylonodeRelationship> collection3 = phylonode2.getPhylonodeRelationshipsForSubjectId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getLabel());
      assertNull(phylonode2.getDistance());
      assertEquals(0, phylonode2.getRightIdx());
      assertEquals(0, phylonode2.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertTrue(collection3.equals((Object)collection1));
      assertTrue(collection3.equals((Object)collection2));
      assertNotNull(collection3);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertSame(phylonode2, phylonode1);
      assertNotSame(phylonode2, phylonode0);
      assertNotSame(collection3, collection2);
      assertNotSame(collection3, collection1);
      
      Double double0 = phylonode1.getDistance();
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNull(double0);
      assertSame(phylonode1, phylonode2);
      assertNotSame(phylonode1, phylonode0);
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      
      int int1 = phylonode1.getRightIdx();
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertSame(phylonode1, phylonode2);
      assertNotSame(phylonode1, phylonode0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode(496, phylotree0, (-2063), 1849);
      assertEquals(1849, phylonode0.getRightIdx());
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals((-2063), phylonode0.getLeftIdx());
      assertNotNull(phylonode0);
      
      phylonode0.setLeftIdx(1849);
      assertEquals(1849, phylonode0.getRightIdx());
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertEquals(1849, phylonode0.getRightIdx());
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNotNull(collection0);
      
      Collection<PhylonodeDbXRef> collection1 = phylonode0.getPhylonodeDbXRefs();
      assertEquals(1849, phylonode0.getRightIdx());
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertNotNull(collection1);
      
      Double double0 = new Double((-2675.4));
      assertNotNull(double0);
      assertEquals((-2675.4), (double)double0, 0.01);
      
      phylonode0.setDistance(double0);
      assertEquals(1849, phylonode0.getRightIdx());
      assertEquals((-2675.4), phylonode0.getDistance(), 0.01);
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      phylonode0.setCvTerm(cvTerm0);
      assertEquals(1849, phylonode0.getRightIdx());
      assertEquals((-2675.4), phylonode0.getDistance(), 0.01);
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      
      Collection<PhylonodeOrganism> collection2 = phylonode0.getPhylonodeOrganisms();
      assertEquals(1849, phylonode0.getRightIdx());
      assertEquals((-2675.4), phylonode0.getDistance(), 0.01);
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      assertNotNull(collection2);
      
      phylonode0.setRightIdx(496);
      assertEquals((-2675.4), phylonode0.getDistance(), 0.01);
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      assertEquals(496, phylonode0.getRightIdx());
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode0.setPhylotree(phylotree1);
      assertEquals((-2675.4), phylonode0.getDistance(), 0.01);
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      assertEquals(496, phylonode0.getRightIdx());
      
      Collection<PhylonodePub> collection3 = phylonode0.getPhylonodePubs();
      assertEquals((-2675.4), phylonode0.getDistance(), 0.01);
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      assertEquals(496, phylonode0.getRightIdx());
      assertNotNull(collection3);
      
      Double double1 = phylonode0.getDistance();
      assertEquals((-2675.4), phylonode0.getDistance(), 0.01);
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      assertEquals(496, phylonode0.getRightIdx());
      assertNotNull(double1);
      assertEquals((-2675.4), (double)double1, 0.01);
      
      Collection<PhylonodeDbXRef> collection4 = phylonode0.getPhylonodeDbXRefs();
      assertEquals((-2675.4), phylonode0.getDistance(), 0.01);
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      assertEquals(496, phylonode0.getRightIdx());
      assertNotNull(collection4);
      assertSame(collection4, collection1);
      
      Phylotree phylotree2 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode0.setPhylotree(phylotree2);
      assertEquals((-2675.4), phylonode0.getDistance(), 0.01);
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      assertEquals(496, phylonode0.getRightIdx());
      
      Collection<PhylonodeOrganism> collection5 = phylonode0.getPhylonodeOrganisms();
      assertEquals((-2675.4), phylonode0.getDistance(), 0.01);
      assertEquals(496, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(1849, phylonode0.getLeftIdx());
      assertEquals(496, phylonode0.getRightIdx());
      assertNotNull(collection5);
      assertSame(collection5, collection2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      doReturn(")z~T[xp7S").when(phylotree0).toString();
      Phylonode phylonode0 = new Phylonode(2351, phylotree0, 2351, 2351);
      assertEquals(2351, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(2351, phylonode0.getRightIdx());
      assertEquals(2351, phylonode0.getLeftIdx());
      assertNotNull(phylonode0);
      
      Phylotree phylotree1 = phylonode0.getPhylotree();
      assertEquals(2351, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(2351, phylonode0.getRightIdx());
      assertEquals(2351, phylonode0.getLeftIdx());
      assertEquals(0, phylotree1.getPhylotreeId());
      assertNull(phylotree1.getName());
      assertNull(phylotree1.getComment());
      assertNotNull(phylotree1);
      assertSame(phylotree1, phylotree0);
      
      String string0 = phylonode0.getLabel();
      assertEquals(2351, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(2351, phylonode0.getRightIdx());
      assertEquals(2351, phylonode0.getLeftIdx());
      assertNull(string0);
      
      Double double0 = new Double(2351);
      assertNotNull(double0);
      assertEquals(2351.0, (double)double0, 0.01);
      
      phylonode0.setDistance(double0);
      assertEquals(2351.0, phylonode0.getDistance(), 0.01);
      assertEquals(2351, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(2351, phylonode0.getRightIdx());
      assertEquals(2351, phylonode0.getLeftIdx());
      
      phylonode0.setPhylonodeOrganisms((Set<PhylonodeOrganism>) null);
      assertEquals(2351.0, phylonode0.getDistance(), 0.01);
      assertEquals(2351, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(2351, phylonode0.getRightIdx());
      assertEquals(2351, phylonode0.getLeftIdx());
      
      phylonode0.setLeftIdx(2351);
      assertEquals(2351.0, phylonode0.getDistance(), 0.01);
      assertEquals(2351, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(2351, phylonode0.getRightIdx());
      assertEquals(2351, phylonode0.getLeftIdx());
      
      CvTerm cvTerm0 = phylonode0.getCvTerm();
      assertEquals(2351.0, phylonode0.getDistance(), 0.01);
      assertEquals(2351, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(2351, phylonode0.getRightIdx());
      assertEquals(2351, phylonode0.getLeftIdx());
      assertNull(cvTerm0);
      
      phylonode0.setPhylonodes((Set<Phylonode>) null);
      assertEquals(2351.0, phylonode0.getDistance(), 0.01);
      assertEquals(2351, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(2351, phylonode0.getRightIdx());
      assertEquals(2351, phylonode0.getLeftIdx());
      
      Phylonode phylonode1 = phylonode0.getParent();
      assertEquals(2351.0, phylonode0.getDistance(), 0.01);
      assertEquals(2351, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(2351, phylonode0.getRightIdx());
      assertEquals(2351, phylonode0.getLeftIdx());
      assertNull(phylonode1);
      
      Double double1 = phylonode0.getDistance();
      assertEquals(2351.0, phylonode0.getDistance(), 0.01);
      assertEquals(2351, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(2351, phylonode0.getRightIdx());
      assertEquals(2351, phylonode0.getLeftIdx());
      assertNotNull(double1);
      assertEquals(2351.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      phylonode0.setParent((Phylonode) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      phylonode0.setDistance(double0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1.0), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setPhylonodeRelationshipsForObjectId((Set<PhylonodeRelationship>) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1.0), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setLeftIdx(1078);
      assertNull(phylonode0.getLabel());
      assertEquals(1078, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1.0), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      
      Phylotree phylotree0 = phylonode0.getPhylotree();
      assertNull(phylonode0.getLabel());
      assertEquals(1078, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1.0), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylotree0);
      
      phylonode0.setPhylotree((Phylotree) null);
      assertNull(phylonode0.getLabel());
      assertEquals(1078, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1.0), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      
      Phylonode phylonode1 = new Phylonode(1078, (Phylotree) null, (-1412), (-1412));
      assertEquals((-1412), phylonode1.getRightIdx());
      assertEquals(1078, phylonode1.getPhylonodeId());
      assertEquals((-1412), phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertNull(phylonode0.getLabel());
      assertEquals(1078, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1.0), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1412), phylonode1.getRightIdx());
      assertEquals(1078, phylonode1.getPhylonodeId());
      assertEquals((-1412), phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode1.setFeature(feature0);
      assertEquals((-1412), phylonode1.getRightIdx());
      assertEquals(1078, phylonode1.getPhylonodeId());
      assertEquals((-1412), phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertNull(phylonode0.getLabel());
      assertEquals(1078, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1.0), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(collection0);
      assertNotSame(phylonode0, phylonode1);
      
      Collection<PhylonodeRelationship> collection1 = phylonode1.getPhylonodeRelationshipsForSubjectId();
      assertEquals((-1412), phylonode1.getRightIdx());
      assertEquals(1078, phylonode1.getPhylonodeId());
      assertEquals((-1412), phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(collection1);
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setPhylonodeProps((Set<PhylonodeProp>) null);
      assertNull(phylonode0.getLabel());
      assertEquals(1078, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1.0), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setLabel("22K*+g4#[");
      assertEquals(1078, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1.0), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals("22K*+g4#[", phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode1.setDistance(double0);
      assertEquals((-1412), phylonode1.getRightIdx());
      assertEquals(1078, phylonode1.getPhylonodeId());
      assertEquals((-1412), phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertEquals((-1.0), phylonode1.getDistance(), 0.01);
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      Collection<PhylonodeProp> collection2 = phylonode1.getPhylonodeProps();
      assertEquals((-1412), phylonode1.getRightIdx());
      assertEquals(1078, phylonode1.getPhylonodeId());
      assertEquals((-1412), phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertEquals((-1.0), phylonode1.getDistance(), 0.01);
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(collection2);
      assertNotSame(phylonode1, phylonode0);
      
      Collection<PhylonodeProp> collection3 = phylonode1.getPhylonodeProps();
      assertEquals((-1412), phylonode1.getRightIdx());
      assertEquals(1078, phylonode1.getPhylonodeId());
      assertEquals((-1412), phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertEquals((-1.0), phylonode1.getDistance(), 0.01);
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(collection3);
      assertSame(collection3, collection2);
      assertNotSame(phylonode1, phylonode0);
      
      int int0 = phylonode1.getLeftIdx();
      assertEquals((-1412), phylonode1.getRightIdx());
      assertEquals(1078, phylonode1.getPhylonodeId());
      assertEquals((-1412), phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertEquals((-1.0), phylonode1.getDistance(), 0.01);
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertEquals((-1412), int0);
      assertNotSame(phylonode1, phylonode0);
      
      Phylotree phylotree1 = phylonode1.getPhylotree();
      assertEquals((-1412), phylonode1.getRightIdx());
      assertEquals(1078, phylonode1.getPhylonodeId());
      assertEquals((-1412), phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertEquals((-1.0), phylonode1.getDistance(), 0.01);
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNull(phylotree1);
      assertNotSame(phylonode1, phylonode0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNotNull(phylonode0);
      
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = new Phylonode(0, phylotree0, (-3040), (-3040));
      assertNull(phylonode1.getLabel());
      assertEquals((-3040), phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals((-3040), phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode1.getLabel());
      assertEquals((-3040), phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals((-3040), phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setDistance((Double) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      int int0 = phylonode0.getRightIdx();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertEquals(0, int0);
      assertNotSame(phylonode0, phylonode1);
      
      Collection<PhylonodePub> collection0 = phylonode0.getPhylonodePubs();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection0);
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setPhylonodes((Set<Phylonode>) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      int int1 = phylonode0.getPhylonodeId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(phylonode0, phylonode1);
      
      String string0 = phylonode0.getLabel();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(string0);
      assertNotSame(phylonode0, phylonode1);
      
      CvTerm cvTerm0 = phylonode0.getCvTerm();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(cvTerm0);
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setRightIdx(0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode0.setPhylotree(phylotree1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setCvTerm((CvTerm) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      phylonode0.setDistance(double0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0.0, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      Double double1 = new Double(658.1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(658.1, (double)double1, 0.01);
      
      phylonode0.setDistance(double1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(658.1, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotSame(phylonode0, phylonode1);
      
      Collection<Phylonode> collection1 = phylonode0.getPhylonodes();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(658.1, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(collection1);
      assertNotSame(phylonode0, phylonode1);
      
      Collection<PhylonodeProp> collection2 = phylonode0.getPhylonodeProps();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(658.1, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection2);
      assertNotSame(phylonode0, phylonode1);
      
      Collection<PhylonodeRelationship> collection3 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(658.1, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection3);
      assertNotSame(phylonode0, phylonode1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode(549, (Phylotree) null, 549, 549);
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNotNull(phylonode0);
      
      phylonode0.setPhylotree((Phylotree) null);
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      
      phylonode0.setPhylonodeOrganisms((Set<PhylonodeOrganism>) null);
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNotNull(collection0);
      
      phylonode0.setLabel("0");
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertEquals("0", phylonode0.getLabel());
      
      phylonode0.setParent((Phylonode) null);
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertEquals("0", phylonode0.getLabel());
      
      phylonode0.setPhylonodeRelationshipsForObjectId((Set<PhylonodeRelationship>) null);
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertEquals("0", phylonode0.getLabel());
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertEquals("0", phylonode0.getLabel());
      
      phylonode0.setPhylotree((Phylotree) null);
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertEquals("0", phylonode0.getLabel());
      
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setPhylonodeId(549);
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertEquals("0", phylonode0.getLabel());
      
      phylonode0.setFeature(feature1);
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertEquals("0", phylonode0.getLabel());
      
      Feature feature2 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature2);
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertEquals("0", phylonode0.getLabel());
      
      Collection<PhylonodePub> collection1 = phylonode0.getPhylonodePubs();
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertEquals("0", phylonode0.getLabel());
      assertNotNull(collection1);
      
      Collection<PhylonodeOrganism> collection2 = phylonode0.getPhylonodeOrganisms();
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertEquals("0", phylonode0.getLabel());
      assertNull(collection2);
      
      int int0 = phylonode0.getRightIdx();
      assertEquals(549, phylonode0.getRightIdx());
      assertEquals(549, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(549, phylonode0.getLeftIdx());
      assertEquals("0", phylonode0.getLabel());
      assertEquals(549, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode((-73), phylotree0, (-73), (-73));
      assertEquals((-73), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals((-73), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertNotNull(phylonode0);
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(cvTerm0).toString();
      phylonode0.setCvTerm(cvTerm0);
      assertEquals((-73), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals((-73), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      
      Collection<PhylonodeOrganism> collection0 = phylonode0.getPhylonodeOrganisms();
      assertEquals((-73), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals((-73), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertNotNull(collection0);
      
      phylonode0.setPhylonodeId((-73));
      assertEquals((-73), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals((-73), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      
      phylonode0.setRightIdx(1);
      assertEquals(1, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals((-73), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      
      Double double0 = new Double((-39.515207165));
      assertNotNull(double0);
      assertEquals((-39.515207165), (double)double0, 0.01);
      
      phylonode0.setDistance(double0);
      assertEquals(1, phylonode0.getRightIdx());
      assertEquals((-73), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertEquals((-39.515207165), phylonode0.getDistance(), 0.01);
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode0.setPhylotree(phylotree1);
      assertEquals(1, phylonode0.getRightIdx());
      assertEquals((-73), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertEquals((-39.515207165), phylonode0.getDistance(), 0.01);
      
      phylonode0.setLeftIdx(0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertEquals((-39.515207165), phylonode0.getDistance(), 0.01);
      
      int int0 = phylonode0.getLeftIdx();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertEquals((-39.515207165), phylonode0.getDistance(), 0.01);
      assertEquals(0, int0);
      
      int int1 = phylonode0.getPhylonodeId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertEquals((-39.515207165), phylonode0.getDistance(), 0.01);
      assertFalse(int1 == int0);
      assertEquals((-73), int1);
      
      Collection<PhylonodeRelationship> collection1 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertEquals((-39.515207165), phylonode0.getDistance(), 0.01);
      assertNotNull(collection1);
      
      CvTerm cvTerm1 = phylonode0.getCvTerm();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertEquals((-39.515207165), phylonode0.getDistance(), 0.01);
      assertEquals(0, cvTerm1.getCvTermId());
      assertNull(cvTerm1.getName());
      assertEquals(0, cvTerm1.getIsRelationshipType());
      assertNull(cvTerm1.getDefinition());
      assertEquals(0, cvTerm1.getIsObsolete());
      assertNotNull(cvTerm1);
      assertSame(cvTerm1, cvTerm0);
      
      Double double1 = new Double((-73));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-73.0), (double)double1, 0.01);
      
      phylonode0.setDistance(double1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-73.0), phylonode0.getDistance(), 0.01);
      assertEquals(1, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      String string0 = phylonode0.getLabel();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-73.0), phylonode0.getDistance(), 0.01);
      assertEquals(1, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertNull(string0);
      
      Collection<Phylonode> collection2 = phylonode0.getPhylonodes();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-73.0), phylonode0.getDistance(), 0.01);
      assertEquals(1, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertNotNull(collection2);
      assertFalse(collection2.contains(phylonode0));
      
      phylonode0.setRightIdx((-73));
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-73.0), phylonode0.getDistance(), 0.01);
      assertEquals((-73), phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      
      int int2 = phylonode0.getLeftIdx();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-73.0), phylonode0.getDistance(), 0.01);
      assertEquals((-73), phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      CvTerm cvTerm2 = phylonode0.getCvTerm();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-73.0), phylonode0.getDistance(), 0.01);
      assertEquals((-73), phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertEquals(0, cvTerm2.getCvTermId());
      assertNull(cvTerm2.getName());
      assertNull(cvTerm2.getDefinition());
      assertEquals(0, cvTerm2.getIsObsolete());
      assertEquals(0, cvTerm2.getIsRelationshipType());
      assertNotNull(cvTerm2);
      assertSame(cvTerm2, cvTerm1);
      assertSame(cvTerm2, cvTerm0);
      
      Collection<PhylonodePub> collection3 = phylonode0.getPhylonodePubs();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-73.0), phylonode0.getDistance(), 0.01);
      assertEquals((-73), phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertNotNull(collection3);
      
      phylonode0.setLeftIdx(0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-73.0), phylonode0.getDistance(), 0.01);
      assertEquals((-73), phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      
      int int3 = phylonode0.getLeftIdx();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-73.0), phylonode0.getDistance(), 0.01);
      assertEquals((-73), phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      phylonode0.setLeftIdx(0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-73.0), phylonode0.getDistance(), 0.01);
      assertEquals((-73), phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-73), phylonode0.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(phylonode0);
      
      Double double0 = new Double((-1211.7349841769217));
      assertNotNull(double0);
      assertEquals((-1211.7349841769217), (double)double0, 0.01);
      
      phylonode0.setDistance(double0);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1211.7349841769217), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      
      Phylonode phylonode1 = new Phylonode();
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode1.setRightIdx(0);
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      phylonode1.setFeature(feature0);
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setParent(phylonode1);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1211.7349841769217), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      Collection<PhylonodePub> collection0 = phylonode0.getPhylonodePubs();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1211.7349841769217), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection0);
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setPhylonodeId((-1));
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1211.7349841769217), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode1.setPhylonodeId(0);
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      phylonode1.setRightIdx((-2143));
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertEquals((-2143), phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      Collection<Phylonode> collection1 = phylonode1.getPhylonodes();
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertEquals((-2143), phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(collection1);
      assertFalse(collection1.contains(phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      Phylonode phylonode2 = phylonode0.getParent();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1211.7349841769217), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getLabel());
      assertNull(phylonode2.getDistance());
      assertEquals(0, phylonode2.getLeftIdx());
      assertEquals((-2143), phylonode2.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNotNull(phylonode2);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertSame(phylonode2, phylonode1);
      assertNotSame(phylonode2, phylonode0);
      
      phylonode2.setParent(phylonode0);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1211.7349841769217), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getLabel());
      assertNull(phylonode2.getDistance());
      assertEquals(0, phylonode2.getLeftIdx());
      assertEquals((-2143), phylonode2.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertSame(phylonode2, phylonode1);
      assertNotSame(phylonode2, phylonode0);
      
      phylonode0.setLabel("hcuxroVf]TlOC{h{$u");
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1211.7349841769217), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertEquals("hcuxroVf]TlOC{h{$u", phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      
      Double double1 = phylonode2.getDistance();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1211.7349841769217), phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertEquals("hcuxroVf]TlOC{h{$u", phylonode0.getLabel());
      assertEquals(0, phylonode2.getPhylonodeId());
      assertNull(phylonode2.getLabel());
      assertNull(phylonode2.getDistance());
      assertEquals(0, phylonode2.getLeftIdx());
      assertEquals((-2143), phylonode2.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode0.equals((Object)phylonode2));
      assertFalse(phylonode2.equals((Object)phylonode0));
      assertNull(double1);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode0, phylonode2);
      assertSame(phylonode2, phylonode1);
      assertNotSame(phylonode2, phylonode0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode((-1), phylotree0, (-1), (-2396));
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals((-2396), phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNotNull(phylonode0);
      
      phylonode0.setLabel("");
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals((-2396), phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      
      phylonode0.setFeature((Feature) null);
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals((-2396), phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      
      phylonode0.setRightIdx((-2396));
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals((-2396), phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      
      String string0 = phylonode0.getLabel();
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals((-2396), phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      assertNotNull(string0);
      assertEquals("", string0);
      
      phylonode0.setFeature((Feature) null);
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals((-2396), phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      
      phylonode0.setPhylonodeOrganisms((Set<PhylonodeOrganism>) null);
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals((-2396), phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals("", phylonode0.getLabel());
      
      Phylonode phylonode1 = new Phylonode();
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode1.setPhylonodeId(0);
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setPhylonodeId(0);
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals((-2396), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals("", phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode1.setRightIdx(0);
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setParent(phylonode1);
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals((-2396), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals("", phylonode0.getLabel());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      Collection<Phylonode> collection0 = phylonode0.getPhylonodes();
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals((-2396), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals("", phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection0);
      assertFalse(collection0.contains(phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      phylonode0.setCvTerm(cvTerm0);
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals((-2396), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals("", phylonode0.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode1.setLeftIdx(4412);
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertEquals(4412, phylonode1.getLeftIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(phylotree0).toString();
      phylonode0.setPhylotree(phylotree0);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      String string0 = phylonode0.getLabel();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(string0);
      
      phylonode0.setRightIdx(0);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setPhylonodeId(0);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setRightIdx(0);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      int int0 = phylonode0.getLeftIdx();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, int0);
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(collection0);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      phylonode0.setRightIdx(0);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setDistance(double0);
      assertEquals(0.0, phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      Phylotree phylotree1 = phylonode0.getPhylotree();
      assertEquals(0.0, phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylotree1.getName());
      assertEquals(0, phylotree1.getPhylotreeId());
      assertNull(phylotree1.getComment());
      assertNotNull(phylotree1);
      assertSame(phylotree1, phylotree0);
      
      Collection<PhylonodeOrganism> collection1 = phylonode0.getPhylonodeOrganisms();
      assertEquals(0.0, phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(collection1);
      
      Collection<PhylonodePub> collection2 = phylonode0.getPhylonodePubs();
      assertEquals(0.0, phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(collection2);
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      assertEquals(0.0, phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      phylonode0.setCvTerm(cvTerm0);
      assertEquals(0.0, phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setLabel((String) null);
      assertEquals(0.0, phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      Double double1 = phylonode0.getDistance();
      assertEquals(0.0, phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      phylonode0.setPhylonodePubs((Set<PhylonodePub>) null);
      assertEquals(0.0, phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode(662, phylotree0, 662, 0);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(662, phylonode0.getLeftIdx());
      assertEquals(662, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      phylonode0.setLeftIdx(662);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(662, phylonode0.getLeftIdx());
      assertEquals(662, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getRightIdx());
      
      phylonode0.setRightIdx((-510));
      assertEquals((-510), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(662, phylonode0.getLeftIdx());
      assertEquals(662, phylonode0.getPhylonodeId());
      
      phylonode0.setRightIdx(662);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(662, phylonode0.getRightIdx());
      assertEquals(662, phylonode0.getLeftIdx());
      assertEquals(662, phylonode0.getPhylonodeId());
      
      Collection<PhylonodeOrganism> collection0 = phylonode0.getPhylonodeOrganisms();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(662, phylonode0.getRightIdx());
      assertEquals(662, phylonode0.getLeftIdx());
      assertEquals(662, phylonode0.getPhylonodeId());
      assertNotNull(collection0);
      
      int int0 = phylonode0.getLeftIdx();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(662, phylonode0.getRightIdx());
      assertEquals(662, phylonode0.getLeftIdx());
      assertEquals(662, phylonode0.getPhylonodeId());
      assertEquals(662, int0);
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode0.setPhylotree(phylotree1);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(662, phylonode0.getRightIdx());
      assertEquals(662, phylonode0.getLeftIdx());
      assertEquals(662, phylonode0.getPhylonodeId());
      
      int int1 = phylonode0.getRightIdx();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(662, phylonode0.getRightIdx());
      assertEquals(662, phylonode0.getLeftIdx());
      assertEquals(662, phylonode0.getPhylonodeId());
      assertTrue(int1 == int0);
      assertEquals(662, int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode((-1), phylotree0, 0, (-1));
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertEquals((-1), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(phylonode0);
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertEquals((-1), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(phylotree1).toString();
      Phylotree phylotree2 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = new Phylonode(0, phylotree2, (-1), 0);
      assertEquals((-1), phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertEquals((-1), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-1), phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setPhylotree(phylotree1);
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertEquals((-1), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setRightIdx(0);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature1);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cvTerm0).toString();
      phylonode0.setCvTerm(cvTerm0);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      Collection<Phylonode> collection0 = phylonode0.getPhylonodes();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection0);
      assertFalse(collection0.contains(phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      Phylotree phylotree3 = phylonode0.getPhylotree();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylotree3.getComment());
      assertEquals(0, phylotree3.getPhylotreeId());
      assertNull(phylotree3.getName());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylotree3.equals((Object)phylotree2));
      assertFalse(phylotree3.equals((Object)phylotree0));
      assertNotNull(phylotree3);
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylotree3, phylotree2);
      assertSame(phylotree3, phylotree1);
      assertNotSame(phylotree3, phylotree0);
      
      phylonode0.setPhylotree(phylotree3);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylotree3.getComment());
      assertEquals(0, phylotree3.getPhylotreeId());
      assertNull(phylotree3.getName());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylotree3.equals((Object)phylotree2));
      assertFalse(phylotree3.equals((Object)phylotree0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylotree3, phylotree2);
      assertSame(phylotree3, phylotree1);
      assertNotSame(phylotree3, phylotree0);
      
      phylonode0.setPhylonodeRelationshipsForObjectId((Set<PhylonodeRelationship>) null);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      int int0 = phylonode0.getRightIdx();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertEquals(0, int0);
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setPhylonodes((Set<Phylonode>) null);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setPhylonodeRelationshipsForSubjectId((Set<PhylonodeRelationship>) null);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode1.setPhylonodeRelationshipsForSubjectId((Set<PhylonodeRelationship>) null);
      assertEquals((-1), phylonode1.getLeftIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      Collection<PhylonodeOrganism> collection1 = phylonode0.getPhylonodeOrganisms();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection1);
      assertNotSame(phylonode0, phylonode1);
      
      CvTerm cvTerm1 = phylonode0.getCvTerm();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(cvTerm1.getName());
      assertNull(cvTerm1.getDefinition());
      assertEquals(0, cvTerm1.getIsObsolete());
      assertEquals(0, cvTerm1.getCvTermId());
      assertEquals(0, cvTerm1.getIsRelationshipType());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(cvTerm1);
      assertNotSame(phylonode0, phylonode1);
      assertSame(cvTerm1, cvTerm0);
      
      phylonode0.setPhylonodeRelationshipsForObjectId((Set<PhylonodeRelationship>) null);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      Collection<PhylonodeRelationship> collection2 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(collection2);
      assertNotSame(phylonode0, phylonode1);
      
      int int1 = phylonode0.getRightIdx();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setRightIdx(0);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      Phylotree phylotree0 = phylonode0.getPhylotree();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylotree0);
      
      phylonode0.setPhylotree((Phylotree) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      
      Phylonode phylonode1 = new Phylonode(1480, (Phylotree) null, 1480, 0);
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(1480, phylonode1.getLeftIdx());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(1480, phylonode1.getPhylonodeId());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(1480, phylonode1.getLeftIdx());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(1480, phylonode1.getPhylonodeId());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode((-2952), phylotree0, (-2952), 16);
      assertNull(phylonode0.getDistance());
      assertEquals((-2952), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-2952), phylonode0.getPhylonodeId());
      assertEquals(16, phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode0.setPhylotree(phylotree1);
      assertNull(phylonode0.getDistance());
      assertEquals((-2952), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-2952), phylonode0.getPhylonodeId());
      assertEquals(16, phylonode0.getRightIdx());
      
      Collection<PhylonodePub> collection0 = phylonode0.getPhylonodePubs();
      assertNull(phylonode0.getDistance());
      assertEquals((-2952), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-2952), phylonode0.getPhylonodeId());
      assertEquals(16, phylonode0.getRightIdx());
      assertNotNull(collection0);
      
      phylonode0.setPhylonodePubs((Set<PhylonodePub>) null);
      assertNull(phylonode0.getDistance());
      assertEquals((-2952), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-2952), phylonode0.getPhylonodeId());
      assertEquals(16, phylonode0.getRightIdx());
      
      CvTerm cvTerm0 = phylonode0.getCvTerm();
      assertNull(phylonode0.getDistance());
      assertEquals((-2952), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-2952), phylonode0.getPhylonodeId());
      assertEquals(16, phylonode0.getRightIdx());
      assertNull(cvTerm0);
      
      Collection<PhylonodePub> collection1 = phylonode0.getPhylonodePubs();
      assertNull(phylonode0.getDistance());
      assertEquals((-2952), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-2952), phylonode0.getPhylonodeId());
      assertEquals(16, phylonode0.getRightIdx());
      assertNull(collection1);
      
      Collection<PhylonodeDbXRef> collection2 = phylonode0.getPhylonodeDbXRefs();
      assertNull(phylonode0.getDistance());
      assertEquals((-2952), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-2952), phylonode0.getPhylonodeId());
      assertEquals(16, phylonode0.getRightIdx());
      assertNotNull(collection2);
      
      Collection<Phylonode> collection3 = phylonode0.getPhylonodes();
      assertNull(phylonode0.getDistance());
      assertEquals((-2952), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-2952), phylonode0.getPhylonodeId());
      assertEquals(16, phylonode0.getRightIdx());
      assertNotNull(collection3);
      assertFalse(collection3.contains(phylonode0));
      
      Phylotree phylotree2 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode0.setPhylotree(phylotree2);
      assertNull(phylonode0.getDistance());
      assertEquals((-2952), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-2952), phylonode0.getPhylonodeId());
      assertEquals(16, phylonode0.getRightIdx());
      
      phylonode0.setRightIdx((-2952));
      assertNull(phylonode0.getDistance());
      assertEquals((-2952), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-2952), phylonode0.getPhylonodeId());
      assertEquals((-2952), phylonode0.getRightIdx());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode((-589), phylotree0, (-589), (-589));
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      
      Phylonode phylonode1 = new Phylonode();
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      Double double0 = new Double((-589));
      assertNotNull(double0);
      assertEquals((-589.0), (double)double0, 0.01);
      
      phylonode1.setDistance(double0);
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals((-589.0), phylonode1.getDistance(), 0.01);
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode1.setFeature(feature1);
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals((-589.0), phylonode1.getDistance(), 0.01);
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setParent(phylonode1);
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals((-589.0), phylonode1.getDistance(), 0.01);
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setLabel("");
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertEquals("", phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setLabel("_)[t$3yB/E;Xmq");
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertEquals("_)[t$3yB/E;Xmq", phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setLeftIdx((-589));
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertEquals("_)[t$3yB/E;Xmq", phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      String string0 = phylonode0.getLabel();
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertEquals("_)[t$3yB/E;Xmq", phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(string0);
      assertEquals("_)[t$3yB/E;Xmq", string0);
      assertNotSame(phylonode0, phylonode1);
      
      Collection<PhylonodeProp> collection0 = phylonode0.getPhylonodeProps();
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertEquals("_)[t$3yB/E;Xmq", phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection0);
      assertNotSame(phylonode0, phylonode1);
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode0.setPhylotree(phylotree1);
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertEquals("_)[t$3yB/E;Xmq", phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      Collection<PhylonodeOrganism> collection1 = phylonode0.getPhylonodeOrganisms();
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertEquals("_)[t$3yB/E;Xmq", phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection1);
      assertNotSame(phylonode0, phylonode1);
      
      int int0 = phylonode0.getLeftIdx();
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertEquals("_)[t$3yB/E;Xmq", phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertEquals((-589), int0);
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertNull(phylonode0.getDistance());
      assertEquals((-589), phylonode0.getPhylonodeId());
      assertEquals("_)[t$3yB/E;Xmq", phylonode0.getLabel());
      assertEquals((-589), phylonode0.getLeftIdx());
      assertEquals((-589), phylonode0.getRightIdx());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals((-589.0), phylonode1.getDistance(), 0.01);
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode(2963, phylotree0, 2963, 2963);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(2963, phylonode0.getPhylonodeId());
      assertEquals(2963, phylonode0.getLeftIdx());
      assertEquals(2963, phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = new Phylonode(2963, phylotree1, 2963, (-1535));
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(2963, phylonode1.getPhylonodeId());
      assertEquals((-1535), phylonode1.getRightIdx());
      assertEquals(2963, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(2963, phylonode0.getPhylonodeId());
      assertEquals(2963, phylonode0.getLeftIdx());
      assertEquals(2963, phylonode0.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(2963, phylonode1.getPhylonodeId());
      assertEquals((-1535), phylonode1.getRightIdx());
      assertEquals(2963, phylonode1.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      int int0 = phylonode0.getPhylonodeId();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(2963, phylonode0.getPhylonodeId());
      assertEquals(2963, phylonode0.getLeftIdx());
      assertEquals(2963, phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertEquals(2963, int0);
      assertNotSame(phylonode0, phylonode1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(phylonode0);
      
      phylonode0.setPhylonodeOrganisms((Set<PhylonodeOrganism>) null);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      
      String string0 = phylonode0.getLabel();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode((-1387), phylotree0, 0, 0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1387), phylonode0.getPhylonodeId());
      assertNotNull(phylonode0);
      
      Feature feature0 = phylonode0.getFeature();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1387), phylonode0.getPhylonodeId());
      assertNull(feature0);
      
      Collection<Phylonode> collection0 = phylonode0.getPhylonodes();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1387), phylonode0.getPhylonodeId());
      assertNotNull(collection0);
      assertFalse(collection0.contains(phylonode0));
      
      Collection<PhylonodeDbXRef> collection1 = phylonode0.getPhylonodeDbXRefs();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1387), phylonode0.getPhylonodeId());
      assertNotNull(collection1);
      
      Collection<PhylonodeOrganism> collection2 = phylonode0.getPhylonodeOrganisms();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1387), phylonode0.getPhylonodeId());
      assertNotNull(collection2);
      
      Collection<PhylonodeRelationship> collection3 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1387), phylonode0.getPhylonodeId());
      assertNotNull(collection3);
      
      Phylonode phylonode1 = new Phylonode();
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode1.setRightIdx(2571);
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(2571, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setParent(phylonode1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals((-1387), phylonode0.getPhylonodeId());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(2571, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode1.setPhylotree(phylotree1);
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(2571, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      Double double0 = phylonode1.getDistance();
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(2571, phylonode1.getRightIdx());
      assertNull(phylonode1.getLabel());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNull(double0);
      assertNotSame(phylonode1, phylonode0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(phylonode0);
      
      phylonode0.setPhylonodes((Set<Phylonode>) null);
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      
      phylonode0.setPhylonodes((Set<Phylonode>) null);
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      
      int int0 = phylonode0.getRightIdx();
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, int0);
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      phylonode0.setCvTerm(cvTerm0);
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      
      phylonode0.setCvTerm((CvTerm) null);
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      
      Collection<PhylonodePub> collection0 = phylonode0.getPhylonodePubs();
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(collection0);
      
      phylonode0.setPhylonodes((Set<Phylonode>) null);
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      
      phylonode0.setPhylonodes((Set<Phylonode>) null);
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      
      Collection<PhylonodeDbXRef> collection1 = phylonode0.getPhylonodeDbXRefs();
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(collection1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode(0, phylotree0, 0, (-2120));
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals((-2120), phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNotNull(phylonode0);
      
      phylonode0.setLabel("V]Q;^e 6YlU#{");
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals((-2120), phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals("V]Q;^e 6YlU#{", phylonode0.getLabel());
      
      int int0 = phylonode0.getLeftIdx();
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals((-2120), phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals("V]Q;^e 6YlU#{", phylonode0.getLabel());
      assertEquals(0, int0);
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals((-2120), phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals("V]Q;^e 6YlU#{", phylonode0.getLabel());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(phylonode0);
      
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode0.setPhylotree(phylotree0);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      
      phylonode0.setLeftIdx(0);
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      
      Collection<PhylonodeProp> collection0 = phylonode0.getPhylonodeProps();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(collection0);
      
      Collection<PhylonodeDbXRef> collection1 = phylonode0.getPhylonodeDbXRefs();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(collection1);
      
      CvTerm cvTerm0 = phylonode0.getCvTerm();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(cvTerm0);
      
      Collection<PhylonodeRelationship> collection2 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(collection2);
      
      int int0 = phylonode0.getPhylonodeId();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, int0);
      
      CvTerm cvTerm1 = phylonode0.getCvTerm();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(cvTerm1);
      
      CvTerm cvTerm2 = phylonode0.getCvTerm();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(cvTerm2);
      
      Feature feature0 = phylonode0.getFeature();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(feature0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(phylonode0);
      
      Double double0 = phylonode0.getDistance();
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(double0);
      
      phylonode0.setPhylonodePubs((Set<PhylonodePub>) null);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode0.setRightIdx(0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      
      Phylonode phylonode1 = new Phylonode(0, phylotree0, 0, 0);
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(0, phylonode1.getRightIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(0, phylonode1.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setLeftIdx(0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode1.setFeature(feature0);
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(0, phylonode1.getRightIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection0);
      assertNotSame(phylonode0, phylonode1);
      
      Collection<PhylonodePub> collection1 = phylonode0.getPhylonodePubs();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection1);
      assertNotSame(phylonode0, phylonode1);
      
      phylonode1.setPhylonodeRelationshipsForObjectId((Set<PhylonodeRelationship>) null);
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(0, phylonode1.getRightIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      String string0 = phylonode1.getLabel();
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(0, phylonode1.getRightIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNull(string0);
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setParent(phylonode1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertEquals(0, phylonode1.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      Collection<PhylonodePub> collection2 = phylonode0.getPhylonodePubs();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection2);
      assertNotSame(phylonode0, phylonode1);
      assertSame(collection2, collection1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode(1402, (Phylotree) null, 1402, 0);
      assertEquals(1402, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNotNull(phylonode0);
      
      phylonode0.setRightIdx(2223);
      assertEquals(1402, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals(2223, phylonode0.getRightIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      
      phylonode0.setLeftIdx(0);
      assertNull(phylonode0.getLabel());
      assertEquals(2223, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      
      phylonode0.setPhylonodeOrganisms((Set<PhylonodeOrganism>) null);
      assertNull(phylonode0.getLabel());
      assertEquals(2223, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      
      phylonode0.setPhylotree((Phylotree) null);
      assertNull(phylonode0.getLabel());
      assertEquals(2223, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      
      Phylonode phylonode1 = new Phylonode();
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode0.setParent(phylonode1);
      assertNull(phylonode0.getLabel());
      assertEquals(2223, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode1.getLabel());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      int int0 = phylonode0.getLeftIdx();
      assertNull(phylonode0.getLabel());
      assertEquals(2223, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertEquals(0, int0);
      assertNotSame(phylonode0, phylonode1);
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertNull(phylonode0.getLabel());
      assertEquals(2223, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection0);
      assertNotSame(phylonode0, phylonode1);
      
      Collection<PhylonodeRelationship> collection1 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertNull(phylonode0.getLabel());
      assertEquals(2223, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotNull(collection1);
      assertNotSame(phylonode0, phylonode1);
      assertSame(collection1, collection0);
      
      Phylotree phylotree0 = phylonode0.getPhylotree();
      assertNull(phylonode0.getLabel());
      assertEquals(2223, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(phylotree0);
      assertNotSame(phylonode0, phylonode1);
      
      phylonode0.setPhylonodeDbXRefs((Set<PhylonodeDbXRef>) null);
      assertNull(phylonode0.getLabel());
      assertEquals(2223, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNotSame(phylonode0, phylonode1);
      
      Collection<PhylonodeOrganism> collection2 = phylonode0.getPhylonodeOrganisms();
      assertNull(phylonode0.getLabel());
      assertEquals(2223, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1402, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertNull(collection2);
      assertNotSame(phylonode0, phylonode1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNotNull(phylonode0);
      
      phylonode0.setLeftIdx(657);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(657, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      
      Double double0 = new Double(657);
      assertNotNull(double0);
      assertEquals(657.0, (double)double0, 0.01);
      
      phylonode0.setDistance(double0);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(657, phylonode0.getLeftIdx());
      assertEquals(657.0, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      
      Double double1 = phylonode0.getDistance();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(657, phylonode0.getLeftIdx());
      assertEquals(657.0, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(double1);
      assertEquals(657.0, (double)double1, 0.01);
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(657, phylonode0.getLeftIdx());
      assertEquals(657.0, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(collection0);
      
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(657, phylonode0.getLeftIdx());
      assertEquals(657.0, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertNotNull(phylonode0);
      
      Double double0 = new Double((-278.138691691073));
      assertNotNull(double0);
      assertEquals((-278.138691691073), (double)double0, 0.01);
      
      phylonode0.setDistance(double0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-278.138691691073), phylonode0.getDistance(), 0.01);
      
      phylonode0.setPhylotree((Phylotree) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-278.138691691073), phylonode0.getDistance(), 0.01);
      
      Phylotree phylotree0 = phylonode0.getPhylotree();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-278.138691691073), phylonode0.getDistance(), 0.01);
      assertNull(phylotree0);
      
      int int0 = phylonode0.getPhylonodeId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-278.138691691073), phylonode0.getDistance(), 0.01);
      assertEquals(0, int0);
      
      Collection<Phylonode> collection0 = phylonode0.getPhylonodes();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-278.138691691073), phylonode0.getDistance(), 0.01);
      assertNotNull(collection0);
      assertFalse(collection0.contains(phylonode0));
      
      int int1 = phylonode0.getPhylonodeId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-278.138691691073), phylonode0.getDistance(), 0.01);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Double double1 = new Double((-1462.279863780148));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1462.279863780148), (double)double1, 0.01);
      
      phylonode0.setDistance(double1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      phylonode0.setPhylotree((Phylotree) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      
      Feature feature0 = phylonode0.getFeature();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertNull(feature0);
      
      phylonode0.setLabel("91");
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      
      phylonode0.setFeature((Feature) null);
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      
      int int2 = phylonode0.getLeftIdx();
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      Collection<PhylonodeOrganism> collection1 = phylonode0.getPhylonodeOrganisms();
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertNotNull(collection1);
      
      Feature feature1 = phylonode0.getFeature();
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertNull(feature1);
      
      Collection<PhylonodeDbXRef> collection2 = phylonode0.getPhylonodeDbXRefs();
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertNotNull(collection2);
      
      Collection<PhylonodeProp> collection3 = phylonode0.getPhylonodeProps();
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertNotNull(collection3);
      
      Collection<PhylonodeDbXRef> collection4 = phylonode0.getPhylonodeDbXRefs();
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertNotNull(collection4);
      assertSame(collection4, collection2);
      
      Feature feature2 = phylonode0.getFeature();
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertNull(feature2);
      
      String string0 = phylonode0.getLabel();
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertNotNull(string0);
      assertEquals("91", string0);
      
      Phylonode phylonode1 = new Phylonode();
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotNull(phylonode1);
      
      phylonode1.setLabel((String) null);
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setParent(phylonode1);
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertNull(phylonode1.getDistance());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      phylonode1.setDistance(double0);
      assertEquals((-278.138691691073), phylonode1.getDistance(), 0.01);
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
      
      phylonode0.setParent(phylonode1);
      assertEquals("91", phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1462.279863780148), phylonode0.getDistance(), 0.01);
      assertEquals((-278.138691691073), phylonode1.getDistance(), 0.01);
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode0.equals((Object)phylonode1));
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode0, phylonode1);
      assertNotSame(phylonode1, phylonode0);
      
      phylonode1.setLeftIdx(0);
      assertEquals((-278.138691691073), phylonode1.getDistance(), 0.01);
      assertNull(phylonode1.getLabel());
      assertEquals(0, phylonode1.getPhylonodeId());
      assertEquals(0, phylonode1.getRightIdx());
      assertEquals(0, phylonode1.getLeftIdx());
      assertFalse(phylonode1.equals((Object)phylonode0));
      assertNotSame(phylonode1, phylonode0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(phylonode0);
      
      Collection<Phylonode> collection0 = phylonode0.getPhylonodes();
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(collection0);
      assertFalse(collection0.contains(phylonode0));
      
      phylonode0.setParent((Phylonode) null);
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode((-617), (Phylotree) null, (-617), (-617));
      assertEquals((-617), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-617), phylonode0.getPhylonodeId());
      assertEquals((-617), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNotNull(phylonode0);
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertEquals((-617), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-617), phylonode0.getPhylonodeId());
      assertEquals((-617), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNotNull(collection0);
      
      int int0 = phylonode0.getRightIdx();
      assertEquals((-617), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-617), phylonode0.getPhylonodeId());
      assertEquals((-617), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals((-617), int0);
      
      phylonode0.setPhylonodes((Set<Phylonode>) null);
      assertEquals((-617), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-617), phylonode0.getPhylonodeId());
      assertEquals((-617), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      
      phylonode0.setPhylotree((Phylotree) null);
      assertEquals((-617), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-617), phylonode0.getPhylonodeId());
      assertEquals((-617), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      
      Phylotree phylotree0 = phylonode0.getPhylotree();
      assertEquals((-617), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-617), phylonode0.getPhylonodeId());
      assertEquals((-617), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(phylotree0);
      
      phylonode0.setLeftIdx((-617));
      assertEquals((-617), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-617), phylonode0.getPhylonodeId());
      assertEquals((-617), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      
      Feature feature0 = phylonode0.getFeature();
      assertEquals((-617), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-617), phylonode0.getPhylonodeId());
      assertEquals((-617), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNull(feature0);
      
      phylonode0.setPhylonodeRelationshipsForSubjectId((Set<PhylonodeRelationship>) null);
      assertEquals((-617), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-617), phylonode0.getPhylonodeId());
      assertEquals((-617), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      
      Collection<PhylonodeProp> collection1 = phylonode0.getPhylonodeProps();
      assertEquals((-617), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-617), phylonode0.getPhylonodeId());
      assertEquals((-617), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertNotNull(collection1);
      
      Collection<PhylonodeRelationship> collection2 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertEquals((-617), phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertEquals((-617), phylonode0.getPhylonodeId());
      assertEquals((-617), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertTrue(collection2.equals((Object)collection0));
      assertNotNull(collection2);
      assertNotSame(collection2, collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNotNull(phylonode0);
      
      int int0 = phylonode0.getLeftIdx();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(phylonode0);
      
      phylonode0.setRightIdx(0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      
      Double double0 = new Double((-424.5946958265));
      assertNotNull(double0);
      assertEquals((-424.5946958265), (double)double0, 0.01);
      
      phylonode0.setDistance(double0);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-424.5946958265), phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      
      Collection<PhylonodeOrganism> collection0 = phylonode0.getPhylonodeOrganisms();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-424.5946958265), phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(collection0);
      
      Feature feature0 = phylonode0.getFeature();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-424.5946958265), phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(feature0);
      
      Collection<PhylonodeOrganism> collection1 = phylonode0.getPhylonodeOrganisms();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-424.5946958265), phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(collection1);
      assertSame(collection1, collection0);
      
      Double double1 = new Double((-424.5946958265));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-424.5946958265), (double)double1, 0.01);
      
      phylonode0.setDistance(double1);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-424.5946958265), phylonode0.getDistance(), 0.01);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNotNull(phylonode0);
      
      phylonode0.setPhylonodePubs((Set<PhylonodePub>) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      phylonode0.setPhylonodeOrganisms((Set<PhylonodeOrganism>) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      
      Double double0 = phylonode0.getDistance();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNull(double0);
      
      Collection<PhylonodeProp> collection0 = phylonode0.getPhylonodeProps();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertNotNull(collection0);
      
      phylonode0.setPhylonodeProps((Set<PhylonodeProp>) null);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getLabel());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNotNull(phylonode0);
      
      Double double0 = new Double(1221.6409);
      assertNotNull(double0);
      assertEquals(1221.6409, (double)double0, 0.01);
      
      phylonode0.setDistance(double0);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1221.6409, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      
      phylonode0.setDistance(double0);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1221.6409, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      
      String string0 = phylonode0.getLabel();
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1221.6409, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(string0);
      
      phylonode0.setRightIdx(0);
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1221.6409, phylonode0.getDistance(), 0.01);
      assertEquals(0, phylonode0.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNotNull(phylonode0);
      
      int int0 = phylonode0.getPhylonodeId();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertEquals(0, int0);
      
      phylonode0.setRightIdx(1060);
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1060, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      
      Collection<PhylonodePub> collection0 = phylonode0.getPhylonodePubs();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(1060, phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNotNull(collection0);
      
      phylonode0.setRightIdx((-1));
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-1), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      
      CvTerm cvTerm0 = phylonode0.getCvTerm();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-1), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(cvTerm0);
      
      Phylotree phylotree0 = phylonode0.getPhylotree();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-1), phylonode0.getRightIdx());
      assertNull(phylonode0.getDistance());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getLabel());
      assertNull(phylotree0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(phylonode0);
      
      phylonode0.setLeftIdx(0);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNotNull(collection0);
      
      Phylonode phylonode1 = phylonode0.getParent();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertNull(phylonode1);
      
      phylonode0.setRightIdx(0);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      phylonode0.setCvTerm(cvTerm0);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      assertEquals(0, phylonode0.getPhylonodeId());
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertNotNull(phylonode0);
      
      phylonode0.setPhylonodeId(451);
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(451, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      
      int int0 = phylonode0.getRightIdx();
      assertNull(phylonode0.getDistance());
      assertNull(phylonode0.getLabel());
      assertEquals(451, phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setLabel("1");
      int int0 = phylonode0.getPhylonodeId();
      assertEquals(0, int0);
      
      phylonode0.setLabel("IOAZ~3m&G&E");
      phylonode0.getPhylotree();
      assertEquals(0, phylonode0.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode((-413), (Phylotree) null, (-413), (-413));
      assertEquals((-413), phylonode0.getPhylonodeId());
      assertEquals((-413), phylonode0.getRightIdx());
      assertEquals((-413), phylonode0.getLeftIdx());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.getFeature();
      phylonode0.getCvTerm();
      phylonode0.getDistance();
      phylonode0.getFeature();
      phylonode0.getDistance();
      phylonode0.setPhylonodeProps((Set<PhylonodeProp>) null);
      phylonode0.getCvTerm();
      phylonode0.getDistance();
      phylonode0.getCvTerm();
      phylonode0.getPhylotree();
      phylonode0.getCvTerm();
      CvTerm cvTerm0 = phylonode0.getCvTerm();
      assertNull(cvTerm0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(phylotree0).toString();
      Phylonode phylonode0 = new Phylonode(695, phylotree0, 695, (-405));
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn("qN#/TU S-qszLg", "BOL1x{H1ln*+", (String) null, (String) null).when(feature0).toString();
      phylonode0.setFeature(feature0);
      assertEquals((-405), phylonode0.getRightIdx());
      
      phylonode0.setRightIdx(695);
      phylonode0.setParent(phylonode0);
      Feature feature1 = phylonode0.getFeature();
      phylonode0.getPhylotree();
      Phylotree phylotree1 = phylonode0.getPhylotree();
      phylonode0.setFeature(feature1);
      phylonode0.setFeature(feature1);
      phylonode0.getPhylotree();
      phylonode0.getDistance();
      phylonode0.setPhylonodeDbXRefs((Set<PhylonodeDbXRef>) null);
      phylonode0.getCvTerm();
      phylonode0.setPhylotree(phylotree1);
      phylonode0.getCvTerm();
      Phylonode phylonode1 = phylonode0.getParent();
      phylonode1.setCvTerm((CvTerm) null);
      phylonode1.getFeature();
      phylonode0.getCvTerm();
      phylonode1.setDistance((Double) null);
      phylonode1.getPhylonodeProps();
      phylonode0.getDistance();
      phylonode1.getFeature();
      phylonode0.getPhylonodeProps();
      phylonode1.getDistance();
      phylonode1.getPhylonodeProps();
      phylonode0.getFeature();
      phylonode0.getPhylotree();
      assertEquals(695, phylonode0.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.getCvTerm();
      phylonode0.getPhylonodeRelationshipsForSubjectId();
      phylonode0.getDistance();
      phylonode0.setLabel("F#+");
      phylonode0.setPhylonodeId(1);
      phylonode0.getPhylotree();
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn("F#+", "MD5").when(feature1).toString();
      phylonode0.setFeature(feature1);
      phylonode0.getPhylonodePubs();
      phylonode0.setParent(phylonode0);
      phylonode0.getPhylonodeId();
      phylonode0.getPhylotree();
      phylonode0.getLabel();
      phylonode0.getPhylonodeOrganisms();
      phylonode0.setParent(phylonode0);
      phylonode0.setLabel("S1>#_$}Slow");
      phylonode0.getFeature();
      phylonode0.setParent(phylonode0);
      phylonode0.getPhylonodeRelationshipsForSubjectId();
      phylonode0.getFeature();
      phylonode0.getPhylonodeRelationshipsForObjectId();
      phylonode0.setPhylonodePubs((Set<PhylonodePub>) null);
      phylonode0.getCvTerm();
      assertEquals(1, phylonode0.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode(3249, phylotree0, 3249, 2058);
      phylonode0.getPhylonodeDbXRefs();
      phylonode0.getPhylonodes();
      phylonode0.setRightIdx(1);
      phylonode0.getRightIdx();
      Phylonode phylonode1 = new Phylonode();
      phylonode0.setPhylonodeId(731);
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      phylonode1.setPhylotree(phylotree1);
      phylonode1.setLabel(")OD");
      phylonode0.getCvTerm();
      Double double0 = new Double(1);
      phylonode0.setDistance(double0);
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode1.setFeature(feature0);
      phylonode0.getPhylonodeDbXRefs();
      phylonode0.setRightIdx(731);
      phylonode1.setParent(phylonode0);
      phylonode1.setLeftIdx(0);
      phylonode1.getPhylonodeProps();
      phylonode0.setRightIdx(731);
      phylonode0.setCvTerm((CvTerm) null);
      phylonode0.setPhylonodeId(731);
      phylonode1.getPhylonodeProps();
      phylonode0.getLeftIdx();
      phylonode1.setParent(phylonode0);
      phylonode0.getPhylonodeOrganisms();
      phylonode0.setRightIdx(0);
      phylonode0.getLabel();
      phylonode1.setPhylonodeId(1056);
      assertEquals(1056, phylonode1.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(phylotree0).toString();
      Phylonode phylonode0 = new Phylonode((-1), phylotree0, 0, (-1));
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      assertEquals((-1), phylonode0.getRightIdx());
      
      Phylotree phylotree1 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = new Phylonode(0, phylotree1, (-1), 0);
      phylonode0.setRightIdx(0);
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature1);
      Phylotree phylotree2 = phylonode0.getPhylotree();
      phylonode0.setPhylotree(phylotree2);
      phylonode0.setPhylonodeRelationshipsForObjectId((Set<PhylonodeRelationship>) null);
      phylonode0.getRightIdx();
      phylonode0.setPhylonodes((Set<Phylonode>) null);
      phylonode0.setPhylonodeRelationshipsForSubjectId((Set<PhylonodeRelationship>) null);
      phylonode1.setPhylonodeRelationshipsForSubjectId((Set<PhylonodeRelationship>) null);
      phylonode0.getPhylonodeOrganisms();
      phylonode0.getCvTerm();
      phylonode0.setPhylonodeRelationshipsForObjectId((Set<PhylonodeRelationship>) null);
      phylonode0.getPhylonodeRelationshipsForSubjectId();
      int int0 = phylonode0.getRightIdx();
      assertEquals(0, int0);
      
      phylonode0.setRightIdx(0);
      phylonode1.getParent();
      assertEquals((-1), phylonode1.getLeftIdx());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Double double0 = new Double(507.9008587105);
      phylonode0.setDistance(double0);
      phylonode0.getCvTerm();
      phylonode0.getDistance();
      phylonode0.setLeftIdx((-313));
      phylonode0.setCvTerm((CvTerm) null);
      phylonode0.setRightIdx((-313));
      phylonode0.getRightIdx();
      phylonode0.getPhylonodeRelationshipsForSubjectId();
      phylonode0.setPhylonodeOrganisms((Set<PhylonodeOrganism>) null);
      phylonode0.setLeftIdx(792);
      phylonode0.getPhylonodeRelationshipsForSubjectId();
      phylonode0.getPhylonodeProps();
      phylonode0.getDistance();
      assertEquals((-313), phylonode0.getRightIdx());
  }
}
