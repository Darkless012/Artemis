/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:30:24 GMT 2018
 */

package uk.ac.sanger.artemis.components.database;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import javax.swing.JPasswordField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.database.DatabaseLoginPrompt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DatabaseLoginPrompt_ESTest extends DatabaseLoginPrompt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DatabaseLoginPrompt databaseLoginPrompt0 = new DatabaseLoginPrompt();
      assertNotNull(databaseLoginPrompt0);
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicyProvider());
      assertFalse(databaseLoginPrompt0.isFocusCycleRoot());
      assertFalse(databaseLoginPrompt0.getIgnoreRepaint());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicySet());
      assertTrue(databaseLoginPrompt0.getFocusTraversalKeysEnabled());
      
      // Undeclared exception!
      try { 
        databaseLoginPrompt0.prompt();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DatabaseLoginPrompt databaseLoginPrompt0 = new DatabaseLoginPrompt();
      assertNotNull(databaseLoginPrompt0);
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicyProvider());
      assertFalse(databaseLoginPrompt0.isFocusCycleRoot());
      assertTrue(databaseLoginPrompt0.getFocusTraversalKeysEnabled());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicySet());
      assertFalse(databaseLoginPrompt0.getIgnoreRepaint());
      
      String string0 = databaseLoginPrompt0.getServer();
      assertNotNull(string0);
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicyProvider());
      assertFalse(databaseLoginPrompt0.isFocusCycleRoot());
      assertTrue(databaseLoginPrompt0.getFocusTraversalKeysEnabled());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicySet());
      assertFalse(databaseLoginPrompt0.getIgnoreRepaint());
      assertEquals("localhost", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DatabaseLoginPrompt databaseLoginPrompt0 = new DatabaseLoginPrompt();
      assertNotNull(databaseLoginPrompt0);
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicyProvider());
      assertFalse(databaseLoginPrompt0.isFocusCycleRoot());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicySet());
      assertFalse(databaseLoginPrompt0.getIgnoreRepaint());
      assertTrue(databaseLoginPrompt0.getFocusTraversalKeysEnabled());
      
      String string0 = databaseLoginPrompt0.getUser();
      assertNotNull(string0);
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicyProvider());
      assertFalse(databaseLoginPrompt0.isFocusCycleRoot());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicySet());
      assertFalse(databaseLoginPrompt0.getIgnoreRepaint());
      assertTrue(databaseLoginPrompt0.getFocusTraversalKeysEnabled());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DatabaseLoginPrompt databaseLoginPrompt0 = new DatabaseLoginPrompt();
      assertNotNull(databaseLoginPrompt0);
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicySet());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicyProvider());
      assertFalse(databaseLoginPrompt0.isFocusCycleRoot());
      assertFalse(databaseLoginPrompt0.getIgnoreRepaint());
      assertTrue(databaseLoginPrompt0.getFocusTraversalKeysEnabled());
      
      JPasswordField jPasswordField0 = databaseLoginPrompt0.getPfield();
      assertNotNull(jPasswordField0);
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicySet());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicyProvider());
      assertFalse(databaseLoginPrompt0.isFocusCycleRoot());
      assertFalse(databaseLoginPrompt0.getIgnoreRepaint());
      assertTrue(databaseLoginPrompt0.getFocusTraversalKeysEnabled());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DatabaseLoginPrompt databaseLoginPrompt0 = new DatabaseLoginPrompt();
      assertNotNull(databaseLoginPrompt0);
      assertFalse(databaseLoginPrompt0.getIgnoreRepaint());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicySet());
      assertTrue(databaseLoginPrompt0.getFocusTraversalKeysEnabled());
      assertFalse(databaseLoginPrompt0.isFocusCycleRoot());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicyProvider());
      
      String string0 = databaseLoginPrompt0.getDb();
      assertNotNull(string0);
      assertFalse(databaseLoginPrompt0.getIgnoreRepaint());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicySet());
      assertTrue(databaseLoginPrompt0.getFocusTraversalKeysEnabled());
      assertFalse(databaseLoginPrompt0.isFocusCycleRoot());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicyProvider());
      assertEquals("chado", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DatabaseLoginPrompt databaseLoginPrompt0 = new DatabaseLoginPrompt();
      assertNotNull(databaseLoginPrompt0);
      assertTrue(databaseLoginPrompt0.getFocusTraversalKeysEnabled());
      assertFalse(databaseLoginPrompt0.isFocusCycleRoot());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicyProvider());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicySet());
      assertFalse(databaseLoginPrompt0.getIgnoreRepaint());
      
      boolean boolean0 = databaseLoginPrompt0.getSSL();
      assertTrue(databaseLoginPrompt0.getFocusTraversalKeysEnabled());
      assertFalse(databaseLoginPrompt0.isFocusCycleRoot());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicyProvider());
      assertFalse(databaseLoginPrompt0.isFocusTraversalPolicySet());
      assertFalse(databaseLoginPrompt0.getIgnoreRepaint());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DatabaseLoginPrompt databaseLoginPrompt0 = new DatabaseLoginPrompt();
      String string0 = databaseLoginPrompt0.getPort();
      assertEquals("5432", string0);
  }
}
