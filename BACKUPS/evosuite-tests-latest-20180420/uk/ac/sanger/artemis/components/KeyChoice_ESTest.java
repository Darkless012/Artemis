/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:34:30 GMT 2018
 */

package uk.ac.sanger.artemis.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.ItemListener;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.KeyChoice;
import uk.ac.sanger.artemis.io.EntryInformation;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.KeyVector;
import uk.ac.sanger.artemis.io.MSPcrunchEntryInformation;
import uk.ac.sanger.artemis.io.SimpleEntryInformation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class KeyChoice_ESTest extends KeyChoice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      Key key0 = new Key("");
      KeyChoice keyChoice0 = new KeyChoice(mSPcrunchEntryInformation0, key0);
      keyChoice0.setKey(key0);
      keyChoice0.setKey(key0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      KeyChoice keyChoice0 = new KeyChoice(simpleEntryInformation0);
      // Undeclared exception!
      try { 
        keyChoice0.setKey((Key) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.KeyChoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      KeyChoice keyChoice0 = null;
      try {
        keyChoice0 = new KeyChoice(mSPcrunchEntryInformation0, (Key) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.KeyChoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KeyVector keyVector0 = new KeyVector();
      EntryInformation entryInformation0 = mock(EntryInformation.class, new ViolatedAssumptionAnswer());
      doReturn(keyVector0).when(entryInformation0).getSortedValidKeys();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_TTB;
      keyVector0.add((Object) integer0);
      Key key0 = mock(Key.class, new ViolatedAssumptionAnswer());
      KeyChoice keyChoice0 = null;
      try {
        keyChoice0 = new KeyChoice(entryInformation0, key0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to uk.ac.sanger.artemis.io.Key
         //
         verifyException("uk.ac.sanger.artemis.components.KeyChoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      KeyChoice keyChoice0 = null;
      try {
        keyChoice0 = new KeyChoice((EntryInformation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.KeyChoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      Key key0 = new Key("");
      KeyChoice keyChoice0 = new KeyChoice(mSPcrunchEntryInformation0, key0);
      keyChoice0.setKey(key0);
      keyChoice0.getSelectedItem();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EntryInformation entryInformation0 = mock(EntryInformation.class, new ViolatedAssumptionAnswer());
      doReturn((KeyVector) null).when(entryInformation0).getSortedValidKeys();
      KeyChoice keyChoice0 = new KeyChoice(entryInformation0);
      Key key0 = keyChoice0.getSelectedItem();
      keyChoice0.setKey(key0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EntryInformation entryInformation0 = mock(EntryInformation.class, new ViolatedAssumptionAnswer());
      doReturn((KeyVector) null).when(entryInformation0).getSortedValidKeys();
      KeyChoice keyChoice0 = new KeyChoice(entryInformation0);
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      keyChoice0.addItemListener(itemListener0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EntryInformation entryInformation0 = mock(EntryInformation.class, new ViolatedAssumptionAnswer());
      doReturn((KeyVector) null).when(entryInformation0).getSortedValidKeys();
      KeyChoice keyChoice0 = new KeyChoice(entryInformation0);
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      keyChoice0.removeItemListener(itemListener0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      EntryInformation entryInformation0 = mock(EntryInformation.class, new ViolatedAssumptionAnswer());
      doReturn((KeyVector) null).when(entryInformation0).getSortedValidKeys();
      Key key0 = mock(Key.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(key0).toString();
      KeyChoice keyChoice0 = null;
      try {
        keyChoice0 = new KeyChoice(entryInformation0, key0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
