/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:31:20 GMT 2018
 */

package uk.ac.sanger.artemis.components.variant;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.IllegalComponentStateException;
import java.awt.datatransfer.Clipboard;
import java.awt.event.HierarchyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JWindow;
import javax.swing.KeyStroke;
import javax.swing.event.AncestorListener;
import javax.swing.event.RowSorterEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.apache.batik.anim.dom.SVGDOMImplementation;
import org.apache.batik.anim.dom.SVGOMDocument;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.SVGDocumentBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.xmlgraphics.java2d.GraphicsConfigurationWithTransparency;
import org.apache.xmlgraphics.java2d.GraphicsConfigurationWithoutTransparency;
import org.emboss.jemboss.gui.Browser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.EntryChangeEvent;
import uk.ac.sanger.artemis.EntryGroup;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.SimpleGotoEventSource;
import uk.ac.sanger.artemis.components.BasePlotGroup;
import uk.ac.sanger.artemis.components.EntryEdit;
import uk.ac.sanger.artemis.components.FeatureDisplay;
import uk.ac.sanger.artemis.components.alignment.BamView;
import uk.ac.sanger.artemis.components.alignment.LineAttributes;
import uk.ac.sanger.artemis.components.variant.GraphPanel;
import uk.ac.sanger.artemis.components.variant.VCFview;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.j2ssh.SshLogin;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class GraphPanel_ESTest extends GraphPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VCFview vCFview0 = null;
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      graphPanel0.addAncestorListener((AncestorListener) null);
      int int0 = 936;
      graphPanel0.setType(936);
      GraphPanel.PopupListener graphPanel_PopupListener0 = graphPanel0.new PopupListener();
      long long0 = (-1853L);
      graphPanel_PopupListener0.showDetails = null;
      int int1 = 3179;
      int int2 = 1853;
      boolean boolean0 = false;
      int int3 = 8;
      System.setCurrentTimeMillis(1L);
      GraphicsConfigurationWithTransparency graphicsConfigurationWithTransparency0 = new GraphicsConfigurationWithTransparency();
      BufferedImage bufferedImage0 = graphicsConfigurationWithTransparency0.createCompatibleImage(936, 84, 1);
      graphPanel_PopupListener0.showDetails = null;
      Graphics graphics0 = bufferedImage0.getGraphics();
      // Undeclared exception!
      try { 
        graphPanel0.paintComponent(graphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.variant.GraphPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(671088640);
      System.setCurrentTimeMillis(671088640);
      // Undeclared exception!
      GraphPanel.getLineAttributes(671088640);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GraphPanel.getLineAttributes(1268);
      Random.setNextRandom(1321);
      System.setCurrentTimeMillis(1321);
      System.setCurrentTimeMillis(1268);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      System.setCurrentTimeMillis(3466L);
      Random.setNextRandom(1268);
      GraphPanel.getLineAttributes(1321);
      System.setCurrentTimeMillis(1268);
      System.setCurrentTimeMillis(5L);
      System.setCurrentTimeMillis(2814L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GraphPanel.getLineAttributes(0);
      GraphPanel.getLineAttributes(3191);
      GraphicsConfigurationWithTransparency graphicsConfigurationWithTransparency0 = new GraphicsConfigurationWithTransparency();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame(graphicsConfigurationWithTransparency0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      GraphPanel.getLineAttributes(12450);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1815;
      GraphPanel.getLineAttributes(1815);
      GraphPanel.getLineAttributes(1815);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      EntryEdit entryEdit0 = null;
      try {
        entryEdit0 = new EntryEdit(simpleEntryGroup0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraphPanel.getLineAttributes(8921);
      GraphPanel.getLineAttributes(2004);
      GraphPanel.getLineAttributes(126);
      GraphicsConfigurationWithoutTransparency graphicsConfigurationWithoutTransparency0 = new GraphicsConfigurationWithoutTransparency();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame(graphicsConfigurationWithoutTransparency0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineAttributes[] lineAttributesArray0 = GraphPanel.getLineAttributes(6026);
      assertEquals(6026, lineAttributesArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      GraphPanel.getLineAttributes(0);
      Bases bases0 = new Bases((Sequence) null);
      Stack<Integer> stack0 = new Stack<Integer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 5);
      Entry entry0 = Entry.newEntry(bases0);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(defaultTableModel0, entry0, 204);
      Entry entry1 = entryChangeEvent0.getEntry();
      // Undeclared exception!
      try { 
        entry1.getFeature(300);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VCFview vCFview0 = mock(VCFview.class, new ViolatedAssumptionAnswer());
      GraphPanel graphPanel0 = new GraphPanel(vCFview0);
      graphPanel0.setType((-1912));
      int int0 = (-2334);
      // Undeclared exception!
      try { 
        GraphPanel.getLineAttributes((-2334));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.LineAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VCFview vCFview0 = mock(VCFview.class, new ViolatedAssumptionAnswer());
      GraphPanel graphPanel0 = new GraphPanel(vCFview0);
      graphPanel0.getGraphics();
      // Undeclared exception!
      try { 
        graphPanel0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      GraphPanel.PopupListener graphPanel_PopupListener0 = graphPanel0.new PopupListener();
      int int0 = 1393;
      MouseEvent mouseEvent0 = new MouseEvent(graphPanel0, (-998), (-998), (-998), 0, 0, 922, 1393, 1321, true, 0);
      graphPanel_PopupListener0.mouseClicked(mouseEvent0);
      // Undeclared exception!
      try { 
        graphPanel_PopupListener0.mouseReleased(mouseEvent0);
        fail("Expecting exception: IllegalComponentStateException");
      
      } catch(IllegalComponentStateException e) {
         //
         // component must be showing on the screen to determine its location
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VCFview vCFview0 = null;
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Vector<RowSorterEvent.Type> vector0 = new Vector<RowSorterEvent.Type>();
      JTable jTable0 = new JTable(vector0, vector0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      JTable jTable1 = jTableHeader0.getTable();
      Color color0 = jTable1.getSelectionBackground();
      DebugGraphics.setFlashColor(color0);
      // Undeclared exception!
      try { 
        graphPanel0.paintComponent(debugGraphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      graphPanel0.setType(27);
      GraphPanel.PopupListener graphPanel_PopupListener0 = graphPanel0.new PopupListener();
      KeyStroke.getKeyStroke("b%>+q:[|");
      Character character0 = new Character(' ');
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      graphPanel0.addHierarchyListener((HierarchyListener) null);
      AWTKeyStroke.getAWTKeyStroke(character0, 12314);
      graphPanel0.getConditionForKeyStroke((KeyStroke) null);
      graphPanel_PopupListener0.mouseEntered((MouseEvent) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(graphPanel0, 300, 1711L, 0, 0, 0, 2, false, 300, 8, 2);
      mouseWheelEvent0.setSource((Object) null);
      graphPanel_PopupListener0.mouseReleased(mouseWheelEvent0);
      graphPanel0.setType(0);
      graphPanel_PopupListener0.mousePressed(mouseWheelEvent0);
      LineAttributes[] lineAttributesArray0 = GraphPanel.getLineAttributes(719);
      assertEquals(719, lineAttributesArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VCFview vCFview0 = mock(VCFview.class, new ViolatedAssumptionAnswer());
      GraphPanel graphPanel0 = new GraphPanel(vCFview0);
      GraphPanel.PopupListener graphPanel_PopupListener0 = graphPanel0.new PopupListener();
      MouseEvent mouseEvent0 = mock(MouseEvent.class, new ViolatedAssumptionAnswer());
      graphPanel_PopupListener0.mouseClicked(mouseEvent0);
      MouseEvent mouseEvent1 = mock(MouseEvent.class, new ViolatedAssumptionAnswer());
      graphPanel_PopupListener0.mouseClicked(mouseEvent1);
      LineAttributes[] lineAttributesArray0 = GraphPanel.getLineAttributes(23);
      MouseEvent mouseEvent2 = mock(MouseEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Component) null).when(mouseEvent2).getComponent();
      doReturn(0).when(mouseEvent2).getX();
      doReturn(0).when(mouseEvent2).getY();
      doReturn(true).when(mouseEvent2).isPopupTrigger();
      graphPanel_PopupListener0.mousePressed(mouseEvent2);
      LineAttributes[] lineAttributesArray1 = GraphPanel.getLineAttributes(23);
      assertSame(lineAttributesArray1, lineAttributesArray0);
      assertEquals(23, lineAttributesArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      GraphPanel.PopupListener graphPanel_PopupListener0 = graphPanel0.new PopupListener();
      graphPanel0.getBaselineResizeBehavior();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(graphPanel0, (-1), 0L, 70, 0, (-1), 1909, 70, 70, false, (-1), 2230, 1693);
      graphPanel_PopupListener0.mousePressed(mouseWheelEvent0);
      // Undeclared exception!
      try { 
        graphPanel0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      graphPanel0.setType(936);
      GraphPanel.PopupListener graphPanel_PopupListener0 = graphPanel0.new PopupListener();
      MouseWheelEvent mouseWheelEvent0 = null;
      try {
        mouseWheelEvent0 = new MouseWheelEvent((Component) null, 936, (-1853L), 936, 3179, 3179, 3179, 1853, 936, false, 8, 3179, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GraphPanel.getLineAttributes(10);
      GraphPanel.getLineAttributes(3191);
      GraphicsConfigurationWithTransparency graphicsConfigurationWithTransparency0 = new GraphicsConfigurationWithTransparency();
      System.setCurrentTimeMillis(0L);
      JPanel jPanel0 = new JPanel(false);
      SVGDocumentBridge sVGDocumentBridge0 = new SVGDocumentBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("l~}<rtJoS", "Cancel", "");
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      SVGOMDocument sVGOMDocument0 = new SVGOMDocument(genericDocumentType0, sVGDOMImplementation0);
      sVGDocumentBridge0.createGraphicsNode(bridgeContext0, sVGOMDocument0);
      EntryEdit entryEdit0 = null;
      try {
        entryEdit0 = new EntryEdit((EntryGroup) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }
}
