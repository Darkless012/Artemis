/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:39:49 GMT 2018
 */

package uk.ac.sanger.artemis.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.FeatureDisplay;
import uk.ac.sanger.artemis.components.ZoomScrollBar;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ZoomScrollBar_ESTest extends ZoomScrollBar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ZoomScrollBar zoomScrollBar0 = null;
      try {
        zoomScrollBar0 = new ZoomScrollBar((FeatureDisplay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.ZoomScrollBar", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FeatureDisplay featureDisplay0 = mock(FeatureDisplay.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(featureDisplay0).getScaleFactor();
      doReturn(0).when(featureDisplay0).getSequenceLength();
      ZoomScrollBar zoomScrollBar0 = new ZoomScrollBar(featureDisplay0);
      assertTrue(zoomScrollBar0.getFocusTraversalKeysEnabled());
      assertFalse(zoomScrollBar0.isFocusTraversalPolicySet());
      assertFalse(zoomScrollBar0.getIgnoreRepaint());
      assertFalse(zoomScrollBar0.isFocusTraversalPolicyProvider());
      assertFalse(zoomScrollBar0.isFocusCycleRoot());
      assertNotNull(zoomScrollBar0);
      
      zoomScrollBar0.addMouseMotionListenerToFeatureDisplay();
      assertTrue(zoomScrollBar0.getFocusTraversalKeysEnabled());
      assertFalse(zoomScrollBar0.isFocusTraversalPolicySet());
      assertFalse(zoomScrollBar0.getIgnoreRepaint());
      assertFalse(zoomScrollBar0.isFocusTraversalPolicyProvider());
      assertFalse(zoomScrollBar0.isFocusCycleRoot());
      
      zoomScrollBar0.removeMouseMotionListenerFromFeatureDisplay();
      assertTrue(zoomScrollBar0.getFocusTraversalKeysEnabled());
      assertFalse(zoomScrollBar0.isFocusTraversalPolicySet());
      assertFalse(zoomScrollBar0.getIgnoreRepaint());
      assertFalse(zoomScrollBar0.isFocusTraversalPolicyProvider());
      assertFalse(zoomScrollBar0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FeatureDisplay featureDisplay0 = mock(FeatureDisplay.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(featureDisplay0).getScaleFactor();
      doReturn(0).when(featureDisplay0).getSequenceLength();
      ZoomScrollBar zoomScrollBar0 = new ZoomScrollBar(featureDisplay0);
      assertTrue(zoomScrollBar0.getFocusTraversalKeysEnabled());
      assertFalse(zoomScrollBar0.getIgnoreRepaint());
      assertFalse(zoomScrollBar0.isFocusTraversalPolicySet());
      assertFalse(zoomScrollBar0.isFocusCycleRoot());
      assertFalse(zoomScrollBar0.isFocusTraversalPolicyProvider());
      assertNotNull(zoomScrollBar0);
      
      zoomScrollBar0.removeMouseMotionListenerFromFeatureDisplay();
      assertTrue(zoomScrollBar0.getFocusTraversalKeysEnabled());
      assertFalse(zoomScrollBar0.getIgnoreRepaint());
      assertFalse(zoomScrollBar0.isFocusTraversalPolicySet());
      assertFalse(zoomScrollBar0.isFocusCycleRoot());
      assertFalse(zoomScrollBar0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FeatureDisplay featureDisplay0 = mock(FeatureDisplay.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(featureDisplay0).getScaleFactor();
      doReturn(0).when(featureDisplay0).getSequenceLength();
      ZoomScrollBar zoomScrollBar0 = new ZoomScrollBar(featureDisplay0);
      zoomScrollBar0.addMouseMotionListenerToFeatureDisplay();
      zoomScrollBar0.addMouseMotionListenerToFeatureDisplay();
      assertFalse(zoomScrollBar0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FeatureDisplay featureDisplay0 = mock(FeatureDisplay.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(featureDisplay0).getScaleFactor();
      doReturn(0).when(featureDisplay0).getSequenceLength();
      ZoomScrollBar zoomScrollBar0 = new ZoomScrollBar(featureDisplay0);
      zoomScrollBar0.setValueIsAdjusting(true);
      assertFalse(zoomScrollBar0.getIgnoreRepaint());
  }
}
