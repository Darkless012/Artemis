/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 13:17:12 GMT 2018
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SequenceChangeEvent_ESTest extends SequenceChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 0, (-5), "Np,OHs;rAhjU6JOll");
      int int0 = sequenceChangeEvent0.getType();
      assertEquals(0, int0);
      assertEquals((-5), sequenceChangeEvent0.getPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, (-5), 120, "AQsQFFQ");
      int int0 = sequenceChangeEvent0.getType();
      assertEquals(120, sequenceChangeEvent0.getPosition());
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 0, (-5), "Np,OHs;rAhjU6JOll");
      sequenceChangeEvent0.getSubSequence();
      assertEquals((-5), sequenceChangeEvent0.getPosition());
      assertEquals(0, sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 0, 5, "");
      sequenceChangeEvent0.getSubSequence();
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(5, sequenceChangeEvent0.getPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 1);
      sequenceChangeEvent0.getRange();
      assertEquals(0, sequenceChangeEvent0.getPosition());
      assertEquals(1, sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 0, range0, (-1516));
      int int0 = sequenceChangeEvent0.getPosition();
      assertEquals((-1516), sequenceChangeEvent0.getLength());
      assertEquals(0, int0);
      assertEquals(0, sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 455, (-5), "uk.ac.sanger.artemis.sequence.SequenceChangeEvent");
      int int0 = sequenceChangeEvent0.getPosition();
      assertEquals((-5), int0);
      assertEquals(455, sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 2118, range0, 5);
      int int0 = sequenceChangeEvent0.getLength();
      assertEquals(2118, sequenceChangeEvent0.getType());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 0, range0, (-1516));
      int int0 = sequenceChangeEvent0.getLength();
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals((-1516), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(3, 3, range0);
      // Undeclared exception!
      try { 
        sequenceChangeEvent0.getBases();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.io.Range$MockitoMock$2106802185 cannot be cast to uk.ac.sanger.artemis.sequence.Bases
         //
         verifyException("uk.ac.sanger.artemis.sequence.SequenceChangeEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = null;
      try {
        sequenceChangeEvent0 = new SequenceChangeEvent((Bases) null, 0, range0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SequenceChangeEvent sequenceChangeEvent0 = null;
      try {
        sequenceChangeEvent0 = new SequenceChangeEvent((Bases) null, 619, 619, "?O8]Zjxw?ez\"e`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SequenceChangeEvent sequenceChangeEvent0 = null;
      try {
        sequenceChangeEvent0 = new SequenceChangeEvent((Bases) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SequenceChangeEvent sequenceChangeEvent0 = null;
      try {
        sequenceChangeEvent0 = new SequenceChangeEvent(2453, (-1511), (Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 1);
      int int0 = sequenceChangeEvent0.getLength();
      assertEquals(1, sequenceChangeEvent0.getType());
      assertEquals(0, sequenceChangeEvent0.getPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(68, 68, range0);
      int int0 = sequenceChangeEvent0.getPosition();
      assertEquals(68, int0);
      assertEquals(68, sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      doReturn("translation_table").when(bases0).toString();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 1, range0, 3248);
      sequenceChangeEvent0.getBases();
      assertEquals(3248, sequenceChangeEvent0.getLength());
      assertEquals(1, sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 1, range0, 3248);
      sequenceChangeEvent0.getSubSequence();
      assertEquals(1, sequenceChangeEvent0.getType());
      assertEquals(3248, sequenceChangeEvent0.getLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 1, range0, 3248);
      int int0 = sequenceChangeEvent0.getType();
      assertEquals(3248, sequenceChangeEvent0.getLength());
      assertEquals(1, int0);
  }
}
