/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 10:40:43 GMT 2018
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Ignore;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.Clipboard;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JMenuItem;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.biojava.bio.seq.FramedFeature;
import org.biojava.bio.seq.SimpleAssembly;
import org.biojava.bio.seq.impl.SimpleFeature;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.javax.swing.MockDefaultListSelectionModel;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.EntryGroup;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureKeyQualifierPredicate;
import uk.ac.sanger.artemis.FeaturePatternPredicate;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.SimpleGotoEventSource;
import uk.ac.sanger.artemis.components.BasePlotGroup;
import uk.ac.sanger.artemis.components.FeatureDisplay;
import uk.ac.sanger.artemis.io.BioJavaEntry;
import uk.ac.sanger.artemis.io.BioJavaFeature;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.AGWindowAlgorithm;
import uk.ac.sanger.artemis.sequence.AminoAcidSequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.MarkerChangeEvent;
import uk.ac.sanger.artemis.sequence.MarkerRange;
import uk.ac.sanger.artemis.sequence.Strand;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AminoAcidSequence_ESTest extends AminoAcidSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      String string0 = "5rzx^z";
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("5rzx^z");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(6, fastaStreamSequence0.getOtherCount());
      assertEquals(6, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(6, fastaStreamSequence0.getOtherCount());
      assertEquals(6, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      
      fastaStreamSequence0.setFromChar(aminoAcidSequence1.codon_translation_array);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(64, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(50, fastaStreamSequence0.getOtherCount());
      assertEquals(2, fastaStreamSequence0.getCCount());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, true, true, true);
      assertNotNull(markerRange0);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(64, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(50, fastaStreamSequence0.getOtherCount());
      assertEquals(2, fastaStreamSequence0.getCCount());
      assertTrue(markerRange0.isForwardMarker());
      
      char char1 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("5rzx^z", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("xx", aminoAcidSequence3.toString());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence4.toString());
      assertEquals(63, aminoAcidSequence4.length());
      
      AminoAcidSequence.setGeneCode();
      int int0 = AminoAcidSequence.getAminoAcidType('Q');
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('3');
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence((String) null);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertNull(aminoAcidSequence0.toString());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt((-2145));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(".", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("n6nuF)^y[ aa");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Strand strand0 = new Strand(bases0, (-5));
      assertNotNull(strand0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      assertNotNull(aGWindowAlgorithm0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      
      Bases bases1 = aGWindowAlgorithm0.getBases();
      assertNotNull(bases1);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      
      bases0.addBases(10, 46, "1k:AB_9vl9+=J{");
      assertSame(bases0, bases1);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(26, fastaStreamSequence0.length());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(23, fastaStreamSequence0.getOtherCount());
      assertEquals(1, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Marker marker0 = strand0.makeMarker(3);
      assertNotNull(marker0);
      assertSame(bases0, bases1);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(26, fastaStreamSequence0.length());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(23, fastaStreamSequence0.getOtherCount());
      assertEquals(1, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertEquals(3, marker0.getPosition());
      
      MarkerRange markerRange0 = aminoAcidSequence0.findMatch(bases1, marker0, true, false, false);
      assertNull(markerRange0);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(26, fastaStreamSequence0.length());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(23, fastaStreamSequence0.getOtherCount());
      assertEquals(1, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3, marker0.getPosition());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("n6nuF)^y[ aa");
      assertNotNull(fastaStreamSequence0);
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(12, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(12, fastaStreamSequence0.length());
      
      Strand strand0 = bases0.getForwardStrand();
      assertNotNull(strand0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(12, fastaStreamSequence0.length());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      assertNotNull(aGWindowAlgorithm0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(12, fastaStreamSequence0.length());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      
      Bases bases1 = aGWindowAlgorithm0.getBases();
      assertNotNull(bases1);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(12, fastaStreamSequence0.length());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      
      Marker marker0 = strand0.makeMarker(3);
      assertNotNull(marker0);
      assertSame(bases0, bases1);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(12, fastaStreamSequence0.length());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(3, marker0.getPosition());
      
      MarkerRange markerRange0 = aminoAcidSequence0.findMatch(bases1, marker0, false, true, true);
      assertNotNull(markerRange0);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(12, fastaStreamSequence0.length());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3, marker0.getPosition());
      assertFalse(markerRange0.isForwardMarker());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte) (-126);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)117, (byte)108, (byte)75, (byte)88, (byte)46, (byte)0, (byte) (-5), (byte)87, (byte) (-126)}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('G');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G', 'G', 'G', 'G'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals("x", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(60000L);
      int int0 = AminoAcidSequence.getAminoAcidType('K');
      assertEquals(1, int0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char char0 = AminoAcidSequence.getCodonTranslation('Y', '#', '#');
      assertEquals('.', char0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('Y');
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      char char1 = AminoAcidSequence.getOneLetterCode("Glu");
      assertFalse(char1 == char0);
      assertEquals('e', char1);
      
      char char2 = AminoAcidSequence.getCodonTranslation('Y', '&', 'G');
      assertFalse(char2 == char1);
      assertTrue(char2 == char0);
      assertEquals('.', char2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'e';
      charArray0[2] = '#';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'f', 'e', '#'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertEquals(3, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'f', 'e', '#'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      
      AminoAcidSequence.setGeneCode();
      System.setCurrentTimeMillis(25);
      int int2 = AminoAcidSequence.getSymbolIndex('Y');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(18, int2);
      
      float float0 = aminoAcidSequence1.getMolecularWeight();
      assertEquals(3, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'f', 'e', '#'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals((-120.03998F), float0, 0.01F);
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      
      char char3 = AminoAcidSequence.getCodonTranslation('#', '}', 'e');
      assertFalse(char3 == char1);
      assertTrue(char3 == char2);
      assertTrue(char3 == char0);
      assertEquals('.', char3);
      
      boolean boolean2 = aminoAcidSequence1.containsStopCodon();
      assertEquals(3, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'f', 'e', '#'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(boolean2);
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      
      int int3 = AminoAcidSequence.getAminoAcidType('K');
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      char char4 = 'u';
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('|');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation(".,");
      assertEquals('.', char0);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('e');
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'e';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = 'e';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'.', 'e', '.', '.', 'e'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, aminoAcidSequence0.length());
      assertEquals("x", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('M');
      assertTrue(boolean0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('M');
      assertEquals(3, int0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("6?lWNB#n>)t8;e{cG(&");
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("6?lWNB#n>)t8;e{cG(&", aminoAcidSequence0.toString());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals(19, aminoAcidSequence0.length());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('M');
      assertNotNull(string0);
      assertEquals("Met", string0);
      
      char char0 = AminoAcidSequence.getCodonTranslation('W', 'H', 'W');
      assertEquals('.', char0);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('P');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = aminoAcidSequence0.length();
      assertFalse(int1 == int0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(19, int1);
      assertEquals("6?lWNB#n>)t8;e{cG(&", aminoAcidSequence0.toString());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals(19, aminoAcidSequence0.length());
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation('W');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Trp", string1);
      
      boolean boolean2 = aminoAcidSequence0.containsStopCodon();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertTrue(boolean2);
      assertEquals("6?lWNB#n>)t8;e{cG(&", aminoAcidSequence0.toString());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals(19, aminoAcidSequence0.length());
      
      char char1 = AminoAcidSequence.getOneLetterCode("6?lWNB#n>)t8;e{cG(&");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      int int2 = AminoAcidSequence.getSymbolIndex('W');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(17, int2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("j,CiIn7E,", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence1.toString());
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("j,CiIn7E,");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      assertNotNull(markerRange0);
      
      char char1 = AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      MarkerRange markerRange1 = aminoAcidSequence1.findMatch(bases0, (Marker) null, false, true, false);
      assertNotNull(markerRange1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(markerRange1.equals((Object)markerRange0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(markerRange1, markerRange0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertTrue(markerRange1.isForwardMarker());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("xdv6D'", false);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, aminoAcidSequence3.length());
      assertEquals("..", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation("j,CiIn7E,", true);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals("xxx", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(3, aminoAcidSequence4.length());
      
      float float0 = aminoAcidSequence4.getMolecularWeight();
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals((-36.03F), float0, 0.01F);
      assertEquals("xxx", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(3, aminoAcidSequence4.length());
      
      float float1 = aminoAcidSequence1.getMolecularWeight();
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertEquals(float1, float0, 0.01F);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals((-36.03F), float1, 0.01F);
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence1.toString());
      
      int int0 = AminoAcidSequence.getAminoAcidType('<');
      assertEquals(7, int0);
      
      boolean boolean1 = aminoAcidSequence3.containsStopCodon();
      assertTrue(boolean1 == boolean0);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(boolean1);
      assertEquals(2, aminoAcidSequence3.length());
      assertEquals("..", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      float float2 = aminoAcidSequence3.getMolecularWeight();
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals((-18.015F), float2, 0.01F);
      assertEquals(2, aminoAcidSequence3.length());
      assertEquals("..", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      int int1 = AminoAcidSequence.symbol_count;
      assertFalse(int1 == int0);
      assertEquals(25, int1);
      
      MarkerRange markerRange2 = aminoAcidSequence4.findMatch(bases0, (Marker) null, false, false, true);
      assertNotNull(markerRange2);
      assertFalse(markerRange2.equals((Object)markerRange0));
      assertFalse(markerRange2.equals((Object)markerRange1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertNotSame(markerRange2, markerRange0);
      assertNotSame(markerRange2, markerRange1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(markerRange2.isForwardMarker());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals("xxx", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(3, aminoAcidSequence4.length());
      
      char char2 = AminoAcidSequence.getSymbolFromIndex(1);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals('r', char2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('7');
      assertEquals(7, int0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Trp");
      assertNotNull(aminoAcidSequence0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Trp", aminoAcidSequence0.toString());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Trp", aminoAcidSequence0.toString());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(372.43002F, float0, 0.01F);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Trp", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getOneLetterCode("Trp");
      assertEquals('w', char0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(".", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("n6nuF)^y[ aa");
      assertNotNull(fastaStreamSequence0);
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Strand strand0 = new Strand(bases0, 0);
      assertNotNull(strand0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      assertNotNull(aGWindowAlgorithm0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      
      Bases bases1 = aGWindowAlgorithm0.getBases();
      assertNotNull(bases1);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      assertNotNull(marker0);
      assertSame(bases0, bases1);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(12, marker0.getPosition());
      
      MarkerRange markerRange0 = aminoAcidSequence0.findMatch(bases1, marker0, false, false, false);
      assertNull(markerRange0);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals(12, marker0.getPosition());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('P');
      assertEquals(4, int0);
      
      int int1 = new Integer('1');
      assertFalse(int1 == int0);
      assertEquals(49, int1);
      
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(0L);
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("Internal error - illegal one letter codon symbol: ", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("................", aminoAcidSequence0.toString());
      assertEquals(16, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("................", aminoAcidSequence0.toString());
      assertEquals(16, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(63, aminoAcidSequence1.length());
      
      char char0 = AminoAcidSequence.getOneLetterCode("Sel");
      assertEquals('u', char0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('J');
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = AminoAcidSequence.getAminoAcidType('2');
          assertEquals(7, int0);
          
          int int1 = AminoAcidSequence.getAminoAcidType('n');
          assertTrue(int1 == int0);
          assertEquals(7, int1);
          
          AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("$24", false);
          assertNotNull(aminoAcidSequence0);
          assertEquals(4, AminoAcidSequence.SPECIAL_AA);
          assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
          assertEquals(25, AminoAcidSequence.symbol_count);
          assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
          assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
          assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
          assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
          assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
          assertEquals(5, AminoAcidSequence.STOP_AA);
          assertEquals(".  ", aminoAcidSequence0.toString());
          assertEquals(3, aminoAcidSequence0.length());
          assertFalse(aminoAcidSequence0.containsStopCodon());
          
          AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("$24", false);
          assertNotNull(aminoAcidSequence1);
          assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
          assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
          assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
          assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
          assertEquals(5, AminoAcidSequence.STOP_AA);
          assertEquals(25, AminoAcidSequence.symbol_count);
          assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
          assertEquals(4, AminoAcidSequence.SPECIAL_AA);
          assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
          assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
          assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
          assertEquals(".  ", aminoAcidSequence1.toString());
          assertFalse(aminoAcidSequence1.containsStopCodon());
          assertEquals(3, aminoAcidSequence1.length());
          
          char char0 = AminoAcidSequence.getOneLetterCode("$24");
          assertEquals('\uFFFF', char0);
          
          AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("$24", true);
          assertNotNull(aminoAcidSequence2);
          assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
          assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
          assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
          assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
          assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
          assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
          assertEquals(5, AminoAcidSequence.STOP_AA);
          assertEquals(4, AminoAcidSequence.SPECIAL_AA);
          assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
          assertEquals(25, AminoAcidSequence.symbol_count);
          assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
          assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
          assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
          assertEquals(1, aminoAcidSequence2.length());
          assertFalse(aminoAcidSequence2.containsStopCodon());
          assertEquals("x", aminoAcidSequence2.toString());
          
          AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation("Cys", false);
          assertNotNull(aminoAcidSequence3);
          assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
          assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
          assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
          assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
          assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
          assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
          assertEquals(4, AminoAcidSequence.SPECIAL_AA);
          assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
          assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
          assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
          assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
          assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
          assertEquals(5, AminoAcidSequence.STOP_AA);
          assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
          assertEquals(25, AminoAcidSequence.symbol_count);
          assertFalse(aminoAcidSequence3.containsStopCodon());
          assertEquals(3, aminoAcidSequence3.length());
          assertEquals(".  ", aminoAcidSequence3.toString());
          
          char char1 = AminoAcidSequence.getOneLetterCode("$24");
          assertTrue(char1 == char0);
          assertEquals('\uFFFF', char1);
          
          char char2 = AminoAcidSequence.getOneLetterCode("%&<");
          assertTrue(char2 == char0);
          assertTrue(char2 == char1);
          assertEquals('\uFFFF', char2);
          
          String string0 = AminoAcidSequence.getThreeLetterAbbreviation('w');
          assertNotNull(string0);
          assertEquals("Trp", string0);
          
          int int2 = aminoAcidSequence0.length();
          assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
          assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
          assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
          assertFalse(int2 == int1);
          assertFalse(int2 == int0);
          assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
          assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
          assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
          assertEquals(4, AminoAcidSequence.SPECIAL_AA);
          assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
          assertEquals(25, AminoAcidSequence.symbol_count);
          assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
          assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
          assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
          assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
          assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
          assertEquals(5, AminoAcidSequence.STOP_AA);
          assertEquals(3, int2);
          assertEquals(".  ", aminoAcidSequence0.toString());
          assertEquals(3, aminoAcidSequence0.length());
          assertFalse(aminoAcidSequence0.containsStopCodon());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = AminoAcidSequence.getSymbolIndex('#');
      assertEquals(21, int0);
      
      char char0 = AminoAcidSequence.getCodonTranslation(" DERIVES_FROM=");
      assertEquals('.', char0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(".,", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(" DERIVES_FROM=", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(12, aminoAcidSequence1.length());
      assertEquals("x  x  x  x  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("Internal error - illegal one letter codon symbol: ", false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(16, aminoAcidSequence2.length());
      assertEquals("................", aminoAcidSequence2.toString());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('#');
      assertNotNull(string0);
      assertEquals("Ocr", string0);
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation(4);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cys", string1);
      
      char char1 = AminoAcidSequence.getCodonTranslation('#', '#', '#');
      assertTrue(char1 == char0);
      assertEquals('.', char1);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence1.codon_translation_array, false);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(12, aminoAcidSequence1.length());
      assertEquals("x  x  x  x  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(21, aminoAcidSequence3.length());
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      float float1 = aminoAcidSequence0.getMolecularWeight();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertEquals(float1, float0, 0.01F);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      String string2 = AminoAcidSequence.getThreeLetterAbbreviation(3);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Asp", string2);
      
      AminoAcidSequence.setGeneCode();
      String string3 = aminoAcidSequence1.toString();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("x  x  x  x  ", string3);
      assertEquals(12, aminoAcidSequence1.length());
      assertEquals("x  x  x  x  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      char char2 = AminoAcidSequence.getOneLetterCode("Internal error - illegal one letter codon symbol: ");
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      assertEquals('\uFFFF', char2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType(':');
      assertEquals(7, int0);
      
      int int1 = AminoAcidSequence.UNKNOWN_AA;
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '<';
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      char char1 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("5rzx^z", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("x  x  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(6, aminoAcidSequence1.length());
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("j,CiIn7E,");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      
      fastaStreamSequence0.setFromChar(aminoAcidSequence1.codon_translation_array);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("x  x  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(6, aminoAcidSequence1.length());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(64, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(50, fastaStreamSequence0.getOtherCount());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, true, true, true);
      assertNull(markerRange0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals("x  x  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(6, aminoAcidSequence1.length());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(64, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getGCount());
      assertEquals(2, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(50, fastaStreamSequence0.getOtherCount());
      
      char char2 = AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      assertFalse(char2 == char0);
      assertTrue(char2 == char1);
      assertEquals('\uFFFF', char2);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, aminoAcidSequence2.length());
      assertEquals("", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      String string0 = "wxdvD'";
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("xx", aminoAcidSequence3.toString());
      assertEquals(2, aminoAcidSequence3.length());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(63, aminoAcidSequence4.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cys");
      assertFalse(boolean0);
      
      char char0 = 'y';
      int int0 = AminoAcidSequence.getAminoAcidType('y');
      assertEquals(7, int0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('y');
      assertTrue(int1 == int0);
      assertEquals(7, int1);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('y');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        AminoAcidSequence.getTranslation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('R');
      assertEquals(1, int0);
      
      int int1 = AminoAcidSequence.UNKNOWN_AA;
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getCCount());
      
      rawStreamSequence0.setFromChar(aminoAcidSequence1.codon_translation_array);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals(4, rawStreamSequence0.getGCount());
      assertEquals(4, rawStreamSequence0.getACount());
      assertEquals(4, rawStreamSequence0.getTCount());
      assertEquals(64, rawStreamSequence0.length());
      assertEquals(2, rawStreamSequence0.getCCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(50, rawStreamSequence0.getOtherCount());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, true, true, true);
      assertNotNull(markerRange0);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals(4, rawStreamSequence0.getGCount());
      assertEquals(4, rawStreamSequence0.getACount());
      assertEquals(4, rawStreamSequence0.getTCount());
      assertEquals(64, rawStreamSequence0.length());
      assertEquals(2, rawStreamSequence0.getCCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(50, rawStreamSequence0.getOtherCount());
      assertTrue(markerRange0.isForwardMarker());
      
      char char1 = AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      String string0 = "wxdvD'";
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("xx", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(2, aminoAcidSequence3.length());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence4.toString());
      assertEquals(63, aminoAcidSequence4.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('?');
      assertEquals(7, int0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Trp");
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("Trp", aminoAcidSequence0.toString());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('x', 'x', 'x');
      assertEquals('.', char0);
      
      boolean boolean0 = AminoAcidSequence.isStopCodon('*');
      assertTrue(boolean0);
      
      String string0 = "awh`E)pTFbLH]";
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("awh`E)pTFbLH]", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(12, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  .  .  .  ", aminoAcidSequence0.toString());
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "awh`E)pTFbLH]", true);
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "awh`E)pTFbLH]");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("awh`E)pTFbLH]", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      
      Clipboard clipboard0 = new Clipboard("awh`E)pTFbLH]");
      assertNotNull(clipboard0);
      assertEquals("awh`E)pTFbLH]", clipboard0.getName());
      
      Selection selection0 = new Selection(clipboard0);
      assertNotNull(selection0);
      assertEquals("awh`E)pTFbLH]", clipboard0.getName());
      
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      assertNotNull(simpleGotoEventSource0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      
      ImageIcon imageIcon0 = new ImageIcon("awh`E)pTFbLH]", "awh`E)pTFbLH]");
      assertNotNull(imageIcon0);
      
      JButton jButton0 = new JButton("awh`E)pTFbLH]", imageIcon0);
      assertNotNull(jButton0);
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusCycleRoot());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      
      BasePlotGroup basePlotGroup0 = null;
      try {
        basePlotGroup0 = new BasePlotGroup(simpleEntryGroup0, jButton0, selection0, simpleGotoEventSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.BasePlotGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('F');
      assertEquals(3, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'F', 'F'}, charArray0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getCodonTranslation(" can't have ");
      assertEquals('.', char0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('4');
      assertFalse(int1 == int0);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      
      rawStreamSequence0.setFromChar(aminoAcidSequence1.codon_translation_array);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals(2, rawStreamSequence0.getCCount());
      assertEquals(4, rawStreamSequence0.getTCount());
      assertEquals(64, rawStreamSequence0.length());
      assertEquals(4, rawStreamSequence0.getGCount());
      assertEquals(4, rawStreamSequence0.getACount());
      assertEquals(50, rawStreamSequence0.getOtherCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, true, true, false);
      assertNotNull(markerRange0);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals(2, rawStreamSequence0.getCCount());
      assertEquals(4, rawStreamSequence0.getTCount());
      assertEquals(64, rawStreamSequence0.length());
      assertEquals(4, rawStreamSequence0.getGCount());
      assertEquals(4, rawStreamSequence0.getACount());
      assertEquals(50, rawStreamSequence0.getOtherCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertTrue(markerRange0.isForwardMarker());
      
      MarkerRange markerRange1 = aminoAcidSequence1.findMatch(bases0, (Marker) null, false, false, true);
      assertNull(markerRange1);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals(2, rawStreamSequence0.getCCount());
      assertEquals(4, rawStreamSequence0.getTCount());
      assertEquals(64, rawStreamSequence0.length());
      assertEquals(4, rawStreamSequence0.getGCount());
      assertEquals(4, rawStreamSequence0.getACount());
      assertEquals(50, rawStreamSequence0.getOtherCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      
      char char1 = AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence2.length());
      assertEquals("", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      int int0 = AminoAcidSequence.getAminoAcidType('1');
      assertEquals(7, int0);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, aminoAcidSequence3.length());
      assertEquals("xx", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence4.toString());
      assertEquals(63, aminoAcidSequence4.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("Amb", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      
      char char0 = AminoAcidSequence.getOneLetterCode(" i/o error");
      assertEquals('\uFFFF', char0);
      
      char char1 = AminoAcidSequence.getOneLetterCode("Amb");
      assertFalse(char1 == char0);
      assertEquals('+', char1);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(63, aminoAcidSequence1.length());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("n0Cv%l>6u%SS7", false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("....", aminoAcidSequence2.toString());
      
      char char2 = AminoAcidSequence.getOneLetterCode("internal error - illegal one letter amino acid code");
      assertFalse(char2 == char1);
      assertTrue(char2 == char0);
      assertEquals('\uFFFF', char2);
      
      int int0 = AminoAcidSequence.getAminoAcidType('3');
      assertEquals(7, int0);
      
      boolean boolean2 = AminoAcidSequence.isStopCodon('+');
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getOneLetterCode(">M]pX}y^,?03ajg");
      assertEquals('\uFFFF', char0);
      
      String string0 = "j,CiIn7E,";
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("j,CiIn7E,", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals("...", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("j,CiIn7E,");
      assertNotNull(fastaStreamSequence0);
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, true, true, false);
      assertNotNull(markerRange0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals("...", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertTrue(markerRange0.isForwardMarker());
      
      char char1 = AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(0, aminoAcidSequence2.length());
      assertEquals("", aminoAcidSequence2.toString());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("xdv6D'", false);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("..", aminoAcidSequence3.toString());
      assertEquals(2, aminoAcidSequence3.length());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation("j,CiIn7E,", true);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence4.toString());
      assertEquals(3, aminoAcidSequence4.length());
      
      float float0 = aminoAcidSequence3.getMolecularWeight();
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals((-18.015F), float0, 0.01F);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("..", aminoAcidSequence3.toString());
      assertEquals(2, aminoAcidSequence3.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('i');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char char0 = 'E';
      int int0 = AminoAcidSequence.getAminoAcidType('E');
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation((-3452));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3452
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      String string0 = "qiHO1HdS1W";
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("qiHO1HdS1W", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      float float0 = aminoAcidSequence1.getMolecularWeight();
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals((-36.03F), float0, 0.01F);
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("J,+XW/ZaWA| 7K_i#", true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals("x  x  x  x  x  x  ", aminoAcidSequence2.toString());
      assertEquals(18, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation(aminoAcidSequence3.codon_translation_array, false);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence4.toString());
      assertEquals(21, aminoAcidSequence4.length());
      
      char char0 = AminoAcidSequence.getOneLetterCode("^w~}{Vt#{?X");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence.setGeneCode();
      float float1 = aminoAcidSequence0.getMolecularWeight();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertNotEquals(float1, float0, 0.01F);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('v');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J,+XW/ZaWA| 7K_i#");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char char1 = AminoAcidSequence.getCodonTranslation('v', 'v', '0');
      assertFalse(char1 == char0);
      assertEquals('.', char1);
      
      char char2 = AminoAcidSequence.getSymbolFromIndex(0);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      assertEquals('a', char2);
      
      char char3 = '*';
      int int0 = AminoAcidSequence.getAminoAcidType('*');
      assertEquals(5, int0);
      
      boolean boolean3 = AminoAcidSequence.isStopCodon('v');
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getTranslation("J,+XW/ZaWA| 7K_i#", false);
      assertNotNull(aminoAcidSequence5);
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence5.containsStopCodon());
      assertEquals("......", aminoAcidSequence5.toString());
      assertEquals(6, aminoAcidSequence5.length());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      
      MarkerRange markerRange0 = aminoAcidSequence0.findMatch(bases0, (Marker) null, true, true, false);
      assertNotNull(markerRange0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertTrue(markerRange0.isForwardMarker());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence1);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals("xx", aminoAcidSequence2.toString());
      assertEquals(2, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence3);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence3.toString());
      assertEquals(63, aminoAcidSequence3.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('B');
      assertEquals(7, int0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("QD)k@+G", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("xx", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      rawStreamSequence0.setFromChar(aminoAcidSequence1.codon_translation_array);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals(64, rawStreamSequence0.length());
      assertEquals(4, rawStreamSequence0.getGCount());
      assertEquals(2, rawStreamSequence0.getCCount());
      assertEquals(50, rawStreamSequence0.getOtherCount());
      assertEquals(4, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(4, rawStreamSequence0.getACount());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, false, false, true);
      assertNull(markerRange0);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals(64, rawStreamSequence0.length());
      assertEquals(4, rawStreamSequence0.getGCount());
      assertEquals(2, rawStreamSequence0.getCCount());
      assertEquals(50, rawStreamSequence0.getOtherCount());
      assertEquals(4, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(4, rawStreamSequence0.getACount());
      
      char char1 = AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(0, aminoAcidSequence2.length());
      assertEquals("", aminoAcidSequence2.toString());
      
      String string0 = "wxdvD'";
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("xx", aminoAcidSequence3.toString());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(63, aminoAcidSequence4.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "qiHO1HdS1W";
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("qiHO1HdS1W", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("J,+XW/ZaWA| 7K_i#", true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(18, aminoAcidSequence2.length());
      assertEquals("x  x  x  x  x  x  ", aminoAcidSequence2.toString());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence2.codon_translation_array, true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(18, aminoAcidSequence2.length());
      assertEquals("x  x  x  x  x  x  ", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation("", false);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("", aminoAcidSequence4.toString());
      
      AminoAcidSequence.setGeneCode();
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('v');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char char0 = AminoAcidSequence.getCodonTranslation('v', 'v', '0');
      assertEquals('.', char0);
      
      char char1 = AminoAcidSequence.getSymbolFromIndex(0);
      assertFalse(char1 == char0);
      assertEquals('a', char1);
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getTranslation("org.biojava.bio.symbol.EmptyLocation", false);
      assertNotNull(aminoAcidSequence5);
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals("..........h.", aminoAcidSequence5.toString());
      assertEquals(12, aminoAcidSequence5.length());
      assertFalse(aminoAcidSequence5.containsStopCodon());
      
      char char2 = '>';
      int int0 = AminoAcidSequence.getAminoAcidType('>');
      assertEquals(7, int0);
      
      boolean boolean2 = AminoAcidSequence.isStopCodon('v');
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      AminoAcidSequence aminoAcidSequence6 = AminoAcidSequence.getTranslation("K`pjA01a<!DN,\"", false);
      assertNotNull(aminoAcidSequence6);
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence3));
      assertNotSame(aminoAcidSequence6, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence3);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, aminoAcidSequence6.length());
      assertFalse(aminoAcidSequence6.containsStopCodon());
      assertEquals("....", aminoAcidSequence6.toString());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("5rzx^z", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("xx", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(2, aminoAcidSequence1.length());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, false, false, true);
      assertNotNull(markerRange0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals("xx", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(2, aminoAcidSequence1.length());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertFalse(markerRange0.isForwardMarker());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("5rzx^z", false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("..", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(2, aminoAcidSequence2.length());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence3);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, aminoAcidSequence3.length());
      assertEquals("", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, aminoAcidSequence4.length());
      assertEquals("xx", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      
      char char1 = AminoAcidSequence.getCodonTranslation('', 'G', '8');
      assertFalse(char1 == char0);
      assertEquals('.', char1);
      
      boolean boolean0 = aminoAcidSequence1.checkForMatch(aminoAcidSequence2);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertTrue(boolean0);
      assertEquals("xx", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(2, aminoAcidSequence1.length());
      assertEquals("..", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(2, aminoAcidSequence2.length());
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence5);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence5.toString());
      assertEquals(63, aminoAcidSequence5.length());
      assertFalse(aminoAcidSequence5.containsStopCodon());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('<');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: <
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      System.setCurrentTimeMillis((-2669L));
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("modbase", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals("xx", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = new AminoAcidSequence("X^:\"^ZY");
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals("X^:\"^ZY", aminoAcidSequence1.toString());
      assertEquals(7, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      boolean boolean0 = aminoAcidSequence0.checkForMatch(aminoAcidSequence1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertTrue(boolean0);
      assertEquals("xx", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      assertEquals("X^:\"^ZY", aminoAcidSequence1.toString());
      assertEquals(7, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      int int0 = aminoAcidSequence0.length();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, int0);
      assertEquals("xx", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      String string0 = "j,CiIn7E,";
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("j,CiIn7E,", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence1.toString());
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("j,CiIn7E,");
      assertNotNull(fastaStreamSequence0);
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, true, true, true);
      assertNotNull(markerRange0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(9, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(9, fastaStreamSequence0.getOtherCount());
      assertFalse(markerRange0.isForwardMarker());
      
      char char1 = AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals("", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(0, aminoAcidSequence2.length());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("xdv6D'", false);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("..", aminoAcidSequence3.toString());
      assertEquals(2, aminoAcidSequence3.length());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation("j,CiIn7E,", true);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(3, aminoAcidSequence4.length());
      assertEquals("xxx", aminoAcidSequence4.toString());
      
      float float0 = aminoAcidSequence3.getMolecularWeight();
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals((-18.015F), float0, 0.01F);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("..", aminoAcidSequence3.toString());
      assertEquals(2, aminoAcidSequence3.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('M');
      assertTrue(boolean0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('M');
      assertEquals(3, int0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("6?lWNB#n>)t8;e{FG(&");
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(19, aminoAcidSequence0.length());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals("6?lWNB#n>)t8;e{FG(&", aminoAcidSequence0.toString());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('M');
      assertNotNull(string0);
      assertEquals("Met", string0);
      
      char char0 = AminoAcidSequence.getCodonTranslation('W', 't', 'W');
      assertEquals('.', char0);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('D');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = aminoAcidSequence0.length();
      assertFalse(int1 == int0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(19, int1);
      assertEquals(19, aminoAcidSequence0.length());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals("6?lWNB#n>)t8;e{FG(&", aminoAcidSequence0.toString());
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation('W');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Trp", string1);
      
      boolean boolean2 = AminoAcidSequence.isLegalCodon('t');
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      char char1 = AminoAcidSequence.getOneLetterCode("6?lWNB#n>)t8;e{FG(&");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      int int2 = AminoAcidSequence.getSymbolIndex('W');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(17, int2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType(',');
      assertEquals(7, int0);
      
      char[] charArray0 = new char[0];
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      boolean boolean0 = aminoAcidSequence0.containsStopCodon();
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(boolean0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      GenbankStreamSequence genbankStreamSequence0 = null;
      try {
        genbankStreamSequence0 = new GenbankStreamSequence((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('!');
      assertEquals(7, int0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('+');
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      int int2 = AminoAcidSequence.getSymbolIndex('M');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(12, int2);
      
      int int3 = AminoAcidSequence.getAminoAcidType('+');
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(5, int3);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(12);
      assertNotNull(string0);
      assertEquals("Met", string0);
      
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('!');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AminoAcidSequence.setGeneCode();
      char char0 = '+';
      boolean boolean1 = AminoAcidSequence.isLegalCodon('+');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char char1 = '_';
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('_');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      char char0 = AminoAcidSequence.getOneLetterCode(" i/o error");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence.setGeneCode();
      char char1 = AminoAcidSequence.getOneLetterCode("Amb");
      assertFalse(char1 == char0);
      assertEquals('+', char1);
      
      char[] charArray0 = new char[1];
      boolean boolean1 = AminoAcidSequence.isLegalCodon('+');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      charArray0[0] = '\uFFFF';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\uFFFF'}, charArray0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      
      int int0 = AminoAcidSequence.getAminoAcidType('3');
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('9');
      assertEquals(7, int0);
      
      boolean boolean0 = false;
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("}|>WD>I0+&-,", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("....", aminoAcidSequence0.toString());
      assertEquals(4, aminoAcidSequence0.length());
      
      char char0 = AminoAcidSequence.getSymbolFromIndex(4);
      assertEquals('c', char0);
      
      char char1 = AminoAcidSequence.getCodonTranslation("}|>WD>I0+&-,");
      assertFalse(char1 == char0);
      assertEquals('.', char1);
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('c');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.checkForMatch((AminoAcidSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('9');
      assertEquals(7, int0);
      
      int int1 = AminoAcidSequence.UNKNOWN_AA;
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      // Undeclared exception!
      try { 
        bases0.reverseComplement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char char0 = 'X';
      int int0 = AminoAcidSequence.getAminoAcidType('X');
      assertEquals(7, int0);
      
      char char1 = ' ';
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex(' ');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('X');
      assertEquals(7, int0);
      
      int int1 = AminoAcidSequence.UNKNOWN_AA;
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      
      // Undeclared exception!
      try { 
        simpleEntryGroup0.getFeaturesInIndexRange(7, 82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - index out of range: 7
         //
         verifyException("uk.ac.sanger.artemis.SimpleEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation("d'B';NF0k0QWaHne");
      assertEquals('.', char0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('.');
      assertNotNull(string0);
      assertEquals("---", string0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '.';
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation('.');
      assertNotNull(string1);
      assertEquals("---", string1);
      
      charArray1[1] = '.';
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("---", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(".  ", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      String string2 = AminoAcidSequence.getThreeLetterAbbreviation('.');
      assertNotNull(string2);
      assertEquals("---", string2);
      
      int int0 = AminoAcidSequence.getSymbolIndex('d');
      assertEquals(3, int0);
      
      charArray1[3] = '.';
      charArray1[4] = '.';
      charArray1[5] = '.';
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(charArray1, false);
      assertNotNull(aminoAcidSequence2);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'.', '.', '\u0000', '.', '.', '.'}, charArray1);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, aminoAcidSequence2.length());
      assertEquals(".  .  ", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      int int1 = AminoAcidSequence.getSymbolIndex('.');
      assertFalse(int1 == int0);
      assertEquals(23, int1);
      
      String string3 = aminoAcidSequence0.toString();
      assertNotNull(string3);
      assertEquals(1, charArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("", string3);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      int int2 = aminoAcidSequence0.length();
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, int2);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence3);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      String string4 = aminoAcidSequence3.toString();
      assertNotNull(string4);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("............f.......g", string4);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      boolean boolean0 = aminoAcidSequence2.checkForMatch(aminoAcidSequence3);
      assertEquals(1, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence3));
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence3);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertArrayEquals(new char[] {'.', '.', '\u0000', '.', '.', '.'}, charArray1);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(boolean0);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals(6, aminoAcidSequence2.length());
      assertEquals(".  .  ", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      char char1 = AminoAcidSequence.getCodonTranslation("............E.......g");
      assertTrue(char1 == char0);
      assertEquals('.', char1);
      
      int int3 = AminoAcidSequence.getAminoAcidType('-');
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(7, int3);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('C');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("n6nuF)^y[ aa", "n6nuF)^y[ aa");
      assertNotNull(fastaStreamSequence0);
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Strand strand0 = bases0.getForwardStrand();
      assertNotNull(strand0);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      assertNotNull(aGWindowAlgorithm0);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      
      Bases bases1 = aGWindowAlgorithm0.getBases();
      assertNotNull(bases1);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('c');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('<');
      assertFalse(boolean0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('<');
      assertEquals(7, int0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("fmin=fmin+", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(".  .  .  ", aminoAcidSequence0.toString());
      assertEquals(9, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('<');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('\'');
      assertEquals(7, int0);
      
      char char0 = AminoAcidSequence.getOneLetterCode("uk.ac.sanger.artemis.sequence.AminoAcidSequence");
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      MarkerRange markerRange0 = aminoAcidSequence0.findMatch(bases0, (Marker) null, true, true, true);
      assertNotNull(markerRange0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertFalse(markerRange0.isForwardMarker());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence1);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("xx", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(2, aminoAcidSequence2.length());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence3);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals(63, aminoAcidSequence3.length());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Ser");
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Ser", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      
      char[] charArray0 = new char[6];
      char char0 = AminoAcidSequence.getOneLetterCode("Ser");
      assertEquals('s', char0);
      
      charArray0[0] = 'W';
      char char1 = 'd';
      charArray0[1] = 'd';
      charArray0[2] = '<';
      char char2 = 'p';
      charArray0[3] = 'p';
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(390.4F, float0, 0.01F);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Ser", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      
      charArray0[4] = '?';
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      charArray0[5] = '&';
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence1);
      assertEquals(6, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'W', 'd', '<', 'p', '?', '&'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(6, aminoAcidSequence1.length());
      assertEquals("x  x  ", aminoAcidSequence1.toString());
      
      char char3 = AminoAcidSequence.getOneLetterCode("<LK0\"/+!");
      assertFalse(char3 == char0);
      assertFalse(char3 == char2);
      assertFalse(char3 == char1);
      assertEquals('\uFFFF', char3);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence1.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = AminoAcidSequence.isLegalCodon('0');
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("P1v5)hBBp4+*L:", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(12, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  .  .  .  ", aminoAcidSequence0.toString());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("P1v5)hBBp4+*L:", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(".  .  .  .  ", aminoAcidSequence1.toString());
      assertEquals(12, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "---");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("Asp", false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(3, aminoAcidSequence2.length());
      assertEquals(".  ", aminoAcidSequence2.toString());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence1.codon_translation_array, true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(".  .  .  .  ", aminoAcidSequence1.toString());
      assertEquals(12, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(63, aminoAcidSequence3.length());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation("vfszip", false);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals("..", aminoAcidSequence4.toString());
      assertEquals(2, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      
      String string0 = aminoAcidSequence1.toString();
      assertNotNull(string0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence4));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence4);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(".  .  .  .  ", string0);
      assertEquals(".  .  .  .  ", aminoAcidSequence1.toString());
      assertEquals(12, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      int int0 = AminoAcidSequence.getAminoAcidType('0');
      assertEquals(7, int0);
      
      float float0 = aminoAcidSequence4.getMolecularWeight();
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals((-18.015F), float0, 0.01F);
      assertEquals("..", aminoAcidSequence4.toString());
      assertEquals(2, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getSpacedTranslation("vfszip", false);
      assertNotNull(aminoAcidSequence5);
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, aminoAcidSequence5.length());
      assertEquals(".  .  ", aminoAcidSequence5.toString());
      assertFalse(aminoAcidSequence5.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence6 = AminoAcidSequence.getTranslation("Asp", false);
      assertNotNull(aminoAcidSequence6);
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence6, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence1);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence6.containsStopCodon());
      assertEquals(1, aminoAcidSequence6.length());
      assertEquals(".", aminoAcidSequence6.toString());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = AminoAcidSequence.isLegalCodon('0');
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "---");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("Asp", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals(".  ", aminoAcidSequence0.toString());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("vfszip", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("..", aminoAcidSequence1.toString());
      assertEquals(2, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      int int0 = AminoAcidSequence.getAminoAcidType('0');
      assertEquals(7, int0);
      
      float float0 = aminoAcidSequence1.getMolecularWeight();
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals((-18.015F), float0, 0.01F);
      assertEquals("..", aminoAcidSequence1.toString());
      assertEquals(2, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("vfszip", false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, aminoAcidSequence2.length());
      assertEquals(".  .  ", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("Asp", false);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(1, aminoAcidSequence3.length());
      assertEquals(".", aminoAcidSequence3.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('f');
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getTranslation((char[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      char char0 = AminoAcidSequence.getCodonTranslation("Sel");
      assertEquals('.', char0);
      
      char char1 = AminoAcidSequence.getCodonTranslation("Sel");
      assertTrue(char1 == char0);
      assertEquals('.', char1);
      
      char[] charArray0 = new char[0];
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence1);
      assertEquals(0, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('#');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = aminoAcidSequence0.length();
      assertEquals(0, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, int0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(0);
      assertNotNull(string0);
      assertEquals("Ala", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      String string0 = "qiHO1HdS1W";
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("qiHO1HdS1W", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("J,+XW/ZaWA| 7K_i#", true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals("x  x  x  x  x  x  ", aminoAcidSequence2.toString());
      assertEquals(18, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation(aminoAcidSequence3.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(21, aminoAcidSequence4.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getTranslation("", false);
      assertNotNull(aminoAcidSequence5);
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence5.containsStopCodon());
      assertEquals("", aminoAcidSequence5.toString());
      assertEquals(0, aminoAcidSequence5.length());
      
      AminoAcidSequence.setGeneCode();
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('v');
      assertTrue(boolean0);
      
      char char0 = AminoAcidSequence.getCodonTranslation('v', 'v', '0');
      assertEquals('.', char0);
      
      char char1 = AminoAcidSequence.getSymbolFromIndex(0);
      assertFalse(char1 == char0);
      assertEquals('a', char1);
      
      char char2 = '>';
      int int0 = AminoAcidSequence.getAminoAcidType('H');
      assertEquals(1, int0);
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('v');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AminoAcidSequence aminoAcidSequence6 = AminoAcidSequence.getTranslation("Kqpj:01a<!DN,\"N", true);
      assertNotNull(aminoAcidSequence6);
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence4));
      assertNotSame(aminoAcidSequence6, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence4);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, aminoAcidSequence6.length());
      assertEquals("xxxxx", aminoAcidSequence6.toString());
      assertFalse(aminoAcidSequence6.containsStopCodon());
      
      int int1 = aminoAcidSequence6.length();
      assertFalse(int1 == int0);
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence4));
      assertNotSame(aminoAcidSequence6, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence4);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, int1);
      assertEquals(5, aminoAcidSequence6.length());
      assertEquals("xxxxx", aminoAcidSequence6.toString());
      assertFalse(aminoAcidSequence6.containsStopCodon());
      
      char char3 = AminoAcidSequence.getOneLetterCode("org.apache.log4j.Appender");
      assertFalse(char3 == char2);
      assertFalse(char3 == char0);
      assertFalse(char3 == char1);
      assertEquals('\uFFFF', char3);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('K', 'K', 'K');
      assertEquals('.', char0);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('k');
      assertNotNull(string0);
      assertEquals("Lys", string0);
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation('K');
      assertNotNull(string1);
      assertEquals("Lys", string1);
      
      int int0 = AminoAcidSequence.getAminoAcidType('O');
      assertEquals(7, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char char1 = AminoAcidSequence.getSymbolFromIndex(7);
      assertFalse(char1 == char0);
      assertEquals('g', char1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertFalse(boolean1);
      
      char char2 = AminoAcidSequence.getCodonTranslation("1>3Lb`(kIyi8w4yx^");
      assertTrue(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals('.', char2);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("Lys", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals(".  ", aminoAcidSequence0.toString());
      
      int int1 = AminoAcidSequence.getSymbolIndex('k');
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      String string2 = AminoAcidSequence.getThreeLetterAbbreviation('.');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("---", string2);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("Lys", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("x  ", aminoAcidSequence1.toString());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals(".  ", aminoAcidSequence0.toString());
      assertEquals(21, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence2.toString());
      
      char char3 = AminoAcidSequence.getCodonTranslation("Lys");
      assertTrue(char3 == char0);
      assertTrue(char3 == char2);
      assertFalse(char3 == char1);
      assertEquals('.', char3);
      
      String string3 = AminoAcidSequence.getThreeLetterAbbreviation(2);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Asn", string3);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation("Asp", false);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(3, aminoAcidSequence3.length());
      assertEquals(".  ", aminoAcidSequence3.toString());
      
      int int2 = aminoAcidSequence2.length();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(21, int2);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals(".  ", aminoAcidSequence0.toString());
      assertEquals(21, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence2.toString());
      
      boolean boolean2 = AminoAcidSequence.isLegalCodon('v');
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '8';
      charArray0[1] = '8';
      boolean boolean0 = false;
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '8'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      
      int int0 = AminoAcidSequence.getSymbolIndex('T');
      assertEquals(16, int0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("41'*)7~@u`r/hq@L9?3", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(18, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(".  .  .  .  .  .  ", aminoAcidSequence1.toString());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence1.codon_translation_array, false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(18, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(".  .  .  .  .  .  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(21, aminoAcidSequence2.length());
      assertEquals("............f.......g", aminoAcidSequence2.toString());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('/');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("j,CiIn7E,", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(6, rawStreamSequence0.length());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(6, rawStreamSequence0.length());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, true, true, true);
      assertNull(markerRange0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(6, rawStreamSequence0.length());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals("xx", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(2, aminoAcidSequence3.length());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence4.toString());
      assertEquals(63, aminoAcidSequence4.length());
      
      int int0 = AminoAcidSequence.getSymbolIndex('K');
      assertEquals(11, int0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('K');
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(6);
      assertNotNull(string0);
      assertEquals("Glu", string0);
      
      char char1 = AminoAcidSequence.getOneLetterCode("EAjN");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      char char2 = AminoAcidSequence.getSymbolFromIndex(2);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals('n', char2);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('b');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: b
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("uyLa%^h5", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("..", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      
      boolean boolean0 = aminoAcidSequence0.containsStopCodon();
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(boolean0);
      assertEquals("..", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = new AminoAcidSequence("uyLa%^h5");
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(8, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("uyLa%^h5", aminoAcidSequence1.toString());
      
      boolean boolean1 = aminoAcidSequence0.checkForMatch(aminoAcidSequence1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(boolean1);
      assertEquals("..", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      assertEquals(8, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("uyLa%^h5", aminoAcidSequence1.toString());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("..", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence2.toString());
      assertEquals(21, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("..", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(21, aminoAcidSequence3.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence3.toString());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation("uyLa%^h5", false);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(".  .  ", aminoAcidSequence4.toString());
      assertEquals(6, aminoAcidSequence4.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('{');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: {
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test is flaky")
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence(".,");
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(2, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".,", aminoAcidSequence0.toString());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".,", aminoAcidSequence0.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(".,", true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("", aminoAcidSequence2.toString());
      
      int int0 = AminoAcidSequence.getSymbolIndex('+');
      assertEquals(22, int0);
      
      char char0 = AminoAcidSequence.getOneLetterCode(".,");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence.setGeneCode();
  }

  @Ignore("Test is flaky")
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      boolean boolean0 = true;
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("j,CiIn7E,", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(3, aminoAcidSequence1.length());
      assertEquals("xxx", aminoAcidSequence1.toString());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, false, false, true);
      assertNull(markerRange0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(3, aminoAcidSequence1.length());
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      char char1 = AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      boolean boolean1 = true;
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.findMatch(bases0, (Marker) null, false, false, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: position: 7
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('M');
      assertTrue(boolean0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('M');
      assertEquals(3, int0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("6?lWNB#n>)t8;e{FG(&");
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals("6?lWNB#n>)t8;e{FG(&", aminoAcidSequence0.toString());
      assertEquals(19, aminoAcidSequence0.length());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('M');
      assertNotNull(string0);
      assertEquals("Met", string0);
      
      char char0 = AminoAcidSequence.getCodonTranslation('W', 't', 'W');
      assertEquals('.', char0);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('D');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = aminoAcidSequence0.length();
      assertFalse(int1 == int0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(19, int1);
      assertEquals("6?lWNB#n>)t8;e{FG(&", aminoAcidSequence0.toString());
      assertEquals(19, aminoAcidSequence0.length());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation('W');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Trp", string1);
      
      boolean boolean2 = aminoAcidSequence0.containsStopCodon();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertTrue(boolean2);
      assertEquals("6?lWNB#n>)t8;e{FG(&", aminoAcidSequence0.toString());
      assertEquals(19, aminoAcidSequence0.length());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      
      char char1 = AminoAcidSequence.getOneLetterCode("6?lWNB#n>)t8;e{FG(&");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      int int2 = AminoAcidSequence.getSymbolIndex('W');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(17, int2);
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence(".,");
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".,", aminoAcidSequence0.toString());
      assertEquals(2, aminoAcidSequence0.length());
      
      int int0 = AminoAcidSequence.getSymbolIndex('s');
      assertEquals(15, int0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("getFeaturePubsBySrcFeature", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  i  ", aminoAcidSequence1.toString());
      assertEquals(24, aminoAcidSequence1.length());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(".,", false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      char char0 = AminoAcidSequence.getOneLetterCode(".,");
      assertEquals('\uFFFF', char0);
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = false;
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("This tokenization doesn't contain character: '", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("...............", aminoAcidSequence0.toString());
      assertEquals(15, aminoAcidSequence0.length());
      
      int int0 = AminoAcidSequence.getSymbolIndex('U');
      assertEquals(24, int0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("...............", aminoAcidSequence0.toString());
      assertEquals(15, aminoAcidSequence0.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(63, aminoAcidSequence1.length());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence1.codon_translation_array, false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("...............", aminoAcidSequence0.toString());
      assertEquals(15, aminoAcidSequence0.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(63, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(21, aminoAcidSequence2.length());
      assertEquals("............f.......g", aminoAcidSequence2.toString());
      
      char char0 = AminoAcidSequence.getOneLetterCode("This tokenization doesn't contain character: '");
      assertEquals('\uFFFF', char0);
      
      char char1 = AminoAcidSequence.getOneLetterCode("symbols from.");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('U');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("  ");
      assertNotNull(aminoAcidSequence0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      
      char char0 = AminoAcidSequence.getCodonTranslation('c', 't', 'c');
      assertEquals('l', char0);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('W');
      assertTrue(boolean0);
      
      int int0 = aminoAcidSequence0.length();
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, int0);
      assertEquals("  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('c');
      assertNotNull(string0);
      assertEquals("Cys", string0);
      
      boolean boolean1 = aminoAcidSequence0.containsStopCodon();
      assertFalse(boolean1 == boolean0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(boolean1);
      assertEquals("  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      
      char char1 = AminoAcidSequence.getOneLetterCode("  ");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('h');
      assertTrue(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("0>~cZc0%/'am}4;DMu");
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("0>~cZc0%/'am}4;DMu", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(19, aminoAcidSequence0.length());
      
      char char0 = '#';
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: 0
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("j,CiIn7E,", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(3, aminoAcidSequence1.length());
      assertEquals("xxx", aminoAcidSequence1.toString());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, true, true, true);
      assertNull(markerRange0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(3, aminoAcidSequence1.length());
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      char char1 = AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence2 = new AminoAcidSequence("5rzx^z");
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(6, aminoAcidSequence2.length());
      assertEquals("5rzx^z", aminoAcidSequence2.toString());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(2, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("xx", aminoAcidSequence3.toString());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation(aminoAcidSequence3.codon_translation_array, false);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("xx", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(21, aminoAcidSequence4.length());
      assertEquals("............f.......g", aminoAcidSequence4.toString());
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence5);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence5.containsStopCodon());
      assertEquals(63, aminoAcidSequence5.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence5.toString());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("6?lWNB#n>)t8;e{FG(&");
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals("6?lWNB#n>)t8;e{FG(&", aminoAcidSequence0.toString());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals(19, aminoAcidSequence0.length());
      
      char char0 = AminoAcidSequence.getCodonTranslation('W', 't', 'W');
      assertEquals('.', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("org.gmod.schema.sequence.FeatureCvTermProp", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(42, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(".  .  .  .  .  .  .  .  .  i  .  .  .  .  ", aminoAcidSequence1.toString());
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('D');
      assertTrue(boolean0);
      
      int int0 = aminoAcidSequence0.length();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(19, int0);
      assertEquals("6?lWNB#n>)t8;e{FG(&", aminoAcidSequence0.toString());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals(19, aminoAcidSequence0.length());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('W');
      assertNotNull(string0);
      assertEquals("Trp", string0);
      
      boolean boolean1 = aminoAcidSequence0.containsStopCodon();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertTrue(boolean1);
      assertEquals("6?lWNB#n>)t8;e{FG(&", aminoAcidSequence0.toString());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals(19, aminoAcidSequence0.length());
      
      char char1 = AminoAcidSequence.getOneLetterCode("6?lWNB#n>)t8;e{FG(&");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("5rzx^z", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(2, aminoAcidSequence1.length());
      assertEquals("xx", aminoAcidSequence1.toString());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, false, false, true);
      assertNotNull(markerRange0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(2, aminoAcidSequence1.length());
      assertEquals("xx", aminoAcidSequence1.toString());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertFalse(markerRange0.isForwardMarker());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("xx", aminoAcidSequence3.toString());
      assertEquals(2, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(63, aminoAcidSequence4.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('<');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: <
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = ".,";
      char char0 = AminoAcidSequence.getCodonTranslation(".,");
      assertEquals('.', char0);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('*');
      assertTrue(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence(".,");
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".,", aminoAcidSequence0.toString());
      assertEquals(2, aminoAcidSequence0.length());
      
      char char1 = AminoAcidSequence.getOneLetterCode(".,");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("E^z}P@s", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals("x  x  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(6, aminoAcidSequence1.length());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\uFFFF';
      char char2 = 'X';
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSpacedTranslation((char[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('*');
      assertTrue(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("Lys", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("x  ", aminoAcidSequence0.toString());
      
      boolean boolean1 = aminoAcidSequence0.containsStopCodon();
      assertFalse(boolean1 == boolean0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(boolean1);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("x  ", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getCodonTranslation("Lys");
      assertEquals('.', char0);
      
      int int0 = 191;
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(191);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 191
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char char0 = 'a';
      char char1 = AminoAcidSequence.getCodonTranslation('a', 'j', 'a');
      assertFalse(char1 == char0);
      assertEquals('.', char1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = '.';
      charArray0[4] = 'a';
      boolean boolean0 = false;
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'a', 'j', 'j', '.', 'a'}, charArray0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  ", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      
      String string0 = ":C5b ";
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertEquals(5, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'a', 'j', 'j', '.', 'a'}, charArray0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  ", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      float float0 = aminoAcidSequence1.getMolecularWeight();
      assertEquals(5, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'a', 'j', 'j', '.', 'a'}, charArray0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals((-120.03998F), float0, 0.01F);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  ", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      boolean boolean1 = false;
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("JSFILTER", false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, aminoAcidSequence2.length());
      assertEquals(".  .  ", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Clipboard clipboard0 = new Clipboard(":C5b ");
      assertNotNull(clipboard0);
      assertEquals(":C5b ", clipboard0.getName());
      
      Selection selection0 = new Selection(clipboard0);
      assertNotNull(selection0);
      assertEquals(":C5b ", clipboard0.getName());
      
      Marker marker0 = selection0.getHighestBaseOfSelection();
      assertNull(marker0);
      assertEquals(":C5b ", clipboard0.getName());
      
      MarkerChangeEvent markerChangeEvent0 = null;
      try {
        markerChangeEvent0 = new MarkerChangeEvent((Marker) null, (Strand) null, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('D');
      assertNotNull(string0);
      assertEquals("Asp", string0);
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Asp");
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Asp", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("Cys", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(1, aminoAcidSequence1.length());
      assertEquals(".", aminoAcidSequence1.toString());
      
      boolean boolean0 = aminoAcidSequence0.checkForMatch(aminoAcidSequence1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(boolean0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Asp", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(1, aminoAcidSequence1.length());
      assertEquals(".", aminoAcidSequence1.toString());
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation(2);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Asn", string1);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('D');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      Clipboard clipboard0 = new Clipboard("Asn");
      assertNotNull(clipboard0);
      assertEquals("Asn", clipboard0.getName());
      
      Selection selection0 = new Selection(clipboard0);
      assertNotNull(selection0);
      assertEquals("Asn", clipboard0.getName());
      
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      assertNotNull(simpleGotoEventSource0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      JMenuItem jMenuItem0 = new JMenuItem("Asp", 5);
      assertNotNull(jMenuItem0);
      assertTrue(jMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jMenuItem0.isFocusCycleRoot());
      assertFalse(jMenuItem0.getIgnoreRepaint());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('O');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: o
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char char0 = 'K';
      int int0 = AminoAcidSequence.getAminoAcidType('K');
      assertEquals(1, int0);
      
      char char1 = '1';
      int int1 = AminoAcidSequence.UNKNOWN_AA;
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      // Undeclared exception!
      try { 
        simpleEntryGroup0.getFeaturesInIndexRange(1, 120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - index out of range: 1
         //
         verifyException("uk.ac.sanger.artemis.SimpleEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('&');
      assertFalse(boolean0);
      
      AminoAcidSequence.setGeneCode();
      int int0 = AminoAcidSequence.getAminoAcidType('&');
      assertEquals(7, int0);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(7);
      assertNotNull(string0);
      assertEquals("Gly", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = ':';
      charArray0[4] = '&';
      charArray0[5] = '&';
      charArray0[6] = '&';
      charArray0[7] = '&';
      charArray0[8] = '&';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'&', '&', '&', ':', '&', '&', '&', '&', '&'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  ", aminoAcidSequence0.toString());
      assertEquals(9, aminoAcidSequence0.length());
      
      String string1 = aminoAcidSequence0.toString();
      assertNotNull(string1);
      assertEquals(9, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'&', '&', '&', ':', '&', '&', '&', '&', '&'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("x  x  x  ", string1);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  ", aminoAcidSequence0.toString());
      assertEquals(9, aminoAcidSequence0.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('&');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: &
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('&');
      assertFalse(boolean0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('&');
      assertEquals(7, int0);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(7);
      assertNotNull(string0);
      assertEquals("Gly", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = ':';
      charArray0[4] = '&';
      charArray0[5] = '&';
      charArray0[6] = '&';
      charArray0[7] = '&';
      charArray0[8] = '&';
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('&');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: &
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = true;
      AminoAcidSequence.setGeneCode();
      char char0 = 'p';
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('p');
      assertNotNull(string0);
      assertEquals("Pro", string0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        AminoAcidSequence.getCodonTranslation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("2F}TSk/w", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("x  x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(6, aminoAcidSequence0.length());
      
      int int0 = AminoAcidSequence.getAminoAcidType('5');
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("9z^(NSnK)", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(".  .  .  ", aminoAcidSequence0.toString());
      assertEquals(9, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence.setGeneCode();
      int int0 = AminoAcidSequence.NEGATIVELY_CHARGED_AA;
      assertEquals(2, int0);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(2);
      assertNotNull(string0);
      assertEquals("Asn", string0);
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation('l');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Leu", string1);
      
      String string2 = aminoAcidSequence0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(".  .  .  ", string2);
      assertEquals(".  .  .  ", aminoAcidSequence0.toString());
      assertEquals(9, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      int int1 = AminoAcidSequence.getSymbolIndex('E');
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      char char0 = AminoAcidSequence.getCodonTranslation(':', ':', 'l');
      assertEquals('.', char0);
      
      char char1 = AminoAcidSequence.getOneLetterCode(".  .  .  ");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = '8';
      charArray0[2] = 'k';
      charArray0[3] = 'I';
      charArray0[4] = 'Y';
      charArray0[5] = 'Q';
      charArray0[6] = 'K';
      charArray0[7] = 'y';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {':', '8', 'k', 'I', 'Y', 'Q', 'K', 'y'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("xx", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      
      int int0 = AminoAcidSequence.getSymbolIndex('Q');
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('r');
      assertTrue(boolean0);
      
      char char0 = AminoAcidSequence.getCodonTranslation("{4pDeI_k?dT'");
      assertEquals('.', char0);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('.');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('r');
      assertNotNull(string0);
      assertEquals("Arg", string0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Arg");
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Arg", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation('r');
      assertNotNull(string1);
      assertEquals("Arg", string1);
      
      int int0 = AminoAcidSequence.getAminoAcidType('@');
      assertEquals(7, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex(')');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: )
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence(".,");
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(".,", aminoAcidSequence0.toString());
      assertEquals(2, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(".,", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      
      char char0 = AminoAcidSequence.getCodonTranslation(".,");
      assertEquals('.', char0);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('R');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('l');
      assertTrue(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("[|GR|", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("x", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      
      boolean boolean1 = aminoAcidSequence0.containsStopCodon();
      assertFalse(boolean1 == boolean0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(boolean1);
      assertEquals("x", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('L');
      assertTrue(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("6?lWNB#n>)t8;e{FG(&");
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(19, aminoAcidSequence0.length());
      assertEquals("6?lWNB#n>)t8;e{FG(&", aminoAcidSequence0.toString());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('L');
      assertNotNull(string0);
      assertEquals("Leu", string0);
      
      char char0 = AminoAcidSequence.getCodonTranslation('W', 't', 'W');
      assertEquals('.', char0);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('D');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = aminoAcidSequence0.length();
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(19, int0);
      assertEquals(19, aminoAcidSequence0.length());
      assertEquals("6?lWNB#n>)t8;e{FG(&", aminoAcidSequence0.toString());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation('W');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Trp", string1);
      
      boolean boolean2 = aminoAcidSequence0.containsStopCodon();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertTrue(boolean2);
      assertEquals(19, aminoAcidSequence0.length());
      assertEquals("6?lWNB#n>)t8;e{FG(&", aminoAcidSequence0.toString());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      
      char char1 = AminoAcidSequence.getOneLetterCode("6?lWNB#n>)t8;e{FG(&");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      int int1 = AminoAcidSequence.STOP_AA;
      assertFalse(int1 == int0);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("Ocr", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      
      boolean boolean0 = aminoAcidSequence0.containsStopCodon();
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(boolean0);
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      
      AminoAcidSequence.setGeneCode();
      int int0 = AminoAcidSequence.getSymbolIndex('M');
      assertEquals(12, int0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence1.toString());
      assertEquals(63, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence1.codon_translation_array, true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence1.toString());
      assertEquals(63, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(63, aminoAcidSequence2.length());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence2.toString());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence1.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("j,CiIn7E,", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getCCount());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, false, false, true);
      assertNull(markerRange0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getCCount());
      
      char char1 = AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("xx", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(2, aminoAcidSequence3.length());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence4.toString());
      assertEquals(63, aminoAcidSequence4.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('$', 'C', '$');
      assertEquals('.', char0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'C';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'.', 'C'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence1);
      assertEquals(2, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'.', 'C'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      float float0 = aminoAcidSequence1.getMolecularWeight();
      assertEquals(2, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'.', 'C'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      char char1 = AminoAcidSequence.getOneLetterCode("m/ 8zQoqZ");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('C');
      assertNotNull(string0);
      assertEquals("Cys", string0);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence1.codon_translation_array, false);
      assertNotNull(aminoAcidSequence2);
      assertEquals(2, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'.', 'C'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence2.toString());
      assertEquals(21, aminoAcidSequence2.length());
      
      char char2 = AminoAcidSequence.getCodonTranslation('C', 'C', 'S');
      assertTrue(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals('.', char2);
      
      boolean boolean0 = aminoAcidSequence0.containsStopCodon();
      assertEquals(2, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertArrayEquals(new char[] {'.', 'C'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(boolean0);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      AminoAcidSequence.setGeneCode();
      String string1 = aminoAcidSequence0.toString();
      assertNotNull(string1);
      assertEquals(2, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertArrayEquals(new char[] {'.', 'C'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("", string1);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      float float1 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(2, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertEquals(float1, float0, 0.01F);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertArrayEquals(new char[] {'.', 'C'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation("Z[h", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("x  ", aminoAcidSequence3.toString());
      
      boolean boolean1 = aminoAcidSequence3.checkForMatch(aminoAcidSequence0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertArrayEquals(new char[] {'.', 'C'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(boolean1);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals(3, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("x  ", aminoAcidSequence3.toString());
      
      String string2 = aminoAcidSequence2.toString();
      assertNotNull(string2);
      assertEquals(2, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'.', 'C'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals("............f.......g", string2);
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence2.toString());
      assertEquals(21, aminoAcidSequence2.length());
      
      char char3 = AminoAcidSequence.getCodonTranslation('S', '$', '|');
      assertFalse(char3 == char1);
      assertTrue(char3 == char0);
      assertTrue(char3 == char2);
      assertEquals('.', char3);
      
      int int0 = AminoAcidSequence.getSymbolIndex('C');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      boolean boolean0 = AminoAcidSequence.isStopCodon('f');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence1 = new AminoAcidSequence("E|2;KFJ1K{q");
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals("E|2;KFJ1K{q", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(11, aminoAcidSequence1.length());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(21, aminoAcidSequence2.length());
      
      AminoAcidSequence.setGeneCode();
      boolean boolean1 = aminoAcidSequence0.checkForMatch(aminoAcidSequence1);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertTrue(boolean1);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("E|2;KFJ1K{q", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(11, aminoAcidSequence1.length());
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'f';
      charArray1[1] = 'f';
      charArray1[2] = 'f';
      charArray1[3] = 'f';
      charArray1[4] = 'f';
      charArray1[5] = 'f';
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation(charArray1, true);
      assertNotNull(aminoAcidSequence3);
      assertEquals(6, charArray1.length);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f', 'f'}, charArray1);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("x  x  ", aminoAcidSequence3.toString());
      assertEquals(6, aminoAcidSequence3.length());
      
      int int0 = AminoAcidSequence.getAminoAcidType('O');
      assertEquals(7, int0);
      
      int int1 = AminoAcidSequence.getSymbolIndex('f');
      assertFalse(int1 == int0);
      assertEquals(13, int1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('s');
      assertTrue(boolean0);
      
      int int0 = AminoAcidSequence.getSymbolIndex('W');
      assertEquals(17, int0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("", aminoAcidSequence1.toString());
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('q');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = aminoAcidSequence0.length();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(int1 == int0);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, int1);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      boolean boolean2 = AminoAcidSequence.isStopCodon('^');
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt((-3946));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('W');
      assertEquals(3, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getOneLetterCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('k', 'k', 'k');
      assertEquals('.', char0);
      
      AminoAcidSequence.setGeneCode();
      boolean boolean0 = AminoAcidSequence.isLegalCodon('k');
      assertTrue(boolean0);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      
      FeatureVector featureVector0 = new FeatureVector();
      assertNotNull(featureVector0);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      
      int int0 = 50;
      // Undeclared exception!
      try { 
        featureVector0.removeElementAt(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'X';
      charArray0[2] = 'F';
      charArray0[3] = 'Q';
      charArray0[4] = 'A';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'P', 'X', 'F', 'Q', 'A'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(".", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      
      char char0 = aminoAcidSequence0.elementAt(0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'P', 'X', 'F', 'Q', 'A'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals('.', char0);
      assertEquals(".", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char char0 = '-';
      char char1 = AminoAcidSequence.getCodonTranslation('-', 'w', 'w');
      assertFalse(char1 == char0);
      assertEquals('.', char1);
      
      char char2 = 'V';
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('V');
      assertNotNull(string0);
      assertEquals("Val", string0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Val");
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Val", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("Val", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(".", aminoAcidSequence1.toString());
      assertEquals(1, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      boolean boolean0 = false;
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence1.codon_translation_array, false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(".", aminoAcidSequence1.toString());
      assertEquals(1, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence2.toString());
      assertEquals(63, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      int int0 = AminoAcidSequence.getAminoAcidType('V');
      assertEquals(3, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('-');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: -
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('I', ',', ',');
      assertEquals('.', char0);
      
      char char1 = AminoAcidSequence.getCodonTranslation('.', '~', '.');
      assertTrue(char1 == char0);
      assertEquals('.', char1);
      
      int int0 = AminoAcidSequence.getSymbolIndex('x');
      assertEquals(23, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(',');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSpacedTranslation((char[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation("d'B';NF0k0QWaHne");
      assertEquals('.', char0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('.');
      assertNotNull(string0);
      assertEquals("---", string0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence1);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '.';
      charArray1[1] = '.';
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence2);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(21, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence2.toString());
      
      charArray1[2] = '.';
      charArray1[3] = '.';
      charArray1[4] = '.';
      charArray1[5] = '.';
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation(charArray1, false);
      assertNotNull(aminoAcidSequence3);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.', '.'}, charArray1);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(".  .  ", aminoAcidSequence3.toString());
      assertEquals(6, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      String string1 = aminoAcidSequence0.toString();
      assertNotNull(string1);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("", string1);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      int int0 = aminoAcidSequence1.length();
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, int0);
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence4.toString());
      assertEquals(21, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char char0 = 'R';
      boolean boolean0 = AminoAcidSequence.isStopCodon('R');
      assertFalse(boolean0);
      
      AminoAcidSequence.setGeneCode();
      String string0 = "";
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(63, aminoAcidSequence2.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation("", false);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("", aminoAcidSequence3.toString());
      assertEquals(0, aminoAcidSequence3.length());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation("C", false);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("", aminoAcidSequence4.toString());
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence5);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(21, aminoAcidSequence5.length());
      assertEquals("............f.......g", aminoAcidSequence5.toString());
      assertFalse(aminoAcidSequence5.containsStopCodon());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.checkForMatch((AminoAcidSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = AminoAcidSequence.getSymbolIndex('v');
      assertEquals(19, int0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("}+-\"JILV8-#v9~b", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(15, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  .  .  .  .  ", aminoAcidSequence0.toString());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(15, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  .  .  .  .  ", aminoAcidSequence0.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = 'v';
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence2);
      assertEquals(7, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertArrayEquals(new char[] {'v', 'v', 'v', 'v', 'v', 'v', 'v'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(".  .  ", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(6, aminoAcidSequence2.length());
      
      int int1 = AminoAcidSequence.getSymbolIndex('v');
      assertTrue(int1 == int0);
      assertEquals(19, int1);
      
      boolean boolean0 = aminoAcidSequence0.checkForMatch(aminoAcidSequence1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(boolean0);
      assertEquals(15, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  .  .  .  .  ", aminoAcidSequence0.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      
      AminoAcidSequence.setGeneCode();
      boolean boolean1 = aminoAcidSequence1.containsStopCodon();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(boolean1);
      assertEquals(15, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  .  .  .  .  ", aminoAcidSequence0.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(1652);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('>');
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("~@(E", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(".", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("bT2o8HL[nr>'", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxxx", aminoAcidSequence1.toString());
      
      boolean boolean1 = aminoAcidSequence0.checkForMatch(aminoAcidSequence1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertTrue(boolean1);
      assertEquals(".", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      assertEquals(4, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxxx", aminoAcidSequence1.toString());
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char char0 = ';';
      int int0 = AminoAcidSequence.getAminoAcidType(';');
      assertEquals(7, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation((-3452));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3452
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = true;
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('w');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = aminoAcidSequence0.containsStopCodon();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(boolean2);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(21, aminoAcidSequence2.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence2.toString());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence1.codon_translation_array, false);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals("............f.......g", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(21, aminoAcidSequence3.length());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(21, aminoAcidSequence4.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence4.toString());
      
      float float0 = aminoAcidSequence1.getMolecularWeight();
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getSpacedTranslation("", false);
      assertNotNull(aminoAcidSequence5);
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence5.length());
      assertEquals("", aminoAcidSequence5.toString());
      assertFalse(aminoAcidSequence5.containsStopCodon());
      
      int int0 = aminoAcidSequence0.length();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, int0);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      int int1 = AminoAcidSequence.getSymbolIndex('G');
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      int int2 = AminoAcidSequence.getAminoAcidType('O');
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(7, int2);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation((-1462));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1462
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char char0 = 'G';
      int int0 = AminoAcidSequence.getAminoAcidType('G');
      assertEquals(4, int0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("eb$&~mv(:O%3/");
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("eb$&~mv(:O%3/", aminoAcidSequence0.toString());
      assertEquals(13, aminoAcidSequence0.length());
      
      char char1 = AminoAcidSequence.getCodonTranslation(" (will try again later)");
      assertFalse(char1 == char0);
      assertEquals('.', char1);
      
      int int1 = 62;
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolFromIndex(62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 62
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation("`hVWOd@S/3Mrl");
      assertEquals('.', char0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("!<L", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals("x", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      
      AminoAcidSequence.setGeneCode();
      int int0 = 0;
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals("x", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      
      char char1 = aminoAcidSequence0.elementAt(0);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(char1 == char0);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals('x', char1);
      assertEquals("x", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      
      int int1 = (-451);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      
      FeatureVector featureVector0 = new FeatureVector();
      assertNotNull(featureVector0);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      
      boolean boolean0 = true;
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "!<L", "", true, true);
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      
      FilteredEntryGroup filteredEntryGroup1 = new FilteredEntryGroup(filteredEntryGroup0, featureKeyQualifierPredicate0, "!<L");
      assertNotNull(filteredEntryGroup1);
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals("!<L", filteredEntryGroup1.getFilterName());
      
      Selection selection0 = new Selection((Clipboard) null);
      assertNotNull(selection0);
      
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(filteredEntryGroup1);
      assertNotNull(simpleGotoEventSource0);
      assertFalse(filteredEntryGroup0.equals((Object)filteredEntryGroup1));
      assertFalse(filteredEntryGroup1.equals((Object)filteredEntryGroup0));
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(0, filteredEntryGroup1.refCount());
      assertEquals(0, filteredEntryGroup1.size());
      assertEquals("!<L", filteredEntryGroup1.getFilterName());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      MockDefaultListSelectionModel mockDefaultListSelectionModel0 = new MockDefaultListSelectionModel();
      assertNotNull(mockDefaultListSelectionModel0);
      
      JTable jTable0 = new JTable(defaultTableModel0, (TableColumnModel) null, mockDefaultListSelectionModel0);
      assertNotNull(jTable0);
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      
      BasePlotGroup basePlotGroup0 = null;
      try {
        basePlotGroup0 = new BasePlotGroup(filteredEntryGroup1, jTable0, selection0, simpleGotoEventSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.BasePlotGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char char0 = '/';
      int int0 = AminoAcidSequence.getAminoAcidType('/');
      assertEquals(7, int0);
      
      char char1 = 'x';
      boolean boolean0 = AminoAcidSequence.isLegalCodon('x');
      assertFalse(boolean0);
      
      char char2 = 'o';
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('o');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("Log session start time ", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals("x  x  x  x  x  x  x  ", aminoAcidSequence0.toString());
      assertEquals(21, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pzIe<E:3eg");
      assertFalse(boolean0);
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("x  x  x  x  x  x  x  ", aminoAcidSequence0.toString());
      assertEquals(21, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('/');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = AminoAcidSequence.getAminoAcidType('/');
      assertEquals(7, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(2497);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2497
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "";
      char char0 = AminoAcidSequence.getCodonTranslation("");
      assertEquals('.', char0);
      
      int int0 = AminoAcidSequence.getSymbolIndex('H');
      assertEquals(8, int0);
      
      boolean boolean0 = false;
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      boolean boolean1 = false;
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("", false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(0, aminoAcidSequence2.length());
      
      int int1 = AminoAcidSequence.getSymbolIndex('r');
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation("", false);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, aminoAcidSequence3.length());
      assertEquals("", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence4.toString());
      assertEquals(21, aminoAcidSequence4.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('3');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: 3
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test is flaky")
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      char char0 = AminoAcidSequence.getSymbolFromIndex(0);
      assertEquals('a', char0);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('a');
      assertNotNull(string0);
      assertEquals("Ala", string0);
      
      char char1 = AminoAcidSequence.getSymbolFromIndex(0);
      assertTrue(char1 == char0);
      assertEquals('a', char1);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("Adding value ", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(12, aminoAcidSequence0.length());
      assertEquals("x  x  x  x  ", aminoAcidSequence0.toString());
      
      Clipboard clipboard0 = new Clipboard("Ala");
      assertNotNull(clipboard0);
      assertEquals("Ala", clipboard0.getName());
      
      Selection selection0 = new Selection(clipboard0);
      assertNotNull(selection0);
      assertEquals("Ala", clipboard0.getName());
      
      Marker marker0 = selection0.getStartBaseOfSelection();
      assertNull(marker0);
      assertEquals("Ala", clipboard0.getName());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.findMatch((Bases) null, (Marker) null, true, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '}';
      charArray0[2] = '4';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'g', '}', '4'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  ", aminoAcidSequence0.toString());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('N');
      assertNotNull(string0);
      assertEquals("Asn", string0);
      
      String string1 = aminoAcidSequence0.toString();
      assertNotNull(string1);
      assertEquals(3, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'g', '}', '4'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals("x  ", string1);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  ", aminoAcidSequence0.toString());
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('Q');
      assertTrue(boolean0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Q';
      charArray1[1] = '4';
      charArray1[2] = 'N';
      charArray1[3] = 'Q';
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray1, true);
      assertNotNull(aminoAcidSequence1);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'Q', '4', 'N', 'Q'}, charArray1);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(1, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("x", aminoAcidSequence1.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char char0 = 'N';
      boolean boolean0 = AminoAcidSequence.isLegalCodon('N');
      assertTrue(boolean0);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(0);
      assertNotNull(string0);
      assertEquals("Ala", string0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getTranslation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      float float1 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(float1, float0, 0.01F);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      char char0 = AminoAcidSequence.getOneLetterCode("xe^oqLE*M|7|");
      assertEquals('\uFFFF', char0);
      
      float float2 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      char char1 = AminoAcidSequence.getOneLetterCode("}b\">");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('g');
      assertNotNull(string0);
      assertEquals("Gly", string0);
      
      float float3 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      char char2 = AminoAcidSequence.getOneLetterCode("fjo>yI0\"/ UH&P9L/r");
      assertTrue(char2 == char0);
      assertTrue(char2 == char1);
      assertEquals('\uFFFF', char2);
      
      float float4 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(float4, float3, 0.01F);
      assertEquals(float4, float1, 0.01F);
      assertEquals(float4, float0, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0.0F, float4, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      int int0 = aminoAcidSequence0.length();
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, int0);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getOneLetterCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '`';
      charArray0[2] = 'q';
      boolean boolean0 = false;
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'1', '`', 'q'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'1', '`', 'q'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      
      int int0 = AminoAcidSequence.getSymbolIndex('n');
      assertEquals(2, int0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'x';
      charArray1[1] = 'q';
      charArray1[2] = '1';
      charArray1[3] = '1';
      charArray1[4] = 'q';
      charArray1[5] = '1';
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(charArray1, false);
      assertNotNull(aminoAcidSequence1);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'x', 'q', '1', '1', 'q', '1'}, charArray1);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(6, aminoAcidSequence1.length());
      assertEquals(".  .  ", aminoAcidSequence1.toString());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(373);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 373
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "lT1UPu+t<";
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("lT1UPu+t<");
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals("lT1UPu+t<", aminoAcidSequence0.toString());
      assertEquals(9, aminoAcidSequence0.length());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: 1
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('l');
      assertEquals(7, int0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Upo^nE");
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, aminoAcidSequence0.length());
      assertEquals("Upo^nE", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      int int1 = AminoAcidSequence.getSymbolIndex('l');
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      char char0 = AminoAcidSequence.getOneLetterCode("Upo^nE");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("Upo^nE", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(".  .  ", aminoAcidSequence1.toString());
      assertEquals(6, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: o
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('j');
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("v-nr}H7JtWmMTI(Gh", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  .  .  .  .  ", aminoAcidSequence0.toString());
      assertEquals(15, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("p;|<-5'A", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals("x  x  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(6, aminoAcidSequence1.length());
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("", "2");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      
      Strand strand0 = bases0.getForwardStrand();
      assertNotNull(strand0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      assertNotNull(aGWindowAlgorithm0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      
      Bases bases1 = aGWindowAlgorithm0.getBases();
      assertNotNull(bases1);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      
      Clipboard clipboard0 = new Clipboard("_j.R54[-{$9SZCyb");
      assertNotNull(clipboard0);
      assertEquals("_j.R54[-{$9SZCyb", clipboard0.getName());
      
      Selection selection0 = new Selection(clipboard0);
      assertNotNull(selection0);
      assertEquals("_j.R54[-{$9SZCyb", clipboard0.getName());
      
      Marker marker0 = selection0.getEndBaseOfSelection();
      assertNull(marker0);
      assertEquals("_j.R54[-{$9SZCyb", clipboard0.getName());
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases1, (Marker) null, false, true, false);
      assertNull(markerRange0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals("x  x  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(6, aminoAcidSequence1.length());
      assertEquals(0, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('&');
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("[CtAG_o<[8mL?}W.<W&", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("......", aminoAcidSequence0.toString());
      assertEquals(6, aminoAcidSequence0.length());
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      FeaturePatternPredicate featurePatternPredicate0 = new FeaturePatternPredicate(aminoAcidSequence0);
      assertNotNull(featurePatternPredicate0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("......", aminoAcidSequence0.toString());
      assertEquals(6, aminoAcidSequence0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featurePatternPredicate0, "[CtAG_o<[8mL?}W.<W&");
      assertNotNull(filteredEntryGroup0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("......", aminoAcidSequence0.toString());
      assertEquals(6, aminoAcidSequence0.length());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("[CtAG_o<[8mL?}W.<W&", filteredEntryGroup0.getFilterName());
      
      Bases bases0 = filteredEntryGroup0.getBases();
      assertNull(bases0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("......", aminoAcidSequence0.toString());
      assertEquals(6, aminoAcidSequence0.length());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("[CtAG_o<[8mL?}W.<W&", filteredEntryGroup0.getFilterName());
      
      Selection selection0 = new Selection((Clipboard) null);
      assertNotNull(selection0);
      
      Marker marker0 = selection0.getHighestBaseOfSelection();
      assertNull(marker0);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.findMatch((Bases) null, (Marker) null, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      String string0 = "qiHO1HdS1W";
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("qiHO1HdS1W", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence1.toString());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("J,+XW/ZaWA| 7K_i#", true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals("x  x  x  x  x  x  ", aminoAcidSequence2.toString());
      assertEquals(18, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("j}PM#=FQ75O`o\"", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals("xxxx", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(4, aminoAcidSequence3.length());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence4.toString());
      assertEquals(21, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getTranslation(aminoAcidSequence4.codon_translation_array, true);
      assertNotNull(aminoAcidSequence5);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence4.toString());
      assertEquals(21, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertFalse(aminoAcidSequence5.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence5.toString());
      assertEquals(21, aminoAcidSequence5.length());
      
      AminoAcidSequence aminoAcidSequence6 = AminoAcidSequence.getTranslation("", false);
      assertNotNull(aminoAcidSequence6);
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence6, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals("", aminoAcidSequence6.toString());
      assertEquals(0, aminoAcidSequence6.length());
      assertFalse(aminoAcidSequence6.containsStopCodon());
      
      AminoAcidSequence.setGeneCode();
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence6));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence6);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      
      boolean boolean0 = AminoAcidSequence.isStopCodon('v');
      assertFalse(boolean0);
      
      char char0 = AminoAcidSequence.getCodonTranslation('v', 'v', '0');
      assertEquals('.', char0);
      
      char char1 = AminoAcidSequence.getSymbolFromIndex(0);
      assertFalse(char1 == char0);
      assertEquals('a', char1);
      
      char char2 = '>';
      int int0 = AminoAcidSequence.getAminoAcidType('>');
      assertEquals(7, int0);
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('v');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AminoAcidSequence aminoAcidSequence7 = AminoAcidSequence.getTranslation("Kqpj:01a<!DN,\"N", false);
      assertNotNull(aminoAcidSequence7);
      assertFalse(aminoAcidSequence7.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence7.equals((Object)aminoAcidSequence6));
      assertFalse(aminoAcidSequence7.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence7.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence7.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence7.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence7.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence7, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence7, aminoAcidSequence6);
      assertNotSame(aminoAcidSequence7, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence7, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence7, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence7, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence7, aminoAcidSequence1);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(5, aminoAcidSequence7.length());
      assertFalse(aminoAcidSequence7.containsStopCodon());
      assertEquals(".....", aminoAcidSequence7.toString());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("Cys", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(".", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      
      char char0 = AminoAcidSequence.getOneLetterCode("internal error - illegal one letter amino acid code");
      assertEquals('\uFFFF', char0);
      
      char char1 = AminoAcidSequence.getOneLetterCode("internal error - illegal one letter amino acid code");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      int int0 = aminoAcidSequence0.length();
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, int0);
      assertEquals(".", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      
      boolean boolean0 = true;
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(".", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      assertEquals(63, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence1.toString());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '\uFFFF';
      charArray0[2] = '\uFFFF';
      charArray0[3] = '\uFFFF';
      charArray0[4] = '\uFFFF';
      charArray0[5] = '\uFFFF';
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence2);
      assertEquals(6, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertArrayEquals(new char[] {'3', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, aminoAcidSequence2.length());
      assertEquals("..", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Cys", "internal error - illegal one letter amino acid code");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(3, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(3, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Feature feature0 = null;
      try {
        feature0 = new Feature((uk.ac.sanger.artemis.io.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('t');
      assertEquals(7, int0);
      
      AminoAcidSequence.setGeneCode();
      int int1 = AminoAcidSequence.getSymbolIndex('I');
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = 't';
      charArray0[2] = 'I';
      charArray0[3] = 't';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[6] = 'I';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'I', 't', 'I', 't', 'I', 'I', 'I'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  ", aminoAcidSequence0.toString());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'S';
      charArray0[2] = 'X';
      charArray0[3] = 'M';
      charArray0[4] = 'H';
      charArray0[5] = 'y';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'a', 'S', 'X', 'M', 'H', 'y'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("xx", aminoAcidSequence0.toString());
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'a', 'S', 'X', 'M', 'H', 'y'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals((-18.015F), float0, 0.01F);
      assertEquals(2, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("xx", aminoAcidSequence0.toString());
      
      int int0 = AminoAcidSequence.getSymbolIndex('*');
      assertEquals(20, int0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(3138);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence(",]");
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(",]", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(",O&(", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(3, aminoAcidSequence1.length());
      assertEquals("x  ", aminoAcidSequence1.toString());
      
      boolean boolean0 = aminoAcidSequence0.containsStopCodon();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(boolean0);
      assertEquals(",]", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('A');
      assertEquals(3, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'A'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      assertEquals(".", aminoAcidSequence0.toString());
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      
      String string0 = "WFs_YO^L13";
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "WFs_YO^L13", false);
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals("CDS", key0.toString());
      assertEquals("CDS", key0.getKeyString());
      assertEquals(3, key0.length());
      
      FilteredEntryGroup filteredEntryGroup0 = null;
      try {
        filteredEntryGroup0 = new FilteredEntryGroup((EntryGroup) null, featureKeyQualifierPredicate0, "WFs_YO^L13");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FilteredEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon(')');
      assertFalse(boolean0);
      
      char char0 = AminoAcidSequence.getSymbolFromIndex(0);
      assertEquals('a', char0);
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'a';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'', 'a'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertEquals(2, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'', 'a'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals(21, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSpacedTranslation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence((String) null);
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertNull(aminoAcidSequence0.toString());
      
      String string0 = "";
      boolean boolean0 = false;
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertNull(aminoAcidSequence0.toString());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence2.toString());
      assertEquals(21, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence1.codon_translation_array, false);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals("............f.......g", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char char0 = AminoAcidSequence.getCodonTranslation('e', 'e', 'e');
      assertEquals('.', char0);
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("LinePushBackReader.pushBack () called twice before calling readLine ()");
      assertNotNull(rawStreamSequence0);
      assertEquals(5, rawStreamSequence0.getCCount());
      assertEquals(1, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(70, rawStreamSequence0.length());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertEquals(57, rawStreamSequence0.getOtherCount());
      assertEquals(6, rawStreamSequence0.getACount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, rawStreamSequence0.getCCount());
      assertEquals(1, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(70, rawStreamSequence0.length());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertEquals(57, rawStreamSequence0.getOtherCount());
      assertEquals(6, rawStreamSequence0.getACount());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      int int0 = AminoAcidSequence.getAminoAcidType('A');
      assertEquals(3, int0);
      
      char char1 = AminoAcidSequence.getOneLetterCode("LinePushBackReader.pushBack () called twice before calling readLine ()");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(bases0.letter_index, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, rawStreamSequence0.getCCount());
      assertEquals(1, rawStreamSequence0.getGCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(70, rawStreamSequence0.length());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertEquals(57, rawStreamSequence0.getOtherCount());
      assertEquals(6, rawStreamSequence0.getACount());
      assertEquals("s  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char char0 = AminoAcidSequence.getSymbolFromIndex(0);
      assertEquals('a', char0);
      
      String string0 = "\\&xef{_!p$fvi";
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("&xef{_!p$fvi");
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(12, aminoAcidSequence0.length());
      assertEquals("&xef{_!p$fvi", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("&xef{_!p$fvi", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals("x  x  x  x  ", aminoAcidSequence1.toString());
      assertEquals(12, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      int int0 = AminoAcidSequence.getSymbolIndex('a');
      assertEquals(0, int0);
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation('a');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ala", string1);
      
      String string2 = "";
      AminoAcidSequence.setGeneCode();
      String string3 = AminoAcidSequence.getThreeLetterAbbreviation('a');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Ala", string3);
      
      int int1 = AminoAcidSequence.getSymbolIndex('a');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: &
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "x9sdDLGO[p";
      boolean boolean0 = false;
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("x9sdDLGO[p", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("...", aminoAcidSequence0.toString());
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt((-2632));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = AminoAcidSequence.getSymbolIndex('A');
      assertEquals(0, int0);
      
      char char0 = AminoAcidSequence.getCodonTranslation('d', 'd', 'A');
      assertEquals('.', char0);
      
      String string0 = "";
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("");
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      
      int int1 = AminoAcidSequence.getSymbolIndex('d');
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getOneLetterCode("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("PasENr/IqwWe");
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals("PasENr/IqwWe", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(12, aminoAcidSequence0.length());
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("PasENr/IqwWe", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(12, aminoAcidSequence0.length());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: /
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('G');
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("_Kgc", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  ", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(3966);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("com.ibm.uvm.tools.DebugSupport", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  ", aminoAcidSequence0.toString());
      assertEquals(30, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("com.ibm.uvm.tools.DebugSupport", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("x  x  x  x  x  x  x  x  x  x  ", aminoAcidSequence1.toString());
      assertEquals(30, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      char char0 = AminoAcidSequence.getOneLetterCode("internal error - illegal one letter amino acid code");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("com.ibm.uvm.tools.DebugSupport", true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals("xxxxxxxxxx", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(10, aminoAcidSequence2.length());
      
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('o');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      char char0 = AminoAcidSequence.getCodonTranslation('a', 'a', 'L');
      assertEquals('.', char0);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(0);
      assertNotNull(string0);
      assertEquals("Ala", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = true;
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("org.biojava.bio.seq.db.BioIndex", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(30, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  ", aminoAcidSequence0.toString());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(30, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  ", aminoAcidSequence0.toString());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence1.toString());
      assertEquals(63, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('v');
      assertNotNull(string0);
      assertEquals("Val", string0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('-');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: -
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('#');
      assertTrue(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("RW\"Y", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      assertEquals("x", aminoAcidSequence0.toString());
      
      String string0 = aminoAcidSequence0.toString();
      assertNotNull(string0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("x", string0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      assertEquals("x", aminoAcidSequence0.toString());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation((-2620));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2620
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation("u<'Z/6$QN!$L%a`9");
      assertEquals('.', char0);
      
      char char1 = AminoAcidSequence.getOneLetterCode("u<'Z/6$QN!$L%a`9");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      int int0 = AminoAcidSequence.getSymbolIndex('.');
      assertEquals(23, int0);
      
      Boolean boolean0 = new Boolean("u<'Z/6$QN!$L%a`9");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals(63, aminoAcidSequence2.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      boolean boolean0 = aminoAcidSequence0.containsStopCodon();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertFalse(boolean0);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('g');
      assertNotNull(string0);
      assertEquals("Gly", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("9");
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, aminoAcidSequence0.length());
      assertEquals("9", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
      
      boolean boolean0 = aminoAcidSequence0.checkForMatch(aminoAcidSequence1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(boolean0);
      assertEquals(1, aminoAcidSequence0.length());
      assertEquals("9", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('\"');
      assertFalse(boolean0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('O');
      assertEquals(7, int0);
      
      char char0 = AminoAcidSequence.getSymbolFromIndex(0);
      assertEquals('a', char0);
      
      char char1 = AminoAcidSequence.getCodonTranslation("<I#d6k");
      assertFalse(char1 == char0);
      assertEquals('.', char1);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(7);
      assertNotNull(string0);
      assertEquals("Gly", string0);
      
      char char2 = AminoAcidSequence.getOneLetterCode("Gly");
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals('g', char2);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation((-3345));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3345
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('\"');
      assertFalse(boolean0);
      
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolFromIndex(1824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1824
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(0);
      assertNotNull(string0);
      assertEquals("Ala", string0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation((-2669));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2669
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "Phe";
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Phe");
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("Phe", aminoAcidSequence0.toString());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("Phe", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence1.toString());
      assertEquals(63, aminoAcidSequence1.length());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("Phe", aminoAcidSequence0.toString());
      assertEquals(63, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence2.toString());
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence1.codon_translation_array, true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("Phe", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence1.toString());
      assertEquals(63, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getTranslation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("'J#|^93`P!$d", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals("....", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(4, aminoAcidSequence0.length());
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals((-54.045F), float0, 0.01F);
      assertEquals("....", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(4, aminoAcidSequence0.length());
      
      int int0 = aminoAcidSequence0.length();
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, int0);
      assertEquals("....", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(4, aminoAcidSequence0.length());
      
      char char0 = AminoAcidSequence.getOneLetterCode("Zf`kp$");
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(8945);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8945
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation("");
      assertEquals('.', char0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("");
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("", false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals("", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      
      float float0 = aminoAcidSequence1.getMolecularWeight();
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(0, aminoAcidSequence2.length());
      
      char char1 = AminoAcidSequence.getCodonTranslation('.', '}', '}');
      assertTrue(char1 == char0);
      assertEquals('.', char1);
      
      int int0 = AminoAcidSequence.getAminoAcidType('F');
      assertEquals(3, int0);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence2.elementAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = '\'';
      charArray0[2] = '%';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'K', '\'', '%'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x", aminoAcidSequence0.toString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      int int0 = aminoAcidSequence0.length();
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, int0);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals(63, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence1.toString());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("", false);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, aminoAcidSequence2.length());
      assertEquals("", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('`');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "";
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("");
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      String string1 = "S(:k";
      char char0 = AminoAcidSequence.getOneLetterCode("S(:k");
      assertEquals('\uFFFF', char0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getOneLetterCode("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("");
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("(6?)z&,Cf", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence0.toString());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "lC@d;=i}z|'xm$J";
      char char0 = AminoAcidSequence.getCodonTranslation("lC@d;=i}z|'xm$J");
      assertEquals('.', char0);
      
      char char1 = AminoAcidSequence.getCodonTranslation('.', ':', ':');
      assertTrue(char1 == char0);
      assertEquals('.', char1);
      
      int int0 = AminoAcidSequence.getAminoAcidType('.');
      assertEquals(7, int0);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('X');
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("lC@d;=i}z|'xm$J", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  x  x  ", aminoAcidSequence0.toString());
      assertEquals(15, aminoAcidSequence0.length());
      
      Bases bases0 = null;
      Feature feature0 = null;
      try {
        feature0 = new Feature((uk.ac.sanger.artemis.io.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation(']', ']', 'f');
      assertEquals('.', char0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('.');
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      int int0 = AminoAcidSequence.getSymbolIndex('y');
      assertEquals(18, int0);
      
      char char0 = AminoAcidSequence.getCodonTranslation("Arg");
      assertEquals('.', char0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('6');
      assertFalse(int1 == int0);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "a a g g g c a c g t c g c a t c g a c t c";
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("a a g g g c a c g t c g c a t c g a c t c");
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(41, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("a a g g g c a c g t c g c a t c g a c t c", aminoAcidSequence0.toString());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(41, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("a a g g g c a c g t c g c a t c g a c t c", aminoAcidSequence0.toString());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence1.toString());
      assertEquals(63, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      char char0 = AminoAcidSequence.getOneLetterCode("org.biojava.bio.symbol.Alignment");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("a a g g g c a c g t c g c a t c g a c t c", true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  x  ", aminoAcidSequence2.toString());
      assertEquals(39, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('X');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "qlEUQZ9g)hXTfwG@3MT";
      char char0 = AminoAcidSequence.getOneLetterCode("qlEUQZ9g)hXTfwG@3MT");
      assertEquals('\uFFFF', char0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\uFFFF';
      charArray0[1] = '\uFFFF';
      charArray0[2] = '\uFFFF';
      charArray0[3] = '\uFFFF';
      charArray0[4] = '\uFFFF';
      charArray0[5] = '\uFFFF';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF'}, charArray0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, aminoAcidSequence0.length());
      assertEquals("..", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('6');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: 6
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolFromIndex(1020);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1020
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        AminoAcidSequence.getTranslation((char[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('`');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'T';
      charArray0[2] = 'c';
      charArray0[3] = 'l';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'R', 'T', 'c', 'l'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Transfer mode set to ");
      assertNotNull(aminoAcidSequence0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Transfer mode set to ", aminoAcidSequence0.toString());
      assertEquals(21, aminoAcidSequence0.length());
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('\"');
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Transfer mode set to ", aminoAcidSequence0.toString());
      assertEquals(21, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(63, aminoAcidSequence1.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence1.toString());
      
      int int0 = AminoAcidSequence.getAminoAcidType('S');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[0];
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('y');
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('`');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation("='c~RT");
      assertEquals('.', char0);
      
      char char1 = AminoAcidSequence.getSymbolFromIndex(0);
      assertFalse(char1 == char0);
      assertEquals('a', char1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("}#J}#=g+", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals("x  x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(6, aminoAcidSequence0.length());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("s<ws^{zoH)Z)Sqa");
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals("s<ws^{zoH)Z)Sqa", aminoAcidSequence0.toString());
      assertEquals(16, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: <
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char char0 = AminoAcidSequence.getOneLetterCode("org.gmod.schema.phylogeny.PhylonodeDbXRef");
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolFromIndex((-1874));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1874
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("2.=vG");
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("2.=vG", aminoAcidSequence0.toString());
      assertEquals(5, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals("2.=vG", aminoAcidSequence0.toString());
      assertEquals(5, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = AminoAcidSequence.getAminoAcidType(';');
      assertEquals(7, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = ';';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {';', ';', ';', ';'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(';');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('C');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(".", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("n6nuF)^y[ aa");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      
      Strand strand0 = bases0.getForwardStrand();
      assertNotNull(strand0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      assertNotNull(aGWindowAlgorithm0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      
      Bases bases1 = aGWindowAlgorithm0.getBases();
      assertNotNull(bases1);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      
      Marker marker0 = strand0.makeMarker(3);
      assertNotNull(marker0);
      assertSame(bases0, bases1);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(3, marker0.getPosition());
      
      MarkerRange markerRange0 = aminoAcidSequence0.findMatch(bases1, marker0, false, false, false);
      assertNull(markerRange0);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(10, fastaStreamSequence0.getOtherCount());
      assertEquals(12, fastaStreamSequence0.length());
      assertEquals(2, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals(3, marker0.getPosition());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1O|q*{*aZxX'/\"#V}Q");
      assertFalse(boolean0);
      
      char char0 = '{';
      int int0 = AminoAcidSequence.getAminoAcidType('{');
      assertEquals(7, int0);
      
      String string0 = "uk.ac.sanger.artemis.io.BlastStreamFeature";
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("uk.ac.sanger.artemis.io.BlastStreamFeature");
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(42, aminoAcidSequence0.length());
      assertEquals("uk.ac.sanger.artemis.io.BlastStreamFeature", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: o
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon(')');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Lys");
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Lys", aminoAcidSequence0.toString());
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(381.43F, float0, 0.01F);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Lys", aminoAcidSequence0.toString());
      
      boolean boolean2 = aminoAcidSequence0.containsStopCodon();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(boolean2);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("Lys", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getCodonTranslation("Lys");
      assertEquals('.', char0);
      
      int int0 = 191;
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(191);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 191
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('K');
      assertEquals(1, int0);
      
      int int1 = AminoAcidSequence.UNKNOWN_AA;
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("Amb", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(".", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      
      char char0 = AminoAcidSequence.getOneLetterCode(" i/o error");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence.setGeneCode();
      char char1 = AminoAcidSequence.getOneLetterCode("Amb");
      assertFalse(char1 == char0);
      assertEquals('+', char1);
      
      char[] charArray0 = new char[1];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      charArray0[0] = '\uFFFF';
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence1);
      assertEquals(1, charArray0.length);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertArrayEquals(new char[] {'\uFFFF'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      
      int int0 = AminoAcidSequence.getAminoAcidType('3');
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'<', '\u0000'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      char char0 = AminoAcidSequence.getOneLetterCode("5rzx^z");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("5rzx^z", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xx", aminoAcidSequence1.toString());
      assertEquals(2, aminoAcidSequence1.length());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      assertNotNull(rawStreamSequence0);
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getTCount());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MarkerRange markerRange0 = aminoAcidSequence1.findMatch(bases0, (Marker) null, false, false, true);
      assertNotNull(markerRange0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xx", aminoAcidSequence1.toString());
      assertEquals(2, aminoAcidSequence1.length());
      assertEquals(6, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(6, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertFalse(markerRange0.isForwardMarker());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence2);
      assertEquals(2, charArray0.length);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertArrayEquals(new char[] {'<', '\u0000'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("wxdvD'", true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("xx", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(2, aminoAcidSequence3.length());
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertEquals(2, charArray0.length);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertArrayEquals(new char[] {'<', '\u0000'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(63, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence4.toString());
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('<');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: <
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      String string0 = "qiHO1HdS1W";
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("qiHO1HdS1W", true);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(3, aminoAcidSequence1.length());
      
      float float0 = aminoAcidSequence1.getMolecularWeight();
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals((-36.03F), float0, 0.01F);
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(3, aminoAcidSequence1.length());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("J,+XW/ZaWA| 7K_i#", true);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals("x  x  x  x  x  x  ", aminoAcidSequence2.toString());
      assertEquals(18, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation(aminoAcidSequence3.codon_translation_array, true);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence4.toString());
      assertEquals(21, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      
      char char0 = AminoAcidSequence.getOneLetterCode("^w~}{Vt#{?X");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence.setGeneCode();
      float float1 = aminoAcidSequence0.getMolecularWeight();
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertNotEquals(float1, float0, 0.01F);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J,+XW/ZaWA| 7K_i#");
      assertFalse(boolean0);
      
      char char1 = AminoAcidSequence.getCodonTranslation('v', 'v', '0');
      assertFalse(char1 == char0);
      assertEquals('.', char1);
      
      char char2 = AminoAcidSequence.getSymbolFromIndex(0);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals('a', char2);
      
      char char3 = '>';
      int int0 = AminoAcidSequence.getAminoAcidType('>');
      assertEquals(7, int0);
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('v');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("nc+", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  ", aminoAcidSequence0.toString());
      
      boolean boolean0 = aminoAcidSequence0.containsStopCodon();
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertFalse(boolean0);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  ", aminoAcidSequence0.toString());
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence.getSymbolIndex('M');
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      AminoAcidSequence.getSpacedTranslation(aminoAcidSequence1.codon_translation_array, true);
      // Undeclared exception!
      try { 
        aminoAcidSequence1.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      AminoAcidSequence.getOneLetterCode("5rzx^z");
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("j,CiIn7E,");
      Bases bases0 = new Bases(fastaStreamSequence0);
      fastaStreamSequence0.setFromChar(aminoAcidSequence1.codon_translation_array);
      aminoAcidSequence1.findMatch(bases0, (Marker) null, true, true, true);
      AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      AminoAcidSequence.getTranslation(charArray0, true);
      String string0 = "wxdvD'";
      AminoAcidSequence.getTranslation("wxdvD'", true);
      AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      AminoAcidSequence.getOneLetterCode("5rzx^6_z");
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("j,CiIn7E,", false);
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("j,CiIn7E,");
      Bases bases0 = new Bases(fastaStreamSequence0);
      aminoAcidSequence1.findMatch(bases0, (Marker) null, true, true, false);
      AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      AminoAcidSequence.getTranslation(charArray0, true);
      aminoAcidSequence1.findMatch(bases0, (Marker) null, false, true, true);
      AminoAcidSequence.getTranslation("xdv6D'", false);
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      // Undeclared exception!
      try { 
        aminoAcidSequence2.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence.getTranslation(charArray0, false);
      AminoAcidSequence.getOneLetterCode("5rzx^z");
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("j,CiIn7E,", true);
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("j,CiIn7E,");
      Bases bases0 = new Bases(fastaStreamSequence0);
      aminoAcidSequence0.findMatch(bases0, (Marker) null, true, true, true);
      AminoAcidSequence.getOneLetterCode("j,CiIn7E,");
      AminoAcidSequence.getTranslation(charArray0, true);
      aminoAcidSequence0.findMatch(bases0, (Marker) null, false, true, true);
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("xdv6D'", false);
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("j,CiIn7E,", true);
      aminoAcidSequence2.getMolecularWeight();
      aminoAcidSequence0.getMolecularWeight();
      aminoAcidSequence1.getMolecularWeight();
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test is flaky")
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      AminoAcidSequence.getOneLetterCode("5rzx^z");
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("5rzx^z");
      Bases bases0 = new Bases(rawStreamSequence0);
      aminoAcidSequence0.findMatch(bases0, (Marker) null, true, true, true);
      AminoAcidSequence.getTranslation(charArray0, true);
      AminoAcidSequence.getSymbolIndex('q');
      AminoAcidSequence.getTranslation("wxdvD'", true);
      AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\uFFFF');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \uFFFF
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test is flaky")
  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '8';
      boolean boolean0 = false;
      AminoAcidSequence.getTranslation(charArray0, false);
      AminoAcidSequence.getSymbolIndex('T');
      AminoAcidSequence.getSpacedTranslation("41'*)7~@u`r/hq@L9?3", false);
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("41'*)7~@u`r/hq@L9?3");
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('/');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("3e");
      AminoAcidSequence.getSpacedTranslation("3e", true);
      char char0 = AminoAcidSequence.getCodonTranslation("3e");
      assertEquals('.', char0);
  }

  @Ignore("Test is flaky")
  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence(".,");
      AminoAcidSequence.getSpacedTranslation(".,", false);
      char char0 = AminoAcidSequence.getOneLetterCode(".,");
      assertEquals('\uFFFF', char0);
  }

  @Ignore("Test not working")
  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      AminoAcidSequence.getCodonTranslation("d'B';NF0k0QWaHne");
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      AminoAcidSequence.getThreeLetterAbbreviation('.');
      char[] charArray1 = new char[6];
      charArray1[0] = '.';
      AminoAcidSequence.getThreeLetterAbbreviation('.');
      charArray1[1] = '.';
      AminoAcidSequence.getSpacedTranslation("---", false);
      AminoAcidSequence.getSymbolIndex('d');
      charArray1[3] = '.';
      charArray1[4] = '.';
      charArray1[5] = '.';
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(charArray1, false);
      AminoAcidSequence.getSymbolIndex('.');
      aminoAcidSequence0.toString();
      aminoAcidSequence0.length();
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      aminoAcidSequence2.toString();
      aminoAcidSequence1.checkForMatch(aminoAcidSequence2);
      AminoAcidSequence.getCodonTranslation("............E.......g");
      int int0 = AminoAcidSequence.getAminoAcidType('-');
      assertEquals(7, int0);
  }
}
