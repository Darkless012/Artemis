/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:01:29 GMT 2018
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.MarkerRange;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MarkerRange_ESTest extends MarkerRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("!~F_&}lj^Syt", "!~F_&}lj^Syt").when(marker0).toString();
      doReturn((-3192), (-1814)).when(marker0).getPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Marker marker1 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("1.VV;", "1.VV;").when(marker1).toString();
      doReturn(550, (-3192)).when(marker1).getPosition();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(marker1, marker1).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange1 = new MarkerRange(strand0, 144, (-1201));
      boolean boolean0 = markerRange0.contains(markerRange1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("xpu-'}8", "xpu-'}8").when(marker0).toString();
      doReturn((-1), 1090).when(marker0).getPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Marker marker1 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("CTm+ksrZ,N=]@Hq'", "CTm+ksrZ,N=]@Hq'").when(marker1).toString();
      doReturn(53, 2551).when(marker1).getPosition();
      MarkerRange markerRange1 = new MarkerRange(marker1);
      boolean boolean0 = markerRange0.contains(markerRange1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("&/v", "in LocationParseNode.getChildren() - node is not a JOIN or ORDER", "internal error - strands do not match", "in LocationParseNode.getChildren() - node is not a JOIN or ORDER", "").when(marker0).toString();
      doReturn(2491, 2491, 2, (-1732), 0).when(marker0).getPosition();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(marker0, marker0).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      boolean boolean0 = markerRange0.overlaps(markerRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("").when(strand0).toString();
      doReturn(true).when(strand0).isForwardStrand();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "", "", "", "").when(marker0).toString();
      doReturn((-1544), (-1544), (-1544), (-1544), 1).when(marker0).getPosition();
      doReturn(2, 1880).when(marker0).getRawPosition();
      doReturn(strand0, (Strand) null).when(marker0).getStrand();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(marker0, marker0).when(strand1).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand1, 2, 2);
      Marker marker1 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "", "").when(marker1).toString();
      doReturn(1, (-1544), 1880).when(marker1).getPosition();
      MarkerRange markerRange1 = new MarkerRange(marker1);
      markerRange0.overlaps(markerRange1);
      Marker marker2 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null, "").when(marker2).toString();
      doReturn((-1544), (-4547), 0).when(marker2).getPosition();
      MarkerRange markerRange2 = new MarkerRange(marker2);
      markerRange0.overlaps(markerRange2);
      // Undeclared exception!
      try { 
        markerRange0.createLocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("xpu-'}8").when(strand0).toString();
      doReturn(true).when(strand0).isForwardStrand();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("xpu-'}8").when(marker0).toString();
      doReturn(strand0).when(marker0).getStrand();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      boolean boolean0 = markerRange0.isForwardMarker();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("CTm+ksrZ,N=]@Hq'").when(marker0).toString();
      doReturn((Strand) null).when(marker0).getStrand();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Strand strand0 = markerRange0.getStrand();
      assertNull(strand0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      Marker marker0 = markerRange0.getStart();
      assertNull(marker0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("").when(strand0).toString();
      doReturn(false).when(strand0).isForwardStrand();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("?OnyM`2mu&`5A", "?OnyM`2mu&`5A", "internal error - unexpected exception: ").when(marker0).toString();
      doReturn((-2020), (-711)).when(marker0).getRawPosition();
      doReturn(strand0).when(marker0).getStrand();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Range range0 = markerRange0.getRawRange();
      assertEquals((-711), range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("?OnyM`2mu&`5A", "?OnyM`2mu&`5A").when(marker0).toString();
      doReturn(2279, 3781).when(marker0).getPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Range range0 = markerRange0.getRange();
      assertEquals(2279, range0.getStart());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(marker0).toString();
      doReturn(0, 0).when(marker0).getPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Range range0 = markerRange0.getRange();
      assertEquals(1, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(marker0).toString();
      doReturn((-161), (-161)).when(marker0).getPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Range range0 = markerRange0.getRange();
      assertEquals((-161), range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Marker) null, (Marker) null).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand0, 1, 1);
      Marker marker0 = markerRange0.getEnd();
      assertNull(marker0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("znP,=pP|}5$Cn", "", "znP,=pP|}5$Cn", "znP,=pP|}5$Cn", "znP,=pP|}5$Cn").when(marker0).toString();
      doReturn(0, 0, 0, 912, 1).when(marker0).getRawPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      int int0 = markerRange0.getCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("xpu-'}8", "xpu-'}8", "xpu-'}8", "xpu-'}8", "xpu-'}8").when(marker0).toString();
      doReturn(0, 0, 0, 0, 0).when(marker0).getRawPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      int int0 = markerRange0.getCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        markerRange0.overlaps(markerRange0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(marker0).toString();
      doReturn((Strand) null).when(marker0).getStrand();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      // Undeclared exception!
      try { 
        markerRange0.isForwardMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Marker) null, (Marker) null).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand0, 1686, 181);
      // Undeclared exception!
      try { 
        markerRange0.getStrand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Marker) null, (Marker) null).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand0, 1, 1);
      // Undeclared exception!
      try { 
        markerRange0.getRawStart();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(marker0).toString();
      doReturn((Strand) null).when(marker0).getStrand();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      // Undeclared exception!
      try { 
        markerRange0.getRawRange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("range bounds must be greater than 0").when(strand0).toString();
      doReturn(false).when(strand0).isForwardStrand();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("internal error - strands do not match", "", "internal error - strands do not match").when(marker0).toString();
      doReturn((-385), (-1392)).when(marker0).getRawPosition();
      doReturn(strand0).when(marker0).getStrand();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(marker0, marker0).when(strand1).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand1, (-2906), (-1708));
      // Undeclared exception!
      try { 
        markerRange0.getRawRange();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: -385 > end: -1392
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Marker) null, (Marker) null).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand0, 1, 2);
      // Undeclared exception!
      try { 
        markerRange0.getRawEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        markerRange0.getRange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Marker) null, (Marker) null).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 2);
      // Undeclared exception!
      try { 
        markerRange0.getCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("xpu-'}8").when(strand0).toString();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strand1).toString();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("xpu-'}8", "xpu-'}8").when(marker0).toString();
      doReturn(strand0, strand1).when(marker0).getStrand();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      // Undeclared exception!
      try { 
        markerRange0.extendRange(markerRange0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - strands do not match
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strand0).toString();
      doReturn(false).when(strand0).isForwardStrand();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("R", (String) null, (String) null).when(marker0).toString();
      doReturn(0, 0).when(marker0).getRawPosition();
      doReturn(strand0).when(marker0).getStrand();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      // Undeclared exception!
      try { 
        markerRange0.createLocation();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: location out of range: 0
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Marker) null, (Marker) null).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand0, (-1), (-2029));
      // Undeclared exception!
      try { 
        markerRange0.contains(markerRange0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MarkerRange markerRange0 = null;
      try {
        markerRange0 = new MarkerRange((Strand) null, (-304), 623);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(marker0).toString();
      doReturn(0, 0).when(marker0).getPosition();
      doReturn((Strand) null, (Strand) null, (Strand) null).when(marker0).getStrand();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      // Undeclared exception!
      try { 
        markerRange0.combineRanges(markerRange0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("").when(strand0).toString();
      doReturn(true).when(strand0).isForwardStrand();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("internal error - strands do not match", "", "internal error - strands do not match").when(marker0).toString();
      doReturn(1, 1).when(marker0).getRawPosition();
      doReturn(strand0).when(marker0).getStrand();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(marker0, marker0).when(strand1).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand1, (-2906), (-1708));
      Range range0 = markerRange0.getRawRange();
      assertEquals(1, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strand0).toString();
      doReturn(false).when(strand0).isForwardStrand();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("R", (String) null, (String) null).when(marker0).toString();
      doReturn(0, 0).when(marker0).getRawPosition();
      doReturn(strand0).when(marker0).getStrand();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Range range0 = markerRange0.getRawRange();
      assertEquals(0, range0.getStart());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(marker0).toString();
      doReturn(0, 0).when(marker0).getRawPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Marker marker1 = markerRange0.getRawEnd();
      assertEquals(0, Marker.LISTENER_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("-eX4Y99{9!", "", "", "6eL>+)ib4f").when(marker0).toString();
      doReturn(4114, 2436).when(marker0).getRawPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Marker marker1 = markerRange0.getRawStart();
      assertEquals(0, Marker.LISTENER_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(marker0).toString();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Marker marker1 = markerRange0.getEnd();
      assertEquals(0, Marker.LISTENER_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strand0).toString();
      doReturn(false).when(strand0).isForwardStrand();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "*1s+f", "A functional must have at least one argument", "*1s+f").when(marker0).toString();
      doReturn(0, 1, 0, 0).when(marker0).getRawPosition();
      doReturn(strand0).when(marker0).getStrand();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      markerRange0.getRawStart();
      // Undeclared exception!
      try { 
        markerRange0.createLocation();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: location out of range: 0
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("'BVF", "'BVF").when(marker0).toString();
      doReturn(1880, 0).when(marker0).getPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      boolean boolean0 = markerRange0.contains(markerRange0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strand0).toString();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("Q<`b {dF! E11").when(marker0).toString();
      doReturn(strand0).when(marker0).getStrand();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(marker0, marker0).when(strand1).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand1, 48, 2);
      Strand strand2 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("").when(strand2).toString();
      Marker marker1 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("uk.ac.sanger.artemis.sequence.MarkerRange").when(marker1).toString();
      doReturn(strand2).when(marker1).getStrand();
      MarkerRange markerRange1 = new MarkerRange(marker1);
      // Undeclared exception!
      try { 
        markerRange1.combineRanges(markerRange0, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - strands do not match
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "", "", "", "").when(marker0).toString();
      doReturn((-1544), (-1544), (-1544), (-1544), 1).when(marker0).getPosition();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(marker0, marker0).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 2);
      boolean boolean0 = markerRange0.overlaps(markerRange0);
      Marker marker1 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null, "").when(marker1).toString();
      doReturn((-1544), (-4547), 0).when(marker1).getPosition();
      MarkerRange markerRange1 = new MarkerRange(marker1);
      boolean boolean1 = markerRange0.overlaps(markerRange1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "", "").when(marker0).toString();
      doReturn((-1544), (-1544), (-1544)).when(marker0).getPosition();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(marker0, marker0).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 2);
      Marker marker1 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null, "").when(marker1).toString();
      doReturn((-1544), (-4547), 0).when(marker1).getPosition();
      MarkerRange markerRange1 = new MarkerRange(marker1);
      boolean boolean0 = markerRange0.overlaps(markerRange1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn(") ~R9ik1$i-]d", "uk.ac.sanger.artemis.sequence.MarkerRange", "uk.ac.sanger.artemis.sequence.MarkerRange", "uk.ac.sanger.artemis.sequence.MarkerRange").when(marker0).toString();
      doReturn((-2906), 10, 10, (-2906)).when(marker0).getPosition();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(marker0, marker0).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand0, 777, 36);
      Marker marker1 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "uk.ac.sanger.artemis.sequence.MarkerRange", (String) null, (String) null).when(marker1).toString();
      doReturn(1880, (-448), 46, (-2105)).when(marker1).getPosition();
      MarkerRange markerRange1 = new MarkerRange(marker1);
      boolean boolean0 = markerRange1.overlaps(markerRange0);
      boolean boolean1 = markerRange0.overlaps(markerRange1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn(") ~R9ik1$i-]d", "uk.ac.sanger.artemis.sequence.MarkerRange", "uk.ac.sanger.artemis.sequence.MarkerRange", "uk.ac.sanger.artemis.sequence.MarkerRange", "uk.ac.sanger.artemis.sequence.MarkerRange").when(marker0).toString();
      doReturn((-2906), 10, 10, (-2906), (-2906)).when(marker0).getPosition();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(marker0, marker0).when(strand0).makeMarker(anyInt());
      MarkerRange markerRange0 = new MarkerRange(strand0, 777, 36);
      boolean boolean0 = markerRange0.overlaps(markerRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("'BVF", "'BVF", "'BVF", "'BVF", "'BVF").when(marker0).toString();
      doReturn((-5), (-1480), (-1480), (-1200)).when(marker0).getRawPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      markerRange0.getRawEnd();
      Marker marker1 = markerRange0.getRawStart();
      assertSame(marker1, marker0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn("UIelSv,9d*>").when(strand0).toString();
      doReturn(false).when(strand0).isForwardStrand();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("UIelSv,9d*>").when(marker0).toString();
      doReturn(strand0).when(marker0).getStrand();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      boolean boolean0 = markerRange0.isForwardMarker();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn("os1xt82)n=oM", "os1xt82)n=oM", "=:_8UB&", "complement", "os1xt82)n=oM").when(marker0).toString();
      doReturn((-367), 260, (-367), 3237, 2851).when(marker0).getRawPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      int int0 = markerRange0.getCount();
      assertEquals((-3217), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(marker0).toString();
      doReturn((-1), (-2068)).when(marker0).getPosition();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      // Undeclared exception!
      try { 
        markerRange0.getRange();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: -1 > end: -2068
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }
}
