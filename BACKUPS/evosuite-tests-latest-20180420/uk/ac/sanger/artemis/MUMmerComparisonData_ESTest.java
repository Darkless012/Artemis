/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:22:16 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.AlignMatch;
import uk.ac.sanger.artemis.MUMmerComparisonData;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MUMmerComparisonData_ESTest extends MUMmerComparisonData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn("uk.ac.sanger.artemis.sequence.Bases").when(linePushBackReader0).readLine();
      MUMmerComparisonData mUMmerComparisonData0 = null;
      try {
        mUMmerComparisonData0 = new MUMmerComparisonData(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // unable to understand this line: uk.ac.sanger.artemis.sequence.Bases
         //
         verifyException("uk.ac.sanger.artemis.MUMmerComparisonData", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn(" ", (String) null).when(linePushBackReader0).readLine();
      MUMmerComparisonData mUMmerComparisonData0 = new MUMmerComparisonData(linePushBackReader0);
      mUMmerComparisonData0.getNewSimpleComparisonData();
      mUMmerComparisonData0.getNewSimpleComparisonData();
      String string0 = "sda";
      try { 
        mUMmerComparisonData0.makeMatchFromString(string0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unable to understand this line: sda
         //
         verifyException("uk.ac.sanger.artemis.MUMmerComparisonData", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MUMmerComparisonData mUMmerComparisonData0 = null;
      try {
        mUMmerComparisonData0 = new MUMmerComparisonData((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.SimpleComparisonData", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinePushBackReader linePushBackReader0 = mock(LinePushBackReader.class, new ViolatedAssumptionAnswer());
      doReturn(">", (String) null).when(linePushBackReader0).readLine();
      MUMmerComparisonData mUMmerComparisonData0 = new MUMmerComparisonData(linePushBackReader0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MUMmerComparisonData mUMmerComparisonData0 = new MUMmerComparisonData();
      AlignMatch alignMatch0 = mUMmerComparisonData0.makeMatchFromString("internal error - unreachable code");
      assertNull(alignMatch0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MUMmerComparisonData mUMmerComparisonData0 = new MUMmerComparisonData();
      AlignMatch alignMatch0 = mUMmerComparisonData0.makeMatchFromString((String) null);
      assertNull(alignMatch0);
  }
}
