/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 10:49:20 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.StringReader;
import org.biojava.bio.seq.db.DummySequenceDB;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.FeatureKeyQualifierPredicate;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.Options;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.components.LogReadListener;
import uk.ac.sanger.artemis.io.BioJavaSequence;
import uk.ac.sanger.artemis.io.BlastDocumentEntry;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.EmblDocumentEntry;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.Entry;
import uk.ac.sanger.artemis.io.EntryInformation;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.Feature;
import uk.ac.sanger.artemis.io.GenbankDocumentEntry;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.MSPcrunchEntryInformation;
import uk.ac.sanger.artemis.io.PublicDBDocumentEntry;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.io.SimpleEntryInformation;
import uk.ac.sanger.artemis.io.StreamSequence;
import uk.ac.sanger.artemis.util.Document;
import uk.ac.sanger.artemis.util.FileDocument;
import uk.ac.sanger.artemis.util.LinePushBackReader;
import uk.ac.sanger.artemis.util.TextDocument;
import uk.ac.sanger.artemis.util.ZipFileDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class PublicDBDocumentEntry_ESTest extends PublicDBDocumentEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Key key0 = new Key("");
      Key key1 = PublicDBDocumentEntry.mapKeys(key0);
      assertEquals("", key1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      BlastDocumentEntry blastDocumentEntry0 = new BlastDocumentEntry(mSPcrunchEntryInformation0);
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(blastDocumentEntry0);
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("d}qpmrg7RYr1x;#sv~N", "d}qpmrg7RYr1x;#sv~N");
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(fastaStreamSequence0);
      StreamSequence streamSequence0 = emblDocumentEntry0.makeNativeSequence(emblStreamSequence0);
      assertEquals(1, streamSequence0.getGCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EntryInformation entryInformation0 = Options.getArtemisEntryInformation();
      GenbankDocumentEntry genbankDocumentEntry0 = new GenbankDocumentEntry(entryInformation0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("p.:jatai\"u)w%c#l^i");
      GenbankStreamSequence genbankStreamSequence0 = (GenbankStreamSequence)genbankDocumentEntry0.makeNativeSequence(emblStreamSequence0);
      assertNull(genbankStreamSequence0.getHeader());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        PublicDBDocumentEntry.mapKeys((Key) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PublicDBDocumentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EntryInformation entryInformation0 = SimpleEntryInformation.getDefaultEntryInformation();
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(entryInformation0);
      DummySequenceDB dummySequenceDB0 = new DummySequenceDB("Refresh");
      org.biojava.bio.seq.Sequence sequence0 = dummySequenceDB0.getSequence("g8nIJsM.&$05;[");
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence(sequence0);
      // Undeclared exception!
      try { 
        emblDocumentEntry0.makeNativeSequence(bioJavaSequence0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.io.BioJavaSequence cannot be cast to uk.ac.sanger.artemis.io.StreamSequence
         //
         verifyException("uk.ac.sanger.artemis.io.EmblStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Key key0 = new Key("m,o($a1", false);
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "m,o($a1", (String) null, false, false, false);
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "");
      uk.ac.sanger.artemis.Entry entry0 = filteredEntryGroup0.createEntry("8Mn8(ja&R");
      EntryInformation entryInformation0 = entry0.getEntryInformation();
      LogReadListener logReadListener0 = new LogReadListener("text");
      PublicDBDocumentEntry publicDBDocumentEntry0 = null;
      try {
        publicDBDocumentEntry0 = new PublicDBDocumentEntry(entryInformation0, (Document) null, logReadListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleDocumentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      File file0 = MockFile.createTempFile("mC=", "mC=");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "VoKkB.*q981KJXCX}TX");
      Document document0 = zipFileDocument0.getParent();
      LogReadListener logReadListener0 = new LogReadListener("VoKkB.*q981KJXCX}TX");
      PublicDBDocumentEntry publicDBDocumentEntry0 = null;
      try {
        publicDBDocumentEntry0 = new PublicDBDocumentEntry(entryInformation0, document0, logReadListener0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PublicDBDocumentEntry publicDBDocumentEntry0 = null;
      try {
        publicDBDocumentEntry0 = new PublicDBDocumentEntry((EntryInformation) null, (Entry) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleEntryInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PublicDBDocumentEntry publicDBDocumentEntry0 = null;
      try {
        publicDBDocumentEntry0 = new PublicDBDocumentEntry((EntryInformation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleEntryInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      BlastDocumentEntry blastDocumentEntry0 = new BlastDocumentEntry(blastEntryInformation0);
      PublicDBDocumentEntry publicDBDocumentEntry0 = new PublicDBDocumentEntry(blastEntryInformation0, blastDocumentEntry0, true);
      assertFalse(publicDBDocumentEntry0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile(",)d\"<+-k:]n*fMc", ";with=");
      FileDocument fileDocument0 = new FileDocument(file0);
      LogReadListener logReadListener0 = new LogReadListener("%-;~Bw");
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      PublicDBDocumentEntry publicDBDocumentEntry0 = new PublicDBDocumentEntry(mSPcrunchEntryInformation0, fileDocument0, logReadListener0);
      assertTrue(PublicDBDocumentEntry.IGNORE_OBSOLETE_FEATURES);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(mSPcrunchEntryInformation0);
      StringReader stringReader0 = new StringReader("<jFdO^f`]}m");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      StreamSequence streamSequence0 = emblDocumentEntry0.makeNativeSequence(emblStreamSequence0);
      assertEquals(0, streamSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      PublicDBDocumentEntry publicDBDocumentEntry0 = new PublicDBDocumentEntry(entryInformation0);
      // Undeclared exception!
      try { 
        publicDBDocumentEntry0.makeNativeSequence((Sequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GenbankStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Key key0 = new Key("pseudogenic_exon");
      Key key1 = PublicDBDocumentEntry.mapKeys(key0);
      assertEquals(3, key1.length());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      BlastDocumentEntry blastDocumentEntry0 = new BlastDocumentEntry(simpleEntryInformation0);
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(blastDocumentEntry0);
      // Undeclared exception!
      try { 
        emblDocumentEntry0.makeNativeFeature((Feature) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PublicDBDocumentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EntryInformation entryInformation0 = SimpleEntryInformation.getDefaultEntryInformation();
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(entryInformation0);
      Key key0 = new Key("CF9T&Gt}W^Z", true);
      // Undeclared exception!
      try { 
        emblDocumentEntry0.createFeature(key0, (Location) null, (QualifierVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.FeatureTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      PublicDBDocumentEntry publicDBDocumentEntry0 = new PublicDBDocumentEntry(entryInformation0);
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = blastEntryInformation0.getDefaultKey();
      QualifierVector qualifierVector0 = new QualifierVector();
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature(key0, (Location) null, qualifierVector0);
      Object object0 = publicDBDocumentEntry0.makeNativeFeature(genbankStreamFeature0, false);
      assertNotNull(object0);
      assertNotSame(object0, genbankStreamFeature0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(mSPcrunchEntryInformation0);
      // Undeclared exception!
      try { 
        emblDocumentEntry0.makeNativeFeature((Feature) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PublicDBDocumentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EntryInformation entryInformation0 = SimpleEntryInformation.getDefaultEntryInformation();
      TextDocument textDocument0 = new TextDocument();
      LogReadListener logReadListener0 = new LogReadListener("");
      PublicDBDocumentEntry publicDBDocumentEntry0 = null;
      try {
        publicDBDocumentEntry0 = new PublicDBDocumentEntry(entryInformation0, textDocument0, logReadListener0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = PublicDBDocumentEntry.getDatabaseQualifiersToRemove();
      assertEquals(8, objectArray0.length);
      
      Key key0 = new Key("shared_id");
      Key key1 = PublicDBDocumentEntry.mapKeys(key0);
      assertEquals("shared_id", key1.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EntryInformation entryInformation0 = Options.getArtemisEntryInformation();
      GenbankDocumentEntry genbankDocumentEntry0 = new GenbankDocumentEntry(entryInformation0);
      PublicDBDocumentEntry publicDBDocumentEntry0 = new PublicDBDocumentEntry(entryInformation0, genbankDocumentEntry0, true);
  }
}
