/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:49:12 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.io.BlastDocumentEntry;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.EmblDocumentEntry;
import uk.ac.sanger.artemis.io.Entry;
import uk.ac.sanger.artemis.io.IndexFastaStream;
import uk.ac.sanger.artemis.io.PublicDBDocumentEntry;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IndexFastaStream_ESTest extends IndexFastaStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[8];
      IndexFastaStream.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      IndexFastaStream.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      IndexFastaStream indexFastaStream0 = null;
      try {
        indexFastaStream0 = new IndexFastaStream(entry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.io.Entry$MockitoMock$445652628 cannot be cast to uk.ac.sanger.artemis.io.DocumentEntry
         //
         verifyException("uk.ac.sanger.artemis.io.IndexFastaStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Kbk#i^o}9Rnl1i?4dd";
      IndexFastaStream.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "http:o^}u'xrXC[uJng";
      IndexFastaStream.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertNotNull(blastEntryInformation0);
      
      BlastDocumentEntry blastDocumentEntry0 = new BlastDocumentEntry(blastEntryInformation0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertTrue(blastDocumentEntry0.isReadOnly());
      assertNotNull(blastDocumentEntry0);
      
      boolean boolean0 = IndexFastaStream.isIndexed(blastDocumentEntry0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertTrue(blastDocumentEntry0.isReadOnly());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = IndexFastaStream.isIndexed(entry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertNotNull(simpleEntryGroup0);
      
      uk.ac.sanger.artemis.Entry entry0 = simpleEntryGroup0.createEntry("T(l5R8O6G<z/|FDEn");
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertNotNull(entry0);
      
      EmblDocumentEntry emblDocumentEntry0 = (EmblDocumentEntry)entry0.getEMBLEntry();
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(emblDocumentEntry0.isReadOnly());
      assertNotNull(emblDocumentEntry0);
      assertTrue(PublicDBDocumentEntry.IGNORE_OBSOLETE_FEATURES);
      
      IndexFastaStream indexFastaStream0 = null;
      try {
        indexFastaStream0 = new IndexFastaStream(emblDocumentEntry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read non-existent file: file:///Users/kp11/workspace/applications/Artemis-build-ci/Artemis/T(l%7F5R8O6G%3Cz/%7CFDEn.fai
         //
         verifyException("htsjdk.samtools.util.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, (uk.ac.sanger.artemis.FeatureVector) null, "l:");
      uk.ac.sanger.artemis.Entry entry0 = filteredEntryGroup0.createEntry("F");
      Entry entry1 = entry0.getEMBLEntry();
      IndexFastaStream indexFastaStream0 = null;
      try {
        indexFastaStream0 = new IndexFastaStream(entry1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read non-existent file: file:///Users/kp11/workspace/applications/Artemis-build-ci/Artemis/F.fai
         //
         verifyException("htsjdk.samtools.util.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      BlastDocumentEntry blastDocumentEntry0 = new BlastDocumentEntry(blastEntryInformation0);
      IndexFastaStream indexFastaStream0 = null;
      try {
        indexFastaStream0 = new IndexFastaStream(blastDocumentEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.IndexFastaStream", e);
      }
  }
}
