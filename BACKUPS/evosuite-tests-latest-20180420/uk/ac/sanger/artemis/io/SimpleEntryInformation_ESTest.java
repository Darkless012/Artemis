/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:21:28 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.EntryInformation;
import uk.ac.sanger.artemis.io.InvalidKeyException;
import uk.ac.sanger.artemis.io.InvalidQualifierException;
import uk.ac.sanger.artemis.io.InvalidRelationException;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.KeyVector;
import uk.ac.sanger.artemis.io.MSPcrunchEntryInformation;
import uk.ac.sanger.artemis.io.Qualifier;
import uk.ac.sanger.artemis.io.QualifierInfo;
import uk.ac.sanger.artemis.io.SimpleEntryInformation;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SimpleEntryInformation_ESTest extends SimpleEntryInformation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      StringVector stringVector0 = new StringVector("");
      Qualifier qualifier0 = new Qualifier("{PJ", stringVector0);
      InvalidQualifierException invalidQualifierException0 = new InvalidQualifierException("Ira5<+[r'k7-UF}5j_", qualifier0);
      simpleEntryInformation0.fixException(invalidQualifierException0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("{PJ", (-2772), (KeyVector) null, (KeyVector) null, true);
      try { 
        simpleEntryInformation0.addQualifierInfo(qualifierInfo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // qualifier {PJ used with conflicting types
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleEntryInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      assertFalse(blastEntryInformation0.useEMBLFormat());
      
      blastEntryInformation0.setEMBLFormat(true);
      boolean boolean0 = blastEntryInformation0.useEMBLFormat();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      Key key0 = new Key("", true);
      KeyVector keyVector0 = new KeyVector(key0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("", 1794, keyVector0, keyVector0, false);
      mSPcrunchEntryInformation0.addQualifierInfo(qualifierInfo0);
      mSPcrunchEntryInformation0.isRequiredQualifier(key0, "");
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      Key key0 = new Key("#IA!\u0001=90gtG~", false);
      mSPcrunchEntryInformation0.addKey(key0);
      mSPcrunchEntryInformation0.getUserKeys();
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      StringVector stringVector0 = new StringVector("{PJ");
      Qualifier qualifier0 = new Qualifier("{PJ", stringVector0);
      InvalidQualifierException invalidQualifierException0 = new InvalidQualifierException("{PJ", qualifier0);
      simpleEntryInformation0.fixException(invalidQualifierException0);
      simpleEntryInformation0.getQualifierInfo("{PJ");
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      QualifierInfo qualifierInfo0 = new QualifierInfo("conflicting types", 43, (KeyVector) null, (KeyVector) null, false);
      simpleEntryInformation0.addQualifierInfo(qualifierInfo0);
      simpleEntryInformation0.getQualifierInfo("conflicting types");
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      QualifierInfo qualifierInfo0 = new QualifierInfo("", (-2772), (KeyVector) null, (KeyVector) null, true);
      simpleEntryInformation0.addQualifierInfo(qualifierInfo0);
      simpleEntryInformation0.getQualifierInfo("");
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      Key key0 = new Key("", true);
      KeyVector keyVector0 = new KeyVector(key0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("", 1794, keyVector0, keyVector0, false);
      mSPcrunchEntryInformation0.addQualifierInfo(qualifierInfo0);
      Key key1 = mSPcrunchEntryInformation0.getDefaultKey();
      assertSame(key1, key0);
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      StringVector stringVector0 = new StringVector("");
      Qualifier qualifier0 = new Qualifier("{PJ", stringVector0);
      InvalidQualifierException invalidQualifierException0 = new InvalidQualifierException("Ira5<+[r'k7-UF}5j_", qualifier0);
      simpleEntryInformation0.fixException(invalidQualifierException0);
      // Undeclared exception!
      try { 
        simpleEntryInformation0.isRequiredQualifier((Key) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = new Key((String) null);
      Qualifier qualifier0 = new Qualifier();
      InvalidRelationException invalidRelationException0 = new InvalidRelationException((String) null, key0, qualifier0);
      // Undeclared exception!
      try { 
        blastEntryInformation0.fixException(invalidRelationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      InvalidRelationException invalidRelationException0 = new InvalidRelationException("internal error - unexpected exception: ", (Key) null);
      // Undeclared exception!
      try { 
        blastEntryInformation0.fixException(invalidRelationException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      // Undeclared exception!
      try { 
        mSPcrunchEntryInformation0.addQualifierInfo((QualifierInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleEntryInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      Key key0 = mSPcrunchEntryInformation0.getDefaultKey();
      KeyVector keyVector0 = new KeyVector(key0);
      keyVector0.add((Object) mSPcrunchEntryInformation0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("@aA8", 0, keyVector0, keyVector0, true);
      // Undeclared exception!
      try { 
        mSPcrunchEntryInformation0.addQualifierInfo(qualifierInfo0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.io.MSPcrunchEntryInformation cannot be cast to uk.ac.sanger.artemis.io.Key
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleEntryInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = Key.CDS;
      blastEntryInformation0.addKey(key0);
      Key key1 = new Key((String) null, false);
      // Undeclared exception!
      try { 
        blastEntryInformation0.addKey(key1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Key", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      // Undeclared exception!
      try { 
        mSPcrunchEntryInformation0.addKey((Key) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = null;
      try {
        simpleEntryInformation0 = new SimpleEntryInformation((EntryInformation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleEntryInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      blastEntryInformation0.getAllQualifierInfo();
      assertFalse(blastEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      KeyVector keyVector0 = new KeyVector();
      QualifierInfo qualifierInfo0 = new QualifierInfo("htsjdk.variant.variantcontext.VariantContext$Type", 0, keyVector0, keyVector0, true);
      mSPcrunchEntryInformation0.addQualifierInfo(qualifierInfo0);
      mSPcrunchEntryInformation0.getAllQualifierInfo();
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      KeyVector keyVector0 = new KeyVector();
      QualifierInfo qualifierInfo0 = new QualifierInfo("htsjdk.variant.variantcontext.VariantContext$Type", 0, keyVector0, keyVector0, true);
      mSPcrunchEntryInformation0.addQualifierInfo(qualifierInfo0);
      mSPcrunchEntryInformation0.getQualifierInfo("");
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      mSPcrunchEntryInformation0.getQualifierInfo("");
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = Key.CDS;
      blastEntryInformation0.addKey(key0);
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation(blastEntryInformation0);
      Key key1 = blastEntryInformation0.getDefaultKey();
      boolean boolean0 = simpleEntryInformation0.isValidKey(key1);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
      assertEquals(12, key1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = blastEntryInformation0.getDefaultKey();
      blastEntryInformation0.isValidKey(key0);
      assertEquals("misc_feature", key0.toString());
      assertFalse(blastEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = Key.CDS;
      blastEntryInformation0.addKey(key0);
      blastEntryInformation0.getValidKeys();
      assertFalse(blastEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      blastEntryInformation0.getValidKeys();
      assertFalse(blastEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      simpleEntryInformation0.getUserKeys();
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      boolean boolean0 = simpleEntryInformation0.useEMBLFormat();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("4#oI] wma w;t");
      InvalidRelationException invalidRelationException0 = new InvalidRelationException((String) null, key0);
      simpleEntryInformation0.fixException(invalidRelationException0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("Bt", false);
      InvalidKeyException invalidKeyException0 = new InvalidKeyException("", key0);
      simpleEntryInformation0.fixException(invalidKeyException0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EntryInformation entryInformation0 = SimpleEntryInformation.getDefaultEntryInformation();
      Key key0 = entryInformation0.getDefaultKey();
      Qualifier qualifier0 = new Qualifier(",m)Q", (StringVector) null);
      InvalidRelationException invalidRelationException0 = new InvalidRelationException("conflicting types", key0, qualifier0);
      entryInformation0.fixException(invalidRelationException0);
      entryInformation0.fixException(invalidRelationException0);
      assertEquals("misc_feature", key0.getKeyString());
      assertFalse(entryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = Key.CDS;
      blastEntryInformation0.addKey(key0);
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation(blastEntryInformation0);
      Key key1 = blastEntryInformation0.getDefaultKey();
      simpleEntryInformation0.addKey(key1);
      boolean boolean0 = simpleEntryInformation0.isValidKey(key1);
      assertTrue(boolean0);
      assertEquals("misc_feature", key1.toString());
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = Key.CDS;
      blastEntryInformation0.addKey(key0);
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation(blastEntryInformation0);
      Key key1 = simpleEntryInformation0.getDefaultKey();
      assertFalse(simpleEntryInformation0.useEMBLFormat());
      assertEquals("CDS", key1.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("{PJ");
      QualifierInfo qualifierInfo0 = new QualifierInfo("", (-2772), (KeyVector) null, (KeyVector) null, true);
      simpleEntryInformation0.addQualifierInfo(qualifierInfo0);
      simpleEntryInformation0.isRequiredQualifier(key0, "");
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = Key.CDS;
      Qualifier qualifier0 = new Qualifier(";wG-{Qdz", ";wG-{Qdz");
      InvalidQualifierException invalidQualifierException0 = new InvalidQualifierException(";wG-{Qdz", qualifier0);
      simpleEntryInformation0.fixException(invalidQualifierException0);
      boolean boolean0 = simpleEntryInformation0.isRequiredQualifier(key0, "qF)G6./c4|1~a");
      assertFalse(boolean0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = Key.CDS;
      simpleEntryInformation0.addKey(key0);
      Key key1 = simpleEntryInformation0.getDefaultKey();
      boolean boolean0 = simpleEntryInformation0.isRequiredQualifier(key1, "qF)G6./c4|1~a");
      assertFalse(boolean0);
      assertEquals("misc_feature", key1.toString());
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = Key.CDS;
      simpleEntryInformation0.addKey(key0);
      boolean boolean0 = simpleEntryInformation0.isRequiredQualifier(key0, "qF)G6./c4|1~a");
      assertFalse(boolean0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      StringVector stringVector0 = new StringVector("");
      Qualifier qualifier0 = new Qualifier("{PJ", stringVector0);
      InvalidQualifierException invalidQualifierException0 = new InvalidQualifierException("Ira5<+[r'k7-UF}5j_", qualifier0);
      simpleEntryInformation0.fixException(invalidQualifierException0);
      Key key0 = simpleEntryInformation0.getDefaultKey();
      simpleEntryInformation0.isValidQualifier(key0, "{PJ");
      assertEquals("misc_feature", key0.toString());
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = blastEntryInformation0.getDefaultKey();
      QualifierInfo qualifierInfo0 = new QualifierInfo("Duplicate allele added to VariantContext: ", 857, (KeyVector) null, (KeyVector) null, true);
      blastEntryInformation0.addQualifierInfo(qualifierInfo0);
      boolean boolean0 = blastEntryInformation0.isValidQualifier(key0, "");
      assertFalse(blastEntryInformation0.useEMBLFormat());
      assertEquals("misc_feature", key0.getKeyString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = Key.CDS;
      blastEntryInformation0.addKey(key0);
      Key key1 = blastEntryInformation0.getDefaultKey();
      boolean boolean0 = blastEntryInformation0.isValidQualifier(key1, "qzN");
      assertEquals(12, key1.length());
      assertTrue(boolean0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = Key.CDS;
      simpleEntryInformation0.addKey(key0);
      boolean boolean0 = simpleEntryInformation0.isValidQualifier(key0, "(2BPd$\bP$}8J0~`");
      assertTrue(boolean0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      StringVector stringVector0 = new StringVector("");
      Qualifier qualifier0 = new Qualifier("{PJ", stringVector0);
      InvalidQualifierException invalidQualifierException0 = new InvalidQualifierException("Ira5<+[r'k7-UF}5j_", qualifier0);
      simpleEntryInformation0.fixException(invalidQualifierException0);
      boolean boolean0 = simpleEntryInformation0.isValidQualifier("");
      assertFalse(boolean0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      StringVector stringVector0 = new StringVector("");
      Qualifier qualifier0 = new Qualifier("{PJ", stringVector0);
      InvalidQualifierException invalidQualifierException0 = new InvalidQualifierException("Ira5<+[r'k7-UF}5j_", qualifier0);
      simpleEntryInformation0.fixException(invalidQualifierException0);
      boolean boolean0 = simpleEntryInformation0.isValidQualifier("{PJ");
      assertFalse(simpleEntryInformation0.useEMBLFormat());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      boolean boolean0 = simpleEntryInformation0.isValidQualifier("BUG: Attempting to add null filters at");
      assertTrue(boolean0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Qualifier qualifier0 = new Qualifier(";wG-{Qdz", ";wG-{Qdz");
      InvalidQualifierException invalidQualifierException0 = new InvalidQualifierException(";wG-{Qdz", qualifier0);
      simpleEntryInformation0.fixException(invalidQualifierException0);
      // Undeclared exception!
      try { 
        simpleEntryInformation0.isValidQualifier((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = Key.CDS;
      Qualifier qualifier0 = new Qualifier(";wG-{Qdz", ";wG-{Qdz");
      InvalidQualifierException invalidQualifierException0 = new InvalidQualifierException(";wG-{Qdz", qualifier0);
      simpleEntryInformation0.fixException(invalidQualifierException0);
      StringVector stringVector0 = simpleEntryInformation0.getRequiredQualifiers(key0);
      assertNull(stringVector0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = Key.CDS;
      simpleEntryInformation0.getRequiredQualifiers(key0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("4#oI] wma w;t");
      KeyVector keyVector0 = new KeyVector(key0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("source", (-396), keyVector0, keyVector0, true);
      simpleEntryInformation0.addQualifierInfo(qualifierInfo0);
      StringVector stringVector0 = simpleEntryInformation0.getRequiredQualifiers(key0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
      assertNotNull(stringVector0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      KeyVector keyVector0 = new KeyVector();
      QualifierInfo qualifierInfo0 = new QualifierInfo("v:j#7NIX5z}v(S(8", (-3004), keyVector0, keyVector0, false);
      simpleEntryInformation0.addQualifierInfo(qualifierInfo0);
      Key key0 = new Key("v:j#7NIX5z}v(S(8", false);
      StringVector stringVector0 = simpleEntryInformation0.getValidQualifierNames(key0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
      assertNull(stringVector0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("4#oI] wma w;t");
      simpleEntryInformation0.getValidQualifierNames(key0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = Key.CDS;
      Qualifier qualifier0 = new Qualifier(";wG-{Qdz", ";wG-{Qdz");
      InvalidQualifierException invalidQualifierException0 = new InvalidQualifierException(";wG-{Qdz", qualifier0);
      simpleEntryInformation0.fixException(invalidQualifierException0);
      StringVector stringVector0 = simpleEntryInformation0.getValidQualifierNames(key0);
      assertNotNull(stringVector0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      blastEntryInformation0.getSortedValidKeys();
      assertFalse(blastEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("4#oI] wma w;t");
      simpleEntryInformation0.addKey(key0);
      KeyVector keyVector0 = simpleEntryInformation0.getSortedValidKeys();
      assertFalse(simpleEntryInformation0.useEMBLFormat());
      assertNotNull(keyVector0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("4#oI] wma w;t");
      simpleEntryInformation0.addKey(key0);
      Key key1 = Key.CDS;
      KeyVector keyVector0 = new KeyVector(key1);
      QualifierInfo qualifierInfo0 = new QualifierInfo("source", (-396), keyVector0, keyVector0, true);
      simpleEntryInformation0.addQualifierInfo(qualifierInfo0);
      KeyVector keyVector1 = simpleEntryInformation0.getValidKeys();
      assertEquals(2, keyVector1.size());
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("4#oI] wma w;t");
      simpleEntryInformation0.addKey(key0);
      KeyVector keyVector0 = new KeyVector(key0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("source", (-396), keyVector0, keyVector0, true);
      simpleEntryInformation0.addQualifierInfo(qualifierInfo0);
      simpleEntryInformation0.getValidKeys();
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("4#oI] wma w;t");
      KeyVector keyVector0 = new KeyVector(key0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("source", (-396), keyVector0, keyVector0, true);
      simpleEntryInformation0.addQualifierInfo(qualifierInfo0);
      KeyVector keyVector1 = simpleEntryInformation0.getValidKeys();
      assertFalse(simpleEntryInformation0.useEMBLFormat());
      assertNotNull(keyVector1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("4#oI] wma w;t");
      KeyVector keyVector0 = new KeyVector(key0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("source", (-396), keyVector0, keyVector0, true);
      simpleEntryInformation0.addQualifierInfo(qualifierInfo0);
      simpleEntryInformation0.addQualifierInfo(qualifierInfo0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = Key.CDS;
      KeyVector keyVector0 = new KeyVector(key0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("n'p: ;^", 0, keyVector0, (KeyVector) null, true);
      blastEntryInformation0.addQualifierInfo(qualifierInfo0);
      blastEntryInformation0.addQualifierInfo(qualifierInfo0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      QualifierInfo qualifierInfo0 = new QualifierInfo("", (-2040), (KeyVector) null, (KeyVector) null, true);
      blastEntryInformation0.addQualifierInfo(qualifierInfo0);
      blastEntryInformation0.addQualifierInfo(qualifierInfo0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = Key.CDS;
      blastEntryInformation0.addKey(key0);
      blastEntryInformation0.addKey(key0);
      assertFalse(blastEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = Key.CDS;
      blastEntryInformation0.addKey(key0);
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation(blastEntryInformation0);
      boolean boolean0 = simpleEntryInformation0.isValidKey(key0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      QualifierInfo qualifierInfo0 = new QualifierInfo("", (-2040), (KeyVector) null, (KeyVector) null, true);
      blastEntryInformation0.addQualifierInfo(qualifierInfo0);
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation(blastEntryInformation0);
      assertFalse(simpleEntryInformation0.useEMBLFormat());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EntryInformation entryInformation0 = SimpleEntryInformation.getDefaultEntryInformation();
      Qualifier qualifier0 = new Qualifier("\" variable.");
      InvalidQualifierException invalidQualifierException0 = new InvalidQualifierException("\" variable.", qualifier0);
      entryInformation0.fixException(invalidQualifierException0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("\" variable.", 24, (KeyVector) null, (KeyVector) null, true);
      try { 
        entryInformation0.addQualifierInfo(qualifierInfo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // qualifier \" variable. used with conflicting types
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleEntryInformation", e);
      }
  }
}
