/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:26:55 GMT 2018
 */

package uk.ac.sanger.artemis.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.util.zip.ZipException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.util.Document;
import uk.ac.sanger.artemis.util.FileDocument;
import uk.ac.sanger.artemis.util.InputStreamProgressListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FileDocument_ESTest extends FileDocument_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("Y>$", "Y>$");
      FileDocument fileDocument0 = new FileDocument(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = fileDocument0.getParent();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+p72SwL}>{G*[dw", "+p72SwL}>{G*[dw");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      Document document0 = fileDocument0.getParent();
      assertFalse(document0.writable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getName();
      doReturn((String) null).when(file0).toString();
      FileDocument fileDocument0 = new FileDocument(file0);
      String string0 = fileDocument0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      String string0 = fileDocument0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      FileDocument fileDocument0 = new FileDocument(file0);
      fileDocument0.setLocation((Object) null);
      File file1 = fileDocument0.getFile();
      assertNull(file1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+y6T=2?S:<WY>9.gz", "+y6T=2?S:<WY>9.gz");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      fileDocument0.getWriter();
      fileDocument0.getFile();
      assertEquals(10L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      File file0 = fileDocument0.getFile();
      assertSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile(".gz.gz", "Q+");
      FileDocument fileDocument0 = new FileDocument(file0);
      File file1 = fileDocument0.getFile();
      assertEquals(".gz.gz0Q+", file1.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      FileDocument fileDocument0 = new FileDocument(file0);
      fileDocument0.setLocation((Object) null);
      // Undeclared exception!
      try { 
        fileDocument0.writable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      FileDocument fileDocument0 = new FileDocument(file0);
      fileDocument0.setLocation("uk.ac.sanger.artemis.util.FileDocument.gz");
      // Undeclared exception!
      try { 
        fileDocument0.writable();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("s>hY@-ylO?VB%q%ZQ.gz", "s>hY@-ylO?VB%q%ZQ.gz");
      FileDocument fileDocument0 = new FileDocument(file0);
      fileDocument0.setLocation((Object) null);
      // Undeclared exception!
      try { 
        fileDocument0.readable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$)_yInner.*lss");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      fileDocument0.setLocation(fileDocument0);
      // Undeclared exception!
      try { 
        fileDocument0.readable();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.util.FileDocument cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      FileDocument fileDocument0 = new FileDocument(file0);
      fileDocument0.setLocation("\"]L)T9:u[E {1!lSc1p");
      // Undeclared exception!
      try { 
        fileDocument0.getParent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      FileDocument fileDocument0 = new FileDocument(file0);
      // Undeclared exception!
      try { 
        fileDocument0.getOutputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("+p72SwL}>{G*[dw", "+p72SwL}>{G*[dw");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      fileDocument0.setLocation(inputStreamProgressListener0);
      // Undeclared exception!
      try { 
        fileDocument0.getOutputStream();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.util.InputStreamProgressListener$MockitoMock$589411516 cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+y6T=2?S:<WdY>9.Zz.gz");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("+y6T=2?S:<WdY>9.Zz.gz");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      try { 
        fileDocument0.getOutputStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("").when(file0).getAbsolutePath();
      FileDocument fileDocument0 = new FileDocument(file0);
      try { 
        fileDocument0.getOutputStream();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      FileDocument fileDocument0 = new FileDocument(file0);
      fileDocument0.setLocation(">S`uTCN+K>FE$");
      // Undeclared exception!
      try { 
        fileDocument0.getName();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("?T=.gz", "?T=.gz");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/?T=.gz0?T=.gz");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "?T=");
      FileDocument fileDocument0 = new FileDocument(file0);
      try { 
        fileDocument0.getInputStream();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      FileDocument fileDocument0 = new FileDocument(file0);
      // Undeclared exception!
      try { 
        fileDocument0.getInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      FileDocument fileDocument0 = new FileDocument(file0);
      fileDocument0.setLocation("*Fv@");
      // Undeclared exception!
      try { 
        fileDocument0.getInputStream();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+y6T=2?S:<WY>9.gz", "+y6T=2?S:<WY>9.gz");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      fileDocument0.getWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        fileDocument0.getInputStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(",cnFTE5$8/<D0Q'%m").when(file0).getAbsolutePath();
      FileDocument fileDocument0 = new FileDocument(file0);
      try { 
        fileDocument0.getInputStream();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("?T=.gz", "?T=.gz");
      FileDocument fileDocument0 = new FileDocument(file0);
      try { 
        fileDocument0.getInputStream();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      File file0 = MockFile.createTempFile("cTB&(mH_Fxu=/?T=", "cTB&(mH_Fxu=/?T=", (File) null);
      FileDocument fileDocument0 = new FileDocument(file0);
      Reader reader0 = fileDocument0.getReader();
      fileDocument0.setLocation(reader0);
      // Undeclared exception!
      try { 
        fileDocument0.getFile();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.InputStreamReader cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      doReturn((String) null).when(file0).toString();
      FileDocument fileDocument0 = new FileDocument(file0);
      // Undeclared exception!
      try { 
        fileDocument0.append((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File file0 = MockFile.createTempFile("ge5X\"8P-t`e~gmf$F", "tBs&6VPZk*@G]DS~t");
      FileDocument fileDocument0 = new FileDocument(file0);
      fileDocument0.setLocation("tBs&6VPZk*@G]DS~t");
      // Undeclared exception!
      try { 
        fileDocument0.append("ge5X\"8P-t`e~gmf$F");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDocument fileDocument0 = null;
      try {
        fileDocument0 = new FileDocument((File) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = MockFile.createTempFile("Y>$", "Y>$");
      FileDocument fileDocument0 = new FileDocument(file0);
      fileDocument0.getOutputStream();
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      File file0 = MockFile.createTempFile("cTB&(mH_Fxu=/?T=", "cTB&(mH_Fxu=/?T=", (File) null);
      FileDocument fileDocument0 = new FileDocument(file0);
      InputStream inputStream0 = fileDocument0.getInputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+y6T=2?S:<WY>9.gz", "+y6T=2?S:<WY>9.gz");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      File file0 = fileDocument0.getFile();
      assertFalse(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      File file0 = MockFile.createTempFile("s>hY@-ylO?VB%q%ZQ.gz", "s>hY@-ylO?VB%q%ZQ.gz");
      FileDocument fileDocument0 = new FileDocument(file0);
      boolean boolean0 = fileDocument0.writable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).canWrite();
      doReturn(true).when(file0).exists();
      doReturn("Y>9$", "Y>9$").when(file0).toString();
      FileDocument fileDocument0 = new FileDocument(file0);
      boolean boolean0 = fileDocument0.writable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn((String) null).when(file0).toString();
      FileDocument fileDocument0 = new FileDocument(file0);
      boolean boolean0 = fileDocument0.writable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn("Y>9$", "Y>9$").when(file0).toString();
      FileDocument fileDocument0 = new FileDocument(file0);
      boolean boolean0 = fileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hy6T2?S:<WY>9.gz");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      fileDocument0.getWriter();
      boolean boolean0 = fileDocument0.readable();
      assertEquals(10L, mockFile0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn("Y>$").when(file0).toString();
      FileDocument fileDocument0 = new FileDocument(file0);
      boolean boolean0 = fileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      File file0 = MockFile.createTempFile("s>hY@-ylO?VB%q%ZQ.gz", "s>hY@-ylO?VB%q%ZQ.gz");
      FileDocument fileDocument0 = new FileDocument(file0);
      String string0 = fileDocument0.getName();
      assertEquals("s>hY@-ylO?VB%q%ZQ.gz0s>hY@-ylO?VB%q%ZQ.gz", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      doReturn((String) null).when(file0).toString();
      FileDocument fileDocument0 = new FileDocument(file0);
      Document document0 = fileDocument0.append("\"]L)T9:u[E {1!lSc1p");
      assertFalse(document0.readable());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getCanonicalPath();
      doReturn((String) null).when(file0).toString();
      FileDocument fileDocument0 = new FileDocument(file0);
      // Undeclared exception!
      try { 
        fileDocument0.getParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
