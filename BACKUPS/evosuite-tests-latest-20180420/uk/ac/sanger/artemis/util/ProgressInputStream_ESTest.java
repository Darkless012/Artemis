/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:27:58 GMT 2018
 */

package uk.ac.sanger.artemis.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.util.InputStreamProgressListener;
import uk.ac.sanger.artemis.util.InputStreamProgressListenerVector;
import uk.ac.sanger.artemis.util.ProgressInputStream;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ProgressInputStream_ESTest extends ProgressInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = mock(InputStreamProgressListenerVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStreamProgressListenerVector0).size();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(inputStream0, inputStreamProgressListenerVector0);
      progressInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1222)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = mock(InputStreamProgressListenerVector.class, new ViolatedAssumptionAnswer());
      ProgressInputStream progressInputStream0 = new ProgressInputStream(inputStream0, inputStreamProgressListenerVector0);
      byte[] byteArray0 = new byte[2];
      int int0 = progressInputStream0.read(byteArray0);
      assertEquals((-1222), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = mock(InputStreamProgressListenerVector.class, new ViolatedAssumptionAnswer());
      ProgressInputStream progressInputStream0 = new ProgressInputStream(inputStream0, inputStreamProgressListenerVector0);
      int int0 = progressInputStream0.read((byte[]) null, (-2829), (-2829));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = mock(InputStreamProgressListenerVector.class, new ViolatedAssumptionAnswer());
      doReturn((InputStreamProgressListener) null).when(inputStreamProgressListenerVector0).elementAt(anyInt());
      doReturn(1819).when(inputStreamProgressListenerVector0).size();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(inputStream0, inputStreamProgressListenerVector0);
      // Undeclared exception!
      try { 
        progressInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.ProgressInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 1, 6, (-1)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = mock(InputStreamProgressListenerVector.class, new ViolatedAssumptionAnswer());
      doReturn((InputStreamProgressListener) null).when(inputStreamProgressListenerVector0).elementAt(anyInt());
      doReturn(1).when(inputStreamProgressListenerVector0).size();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(inputStream0, inputStreamProgressListenerVector0);
      byte[] byteArray0 = new byte[9];
      progressInputStream0.read(byteArray0, (int) (byte)15, (int) (byte) (-1));
      progressInputStream0.read(byteArray0);
      progressInputStream0.read(byteArray0, 0, (int) (byte)26);
      progressInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        progressInputStream0.read(byteArray0, 6, (int) (byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.ProgressInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-2070)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = mock(InputStreamProgressListenerVector.class, new ViolatedAssumptionAnswer());
      ProgressInputStream progressInputStream0 = new ProgressInputStream(inputStream0, inputStreamProgressListenerVector0);
      byte[] byteArray0 = new byte[22];
      int int0 = progressInputStream0.read(byteArray0);
      assertEquals(1, int0);
      
      int int1 = progressInputStream0.read(byteArray0, (-4551), 1);
      assertEquals((-2070), int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = mock(InputStreamProgressListenerVector.class, new ViolatedAssumptionAnswer());
      doReturn(inputStreamProgressListener0).when(inputStreamProgressListenerVector0).elementAt(anyInt());
      doReturn(4598, 0).when(inputStreamProgressListenerVector0).size();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(inputStream0, inputStreamProgressListenerVector0);
      progressInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ProgressInputStream progressInputStream0 = new ProgressInputStream(inputStream0, (InputStreamProgressListenerVector) null);
      progressInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(4598, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = mock(InputStreamProgressListenerVector.class, new ViolatedAssumptionAnswer());
      ProgressInputStream progressInputStream0 = new ProgressInputStream(inputStream0, inputStreamProgressListenerVector0);
      byte[] byteArray0 = new byte[5];
      int int0 = progressInputStream0.read(byteArray0);
      assertEquals(4598, int0);
      
      int int1 = progressInputStream0.read(byteArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = mock(InputStreamProgressListenerVector.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1)).when(inputStreamProgressListenerVector0).size();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(inputStream0, inputStreamProgressListenerVector0);
      byte[] byteArray0 = new byte[8];
      int int0 = progressInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = mock(InputStreamProgressListenerVector.class, new ViolatedAssumptionAnswer());
      ProgressInputStream progressInputStream0 = new ProgressInputStream(inputStream0, inputStreamProgressListenerVector0);
      // Undeclared exception!
      try { 
        progressInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }
}
