/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 13:12:50 GMT 2018
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.circular.Feature;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Feature_ESTest extends Feature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Feature feature0 = new Feature("colour", 0, 0, (-815));
      int int0 = feature0.getStart();
      assertEquals((-815), feature0.getColour());
      assertEquals(0, feature0.getEnd());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Feature feature0 = new Feature((String) null, (-510), 917, (-510));
      int int0 = feature0.getStart();
      assertEquals((-510), int0);
      assertEquals((-510), feature0.getColour());
      assertEquals(917, feature0.getEnd());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Feature feature0 = new Feature((String) null, 1647, 1647, 1647);
      int int0 = feature0.getEnd();
      assertEquals(1647, int0);
      assertEquals(1647, feature0.getStart());
      assertEquals(1647, feature0.getColour());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Feature feature0 = new Feature("colour", (-2029), (-2029), 0);
      int int0 = feature0.getEnd();
      assertEquals(0, feature0.getColour());
      assertEquals((-2029), feature0.getStart());
      assertEquals((-2029), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Feature feature0 = new Feature((String) null, 125, 1671, 1671);
      feature0.getEmblKey();
      assertEquals(1671, feature0.getColour());
      assertEquals(125, feature0.getStart());
      assertEquals(1671, feature0.getEnd());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Feature feature0 = new Feature("", 406, 406, 406);
      feature0.getEmblKey();
      assertEquals(406, feature0.getStart());
      assertEquals(406, feature0.getColour());
      assertEquals(406, feature0.getEnd());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Feature feature0 = new Feature("Leu", 38, 38, 231);
      int int0 = feature0.getColour();
      assertEquals(38, feature0.getEnd());
      assertEquals(231, int0);
      assertEquals(38, feature0.getStart());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Feature feature0 = new Feature("", (-1), (-1), (-1));
      int int0 = feature0.getColour();
      assertEquals((-1), feature0.getEnd());
      assertEquals((-1), int0);
      assertEquals((-1), feature0.getStart());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Feature feature0 = new Feature("&{wOQ<lU/@kj) F/l>", 1, 1, 221);
      uk.ac.sanger.artemis.Feature feature1 = feature0.getArtemisFeature();
      assertNotNull(feature1);
      assertEquals(221, feature0.getColour());
      assertEquals(1, feature0.getEnd());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Feature feature0 = new Feature("<aDjf $Zh[12", 0, 0, 0);
      int int0 = feature0.getEnd();
      assertEquals(0, int0);
      assertEquals(0, feature0.getColour());
      assertEquals(0, feature0.getStart());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Feature feature0 = new Feature("V9", 3643, 0, 0);
      int int0 = feature0.getStart();
      assertEquals(0, feature0.getColour());
      assertEquals(3643, int0);
      assertEquals(0, feature0.getEnd());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Feature feature0 = new Feature("", 0, 0, 0);
      int int0 = feature0.getColour();
      assertEquals(0, feature0.getStart());
      assertEquals(0, feature0.getEnd());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Feature feature0 = new Feature("line too short while reading feature", 0, 0, 0);
      feature0.getEmblKey();
      assertEquals(0, feature0.getStart());
      assertEquals(0, feature0.getEnd());
      assertEquals(0, feature0.getColour());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Feature feature0 = new Feature("line too short while reading feature", 0, 0, 0);
      feature0.setEnd(0);
      assertEquals(0, feature0.getEnd());
      assertEquals(0, feature0.getColour());
      assertEquals(0, feature0.getStart());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Feature feature0 = new Feature("line too short while reading feature", 0, 0, 0);
      feature0.getArtemisFeature();
      assertEquals(0, feature0.getColour());
      assertEquals(0, feature0.getStart());
      assertEquals(0, feature0.getEnd());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Feature feature0 = new Feature("line too short while reading feature", 0, 0, 0);
      feature0.setColour(0);
      assertEquals(0, feature0.getColour());
      assertEquals(0, feature0.getEnd());
      assertEquals(0, feature0.getStart());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Feature feature0 = new Feature("line too short while reading feature", 0, 0, 0);
      feature0.setEmblKey("line too short while reading feature");
      assertEquals(0, feature0.getStart());
      assertEquals(0, feature0.getColour());
      assertEquals(0, feature0.getEnd());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Feature feature0 = new Feature("line too short while reading feature", 0, 0, 0);
      feature0.setStart(0);
      assertEquals(0, feature0.getEnd());
      assertEquals(0, feature0.getColour());
      assertEquals(0, feature0.getStart());
  }
}
