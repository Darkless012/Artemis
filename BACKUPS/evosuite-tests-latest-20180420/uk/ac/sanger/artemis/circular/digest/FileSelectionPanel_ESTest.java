/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:15:27 GMT 2018
 */

package uk.ac.sanger.artemis.circular.digest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.circular.digest.FileSelectionPanel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FileSelectionPanel_ESTest extends FileSelectionPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel(":enG_4`RxVK>_", (List<File>) null, (List<File>) null, false);
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertNotNull(fileSelectionPanel0);
      
      FileSelectionPanel.SelectionRow fileSelectionPanel_SelectionRow0 = fileSelectionPanel0.new SelectionRow();
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertNotNull(fileSelectionPanel_SelectionRow0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("", (List<File>) null, (List<File>) null, false);
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertNotNull(fileSelectionPanel0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("", (List<File>) null, (List<File>) null, true);
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertNotNull(fileSelectionPanel0);
      
      boolean boolean0 = fileSelectionPanel0.isMethylation();
      assertTrue(boolean0);
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("DEL", (List<File>) null, (List<File>) null, true);
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertNotNull(fileSelectionPanel0);
      
      List<File> list0 = fileSelectionPanel0.getSequenceFiles();
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      FileSelectionPanel fileSelectionPanel1 = new FileSelectionPanel("", list0, list0, true);
      assertFalse(fileSelectionPanel1.equals((Object)fileSelectionPanel0));
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(fileSelectionPanel1.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel1.getIgnoreRepaint());
      assertFalse(fileSelectionPanel1.isFocusTraversalPolicySet());
      assertFalse(fileSelectionPanel1.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel1.isFocusCycleRoot());
      assertNotNull(fileSelectionPanel1);
      
      List<File> list1 = fileSelectionPanel1.getRestrictOutputs();
      assertFalse(fileSelectionPanel0.equals((Object)fileSelectionPanel1));
      assertFalse(fileSelectionPanel1.equals((Object)fileSelectionPanel0));
      assertNotSame(fileSelectionPanel0, fileSelectionPanel1);
      assertSame(list0, list1);
      assertNotSame(fileSelectionPanel1, fileSelectionPanel0);
      assertSame(list1, list0);
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(fileSelectionPanel1.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel1.getIgnoreRepaint());
      assertFalse(fileSelectionPanel1.isFocusTraversalPolicySet());
      assertFalse(fileSelectionPanel1.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel1.isFocusCycleRoot());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel((String) null, (List<File>) null, (List<File>) null, true);
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertNotNull(fileSelectionPanel0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("C", (List<File>) null, (List<File>) null, false);
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertNotNull(fileSelectionPanel0);
      
      boolean boolean0 = fileSelectionPanel0.isMethylation();
      assertFalse(boolean0);
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("DEL", (List<File>) null, (List<File>) null, true);
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertNotNull(fileSelectionPanel0);
      
      JTextField jTextField0 = fileSelectionPanel0.getEmbossRootField();
      assertFalse(fileSelectionPanel0.getIgnoreRepaint());
      assertTrue(fileSelectionPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicySet());
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
      assertFalse(jTextField0.getIgnoreRepaint());
      assertTrue(jTextField0.getFocusTraversalKeysEnabled());
      assertFalse(jTextField0.isFocusTraversalPolicySet());
      assertFalse(jTextField0.isFocusCycleRoot());
      assertFalse(jTextField0.isFocusTraversalPolicyProvider());
      assertNotNull(jTextField0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("DEL", (List<File>) null, (List<File>) null, true);
      String string0 = fileSelectionPanel0.getEnzymes();
      assertEquals("DEL", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("C", (List<File>) null, (List<File>) null, false);
      List<File> list0 = fileSelectionPanel0.getRestrictOutputs();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("", (List<File>) null, (List<File>) null, true);
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      // Undeclared exception!
      try { 
        fileSelectionPanel0.showJFrame((JFrame) null, defaultEditorKit_CopyAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.FileSelectionPanel", e);
      }
  }
}
