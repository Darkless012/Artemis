/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:59:53 GMT 2018
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.geom.AffineTransform;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JEditorPane;
import javax.swing.JToolTip;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.circular.DNADraw;
import uk.ac.sanger.artemis.circular.GCGraph;
import uk.ac.sanger.artemis.circular.GCSkewGraph;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Graph_ESTest extends Graph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      assertNotNull(dNADraw0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      
      gCSkewGraph0.setGraphHeight(0.0F);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(0.0F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      
      gCGraph0.setBaseStepSize(2759);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(2759, gCGraph0.getBaseStepSize());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      
      gCSkewGraph0.setStrokeSize(3189);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3189, gCSkewGraph0.getStrokeSize());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      
      dNADraw0.setBorderWidth2(2357);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(2357, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(2357, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(200, gCGraph0.getBaseStepSize());
      
      DNADraw dNADraw1 = gCGraph0.getCurrentDna();
      assertNotNull(dNADraw1);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(2357, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertTrue(dNADraw1.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw1.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw1.getNumberOfLines());
      assertEquals(0.0F, dNADraw1.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw1.getScrollableTracksViewportWidth());
      assertFalse(dNADraw1.isFocusCycleRoot());
      assertFalse(dNADraw1.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw1.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw1.getLineHeight(), 0.01F);
      assertEquals(2357, dNADraw1.getBorderWidth2());
      assertEquals(20000, dNADraw1.getBasesPerLine());
      assertFalse(dNADraw1.getIgnoreRepaint());
      assertEquals(0, dNADraw1.getBorderHeight2());
      assertSame(dNADraw0, dNADraw1);
      assertSame(dNADraw1, dNADraw0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      assertNotNull(dNADraw0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(1, gCGraph0.getStrokeSize());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      
      Bases bases0 = gCGraph0.getBases();
      assertNull(bases0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(1, gCGraph0.getStrokeSize());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "track";
      stringArray0[1] = "2bGGXI.Jh}";
      // Undeclared exception!
      try { 
        gCSkewGraph0.setOptionsStr(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DNADraw dNADraw0 = mock(DNADraw.class, new ViolatedAssumptionAnswer());
      doReturn((Dimension) null).when(dNADraw0).getPreferredSize();
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCGraph0.getBaseStepSize());
      
      // Undeclared exception!
      try { 
        gCGraph0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DNADraw dNADraw0 = mock(DNADraw.class, new ViolatedAssumptionAnswer());
      doReturn((Dimension) null).when(dNADraw0).getPreferredSize();
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((AffineTransform) null).when(graphics2D0).getTransform();
      // Undeclared exception!
      try { 
        gCSkewGraph0.draw(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DNADraw dNADraw0 = mock(DNADraw.class, new ViolatedAssumptionAnswer());
      doReturn((Dimension) null).when(dNADraw0).getPreferredSize();
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(1, gCGraph0.getStrokeSize());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      
      Color color0 = gCGraph0.getPlusColour();
      assertNotNull(color0);
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(1, gCGraph0.getStrokeSize());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals(26, color0.getBlue());
      assertEquals(179, color0.getGreen());
      assertEquals((-5000422), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(179, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(1, gCGraph0.getStrokeSize());
      
      DNADraw dNADraw1 = gCGraph0.getCurrentDna();
      assertNotNull(dNADraw1);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(1, gCGraph0.getStrokeSize());
      assertFalse(dNADraw1.getScrollableTracksViewportHeight());
      assertFalse(dNADraw1.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw1.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw1.getBorderWidth2());
      assertTrue(dNADraw1.getFocusTraversalKeysEnabled());
      assertEquals(200.0F, dNADraw1.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw1.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw1.isFocusCycleRoot());
      assertEquals(0, dNADraw1.getBorderHeight2());
      assertEquals(20000, dNADraw1.getBasesPerLine());
      assertEquals(0, dNADraw1.getNumberOfLines());
      assertFalse(dNADraw1.getIgnoreRepaint());
      assertFalse(dNADraw1.isFocusTraversalPolicySet());
      assertSame(dNADraw0, dNADraw1);
      assertSame(dNADraw1, dNADraw0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DNADraw dNADraw0 = mock(DNADraw.class, new ViolatedAssumptionAnswer());
      doReturn((Dimension) null).when(dNADraw0).getPreferredSize();
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      
      int int0 = gCSkewGraph0.getBaseStepSize();
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(200, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DNADraw dNADraw0 = mock(DNADraw.class, new ViolatedAssumptionAnswer());
      doReturn((Dimension) null).when(dNADraw0).getPreferredSize();
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      
      Color color0 = gCSkewGraph0.getMinusColour();
      assertNotNull(color0);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(255, color0.getAlpha());
      assertEquals((-6750055), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(153, color0.getRed());
      assertEquals(153, color0.getBlue());
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(1, gCGraph0.getStrokeSize());
      
      float float0 = gCGraph0.getGraphHeight();
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(1, gCGraph0.getStrokeSize());
      assertEquals(0.2F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(200, gCGraph0.getBaseStepSize());
      
      double double0 = gCGraph0.getTrack();
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertEquals(0.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DNADraw dNADraw0 = mock(DNADraw.class, new ViolatedAssumptionAnswer());
      doReturn((Dimension) null).when(dNADraw0).getPreferredSize();
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      
      gCGraph0.setTrack(0);
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertEquals(0.0, gCGraph0.getTrack(), 0.01);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "track";
      // Undeclared exception!
      try { 
        gCSkewGraph0.setOptionsStr(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringVector stringVector0 = StringVector.getStrings("Window Size");
      assertNotNull(stringVector0);
      assertEquals("[Window, Size]", stringVector0.toString());
      assertEquals(2, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals(10, stringVector0.capacity());
      
      Stack<JToolTip> stack0 = new Stack<JToolTip>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      DNADraw dNADraw0 = new DNADraw(stringVector0, stringVector0, stringVector0, stack0);
      assertNotNull(dNADraw0);
      assertEquals("[Window, Size]", stringVector0.toString());
      assertEquals(2, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals(10, stringVector0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertEquals("[Window, Size]", stringVector0.toString());
      assertEquals(2, stringVector0.size());
      assertFalse(stringVector0.isEmpty());
      assertEquals(10, stringVector0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Window Size";
      stringArray0[1] = "height=0.2 window_size=10000 base_step_size=200 track=0.4 minus_colour=153:0:153 plus_colour=179:179:26";
      // Undeclared exception!
      try { 
        gCGraph0.setOptionsStr(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "2bGGXI.Jh}";
      stringArray0[2] = "xS%7GD";
      stringArray0[3] = "{http://xml.apache.org/xalan}";
      stringArray0[4] = "nUfCn@f/#KY-";
      stringArray0[5] = "Y ;/f;[{E!";
      stringArray0[6] = "q8\"rzd#Rkc";
      gCSkewGraph0.setOptionsStr(stringArray0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DNADraw dNADraw0 = mock(DNADraw.class, new ViolatedAssumptionAnswer());
      doReturn((Dimension) null).when(dNADraw0).getPreferredSize();
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      
      Color color0 = gCSkewGraph0.getBackground();
      assertNotNull(color0);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals((-1118482), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(238, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertEquals(238, color0.getGreen());
      
      gCSkewGraph0.setMinusColour(color0);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals((-1118482), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(238, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertEquals(238, color0.getGreen());
      
      Color color1 = gCSkewGraph0.getMinusColour();
      assertNotNull(color1);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(238, color1.getBlue());
      assertEquals(238, color1.getRed());
      assertEquals(238, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals((-1118482), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertSame(color1, color0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DNADraw dNADraw0 = mock(DNADraw.class, new ViolatedAssumptionAnswer());
      doReturn((Dimension) null).when(dNADraw0).getPreferredSize();
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      
      float float0 = gCSkewGraph0.getMaxValue();
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      
      int int0 = gCSkewGraph0.getStrokeSize();
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      
      gCSkewGraph0.setMinValue(0.1F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(0.1F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DNADraw dNADraw0 = mock(DNADraw.class, new ViolatedAssumptionAnswer());
      doReturn((Dimension) null).when(dNADraw0).getPreferredSize();
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertEquals(1, gCGraph0.getStrokeSize());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      
      // Undeclared exception!
      try { 
        gCGraph0.showOptions();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw((Vector) null, (Vector) null, (Vector) null, (Vector) null);
      assertNotNull(dNADraw0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      
      gCSkewGraph0.setMaxValue((-1.0F));
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals((-1.0F), gCSkewGraph0.getMaxValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      assertNotNull(dNADraw0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertNotNull(gCSkewGraph0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      
      gCSkewGraph0.setGraphHeight(0.5F);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(0.5F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertNotNull(dNADraw0);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
      
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertNotNull(gCGraph0);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      
      JEditorPane jEditorPane0 = new JEditorPane("A]}+p3AL4EEB", "A]}+p3AL4EEB");
      assertNotNull(jEditorPane0);
      assertFalse(jEditorPane0.getIgnoreRepaint());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      
      Color color0 = jEditorPane0.getSelectionColor();
      assertNotNull(color0);
      assertFalse(jEditorPane0.getIgnoreRepaint());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(1, color0.getTransparency());
      
      gCGraph0.setPlusColour(color0);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertFalse(jEditorPane0.getIgnoreRepaint());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(1, color0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DNADraw dNADraw0 = mock(DNADraw.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(dNADraw0).toString();
      doReturn((Dimension) null).when(dNADraw0).getPreferredSize();
      doReturn((Bases) null).when(dNADraw0).getBases();
      doReturn(0).when(dNADraw0).getBasesPerLine();
      doReturn(0).when(dNADraw0).getBorderHeight2();
      doReturn(0).when(dNADraw0).getBorderWidth2();
      doReturn(0.0F).when(dNADraw0).getLineHeight();
      doReturn(0.0F).when(dNADraw0).getSingleBaseWidth();
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        gCSkewGraph0.drawLinear(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      float float0 = gCSkewGraph0.getMinValue();
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals(3.4028235E38F, float0, 0.01F);
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringVector stringVector0 = StringVector.getStrings("Window Size");
      Stack<JToolTip> stack0 = new Stack<JToolTip>();
      DNADraw dNADraw0 = new DNADraw(stringVector0, stringVector0, stringVector0, stack0);
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      // Undeclared exception!
      try { 
        gCGraph0.calcGraphValues();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      gCSkewGraph0.setWindowSize((-1964));
      int int0 = gCSkewGraph0.getWindowSize();
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertEquals((-1964), int0);
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringVector stringVector0 = StringVector.getStrings("Window Size");
      Stack<JToolTip> stack0 = new Stack<JToolTip>();
      DNADraw dNADraw0 = new DNADraw(stringVector0, stringVector0, stringVector0, stack0);
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      String string0 = gCGraph0.getOptionsStr();
      assertEquals("height=0.2 window_size=10000 base_step_size=200 track=0.4 minus_colour=153:0:153 plus_colour=179:179:26", string0);
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringVector stringVector0 = StringVector.getStrings("Window Size");
      Stack<JToolTip> stack0 = new Stack<JToolTip>();
      DNADraw dNADraw0 = new DNADraw(stringVector0, stringVector0, stringVector0, stack0);
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      int int0 = gCGraph0.getWindowSize();
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertEquals(1, gCGraph0.getStrokeSize());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertEquals(10000, int0);
  }
}
