/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:46:56 GMT 2018
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.circular.DNADraw;
import uk.ac.sanger.artemis.circular.LineAttribute;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LineAttribute_ESTest extends LineAttribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LineAttribute lineAttribute0 = null;
      try {
        lineAttribute0 = new LineAttribute((DNADraw) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.LineAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertNotNull(dNADraw0);
      
      LineAttribute lineAttribute0 = null;
      try {
        lineAttribute0 = new LineAttribute(dNADraw0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DNADraw dNADraw0 = mock(DNADraw.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(dNADraw0).isCircular();
      LineAttribute lineAttribute0 = null;
      try {
        lineAttribute0 = new LineAttribute(dNADraw0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }
}
