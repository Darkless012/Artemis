/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:18:58 GMT 2018
 */

package uk.ac.sanger.artemis.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.ActionListener;
import java.awt.event.ComponentListener;
import java.awt.event.ContainerListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelEvent;
import java.awt.print.Printable;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.text.MessageFormat;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.InputMap;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JDesktopPane;
import javax.swing.JFormattedTextField;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.TextUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Element;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyledEditorKit;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.HTMLFrameHyperlinkEvent;
import javax.swing.text.html.StyleSheet;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.log4j.LogManager;
import org.apache.log4j.spi.LoggerRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.editor.Annotation;
import uk.ac.sanger.artemis.editor.BigPane;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Annotation_ESTest extends Annotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JLayeredPane jLayeredPane0 = new JLayeredPane();
      assertNotNull(jLayeredPane0);
      assertTrue(jLayeredPane0.getFocusTraversalKeysEnabled());
      assertFalse(jLayeredPane0.getIgnoreRepaint());
      assertFalse(jLayeredPane0.isFocusTraversalPolicySet());
      assertFalse(jLayeredPane0.isFocusCycleRoot());
      assertFalse(jLayeredPane0.isFocusTraversalPolicyProvider());
      
      JDesktopPane jDesktopPane0 = JOptionPane.getDesktopPaneForComponent(jLayeredPane0);
      assertNull(jDesktopPane0);
      assertTrue(jLayeredPane0.getFocusTraversalKeysEnabled());
      assertFalse(jLayeredPane0.getIgnoreRepaint());
      assertFalse(jLayeredPane0.isFocusTraversalPolicySet());
      assertFalse(jLayeredPane0.isFocusCycleRoot());
      assertFalse(jLayeredPane0.isFocusTraversalPolicyProvider());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      String string0 = "/";
      // Undeclared exception!
      try { 
        annotation0.insert((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.Annotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      assertNotNull(jInternalFrame0);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      assertNotNull(jInternalFrame_JDesktopIcon0);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      
      JDesktopPane jDesktopPane0 = jInternalFrame_JDesktopIcon0.getDesktopPane();
      assertNull(jDesktopPane0);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      String string0 = annotation0.getFeatureText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      jInternalFrame0.hide();
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      
      boolean boolean0 = annotation0.getAutoscrolls();
      assertTrue(boolean0);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      annotation0.deleteGo("", "");
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      jInternalFrame0.restoreSubcomponentFocus();
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      
      annotation0.delete("", true);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      HTMLEditorKit hTMLEditorKit0 = new HTMLEditorKit();
      assertNotNull(hTMLEditorKit0);
      
      HyperlinkEvent.EventType hyperlinkEvent_EventType0 = HyperlinkEvent.EventType.ACTIVATED;
      assertNotNull(hyperlinkEvent_EventType0);
      
      String string1 = hyperlinkEvent_EventType0.toString();
      assertNotNull(string1);
      assertEquals("ACTIVATED", string1);
      assertFalse(string1.equals((Object)string0));
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      HyperlinkEvent hyperlinkEvent0 = new HyperlinkEvent(hTMLEditorKit0, hyperlinkEvent_EventType0, uRL0, "");
      assertNotNull(hyperlinkEvent0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      annotation0.hyperlinkUpdate(hyperlinkEvent0);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      assertNotNull(jInternalFrame0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      assertNotNull(jInternalFrame_JDesktopIcon0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      
      boolean boolean0 = jInternalFrame0.getInheritsPopupMenu();
      assertFalse(boolean0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      
      String string0 = "";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JDesktopPane jDesktopPane0 = jInternalFrame_JDesktopIcon0.getDesktopPane();
      assertNull(jDesktopPane0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      DefaultEditorKit defaultEditorKit0 = new DefaultEditorKit();
      assertNotNull(defaultEditorKit0);
      
      Object object0 = defaultEditorKit0.clone();
      assertNotNull(object0);
      assertFalse(object0.equals((Object)defaultEditorKit0));
      assertNotSame(defaultEditorKit0, object0);
      assertNotSame(object0, defaultEditorKit0);
      
      annotation0.setEditorKit(defaultEditorKit0);
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(defaultEditorKit0.equals((Object)object0));
      assertNotSame(defaultEditorKit0, object0);
      
      // Undeclared exception!
      try { 
        annotation0.getFeatureText();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.text.PlainDocument cannot be cast to javax.swing.text.html.HTMLDocument
         //
         verifyException("uk.ac.sanger.artemis.editor.Annotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, false, false, false);
      assertNotNull(jInternalFrame0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      assertNotNull(jInternalFrame_JDesktopIcon0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      
      JDesktopPane jDesktopPane0 = jInternalFrame_JDesktopIcon0.getDesktopPane();
      assertNull(jDesktopPane0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      annotation0.grabFocus();
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      float float0 = jInternalFrame_JDesktopIcon0.getAlignmentY();
      assertEquals(0.5F, float0, 0.01F);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        annotation0.deleteGo((String) null, "sZ`)?ehQD|mNZC<vt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      annotation0.insert("\n", 0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      annotation0.deleteNote();
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      annotation_PopupListener0.mouseDragged((MouseEvent) null);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDesktopPane0, (-432), 1073741824L, (-432), 0, 0, 0, 0, 0, false, 0, 0, 0);
      assertNotNull(mouseWheelEvent0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals((-2147483632), mouseWheelEvent0.getModifiers());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(0, mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isControlDown());
      assertEquals(0, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(0, mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(1073741824L, mouseWheelEvent0.getWhen());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals((-432), mouseWheelEvent0.getID());
      assertEquals(0, mouseWheelEvent0.getY());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals(0, mouseWheelEvent0.getScrollAmount());
      assertEquals(0, mouseWheelEvent0.getX());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertFalse(mouseWheelEvent0.isAltDown());
      
      int int0 = mouseWheelEvent0.getModifiersEx();
      assertEquals((-448), int0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals((-2147483632), mouseWheelEvent0.getModifiers());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(0, mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isControlDown());
      assertEquals(0, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(0, mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(1073741824L, mouseWheelEvent0.getWhen());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals((-432), mouseWheelEvent0.getID());
      assertEquals(0, mouseWheelEvent0.getY());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals(0, mouseWheelEvent0.getScrollAmount());
      assertEquals(0, mouseWheelEvent0.getX());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertFalse(mouseWheelEvent0.isAltDown());
      
      String string0 = MouseEvent.getMouseModifiersText(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      annotation_PopupListener0.mouseReleased(mouseWheelEvent0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals((-2147483632), mouseWheelEvent0.getModifiers());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(0, mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isControlDown());
      assertEquals(0, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(0, mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(1073741824L, mouseWheelEvent0.getWhen());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals((-432), mouseWheelEvent0.getID());
      assertEquals(0, mouseWheelEvent0.getY());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals(0, mouseWheelEvent0.getScrollAmount());
      assertEquals(0, mouseWheelEvent0.getX());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertFalse(mouseWheelEvent0.isAltDown());
      
      annotation0.deleteGo("", "P,pLN3[");
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.repaint(0, 0, 0, 0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.delete("WHERE f.uniquename='", true);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.goBack();
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.reportHTML();
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.deleteGo("WHERE f.uniquename='", "`rnbf-phd3Hq");
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      JDesktopPane jDesktopPane1 = JOptionPane.getDesktopPaneForComponent(jDesktopPane0);
      assertNotNull(jDesktopPane1);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertSame(jDesktopPane0, jDesktopPane1);
      assertSame(jDesktopPane1, jDesktopPane0);
      
      Annotation annotation1 = new Annotation(jDesktopPane1);
      assertNotNull(annotation1);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertFalse(annotation1.getIgnoreRepaint());
      assertTrue(annotation1.isFocusTraversalPolicySet());
      assertFalse(annotation1.isFocusTraversalPolicyProvider());
      assertTrue(annotation1.getFocusTraversalKeysEnabled());
      assertTrue(annotation1.isFocusCycleRoot());
      assertFalse(annotation1.equals((Object)annotation0));
      
      Annotation.PopupListener annotation_PopupListener0 = annotation1.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertFalse(annotation1.getIgnoreRepaint());
      assertTrue(annotation1.isFocusTraversalPolicySet());
      assertFalse(annotation1.isFocusTraversalPolicyProvider());
      assertTrue(annotation1.getFocusTraversalKeysEnabled());
      assertTrue(annotation1.isFocusCycleRoot());
      assertFalse(annotation1.equals((Object)annotation0));
      
      MouseEvent mouseEvent0 = new MouseEvent(jDesktopPane0, 0, (-1L), 0, 0, 0, 800, true, 0);
      assertNotNull(mouseEvent0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(800, mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals(0, mouseEvent0.getX());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      
      annotation_PopupListener0.mousePressed(mouseEvent0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertFalse(annotation1.getIgnoreRepaint());
      assertTrue(annotation1.isFocusTraversalPolicySet());
      assertFalse(annotation1.isFocusTraversalPolicyProvider());
      assertTrue(annotation1.getFocusTraversalKeysEnabled());
      assertTrue(annotation1.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(800, mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals(0, mouseEvent0.getX());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      assertFalse(annotation1.equals((Object)annotation0));
      assertSame(jDesktopPane0, jDesktopPane1);
      assertSame(jDesktopPane1, jDesktopPane0);
      assertNotSame(annotation1, annotation0);
      
      StyleSheet styleSheet0 = new StyleSheet();
      assertNotNull(styleSheet0);
      
      HTMLDocument hTMLDocument0 = new HTMLDocument(styleSheet0);
      assertNotNull(hTMLDocument0);
      
      URL uRL0 = hTMLDocument0.getBase();
      assertNull(uRL0);
      
      Element element0 = hTMLDocument0.getDefaultRootElement();
      assertNotNull(element0);
      
      HyperlinkEvent hyperlinkEvent0 = new HyperlinkEvent(jDesktopPane1, (HyperlinkEvent.EventType) null, (URL) null, "`rnbf-phd3Hq", element0, mouseEvent0);
      assertNotNull(hyperlinkEvent0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(800, mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals(0, mouseEvent0.getX());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      
      annotation0.hyperlinkUpdate(hyperlinkEvent0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(800, mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals(0, mouseEvent0.getX());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      assertFalse(annotation0.equals((Object)annotation1));
      assertSame(jDesktopPane0, jDesktopPane1);
      assertNotSame(annotation0, annotation1);
      assertSame(jDesktopPane1, jDesktopPane0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.insert("SELECT db.name, dbx.accession, dbx.version, dbx.description, dbx_f.feature_id, dbx_f.is_current FROM feature_dbxref dbx_f LEFT JOIN dbxref dbx ON dbx.dbxref_id=dbx_f.dbxref_id LEFT JOIN db ON db.db_id=dbx.db_id LEFT JOIN feature f ON dbx_f.feature_id=f.feature_id ", 0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      MenuElement[] menuElementArray0 = new MenuElement[3];
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertNotNull(defaultTreeCellRenderer0);
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      
      int int0 = defaultTreeCellRenderer0.getX();
      assertEquals(0, int0);
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      
      Icon icon0 = defaultTreeCellRenderer0.getDefaultLeafIcon();
      assertNotNull(icon0);
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      
      JMenuItem jMenuItem0 = new JMenuItem("|", icon0);
      assertNotNull(jMenuItem0);
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(jMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jMenuItem0.isFocusCycleRoot());
      assertFalse(jMenuItem0.getIgnoreRepaint());
      assertFalse(jMenuItem0.isFocusTraversalPolicySet());
      assertTrue(jMenuItem0.getFocusTraversalKeysEnabled());
      
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      JInternalFrame jInternalFrame0 = new JInternalFrame("9ROzqBGWI/:");
      assertNotNull(jInternalFrame0);
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      
      JMenuBar jMenuBar0 = jInternalFrame0.getJMenuBar();
      assertNull(jMenuBar0);
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      
      menuElementArray0[1] = (MenuElement) null;
      JMenu jMenu0 = new JMenu("|", false);
      assertNotNull(jMenu0);
      assertFalse(jMenu0.getIgnoreRepaint());
      assertTrue(jMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jMenu0.isFocusCycleRoot());
      assertFalse(jMenu0.isFocusTraversalPolicySet());
      assertFalse(jMenu0.isFocusTraversalPolicyProvider());
      
      menuElementArray0[2] = (MenuElement) jMenu0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      assertNotNull(menuSelectionManager0);
      
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(annotation0, 0, 0L, (-2069), 0, '{', menuElementArray0, menuSelectionManager0);
      assertNotNull(menuKeyEvent0);
      assertEquals('{', menuKeyEvent0.getKeyChar());
      assertEquals(0L, menuKeyEvent0.getWhen());
      assertEquals(0, menuKeyEvent0.getKeyCode());
      assertEquals((-2112), menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isActionKey());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertTrue(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals((-2147483605), menuKeyEvent0.getModifiers());
      assertEquals(0, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isControlDown());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertEquals(3, menuElementArray0.length);
      
      menuKeyEvent0.setKeyCode(0);
      assertEquals('{', menuKeyEvent0.getKeyChar());
      assertEquals(0L, menuKeyEvent0.getWhen());
      assertEquals(0, menuKeyEvent0.getKeyCode());
      assertEquals((-2112), menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isActionKey());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertTrue(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals((-2147483605), menuKeyEvent0.getModifiers());
      assertEquals(0, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isControlDown());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertEquals(3, menuElementArray0.length);
      
      MenuSelectionManager menuSelectionManager1 = menuKeyEvent0.getMenuSelectionManager();
      assertNotNull(menuSelectionManager1);
      assertEquals('{', menuKeyEvent0.getKeyChar());
      assertEquals(0L, menuKeyEvent0.getWhen());
      assertEquals(0, menuKeyEvent0.getKeyCode());
      assertEquals((-2112), menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isActionKey());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertTrue(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals((-2147483605), menuKeyEvent0.getModifiers());
      assertEquals(0, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isControlDown());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertEquals(3, menuElementArray0.length);
      assertSame(menuSelectionManager1, menuSelectionManager0);
      assertSame(menuSelectionManager0, menuSelectionManager1);
      
      int int1 = menuKeyEvent0.getExtendedKeyCode();
      assertEquals(0, int1);
      assertEquals('{', menuKeyEvent0.getKeyChar());
      assertEquals(0L, menuKeyEvent0.getWhen());
      assertEquals(0, menuKeyEvent0.getKeyCode());
      assertEquals((-2112), menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isActionKey());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertTrue(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals((-2147483605), menuKeyEvent0.getModifiers());
      assertEquals(0, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isControlDown());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertEquals(3, menuElementArray0.length);
      assertTrue(int1 == int0);
      assertSame(menuSelectionManager0, menuSelectionManager1);
      
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jDesktopPane0, 0, 0, 0, 0, (-2069), 0, false, menuElementArray0, menuSelectionManager1);
      assertNotNull(menuDragMouseEvent0);
      assertEquals('{', menuKeyEvent0.getKeyChar());
      assertEquals(0L, menuKeyEvent0.getWhen());
      assertEquals(0, menuKeyEvent0.getKeyCode());
      assertEquals((-2112), menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isActionKey());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertTrue(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals((-2147483605), menuKeyEvent0.getModifiers());
      assertEquals(0, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isControlDown());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(menuDragMouseEvent0.isConsumed());
      assertEquals((-2069), menuDragMouseEvent0.getY());
      assertEquals(0, menuDragMouseEvent0.getButton());
      assertFalse(menuDragMouseEvent0.isMetaDown());
      assertEquals(0, menuDragMouseEvent0.getID());
      assertEquals(0L, menuDragMouseEvent0.getWhen());
      assertEquals(0, menuDragMouseEvent0.getYOnScreen());
      assertFalse(menuDragMouseEvent0.isShiftDown());
      assertFalse(menuDragMouseEvent0.isAltDown());
      assertFalse(menuDragMouseEvent0.isControlDown());
      assertFalse(menuDragMouseEvent0.isPopupTrigger());
      assertEquals(0, menuDragMouseEvent0.getXOnScreen());
      assertEquals(0, menuDragMouseEvent0.getClickCount());
      assertFalse(menuDragMouseEvent0.isAltGraphDown());
      assertEquals(0, menuDragMouseEvent0.getModifiers());
      assertEquals(0, menuDragMouseEvent0.getX());
      assertEquals(3, menuElementArray0.length);
      
      annotation_PopupListener0.mousePressed(menuDragMouseEvent0);
      assertEquals('{', menuKeyEvent0.getKeyChar());
      assertEquals(0L, menuKeyEvent0.getWhen());
      assertEquals(0, menuKeyEvent0.getKeyCode());
      assertEquals((-2112), menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isActionKey());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertTrue(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals((-2147483605), menuKeyEvent0.getModifiers());
      assertEquals(0, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isControlDown());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(menuDragMouseEvent0.isConsumed());
      assertEquals((-2069), menuDragMouseEvent0.getY());
      assertEquals(0, menuDragMouseEvent0.getButton());
      assertFalse(menuDragMouseEvent0.isMetaDown());
      assertEquals(0, menuDragMouseEvent0.getID());
      assertEquals(0L, menuDragMouseEvent0.getWhen());
      assertEquals(0, menuDragMouseEvent0.getYOnScreen());
      assertFalse(menuDragMouseEvent0.isShiftDown());
      assertFalse(menuDragMouseEvent0.isAltDown());
      assertFalse(menuDragMouseEvent0.isControlDown());
      assertFalse(menuDragMouseEvent0.isPopupTrigger());
      assertEquals(0, menuDragMouseEvent0.getXOnScreen());
      assertEquals(0, menuDragMouseEvent0.getClickCount());
      assertFalse(menuDragMouseEvent0.isAltGraphDown());
      assertEquals(0, menuDragMouseEvent0.getModifiers());
      assertEquals(0, menuDragMouseEvent0.getX());
      assertEquals(3, menuElementArray0.length);
      assertSame(menuSelectionManager1, menuSelectionManager0);
      assertSame(menuSelectionManager0, menuSelectionManager1);
      
      String string0 = annotation0.getFeatureText();
      assertNotNull(string0);
      assertEquals("/SELECT db.name, dbx.accession, dbx.version, dbx.description, dbx_f.feature_id, dbx_f.is_current FROM feature_dbxref dbx_f LEFT JOIN dbxref dbx ON dbx.dbxref_id=dbx_f.dbxref_id LEFT JOIN db ON db.db_id=dbx.db_id LEFT JOIN feature f ON dbx_f.feature_id=f.feature_id", string0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.deleteGo("/SELECT db.name, dbx.accession, dbx.version, dbx.description, dbx_f.feature_id, dbx_f.is_current FROM feature_dbxref dbx_f LEFT JOIN dbxref dbx ON dbx.dbxref_id=dbx_f.dbxref_id LEFT JOIN db ON db.db_id=dbx.db_id LEFT JOIN feature f ON dbx_f.feature_id=f.feature_id", " bVo1x8X-m");
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.delete("reverse", false);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.insert("SELECT db.name, dbx.accession, dbx.version, dbx.description, dbx_f.feature_id, dbx_f.is_current FROM feature_dbxref dbx_f LEFT JOIN dbxref dbx ON dbx.dbxref_id=dbx_f.dbxref_id LEFT JOIN db ON db.db_id=dbx.db_id LEFT JOIN feature f ON dbx_f.feature_id=f.feature_id ", true);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation_PopupListener0.mouseReleased(menuDragMouseEvent0);
      assertEquals('{', menuKeyEvent0.getKeyChar());
      assertEquals(0L, menuKeyEvent0.getWhen());
      assertEquals(0, menuKeyEvent0.getKeyCode());
      assertEquals((-2112), menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isActionKey());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertTrue(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals((-2147483605), menuKeyEvent0.getModifiers());
      assertEquals(0, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isControlDown());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(menuDragMouseEvent0.isConsumed());
      assertEquals((-2069), menuDragMouseEvent0.getY());
      assertEquals(0, menuDragMouseEvent0.getButton());
      assertFalse(menuDragMouseEvent0.isMetaDown());
      assertEquals(0, menuDragMouseEvent0.getID());
      assertEquals(0L, menuDragMouseEvent0.getWhen());
      assertEquals(0, menuDragMouseEvent0.getYOnScreen());
      assertFalse(menuDragMouseEvent0.isShiftDown());
      assertFalse(menuDragMouseEvent0.isAltDown());
      assertFalse(menuDragMouseEvent0.isControlDown());
      assertFalse(menuDragMouseEvent0.isPopupTrigger());
      assertEquals(0, menuDragMouseEvent0.getXOnScreen());
      assertEquals(0, menuDragMouseEvent0.getClickCount());
      assertFalse(menuDragMouseEvent0.isAltGraphDown());
      assertEquals(0, menuDragMouseEvent0.getModifiers());
      assertEquals(0, menuDragMouseEvent0.getX());
      assertEquals(3, menuElementArray0.length);
      assertSame(menuSelectionManager1, menuSelectionManager0);
      assertSame(menuSelectionManager0, menuSelectionManager1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "$z#&9I71~=^6m4");
      assertFalse(boolean0);
      
      jDesktopPane0.setLocation(61, 61);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      
      String string0 = "";
      JInternalFrame jInternalFrame0 = jDesktopPane0.getSelectedFrame();
      assertNull(jInternalFrame0);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      
      jDesktopPane0.firePropertyChange("", false, true);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      int int0 = jDesktopPane0.getHeight();
      assertEquals(0, int0);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      
      annotation0.insert((String) null, (-2492));
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      URL uRL0 = null;
      annotation0.insert("g$E\u0005", false);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      int int1 = jDesktopPane0.getWidth();
      assertEquals(0, int1);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(int1 == int0);
      
      String string1 = "";
      MessageFormat messageFormat0 = new MessageFormat("");
      assertNotNull(messageFormat0);
      
      Printable printable0 = annotation0.getPrintable(messageFormat0, messageFormat0);
      assertNotNull(printable0);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      try { 
        annotation0.setUpSRSFrame((URL) null, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // invalid url
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      String string0 = annotation0.getFeatureText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.setAnnotation("");
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.setAnnotation(" C");
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      HyperlinkEvent.EventType hyperlinkEvent_EventType0 = HyperlinkEvent.EventType.EXITED;
      assertNotNull(hyperlinkEvent_EventType0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HyperlinkEvent hyperlinkEvent0 = new HyperlinkEvent(jDesktopPane0, hyperlinkEvent_EventType0, uRL0, "<JmTQH");
      assertNotNull(hyperlinkEvent0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      
      Element element0 = hyperlinkEvent0.getSourceElement();
      assertNull(element0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      
      annotation0.hyperlinkUpdate(hyperlinkEvent0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      
      annotation0.goBack();
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.deleteGo("w~t8:#:[SR", "<JmTQH");
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.hyperlinkUpdate(hyperlinkEvent0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      
      String string1 = "L_W_-:{rA";
      int int0 = 61;
      // Undeclared exception!
      try { 
        annotation0.getInputMap(91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertNotNull(defaultCaret0);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      
      annotation0.removeFocusListener(defaultCaret0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      
      annotation0.setFocusAccelerator(']');
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.reportHTML();
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      
      Dimension dimension0 = jDesktopPane0.getMinimumSize();
      assertNotNull(dimension0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      String string0 = null;
      annotation0.delete((String) null, false);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.delete("G=wAo,)/_o IKZdoH", false);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.delete((String) null, true);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(annotation0, 0, 0L, 0, 44, (-556), 0, (-1), (-1), true, 0, 0, 8, 0.0);
      assertNotNull(mouseWheelEvent0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertEquals((-556), mouseWheelEvent0.getY());
      assertEquals(8, mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(0, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertFalse(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getModifiers());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(44, mouseWheelEvent0.getX());
      assertEquals(0L, mouseWheelEvent0.getWhen());
      assertEquals((-1), mouseWheelEvent0.getClickCount());
      assertEquals(0, mouseWheelEvent0.getScrollAmount());
      assertEquals(0, mouseWheelEvent0.getUnitsToScroll());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals((-1), mouseWheelEvent0.getYOnScreen());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(0, mouseWheelEvent0.getScrollType());
      
      annotation_PopupListener0.mouseReleased(mouseWheelEvent0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertEquals((-556), mouseWheelEvent0.getY());
      assertEquals(8, mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(0, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertFalse(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getModifiers());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(44, mouseWheelEvent0.getX());
      assertEquals(0L, mouseWheelEvent0.getWhen());
      assertEquals((-1), mouseWheelEvent0.getClickCount());
      assertEquals(0, mouseWheelEvent0.getScrollAmount());
      assertEquals(0, mouseWheelEvent0.getUnitsToScroll());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals((-1), mouseWheelEvent0.getYOnScreen());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(0, mouseWheelEvent0.getScrollType());
      
      // Undeclared exception!
      try { 
        annotation0.setAnnotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      
      jDesktopPane0.setFocusTraversalKeysEnabled(false);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.insert(";#40", true);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.goBack();
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      
      ComponentListener[] componentListenerArray0 = jDesktopPane0.getComponentListeners();
      assertNotNull(componentListenerArray0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertEquals(0, componentListenerArray0.length);
      
      MouseEvent mouseEvent0 = new MouseEvent(jDesktopPane0, 0, (-159L), 0, 50, 1063, 8809, true);
      assertNotNull(mouseEvent0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals((-159L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(1063, mouseEvent0.getY());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getID());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(50, mouseEvent0.getX());
      assertEquals(8809, mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      
      int int0 = mouseEvent0.getModifiersEx();
      assertEquals(0, int0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals((-159L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(1063, mouseEvent0.getY());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getID());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(50, mouseEvent0.getX());
      assertEquals(8809, mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      
      annotation_PopupListener0.mousePressed(mouseEvent0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals((-159L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(1063, mouseEvent0.getY());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getID());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(50, mouseEvent0.getX());
      assertEquals(8809, mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      
      String string0 = MouseEvent.getMouseModifiersText((-2228));
      assertNotNull(string0);
      assertEquals("\u2325+\u2318+Button2+Button3+Button1", string0);
      
      int int1 = JLayeredPane.getLayer((JComponent) annotation0);
      assertEquals(0, int1);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(int1 == int0);
      
      MouseListener[] mouseListenerArray0 = jDesktopPane0.getMouseListeners();
      assertNotNull(mouseListenerArray0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertEquals(0, mouseListenerArray0.length);
      
      annotation_PopupListener0.mouseReleased(mouseEvent0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals((-159L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(1063, mouseEvent0.getY());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getID());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(50, mouseEvent0.getX());
      assertEquals(8809, mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      
      annotation0.deleteGo(";#40", ";#40");
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.deleteGo("; product=", "; product=");
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.goBack();
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation_PopupListener0.mousePressed(mouseEvent0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals((-159L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(1063, mouseEvent0.getY());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getID());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(50, mouseEvent0.getX());
      assertEquals(8809, mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDesktopPane0, (-3024), (-159L), 8, (-2228), 1063, (-129), 1063, 8809, false, 8839, 12312, (-2228));
      assertNotNull(mouseWheelEvent0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals(8, mouseWheelEvent0.getModifiers());
      assertEquals(1063, mouseWheelEvent0.getY());
      assertEquals(8809, mouseWheelEvent0.getClickCount());
      assertEquals(12312, mouseWheelEvent0.getScrollAmount());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals((-159L), mouseWheelEvent0.getWhen());
      assertEquals(8839, mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals((-2228), mouseWheelEvent0.getX());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(1063, mouseWheelEvent0.getYOnScreen());
      assertEquals((-2228), mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isControlDown());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals((-129), mouseWheelEvent0.getXOnScreen());
      assertEquals((-27431136), mouseWheelEvent0.getUnitsToScroll());
      assertEquals((-3024), mouseWheelEvent0.getID());
      
      annotation_PopupListener0.mouseReleased(mouseWheelEvent0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals(8, mouseWheelEvent0.getModifiers());
      assertEquals(1063, mouseWheelEvent0.getY());
      assertEquals(8809, mouseWheelEvent0.getClickCount());
      assertEquals(12312, mouseWheelEvent0.getScrollAmount());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals((-159L), mouseWheelEvent0.getWhen());
      assertEquals(8839, mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals((-2228), mouseWheelEvent0.getX());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(1063, mouseWheelEvent0.getYOnScreen());
      assertEquals((-2228), mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isControlDown());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals((-129), mouseWheelEvent0.getXOnScreen());
      assertEquals((-27431136), mouseWheelEvent0.getUnitsToScroll());
      assertEquals((-3024), mouseWheelEvent0.getID());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      annotation0.repaint(0, 0, 0, 0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      annotation0.goBack();
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      annotation0.deleteGo("WHERE f.uniquename='", "`rnbf-phd3Hq");
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      JDesktopPane jDesktopPane1 = JOptionPane.getDesktopPaneForComponent(jDesktopPane0);
      assertNotNull(jDesktopPane1);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertSame(jDesktopPane0, jDesktopPane1);
      assertSame(jDesktopPane1, jDesktopPane0);
      
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      MouseEvent mouseEvent0 = new MouseEvent(jDesktopPane0, 0, (-1L), 0, 0, 0, 800, true, 0);
      assertNotNull(mouseEvent0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      assertFalse(mouseEvent0.isShiftDown());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isControlDown());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(800, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals(0, mouseEvent0.getY());
      
      annotation_PopupListener0.mousePressed(mouseEvent0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      assertFalse(mouseEvent0.isShiftDown());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isControlDown());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(800, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals(0, mouseEvent0.getY());
      assertSame(jDesktopPane0, jDesktopPane1);
      
      StyleSheet styleSheet0 = new StyleSheet();
      assertNotNull(styleSheet0);
      
      HTMLDocument hTMLDocument0 = new HTMLDocument(styleSheet0);
      assertNotNull(hTMLDocument0);
      
      URL uRL0 = hTMLDocument0.getBase();
      assertNull(uRL0);
      
      Element element0 = hTMLDocument0.getDefaultRootElement();
      assertNotNull(element0);
      
      HyperlinkEvent hyperlinkEvent0 = new HyperlinkEvent(jDesktopPane1, (HyperlinkEvent.EventType) null, (URL) null, "`rnbf-phd3Hq", element0, mouseEvent0);
      assertNotNull(hyperlinkEvent0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      assertFalse(mouseEvent0.isShiftDown());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isControlDown());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(800, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals(0, mouseEvent0.getY());
      
      annotation0.hyperlinkUpdate(hyperlinkEvent0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertFalse(mouseEvent0.isAltDown());
      assertFalse(mouseEvent0.isShiftDown());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isControlDown());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(800, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals(0, mouseEvent0.getY());
      assertSame(jDesktopPane0, jDesktopPane1);
      assertSame(jDesktopPane1, jDesktopPane0);
      
      annotation0.insert((String) null, 0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertSame(jDesktopPane0, jDesktopPane1);
      
      String string0 = annotation0.getFeatureText();
      assertNotNull(string0);
      assertEquals("/null", string0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertSame(jDesktopPane0, jDesktopPane1);
      
      String string1 = annotation0.getFeatureText();
      assertNotNull(string1);
      assertEquals("/null", string1);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(string1.equals((Object)string0));
      assertSame(jDesktopPane0, jDesktopPane1);
      
      annotation0.delete((String) null, false);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertSame(jDesktopPane0, jDesktopPane1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      byte byte0 = (byte)50;
      annotation0.firePropertyChange("JlLiDaqUUyXQ", (byte) (-46), (byte)50);
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      TextUI textUI0 = annotation0.getUI();
      assertNotNull(textUI0);
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.reportHTML();
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      ContainerListener[] containerListenerArray0 = annotation0.getContainerListeners();
      assertNotNull(containerListenerArray0);
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertEquals(0, containerListenerArray0.length);
      
      HyperlinkEvent hyperlinkEvent0 = null;
      annotation0.repaint(1488, (int) (byte) (-46), (int) (byte)50, 800);
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      annotation0.setRequestFocusEnabled(true);
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      
      // Undeclared exception!
      try { 
        annotation0.hyperlinkUpdate((HyperlinkEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.Annotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      Color color0 = annotation0.getDisabledTextColor();
      assertNotNull(color0);
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertEquals(207, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(184, color0.getRed());
      assertEquals(229, color0.getBlue());
      assertEquals((-4665371), color0.getRGB());
      
      annotation0.deleteGo("", "");
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("k,[plmE;G&+s\"c", true, false);
      assertNotNull(jInternalFrame0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      assertNotNull(jInternalFrame_JDesktopIcon0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      
      JDesktopPane jDesktopPane0 = jInternalFrame_JDesktopIcon0.getDesktopPane();
      assertNull(jDesktopPane0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      
      annotation0.setAnnotation("k,[plmE;G&+s\"c");
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame("f#ZhYP`vadkr:Pvw^!", false);
      assertNotNull(jInternalFrame0);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      
      JDesktopPane jDesktopPane0 = jInternalFrame0.getDesktopPane();
      assertNull(jDesktopPane0);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      String string0 = locale0.getDisplayVariant();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      JComponent.setDefaultLocale(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      annotation0.goBack();
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.delete("f#ZhYP`vadkr:Pvw^!", false);
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.insert("f#ZhYP`vadkr:Pvw^!", false);
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      assertNotNull(inputMethodListener1);
      
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      assertNull(inputMethodListener2);
      
      annotation0.removeInputMethodListener((InputMethodListener) null);
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      HTMLDocument hTMLDocument0 = new HTMLDocument();
      assertNotNull(hTMLDocument0);
      
      URL uRL0 = hTMLDocument0.getBase();
      assertNull(uRL0);
      
      StyleSheet styleSheet0 = new StyleSheet();
      assertNotNull(styleSheet0);
      
      Style style0 = styleSheet0.getRule("uk.ac.sanger.artemis.editor.Annotation$1");
      assertNotNull(style0);
      
      Style style1 = hTMLDocument0.addStyle("", style0);
      assertNotNull(style1);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        annotation0.setUpSRSFrame((URL) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.Annotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("", false, false);
      assertNotNull(jInternalFrame0);
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      assertNotNull(jInternalFrame_JDesktopIcon0);
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      
      JDesktopPane jDesktopPane0 = jInternalFrame_JDesktopIcon0.getDesktopPane();
      assertNull(jDesktopPane0);
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      annotation0.delete("", false);
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      annotation0.insert("", false);
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = annotation0.isFocusable();
      assertTrue(boolean0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      String string0 = null;
      annotation0.delete((String) null, false);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      String string1 = "l";
      int int0 = 0;
      annotation0.insert("l", 0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      boolean boolean1 = jDesktopPane0.getInheritsPopupMenu();
      assertFalse(boolean1);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(boolean1 == boolean0);
      
      annotation0.setEnabled(false);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      String string2 = annotation0.getFeatureText();
      assertNotNull(string2);
      assertEquals("/l", string2);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(string2.equals((Object)string1));
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      
      // Undeclared exception!
      try { 
        annotation0.setUpSRSFrame(uRL0, "l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.reflect.InvocationTargetException
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JLayeredPane jLayeredPane0 = new JLayeredPane();
      assertNotNull(jLayeredPane0);
      assertFalse(jLayeredPane0.isFocusTraversalPolicySet());
      assertFalse(jLayeredPane0.isFocusTraversalPolicyProvider());
      assertFalse(jLayeredPane0.isFocusCycleRoot());
      assertFalse(jLayeredPane0.getIgnoreRepaint());
      assertTrue(jLayeredPane0.getFocusTraversalKeysEnabled());
      
      JDesktopPane jDesktopPane0 = JOptionPane.getDesktopPaneForComponent(jLayeredPane0);
      assertNull(jDesktopPane0);
      assertFalse(jLayeredPane0.isFocusTraversalPolicySet());
      assertFalse(jLayeredPane0.isFocusTraversalPolicyProvider());
      assertFalse(jLayeredPane0.isFocusCycleRoot());
      assertFalse(jLayeredPane0.getIgnoreRepaint());
      assertTrue(jLayeredPane0.getFocusTraversalKeysEnabled());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      annotation0.insert("/", true);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      HyperlinkEvent.EventType hyperlinkEvent_EventType0 = HyperlinkEvent.EventType.ENTERED;
      assertNotNull(hyperlinkEvent_EventType0);
      
      HTMLEditorKit hTMLEditorKit0 = new HTMLEditorKit();
      assertNotNull(hTMLEditorKit0);
      
      Element element0 = hTMLEditorKit0.getCharacterAttributeRun();
      assertNull(element0);
      
      KeyEvent keyEvent0 = new KeyEvent(annotation0, 1005, 2465L, 103, 1005, 'e');
      assertNotNull(keyEvent0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(1005, keyEvent0.getID());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals('e', keyEvent0.getKeyChar());
      assertEquals(1005, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(2465L, keyEvent0.getWhen());
      
      HTMLFrameHyperlinkEvent hTMLFrameHyperlinkEvent0 = new HTMLFrameHyperlinkEvent(annotation0, hyperlinkEvent_EventType0, (URL) null, "", (Element) null, keyEvent0, "");
      assertNotNull(hTMLFrameHyperlinkEvent0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(1005, keyEvent0.getID());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals('e', keyEvent0.getKeyChar());
      assertEquals(1005, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(2465L, keyEvent0.getWhen());
      
      annotation0.hyperlinkUpdate(hTMLFrameHyperlinkEvent0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(1005, keyEvent0.getID());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals('e', keyEvent0.getKeyChar());
      assertEquals(1005, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(2465L, keyEvent0.getWhen());
      
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDesktopPane0, 1005, 1005, 103, 103, 103, 1005, 103, 1005, false, 1005, (-1973), (-2445), (-2445));
      assertNotNull(mouseWheelEvent0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(103, mouseWheelEvent0.getYOnScreen());
      assertEquals((-1973), mouseWheelEvent0.getScrollAmount());
      assertEquals(4823985, mouseWheelEvent0.getUnitsToScroll());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertEquals(1005, mouseWheelEvent0.getID());
      assertEquals(1005, mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals(39, mouseWheelEvent0.getModifiers());
      assertEquals(1005, mouseWheelEvent0.getXOnScreen());
      assertEquals(103, mouseWheelEvent0.getX());
      assertEquals(103, mouseWheelEvent0.getY());
      assertEquals(1005L, mouseWheelEvent0.getWhen());
      assertTrue(mouseWheelEvent0.isAltGraphDown());
      assertEquals(1005, mouseWheelEvent0.getClickCount());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals((-2445), mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertTrue(mouseWheelEvent0.isShiftDown());
      
      annotation_PopupListener0.mousePressed(mouseWheelEvent0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertEquals(103, mouseWheelEvent0.getYOnScreen());
      assertEquals((-1973), mouseWheelEvent0.getScrollAmount());
      assertEquals(4823985, mouseWheelEvent0.getUnitsToScroll());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertEquals(1005, mouseWheelEvent0.getID());
      assertEquals(1005, mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals(39, mouseWheelEvent0.getModifiers());
      assertEquals(1005, mouseWheelEvent0.getXOnScreen());
      assertEquals(103, mouseWheelEvent0.getX());
      assertEquals(103, mouseWheelEvent0.getY());
      assertEquals(1005L, mouseWheelEvent0.getWhen());
      assertTrue(mouseWheelEvent0.isAltGraphDown());
      assertEquals(1005, mouseWheelEvent0.getClickCount());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals((-2445), mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertTrue(mouseWheelEvent0.isShiftDown());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      annotation0.deleteGo("cQk]A;'!Om']Q'*E", "$Nv%.@_3m]%Lo");
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      annotation0.setDebugGraphicsOptions(0);
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      LoggerRepository loggerRepository0 = LogManager.getLoggerRepository();
      assertNotNull(loggerRepository0);
      
      annotation0.deleteGo("jt%*0^", "");
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      assertNotNull(synthTreeUI0);
      
      Icon icon0 = synthTreeUI0.getExpandedIcon();
      assertNotNull(icon0);
      
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("", icon0);
      assertNotNull(jCheckBoxMenuItem0);
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      
      BigPane.srsTabPane = jCheckBoxMenuItem0;
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(BigPane.srsTabPane.isFocusTraversalPolicyProvider());
      assertFalse(BigPane.srsTabPane.isFocusCycleRoot());
      assertFalse(BigPane.srsTabPane.isFocusTraversalPolicySet());
      assertFalse(BigPane.srsTabPane.getIgnoreRepaint());
      assertTrue(BigPane.srsTabPane.getFocusTraversalKeysEnabled());
      
      annotation0.delete("", true);
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      annotation0.delete("S &K", true);
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      String string0 = annotation0.getFeatureText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      StyledEditorKit.AlignmentAction styledEditorKit_AlignmentAction0 = new StyledEditorKit.AlignmentAction("A[7IkOw'ElX{:=;", 0);
      assertNotNull(styledEditorKit_AlignmentAction0);
      
      ActionListener actionListener0 = AWTEventMulticaster.remove((ActionListener) styledEditorKit_AlignmentAction0, (ActionListener) styledEditorKit_AlignmentAction0);
      assertNull(actionListener0);
      
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke("A[7IkOw'ElX{:=;");
      assertNull(keyStroke0);
      
      jDesktopPane0.registerKeyboardAction((ActionListener) null, "A[7IkOw'ElX{:=;", (KeyStroke) null, 0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      
      MouseEvent mouseEvent0 = new MouseEvent(jDesktopPane0, (-2613), (-233L), 0, 1087, 1087, 1087, true);
      assertNotNull(mouseEvent0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals(1087, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(1087, mouseEvent0.getClickCount());
      assertEquals(1087, mouseEvent0.getX());
      assertEquals((-2613), mouseEvent0.getID());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals((-233L), mouseEvent0.getWhen());
      assertFalse(mouseEvent0.isAltDown());
      
      annotation_PopupListener0.mousePressed(mouseEvent0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals(1087, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(1087, mouseEvent0.getClickCount());
      assertEquals(1087, mouseEvent0.getX());
      assertEquals((-2613), mouseEvent0.getID());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals((-233L), mouseEvent0.getWhen());
      assertFalse(mouseEvent0.isAltDown());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      Annotation annotation0 = null;
      try {
        annotation0 = new Annotation(uRL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.reflect.InvocationTargetException
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      annotation0.insert("\n", 0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      annotation0.deleteNote();
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDesktopPane0, (-432), 1073741824L, (-432), 0, 0, 0, 0, 0, false, 0, 0, 0);
      assertNotNull(mouseWheelEvent0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(0, mouseWheelEvent0.getScrollType());
      assertEquals((-2147483632), mouseWheelEvent0.getModifiers());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isControlDown());
      assertEquals(0, mouseWheelEvent0.getScrollAmount());
      assertEquals(0, mouseWheelEvent0.getWheelRotation());
      assertEquals(0, mouseWheelEvent0.getUnitsToScroll());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(1073741824L, mouseWheelEvent0.getWhen());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getX());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals(0, mouseWheelEvent0.getY());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertEquals((-432), mouseWheelEvent0.getID());
      assertFalse(mouseWheelEvent0.isAltDown());
      
      annotation_PopupListener0.mouseReleased(mouseWheelEvent0);
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(0, mouseWheelEvent0.getScrollType());
      assertEquals((-2147483632), mouseWheelEvent0.getModifiers());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isControlDown());
      assertEquals(0, mouseWheelEvent0.getScrollAmount());
      assertEquals(0, mouseWheelEvent0.getWheelRotation());
      assertEquals(0, mouseWheelEvent0.getUnitsToScroll());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(1073741824L, mouseWheelEvent0.getWhen());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getX());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals(0, mouseWheelEvent0.getY());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertEquals((-432), mouseWheelEvent0.getID());
      assertFalse(mouseWheelEvent0.isAltDown());
      
      annotation0.reportHTML();
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URL uRL0 = null;
      Annotation annotation0 = null;
      try {
        annotation0 = new Annotation((URL) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // invalid url
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      assertNotNull(jInternalFrame0);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      
      JDesktopPane jDesktopPane0 = jInternalFrame0.getDesktopPane();
      assertNull(jDesktopPane0);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      HyperlinkEvent.EventType hyperlinkEvent_EventType0 = HyperlinkEvent.EventType.ACTIVATED;
      assertNotNull(hyperlinkEvent_EventType0);
      
      StyleSheet styleSheet0 = new StyleSheet();
      assertNotNull(styleSheet0);
      
      URL uRL0 = styleSheet0.getBase();
      assertNull(uRL0);
      
      HTMLFrameHyperlinkEvent hTMLFrameHyperlinkEvent0 = new HTMLFrameHyperlinkEvent(jInternalFrame0, hyperlinkEvent_EventType0, (URL) null, "R'KZ3|y] 03xdN", "R'KZ3|y] 03xdN");
      assertNotNull(hTMLFrameHyperlinkEvent0);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      
      // Undeclared exception!
      try { 
        annotation0.hyperlinkUpdate(hTMLFrameHyperlinkEvent0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte) (-118);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte) (-118)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      String string0 = annotation0.getUIClassID();
      assertNotNull(string0);
      assertEquals("EditorPaneUI", string0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        annotation0.setAnnotation("SWALL:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-118);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte)85, (byte) (-118)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      String string0 = annotation0.getUIClassID();
      assertNotNull(string0);
      assertEquals("EditorPaneUI", string0);
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      // Undeclared exception!
      try { 
        annotation0.setAnnotation("SWALL:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      annotation0.repaint(0, 0, 0, 0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      annotation0.goBack();
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      annotation0.reportHTML();
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      
      JDesktopPane jDesktopPane1 = JOptionPane.getDesktopPaneForComponent(jDesktopPane0);
      assertNotNull(jDesktopPane1);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertSame(jDesktopPane0, jDesktopPane1);
      assertSame(jDesktopPane1, jDesktopPane0);
      
      Annotation annotation1 = new Annotation(jDesktopPane1);
      assertNotNull(annotation1);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertFalse(annotation1.getIgnoreRepaint());
      assertTrue(annotation1.isFocusCycleRoot());
      assertTrue(annotation1.getFocusTraversalKeysEnabled());
      assertFalse(annotation1.isFocusTraversalPolicyProvider());
      assertTrue(annotation1.isFocusTraversalPolicySet());
      assertFalse(annotation1.equals((Object)annotation0));
      
      Annotation.PopupListener annotation_PopupListener0 = annotation1.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertFalse(annotation1.getIgnoreRepaint());
      assertTrue(annotation1.isFocusCycleRoot());
      assertTrue(annotation1.getFocusTraversalKeysEnabled());
      assertFalse(annotation1.isFocusTraversalPolicyProvider());
      assertTrue(annotation1.isFocusTraversalPolicySet());
      assertFalse(annotation1.equals((Object)annotation0));
      
      MouseEvent mouseEvent0 = new MouseEvent(jDesktopPane0, 0, (-1L), 0, 0, 0, 800, true, 0);
      assertNotNull(mouseEvent0);
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(800, mouseEvent0.getClickCount());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertFalse(mouseEvent0.isAltDown());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isControlDown());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getButton());
      
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField();
      assertNotNull(jFormattedTextField0);
      assertFalse(jFormattedTextField0.isFocusCycleRoot());
      assertTrue(jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertFalse(jFormattedTextField0.isFocusTraversalPolicySet());
      assertFalse(jFormattedTextField0.getIgnoreRepaint());
      assertFalse(jFormattedTextField0.isFocusTraversalPolicyProvider());
      
      HyperlinkEvent.EventType hyperlinkEvent_EventType0 = HyperlinkEvent.EventType.ACTIVATED;
      assertNotNull(hyperlinkEvent_EventType0);
      
      StringContent stringContent0 = new StringContent();
      assertNotNull(stringContent0);
      
      StyleSheet styleSheet0 = new StyleSheet();
      assertNotNull(styleSheet0);
      
      HTMLDocument hTMLDocument0 = new HTMLDocument(stringContent0, styleSheet0);
      assertNotNull(hTMLDocument0);
      
      URL uRL0 = hTMLDocument0.getBase();
      assertNull(uRL0);
      
      HTMLFrameHyperlinkEvent hTMLFrameHyperlinkEvent0 = new HTMLFrameHyperlinkEvent(jFormattedTextField0, hyperlinkEvent_EventType0, (URL) null, "`rnbf-phd3Hq", "`rnbf-phd3Hq");
      assertNotNull(hTMLFrameHyperlinkEvent0);
      assertFalse(jFormattedTextField0.isFocusCycleRoot());
      assertTrue(jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertFalse(jFormattedTextField0.isFocusTraversalPolicySet());
      assertFalse(jFormattedTextField0.getIgnoreRepaint());
      assertFalse(jFormattedTextField0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        annotation1.hyperlinkUpdate(hTMLFrameHyperlinkEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.Annotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      assertNotNull(jInternalFrame0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      assertNotNull(jInternalFrame_JDesktopIcon0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      
      JDesktopPane jDesktopPane0 = jInternalFrame_JDesktopIcon0.getDesktopPane();
      assertNull(jDesktopPane0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      String string0 = annotation0.getFeatureText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      jInternalFrame0.hide();
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uniquename");
      assertFalse(boolean0);
      
      annotation0.deleteGo("", "");
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      jInternalFrame0.restoreSubcomponentFocus();
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      
      annotation0.delete("", false);
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      
      HTMLEditorKit hTMLEditorKit0 = new HTMLEditorKit();
      assertNotNull(hTMLEditorKit0);
      
      HyperlinkEvent.EventType hyperlinkEvent_EventType0 = HyperlinkEvent.EventType.ACTIVATED;
      assertNotNull(hyperlinkEvent_EventType0);
      
      String string1 = hyperlinkEvent_EventType0.toString();
      assertNotNull(string1);
      assertEquals("ACTIVATED", string1);
      assertFalse(string1.equals((Object)string0));
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HyperlinkEvent hyperlinkEvent0 = new HyperlinkEvent(hTMLEditorKit0, hyperlinkEvent_EventType0, uRL0, "");
      assertNotNull(hyperlinkEvent0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      annotation0.hyperlinkUpdate(hyperlinkEvent0);
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      
      Annotation annotation0 = new Annotation(jDesktopPane0);
      assertNotNull(annotation0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      annotation0.repaint(0, 0, 0, 0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      annotation0.goBack();
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      annotation0.reportHTML();
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      annotation0.deleteGo("WHERE f.uniquename='", "`rnbf-phd3Hq");
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      JDesktopPane jDesktopPane1 = JOptionPane.getDesktopPaneForComponent(jDesktopPane0);
      assertNotNull(jDesktopPane1);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertSame(jDesktopPane0, jDesktopPane1);
      assertSame(jDesktopPane1, jDesktopPane0);
      
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      MouseEvent mouseEvent0 = new MouseEvent(jDesktopPane0, 0, (-1L), 0, 0, 0, 800, true, 0);
      assertNotNull(mouseEvent0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(800, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertFalse(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isAltDown());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getY());
      
      annotation_PopupListener0.mousePressed(mouseEvent0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertEquals(800, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertFalse(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isAltDown());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getY());
      assertSame(jDesktopPane0, jDesktopPane1);
      
      StyleSheet styleSheet0 = new StyleSheet();
      assertNotNull(styleSheet0);
      
      HTMLDocument hTMLDocument0 = new HTMLDocument(styleSheet0);
      assertNotNull(hTMLDocument0);
      
      URL uRL0 = hTMLDocument0.getBase();
      assertNull(uRL0);
      
      Element element0 = hTMLDocument0.getDefaultRootElement();
      assertNotNull(element0);
      
      HyperlinkEvent hyperlinkEvent0 = new HyperlinkEvent(jDesktopPane1, (HyperlinkEvent.EventType) null, (URL) null, "`rnbf-phd3Hq", element0, mouseEvent0);
      assertNotNull(hyperlinkEvent0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertEquals(800, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertFalse(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isAltDown());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getY());
      
      annotation0.hyperlinkUpdate(hyperlinkEvent0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertEquals(800, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals((-1L), mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertFalse(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isAltDown());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getY());
      assertSame(jDesktopPane0, jDesktopPane1);
      assertSame(jDesktopPane1, jDesktopPane0);
      
      annotation0.insert((String) null, 0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertSame(jDesktopPane0, jDesktopPane1);
      
      String string0 = annotation0.getFeatureText();
      assertNotNull(string0);
      assertEquals("/null", string0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertSame(jDesktopPane0, jDesktopPane1);
      
      String string1 = annotation0.getFeatureText();
      assertNotNull(string1);
      assertEquals("/null", string1);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertTrue(string1.equals((Object)string0));
      assertSame(jDesktopPane0, jDesktopPane1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "";
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, true);
      assertNotNull(jInternalFrame0);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      assertNotNull(jInternalFrame_JDesktopIcon0);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      
      JInternalFrame jInternalFrame1 = jInternalFrame_JDesktopIcon0.getInternalFrame();
      assertNotNull(jInternalFrame1);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame1.getIgnoreRepaint());
      assertTrue(jInternalFrame1.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame1.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame1.isFocusTraversalPolicySet());
      assertSame(jInternalFrame0, jInternalFrame1);
      assertSame(jInternalFrame1, jInternalFrame0);
      
      JDesktopPane jDesktopPane0 = jInternalFrame_JDesktopIcon0.getDesktopPane();
      assertNull(jDesktopPane0);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertSame(jInternalFrame0, jInternalFrame1);
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      annotation0.delete("9u<7Oq", true);
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      
      JDesktopPane jDesktopPane1 = new JDesktopPane();
      assertNotNull(jDesktopPane1);
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      
      Annotation annotation1 = new Annotation(jDesktopPane1);
      assertNotNull(annotation1);
      assertFalse(jDesktopPane1.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane1.isFocusCycleRoot());
      assertTrue(jDesktopPane1.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane1.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane1.getIgnoreRepaint());
      assertFalse(annotation1.getIgnoreRepaint());
      assertFalse(annotation1.isFocusTraversalPolicyProvider());
      assertTrue(annotation1.isFocusTraversalPolicySet());
      assertTrue(annotation1.isFocusCycleRoot());
      assertTrue(annotation1.getFocusTraversalKeysEnabled());
      assertFalse(annotation1.equals((Object)annotation0));
      
      StyleSheet styleSheet0 = new StyleSheet();
      assertNotNull(styleSheet0);
      
      URL uRL0 = styleSheet0.getBase();
      assertNull(uRL0);
      
      try { 
        annotation1.setUpSRSFrame((URL) null, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // invalid url
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, true);
      assertNotNull(jInternalFrame0);
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      assertNotNull(jInternalFrame_JDesktopIcon0);
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      
      JDesktopPane jDesktopPane0 = jInternalFrame_JDesktopIcon0.getDesktopPane();
      assertNull(jDesktopPane0);
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertFalse(jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      annotation0.deleteNote();
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      annotation0.insert("_pF`$O deJE", (-1));
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      annotation0.deleteNote();
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      annotation0.delete("Auto hide scrollbar", true);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      annotation0.goBack();
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      annotation0.insert("Auto hide scrollbar", 1174);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      assertFalse(annotation0.getIgnoreRepaint());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      
      MouseEvent mouseEvent0 = null;
      try {
        mouseEvent0 = new MouseEvent(jInternalFrame_JDesktopIcon0, 1001, 0L, 77, 110, 2, 4, 8828, 0, true, 1154);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "browserProxy.use";
      String string1 = "";
      MockFile mockFile0 = new MockFile("browserProxy.use", "");
      assertNotNull(mockFile0);
      
      try { 
        MockURL.URL("browserProxy.use", "", "browserProxy.use");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: browserproxy.use
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "uk.ac.sanger.artemis.editor.Annotation";
      MockFile mockFile0 = new MockFile("ZQ25a,Oqnf]IUPcf?{'", "uk.ac.sanger.artemis.editor.Annotation");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("uk.ac.sanger.artemis.editor.Annotation", mockFile0.getName());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/ZQ25a,Oqnf]IUPcf?{'", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/ZQ25a,Oqnf]IUPcf?{'/uk.ac.sanger.artemis.editor.Annotation", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals("{'/uk.ac.sanger.artemis.editor.Annotation", uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Annotation annotation0 = null;
      try {
        annotation0 = new Annotation(uRL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.reflect.InvocationTargetException
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("WV=m33U", false, false, false, false);
      assertNotNull(jInternalFrame0);
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      
      JDesktopPane jDesktopPane0 = jInternalFrame0.getDesktopPane();
      assertNull(jDesktopPane0);
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      assertNotNull(annotation0);
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      annotation0.setAnnotation("WV=m33U");
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      assertNotNull(annotation_PopupListener0);
      assertTrue(annotation0.isFocusCycleRoot());
      assertTrue(annotation0.getFocusTraversalKeysEnabled());
      assertTrue(annotation0.isFocusTraversalPolicySet());
      assertFalse(annotation0.getIgnoreRepaint());
      assertFalse(annotation0.isFocusTraversalPolicyProvider());
      
      MenuElement[] menuElementArray0 = new MenuElement[8];
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      assertNotNull(jPopupMenu0);
      assertFalse(jPopupMenu0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu0.getIgnoreRepaint());
      assertFalse(jPopupMenu0.isFocusCycleRoot());
      assertFalse(jPopupMenu0.isFocusTraversalPolicyProvider());
      
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      JButton jButton0 = new JButton("O~O]", (Icon) null);
      assertNotNull(jButton0);
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusCycleRoot());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      
      Icon icon0 = jButton0.getRolloverIcon();
      assertNull(icon0);
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusCycleRoot());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      
      JMenuItem jMenuItem0 = new JMenuItem("O~O]", (Icon) null);
      assertNotNull(jMenuItem0);
      assertFalse(jMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jMenuItem0.isFocusCycleRoot());
      assertTrue(jMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jMenuItem0.getIgnoreRepaint());
      assertFalse(jMenuItem0.isFocusTraversalPolicySet());
      
      menuElementArray0[1] = (MenuElement) jMenuItem0;
      try { 
        MockURL.URL((URL) null, "/EC_number=");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: /EC_number=
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      annotation0.getVerifyInputWhenFocusTarget();
      annotation0.createImage((-4208), (-4208));
      annotation0.imageUpdate((Image) null, 0, 8, 0, 800, 8);
      annotation0.insert("'cyzzxW7!t", true);
      annotation0.deleteNote();
      annotation0.insert("", true);
      annotation0.deleteGo("'cyzzxW7!t", "");
      annotation0.insert("", 0);
      Annotation.PopupListener annotation_PopupListener0 = annotation0.new PopupListener();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(annotation0, 153, (-688L), 0, (-4208), 0, 800, true, 3138, (-1859), 2211);
      annotation_PopupListener0.mousePressed(mouseWheelEvent0);
      annotation0.deleteGo("1TV >Z$Ip6G)F{305g", "1TV >Z$Ip6G)F{305g");
      MouseEvent mouseEvent0 = null;
      try {
        mouseEvent0 = new MouseEvent((Component) null, (-2652), 3138, 2311, 1802, 0, 9, true, 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Annotation annotation0 = new Annotation((JDesktopPane) null);
      HyperlinkEvent.EventType hyperlinkEvent_EventType0 = HyperlinkEvent.EventType.EXITED;
      StringContent stringContent0 = new StringContent();
      StyleSheet styleSheet0 = new StyleSheet();
      HTMLDocument hTMLDocument0 = new HTMLDocument(stringContent0, styleSheet0);
      Element element0 = hTMLDocument0.getBidiRootElement();
      hTMLDocument0.getDocumentProperties();
      KeyEvent keyEvent0 = new KeyEvent(annotation0, 4, 1048576L, 2, 96, 'q', 4);
      HTMLFrameHyperlinkEvent hTMLFrameHyperlinkEvent0 = new HTMLFrameHyperlinkEvent(annotation0, hyperlinkEvent_EventType0, (URL) null, "", element0, keyEvent0, "");
      annotation0.hyperlinkUpdate(hTMLFrameHyperlinkEvent0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL(" ", "j,X3x", 1889, "", uRLStreamHandler0);
      JTextPane jTextPane0 = new JTextPane(hTMLDocument0);
      jTextPane0.getPage();
      // Undeclared exception!
      try { 
        annotation0.setUpSRSFrame((URL) null, "</1NOC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.Annotation", e);
      }
  }
}
