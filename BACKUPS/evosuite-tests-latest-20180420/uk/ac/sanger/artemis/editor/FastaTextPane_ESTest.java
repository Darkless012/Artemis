/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 10:51:11 GMT 2018
 */

package uk.ac.sanger.artemis.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sshtools.publickey.ConsoleKnownHostsKeyVerification;
import java.awt.AWTEventMulticaster;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.awt.event.ContainerListener;
import java.awt.event.MouseListener;
import java.io.File;
import java.net.URL;
import java.util.Vector;
import javax.swing.JPasswordField;
import javax.swing.text.DefaultCaret;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.gmod.schema.sequence.Feature;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.filetree.RemoteFileNode;
import uk.ac.sanger.artemis.editor.DBViewer;
import uk.ac.sanger.artemis.editor.DataCollectionPane;
import uk.ac.sanger.artemis.editor.FastaListener;
import uk.ac.sanger.artemis.editor.FastaTextPane;
import uk.ac.sanger.artemis.editor.HitInfo;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.j2ssh.SshFileManager;
import uk.ac.sanger.artemis.j2ssh.SshLogin;
import uk.ac.sanger.artemis.util.ByteBuffer;
import uk.ac.sanger.artemis.util.DatabaseDocument;
import uk.ac.sanger.artemis.util.Document;
import uk.ac.sanger.artemis.util.FileDocument;
import uk.ac.sanger.artemis.util.InputStreamProgressListener;
import uk.ac.sanger.artemis.util.RemoteFileDocument;
import uk.ac.sanger.artemis.util.TextDocument;
import uk.ac.sanger.artemis.util.URLDocument;
import uk.ac.sanger.artemis.util.ZipFileDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FastaTextPane_ESTest extends FastaTextPane_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastaTextPane.setRemoteMfetch(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/nfs/disk100/pubseq/bin/mfetch");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-d");
      File file0 = FastaTextPane.getMfetchExecutable();
      MockFile.createTempFile("q[K&", "\uFFFD\u0001\u0000:\u0002\uFFFD");
      HitInfo hitInfo0 = new HitInfo("Query=", "acm|ly]EcSx;*4d=");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "&sH";
      stringArray0[2] = "acm|ly]EcSx;*4d=";
      stringArray0[5] = "Query=";
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabase(file0, false, hitInfo0, stringArray0, "");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("Eas].d!8P<GLP|gu", (String) null);
      boolean boolean0 = false;
      String string0 = "No parsers supported by DoubleAlphabet called ";
      HitInfo hitInfo0 = new HitInfo("%?mgK7L>ugDPL6IOr", "No parsers supported by DoubleAlphabet called ");
      String[] stringArray0 = new String[10];
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabase(file0, false, hitInfo0, stringArray0, "No parsers supported by DoubleAlphabet called ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.ExternalApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConsoleKnownHostsKeyVerification consoleKnownHostsKeyVerification0 = new ConsoleKnownHostsKeyVerification();
      File file0 = consoleKnownHostsKeyVerification0.getKnownHostsFile();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/kp11/.ssh/known_hosts");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)20;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "TerminatedSymbolList is immutable");
      FastaTextPane fastaTextPane0 = new FastaTextPane(zipFileDocument0);
      // Undeclared exception!
      try { 
        fastaTextPane0.reRead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConsoleKnownHostsKeyVerification consoleKnownHostsKeyVerification0 = new ConsoleKnownHostsKeyVerification();
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = consoleKnownHostsKeyVerification0.getKnownHostsFile();
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "TerminatedSymbolList is immutable");
      FastaTextPane fastaTextPane0 = new FastaTextPane(zipFileDocument0);
      fastaTextPane0.addFastaListener((FastaListener) null);
      // Undeclared exception!
      try { 
        fastaTextPane0.reRead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = FastaTextPane.getMfetchExecutable();
      HitInfo hitInfo0 = new HitInfo("@l@WSu 1uOaQKhqM", "FASTA");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "FASTA";
      stringArray0[1] = "FASTA";
      stringArray0[2] = "@l@WSu 1uOaQKhqM";
      stringArray0[3] = "@l@WSu 1uOaQKhqM";
      stringArray0[4] = "@l@WSu 1uOaQKhqM";
      FastaTextPane.getUniprotLinkToDatabase(file0, false, hitInfo0, stringArray0, "@l@WSu 1uOaQKhqM");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "N{0zC%+");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "Diana.ini");
      Document document0 = zipFileDocument0.getParent();
      FastaTextPane fastaTextPane0 = new FastaTextPane(document0);
      fastaTextPane0.getHitCollection();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      fastaTextPane0.addContainerListener((ContainerListener) null);
      // Undeclared exception!
      FastaTextPane.insertNewline("z", "");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastaTextPane.setRemoteMfetch(true);
      File file0 = FastaTextPane.getMfetchExecutable();
      HitInfo hitInfo0 = new HitInfo("Query=", "acm|ly]EcSx;*4d=");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "&sH";
      stringArray0[2] = "acm|ly]EcSx;*4d=";
      stringArray0[5] = "Query=";
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabase(file0, false, hitInfo0, stringArray0, "");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastaTextPane.setForceUrl(false);
      File file0 = FastaTextPane.getMfetchExecutable();
      MockFile mockFile0 = new MockFile(file0, "?3$N1");
      File file1 = MockFile.createTempFile(" aa", " aa", (File) mockFile0);
      FileDocument fileDocument0 = new FileDocument(file1);
      FastaTextPane fastaTextPane0 = new FastaTextPane(fileDocument0);
      fastaTextPane0.getQueryLength();
      FastaTextPane.getMfetchExecutable();
      fastaTextPane0.getFormat();
      fastaTextPane0.getFormat();
      FastaTextPane.isRemoteMfetch();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastaTextPane.setRemoteMfetch(true);
      MockFile mockFile0 = new MockFile("mfetch -f id -d uniprot -i \"acc:");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile1, "SRS error");
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis", mockFile1.getParent());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/mfetch -f id -d uniprot -i \"acc:", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(zipFileDocument0.writable());
      assertEquals("SRS error", zipFileDocument0.getName());
      assertNotNull(zipFileDocument0);
      
      FastaTextPane fastaTextPane0 = new FastaTextPane(zipFileDocument0);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0, FastaTextPane.nCacheHits);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis", mockFile1.getParent());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/mfetch -f id -d uniprot -i \"acc:", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(zipFileDocument0.writable());
      assertEquals("SRS error", zipFileDocument0.getName());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertTrue(fastaTextPane0.isRemoteMfetch());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertNotNull(fastaTextPane0);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertNotNull(defaultCaret0);
      
      Cursor cursor0 = Cursor.getPredefinedCursor(0);
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertNotNull(cursor0);
      
      fastaTextPane0.setCursor(cursor0);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis", mockFile1.getParent());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/mfetch -f id -d uniprot -i \"acc:", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(zipFileDocument0.writable());
      assertEquals("SRS error", zipFileDocument0.getName());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertTrue(fastaTextPane0.isRemoteMfetch());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      
      fastaTextPane0.removeFocusListener(defaultCaret0);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis", mockFile1.getParent());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/mfetch -f id -d uniprot -i \"acc:", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(zipFileDocument0.writable());
      assertEquals("SRS error", zipFileDocument0.getName());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertTrue(fastaTextPane0.isRemoteMfetch());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      
      fastaTextPane0.stopGetz();
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis", mockFile1.getParent());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/mfetch -f id -d uniprot -i \"acc:", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertEquals("mfetch -f id -d uniprot -i \"acc:", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(zipFileDocument0.writable());
      assertEquals("SRS error", zipFileDocument0.getName());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertTrue(fastaTextPane0.isRemoteMfetch());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.GVT_FONT;
      fastaTextPane0.getClientProperty(gVTAttributedCharacterIterator_TextAttribute0);
      fastaTextPane0.show((Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastaTextPane.setRemoteMfetch(true);
      FastaTextPane.isRemoteMfetch();
      HitInfo hitInfo0 = null;
      FastaTextPane.checkCache((HitInfo) null);
      String string0 = "8q";
      String string1 = "0!#Qu:OH{E5sy#@f^";
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument("8q", (JPasswordField) null, "0!#Qu:OH{E5sy#@f^", "0!#Qu:OH{E5sy#@f^", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("Eas].d!8P<GLP|gu", "");
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/Eas].d!8P<GLP|gu0", file0.toString());
      assertTrue(file0.exists());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("Eas].d!8P<GLP|gu0", file0.getName());
      assertNotNull(file0);
      
      HitInfo hitInfo0 = new HitInfo("%?mgK7L>ugDPL6IOr", "No parsers supported by DoubleAlphabet called ");
      assertNotNull(hitInfo0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabase(file0, true, hitInfo0, stringArray0, "No parsers supported by DoubleAlphabet called ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.ExternalApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      FastaTextPane.insertNewline("u RmlfJFrHHd!", "");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = true;
      FastaTextPane.setRemoteMfetch(true);
      String string0 = null;
      // Undeclared exception!
      try { 
        FastaTextPane.insertNewline((String) null, "unexpected call to openConnection ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.FastaTextPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "D]";
      stringArray0[4] = null;
      String string0 = FastaTextPane.getUniprotLinkToDatabaseByMFetch(false, (String) null, stringArray0, (String) null);
      assertNull(string0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDocument textDocument0 = new TextDocument();
      assertTrue(textDocument0.writable());
      assertTrue(textDocument0.readable());
      assertNull(textDocument0.getName());
      assertNotNull(textDocument0);
      
      FastaTextPane fastaTextPane0 = null;
      try {
        fastaTextPane0 = new FastaTextPane(textDocument0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getAbsoluteFile();
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("Artemis", file0.getName());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      boolean boolean0 = mockFile0.setReadable(true);
      assertTrue(mockFile0.equals((Object)file0));
      assertNotSame(mockFile0, file0);
      assertTrue(boolean0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      boolean boolean1 = mockFile0.setReadable(true, true);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mockFile0, file0);
      assertTrue(boolean1);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabase(mockFile0, true, (HitInfo) null, stringArray0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.FastaTextPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastaTextPane.setRemoteMfetch(true);
      File file0 = FastaTextPane.getMfetchExecutable();
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.exists());
      assertEquals("mfetch", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      String string0 = "";
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "");
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.exists());
      assertEquals("mfetch", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(zipFileDocument0.writable());
      assertEquals("", zipFileDocument0.getName());
      assertNotNull(zipFileDocument0);
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      zipFileDocument0.addInputStreamProgressListener(inputStreamProgressListener0);
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.exists());
      assertEquals("mfetch", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(zipFileDocument0.writable());
      assertEquals("", zipFileDocument0.getName());
      
      FastaTextPane fastaTextPane0 = new FastaTextPane(zipFileDocument0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.exists());
      assertEquals("mfetch", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(zipFileDocument0.writable());
      assertEquals("", zipFileDocument0.getName());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isForceUrl());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertTrue(fastaTextPane0.isRemoteMfetch());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertNotNull(fastaTextPane0);
      
      // Undeclared exception!
      try { 
        fastaTextPane0.reRead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = FastaTextPane.isRemoteMfetch();
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLDocument uRLDocument0 = new URLDocument(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(uRLDocument0.readable());
      assertEquals("fooExample", uRLDocument0.getName());
      assertFalse(uRLDocument0.writable());
      assertNotNull(uRLDocument0);
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      uRLDocument0.addInputStreamProgressListener(inputStreamProgressListener0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(uRLDocument0.readable());
      assertEquals("fooExample", uRLDocument0.getName());
      assertFalse(uRLDocument0.writable());
      
      Document document0 = uRLDocument0.append("");
      assertFalse(document0.equals((Object)uRLDocument0));
      assertNotSame(uRLDocument0, document0);
      assertNotSame(document0, uRLDocument0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(uRLDocument0.readable());
      assertEquals("fooExample", uRLDocument0.getName());
      assertFalse(uRLDocument0.writable());
      assertFalse(document0.writable());
      assertEquals("", document0.getName());
      assertTrue(document0.readable());
      assertNotNull(document0);
      
      FastaTextPane fastaTextPane0 = new FastaTextPane(document0);
      assertFalse(uRLDocument0.equals((Object)document0));
      assertFalse(document0.equals((Object)uRLDocument0));
      assertEquals(0, FastaTextPane.nCacheHits);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(uRLDocument0.readable());
      assertEquals("fooExample", uRLDocument0.getName());
      assertFalse(uRLDocument0.writable());
      assertFalse(document0.writable());
      assertEquals("", document0.getName());
      assertTrue(document0.readable());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertNotNull(fastaTextPane0);
      
      DataCollectionPane.srs_url = "";
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertNotNull(defaultCaret0);
      
      MouseListener mouseListener0 = AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertNull(mouseListener0);
      
      defaultCaret0.setBlinkRate(11);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      
      MouseListener mouseListener1 = AWTEventMulticaster.add((MouseListener) null, (MouseListener) null);
      assertNull(mouseListener1);
      
      fastaTextPane0.removeMouseListener((MouseListener) null);
      assertFalse(uRLDocument0.equals((Object)document0));
      assertFalse(document0.equals((Object)uRLDocument0));
      assertNotSame(uRLDocument0, document0);
      assertNotSame(document0, uRLDocument0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(uRLDocument0.readable());
      assertEquals("fooExample", uRLDocument0.getName());
      assertFalse(uRLDocument0.writable());
      assertFalse(document0.writable());
      assertEquals("", document0.getName());
      assertTrue(document0.readable());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      
      fastaTextPane0.setLocation(0, 0);
      assertFalse(uRLDocument0.equals((Object)document0));
      assertFalse(document0.equals((Object)uRLDocument0));
      assertNotSame(uRLDocument0, document0);
      assertNotSame(document0, uRLDocument0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(uRLDocument0.readable());
      assertEquals("fooExample", uRLDocument0.getName());
      assertFalse(uRLDocument0.writable());
      assertFalse(document0.writable());
      assertEquals("", document0.getName());
      assertTrue(document0.readable());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      
      fastaTextPane0.stopGetz();
      assertFalse(uRLDocument0.equals((Object)document0));
      assertFalse(document0.equals((Object)uRLDocument0));
      assertNotSame(uRLDocument0, document0);
      assertNotSame(document0, uRLDocument0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(uRLDocument0.readable());
      assertEquals("fooExample", uRLDocument0.getName());
      assertFalse(uRLDocument0.writable());
      assertFalse(document0.writable());
      assertEquals("", document0.getName());
      assertTrue(document0.readable());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      
      FastaTextPane.setForceUrl(false);
      File file0 = FastaTextPane.getMfetchExecutable();
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("mfetch", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      boolean boolean1 = true;
      FastaTextPane.setForceUrl(true);
      File file1 = FastaTextPane.getMfetchExecutable();
      assertSame(file1, file0);
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file1.toString());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.isDirectory());
      assertEquals("/nfs/disk100/pubseq/bin", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.canWrite());
      assertEquals("mfetch", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertNotNull(file1);
      
      int int0 = fastaTextPane0.getQueryLength();
      assertFalse(uRLDocument0.equals((Object)document0));
      assertFalse(document0.equals((Object)uRLDocument0));
      assertNotSame(uRLDocument0, document0);
      assertNotSame(document0, uRLDocument0);
      assertEquals(0, int0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(uRLDocument0.readable());
      assertEquals("fooExample", uRLDocument0.getName());
      assertFalse(uRLDocument0.writable());
      assertFalse(document0.writable());
      assertEquals("", document0.getName());
      assertTrue(document0.readable());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      
      boolean boolean2 = FastaTextPane.isForceUrl();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      FastaTextPane.insertNewline("", "");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = FastaTextPane.insertNewline("|", "|");
      assertEquals("|", string0);
      assertNotNull(string0);
      
      SshLogin sshLogin0 = new SshLogin();
      assertNotNull(sshLogin0);
      
      SshFileManager sshFileManager0 = null;
      try {
        sshFileManager0 = new SshFileManager(sshLogin0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = FastaTextPane.getMfetchExecutable();
      assertTrue(file0.isAbsolute());
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("mfetch", file0.getName());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      boolean boolean0 = true;
      String string0 = null;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabaseByMFetch(true, (String) null, stringArray0, "Common name change");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.ExternalApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = FastaTextPane.getMfetchExecutable();
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals("mfetch", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Length";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabaseByMFetch(true, "", stringArray0, "rayb}*}gR!@[a{SM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.ExternalApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = FastaTextPane.getMfetchExecutable();
      assertFalse(file0.isDirectory());
      assertEquals("mfetch", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = FastaTextPane.getUniprotLinkToDatabaseByMFetch(false, "", stringArray0, "x$u&G1\"yy");
      assertNull(string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastaTextPane.setRemoteMfetch(false);
      File file0 = FastaTextPane.getMfetchExecutable();
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("mfetch", file0.getName());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      HitInfo hitInfo0 = new HitInfo("Query=", "acm|ly]EcSx;*4d=");
      assertNotNull(hitInfo0);
      
      String[] stringArray0 = new String[7];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/nfs/disk100/pubseq/bin/mfetch");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      assertFalse(boolean0);
      
      stringArray0[1] = "Z7";
      boolean boolean1 = file0.mkdir();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("mfetch", file0.getName());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      stringArray0[2] = "acm|ly]EcSx;*4d=";
      stringArray0[5] = "Query=";
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.bioinformatics.nl/srsbin/cgi-bin//wgetz?-noSession+-ascii+-f+id+[uniprot-acc:null]%3E");
      boolean boolean2 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "acm|ly]EcSx;*4d=");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string0 = FastaTextPane.getUniprotLinkToDatabase(file0, false, hitInfo0, stringArray0, "");
      assertEquals("acm|ly]EcSx;*4d=", string0);
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("mfetch", file0.getName());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(string0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = FastaTextPane.getMfetchExecutable();
      assertFalse(file0.isDirectory());
      assertEquals("mfetch", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertNotNull(file0);
      
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "getz");
      assertFalse(file0.isDirectory());
      assertEquals("mfetch", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(zipFileDocument0.writable());
      assertEquals("getz", zipFileDocument0.getName());
      assertNotNull(zipFileDocument0);
      
      FastaTextPane fastaTextPane0 = new FastaTextPane(zipFileDocument0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertFalse(file0.isDirectory());
      assertEquals("mfetch", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(zipFileDocument0.writable());
      assertEquals("getz", zipFileDocument0.getName());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertNotNull(fastaTextPane0);
      
      DBViewer dBViewer0 = null;
      try {
        dBViewer0 = new DBViewer(fastaTextPane0, fastaTextPane0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.DBViewer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastaTextPane.setForceUrl(true);
      String string0 = FastaTextPane.insertNewline("", ">[fo5ve3P");
      assertEquals("", string0);
      assertNotNull(string0);
      
      File file0 = MockFile.createTempFile(">[fo5ve3P", ">[fo5ve3P");
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertNotNull(file0);
      
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "BLASTP");
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertTrue(zipFileDocument0.writable());
      assertEquals("BLASTP", zipFileDocument0.getName());
      assertNotNull(zipFileDocument0);
      
      Document document0 = zipFileDocument0.getParent();
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertTrue(zipFileDocument0.writable());
      assertEquals("BLASTP", zipFileDocument0.getName());
      assertEquals("T", document0.getName());
      assertFalse(document0.writable());
      assertNotNull(document0);
      
      FastaTextPane fastaTextPane0 = new FastaTextPane(document0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertTrue(zipFileDocument0.writable());
      assertEquals("BLASTP", zipFileDocument0.getName());
      assertEquals("T", document0.getName());
      assertFalse(document0.writable());
      assertTrue(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertNotNull(fastaTextPane0);
      
      String string1 = fastaTextPane0.getFormat();
      assertEquals(0, FastaTextPane.nCacheHits);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertTrue(zipFileDocument0.writable());
      assertEquals("BLASTP", zipFileDocument0.getName());
      assertEquals("T", document0.getName());
      assertFalse(document0.writable());
      assertTrue(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertNull(string1);
      
      int int0 = fastaTextPane0.getQueryLength();
      assertEquals(0, int0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertTrue(zipFileDocument0.writable());
      assertEquals("BLASTP", zipFileDocument0.getName());
      assertEquals("T", document0.getName());
      assertFalse(document0.writable());
      assertTrue(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConsoleKnownHostsKeyVerification consoleKnownHostsKeyVerification0 = new ConsoleKnownHostsKeyVerification();
      assertFalse(consoleKnownHostsKeyVerification0.isHostFileWriteable());
      assertNotNull(consoleKnownHostsKeyVerification0);
      
      File file0 = consoleKnownHostsKeyVerification0.getKnownHostsFile();
      assertFalse(consoleKnownHostsKeyVerification0.isHostFileWriteable());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/Users/kp11/.ssh/known_hosts", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("known_hosts", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/Users/kp11/.ssh", file0.getParent());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "TerminatedSymbolList is immutable");
      assertFalse(consoleKnownHostsKeyVerification0.isHostFileWriteable());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/Users/kp11/.ssh/known_hosts", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("known_hosts", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/Users/kp11/.ssh", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(zipFileDocument0.writable());
      assertEquals("TerminatedSymbolList is immutable", zipFileDocument0.getName());
      assertNotNull(zipFileDocument0);
      
      FastaTextPane fastaTextPane0 = new FastaTextPane(zipFileDocument0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertFalse(consoleKnownHostsKeyVerification0.isHostFileWriteable());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/Users/kp11/.ssh/known_hosts", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("known_hosts", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/Users/kp11/.ssh", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(zipFileDocument0.writable());
      assertEquals("TerminatedSymbolList is immutable", zipFileDocument0.getName());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertNotNull(fastaTextPane0);
      
      // Undeclared exception!
      try { 
        fastaTextPane0.reRead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "uSR3O(");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean0 = false;
      HitInfo hitInfo0 = new HitInfo("@hiU]rf4_v44,e!A]I1", "@hiU]rf4_v44,e!A]I1");
      assertNotNull(hitInfo0);
      
      HitInfo hitInfo1 = FastaTextPane.checkCache(hitInfo0);
      assertNull(hitInfo1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = mockFile1.getCanonicalPath();
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("/uSR3O(", string0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/uSR3O(", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("uSR3O(", mockFile0.getName());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/uSR3O(", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals("/", mockFile1.getParent());
      assertEquals("uSR3O(", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.exists());
      assertNotNull(string0);
      
      stringArray0[3] = "uSR3O(";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabase(mockFile1, false, (HitInfo) null, stringArray0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.FastaTextPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastaTextPane fastaTextPane0 = null;
      try {
        fastaTextPane0 = new FastaTextPane((Document) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.FastaTextPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = FastaTextPane.getMfetchExecutable();
      assertFalse(file0.canExecute());
      assertEquals("/nfs/disk100/pubseq/bin", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/nfs/disk100/pubseq/bin/mfetch", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("mfetch", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertNotNull(file0);
      
      HitInfo hitInfo0 = new HitInfo("@l@WSu 1uOaQKhqM", "FASTA");
      assertNotNull(hitInfo0);
      
      HitInfo hitInfo1 = FastaTextPane.checkCache(hitInfo0);
      assertNull(hitInfo1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "FASTA";
      stringArray0[1] = "";
      stringArray0[2] = "@l@WSu 1uOaQKhqM";
      stringArray0[3] = "@l@WSu 1uOaQKhqM";
      stringArray0[4] = "@l@WSu 1uOaQKhqM";
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabase(file0, false, (HitInfo) null, stringArray0, "@l@WSu 1uOaQKhqM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.FastaTextPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Completed incoming transport message");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("G=Ql|X)!o^AM=\"a)+", "G=Ql|X)!o^AM=\"a)+", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("Completed incoming transport message", mockFile0.toString());
      assertEquals("Completed incoming transport message", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("G=Ql|X)!o^AM=\"a)+0G=Ql|X)!o^AM=\"a)+", file0.getName());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/Completed incoming transport message", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/Completed incoming transport message/G=Ql|X)!o^AM=\"a)+0G=Ql|X)!o^AM=\"a)+", file0.toString());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Completed incoming transport message";
      stringArray0[1] = "Completed incoming transport message";
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabase(file0, false, (HitInfo) null, stringArray0, "Completed incoming transport message");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.FastaTextPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = FastaTextPane.isForceUrl();
      assertFalse(boolean0);
      
      HitInfo hitInfo0 = new HitInfo("&eb0P7ECJ)", "&eb0P7ECJ)");
      assertNotNull(hitInfo0);
      
      HitInfo hitInfo1 = FastaTextPane.checkCache(hitInfo0);
      assertNull(hitInfo1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "string cannot be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      File file0 = MockFile.createTempFile("PBEWITHSHA256AND192BITAES-CBC-BC", "string cannot be null");
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "S'NT");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("S'NT", mockFile0.getName());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null/S'NT", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(fileDocument0.writable());
      assertEquals("S'NT", fileDocument0.getName());
      assertNotNull(fileDocument0);
      
      Document document0 = fileDocument0.append("53200");
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(document0.equals((Object)fileDocument0));
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(fileDocument0, document0);
      assertNotSame(document0, fileDocument0);
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("S'NT", mockFile0.getName());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null/S'NT", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(fileDocument0.writable());
      assertEquals("S'NT", fileDocument0.getName());
      assertFalse(document0.writable());
      assertEquals("53200", document0.getName());
      assertNotNull(document0);
      
      FastaTextPane fastaTextPane0 = new FastaTextPane(document0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(fileDocument0.equals((Object)document0));
      assertFalse(document0.equals((Object)fileDocument0));
      assertEquals(0, FastaTextPane.nCacheHits);
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("S'NT", mockFile0.getName());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null/S'NT", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(fileDocument0.writable());
      assertEquals("S'NT", fileDocument0.getName());
      assertFalse(document0.writable());
      assertEquals("53200", document0.getName());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertNotNull(fastaTextPane0);
      
      fastaTextPane0.show((Object) "S'NT");
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(fileDocument0.equals((Object)document0));
      assertFalse(document0.equals((Object)fileDocument0));
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(fileDocument0, document0);
      assertNotSame(document0, fileDocument0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("S'NT", mockFile0.getName());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/PBEWITHSHA256AND192BITAES-CBC-BC0string cannot be null/S'NT", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(fileDocument0.writable());
      assertEquals("S'NT", fileDocument0.getName());
      assertFalse(document0.writable());
      assertEquals("53200", document0.getName());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">>";
      stringArray0[1] = " g-x~!b/tSh<kung";
      stringArray0[2] = " g-x~!b/tSh<kung";
      stringArray0[3] = " g-x~!b/tSh<kung";
      stringArray0[4] = " g-x~!b/tSh<kung";
      String string0 = FastaTextPane.getUniprotLinkToDatabaseByMFetch(false, " g-x~!b/tSh<kung", stringArray0, " g-x~!b/tSh<kung");
      assertNull(string0);
      assertEquals(5, stringArray0.length);
      
      JPasswordField jPasswordField0 = new JPasswordField(280);
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertNotNull(jPasswordField0);
      
      DatabaseDocument databaseDocument0 = new DatabaseDocument(" g-x~!b/tSh<kung", jPasswordField0, " g-x~!b/tSh<kung", " g-x~!b/tSh<kung", (ByteBuffer) null, ">>");
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(">>", databaseDocument0.getName());
      assertEquals(" g-x~!b/tSh<kung", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertNotNull(databaseDocument0);
      
      Feature feature0 = new Feature();
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNotNull(feature0);
      
      Range range0 = new Range(7);
      assertEquals(7, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(7, range0.getEnd());
      assertNotNull(range0);
      
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument1 = new DatabaseDocument(databaseDocument0, " g-x~!b/tSh<kung", feature0, range0, inputStreamProgressListener0);
      assertFalse(databaseDocument1.equals((Object)databaseDocument0));
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      assertFalse(DatabaseDocument.CHADO_INFER_CDS);
      assertFalse(jPasswordField0.isFocusTraversalPolicyProvider());
      assertFalse(jPasswordField0.isFocusCycleRoot());
      assertFalse(jPasswordField0.getIgnoreRepaint());
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
      assertTrue(jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(">>", databaseDocument0.getName());
      assertEquals(" g-x~!b/tSh<kung", databaseDocument0.getSrcFeatureId());
      assertTrue(databaseDocument0.writable());
      assertTrue(databaseDocument0.isSingleSchema());
      assertTrue(databaseDocument0.readable());
      assertTrue(databaseDocument0.isLazyFeatureLoad());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals(7, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(7, range0.getEnd());
      assertTrue(databaseDocument1.readable());
      assertTrue(databaseDocument1.writable());
      assertTrue(databaseDocument1.isLazyFeatureLoad());
      assertTrue(databaseDocument1.isSingleSchema());
      assertEquals("-1", databaseDocument1.getSrcFeatureId());
      assertNotNull(databaseDocument1);
      
      // Undeclared exception!
      try { 
        databaseDocument1.getGraphData(32767, " g-x~!b/tSh<kung");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.DatabaseDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "N{0zC%+");
      assertNotNull(mockFile0);
      
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "Dianax~ni");
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/N{0zC%+", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertEquals("N{0zC%+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(zipFileDocument0.writable());
      assertEquals("Dianax~ni", zipFileDocument0.getName());
      assertNotNull(zipFileDocument0);
      
      Document document0 = zipFileDocument0.getParent();
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/N{0zC%+", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertEquals("N{0zC%+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(zipFileDocument0.writable());
      assertEquals("Dianax~ni", zipFileDocument0.getName());
      assertTrue(document0.writable());
      assertEquals("", document0.getName());
      assertNotNull(document0);
      
      FastaTextPane fastaTextPane0 = new FastaTextPane(document0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/N{0zC%+", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertEquals("N{0zC%+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(zipFileDocument0.writable());
      assertEquals("Dianax~ni", zipFileDocument0.getName());
      assertTrue(document0.writable());
      assertEquals("", document0.getName());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertNotNull(fastaTextPane0);
      
      Vector<HitInfo> vector0 = fastaTextPane0.getHitCollection();
      assertEquals(0, FastaTextPane.nCacheHits);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/N{0zC%+", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertEquals("N{0zC%+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(zipFileDocument0.writable());
      assertEquals("Dianax~ni", zipFileDocument0.getName());
      assertTrue(document0.writable());
      assertEquals("", document0.getName());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertNull(vector0);
      
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      FastaTextPane.insertNewline("z", "");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastaTextPane.setForceUrl(false);
      String string0 = FastaTextPane.insertNewline("", ">[fo5ve3P");
      assertEquals("", string0);
      assertNotNull(string0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      assertTrue(boolean0);
      
      File file0 = MockFile.createTempFile(">[fo5ve3P", ">[fo5ve3P");
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "BLASTP");
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("BLASTP", zipFileDocument0.getName());
      assertTrue(zipFileDocument0.writable());
      assertNotNull(zipFileDocument0);
      
      Document document0 = zipFileDocument0.getParent();
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("BLASTP", zipFileDocument0.getName());
      assertTrue(zipFileDocument0.writable());
      assertFalse(document0.writable());
      assertEquals("T", document0.getName());
      assertNotNull(document0);
      
      FastaTextPane fastaTextPane0 = new FastaTextPane(document0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("BLASTP", zipFileDocument0.getName());
      assertTrue(zipFileDocument0.writable());
      assertFalse(document0.writable());
      assertEquals("T", document0.getName());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertNotNull(fastaTextPane0);
      
      String string1 = fastaTextPane0.getFormat();
      assertEquals(0, FastaTextPane.nCacheHits);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("BLASTP", zipFileDocument0.getName());
      assertTrue(zipFileDocument0.writable());
      assertFalse(document0.writable());
      assertEquals("T", document0.getName());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      assertNull(string1);
      
      int int0 = fastaTextPane0.getQueryLength();
      assertEquals(0, int0);
      assertEquals(0, FastaTextPane.nCacheHits);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/>[fo5ve3P0>[fo5ve3P", file0.toString());
      assertEquals(">[fo5ve3P0>[fo5ve3P", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("BLASTP", zipFileDocument0.getName());
      assertTrue(zipFileDocument0.writable());
      assertFalse(document0.writable());
      assertEquals("T", document0.getName());
      assertFalse(fastaTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(fastaTextPane0.isForceUrl());
      assertFalse(fastaTextPane0.getIgnoreRepaint());
      assertFalse(fastaTextPane0.isFocusCycleRoot());
      assertFalse(fastaTextPane0.isFocusTraversalPolicySet());
      assertTrue(fastaTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(fastaTextPane0.isRemoteMfetch());
      
      HitInfo hitInfo0 = new HitInfo("u.EMX*vK|r", "u.EMX*vK|r");
      assertNotNull(hitInfo0);
      
      HitInfo hitInfo1 = FastaTextPane.checkCache(hitInfo0);
      assertNull(hitInfo1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "u.EMX*vK|r";
      stringArray0[1] = ">[fo5ve3P";
      stringArray0[2] = ">[fo5ve3P";
      stringArray0[3] = "u.EMX*vK|r";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabase(file0, true, (HitInfo) null, stringArray0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.FastaTextPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FastaTextPane.isForceUrl();
      assertFalse(boolean0);
      
      boolean boolean1 = FastaTextPane.isRemoteMfetch();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      System.setCurrentTimeMillis((-1L));
      MockFile mockFile0 = new MockFile("dDqHNW:5yS$egw");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "dDqHNW:5yS$egw", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[6] = null;
      stringArray0[7] = stringArray0[3];
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabaseByMFetch(true, (String) null, stringArray0, stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.ExternalApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FastaTextPane.setRemoteMfetch(true);
      File file0 = FastaTextPane.getMfetchExecutable();
      MockFile.createTempFile("q[K&", "\uFFFD\u0001\u0000:\u0002\uFFFD");
      HitInfo hitInfo0 = new HitInfo("Query=", "acm|ly]EcSx;*4d=");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "&sH";
      stringArray0[2] = "acm|ly]EcSx;*4d=";
      stringArray0[5] = "Query=";
      // Undeclared exception!
      try { 
        FastaTextPane.getUniprotLinkToDatabase(file0, false, hitInfo0, stringArray0, "");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "tlr]q";
      FastaTextPane.insertNewline("tlr]q", "tlr]q");
      boolean boolean0 = false;
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      RemoteFileDocument remoteFileDocument0 = new RemoteFileDocument(remoteFileNode0);
      remoteFileDocument0.getParent();
      FastaTextPane fastaTextPane0 = null;
      try {
        fastaTextPane0 = new FastaTextPane((Document) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.FastaTextPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConsoleKnownHostsKeyVerification consoleKnownHostsKeyVerification0 = new ConsoleKnownHostsKeyVerification();
      File file0 = consoleKnownHostsKeyVerification0.getKnownHostsFile();
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "TerminatedSymbolList is immutable");
      FastaTextPane fastaTextPane0 = new FastaTextPane(zipFileDocument0);
      fastaTextPane0.createHorizontalScrollBar();
      fastaTextPane0.stopGetz();
      // Undeclared exception!
      try { 
        fastaTextPane0.reRead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
