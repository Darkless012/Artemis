/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:31:13 GMT 2018
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.HeadlessException;
import java.awt.datatransfer.Clipboard;
import java.awt.event.KeyListener;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JWindow;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.xmlgraphics.java2d.GraphicsConfigurationWithTransparency;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureKeyQualifierPredicate;
import uk.ac.sanger.artemis.FeaturePredicate;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.PartialSequence;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RangeVector;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.AGWindowAlgorithm;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AGWindowAlgorithm_ESTest extends AGWindowAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("lv=|}')up");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      strand0.getBases();
      Range range0 = new Range(97);
      Bases bases1 = strand0.getBases();
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases1, 0, 2, "lv=|}')up");
      sequenceChangeEvent0.getBases();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[4];
      bases1.truncate(range0);
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 29.630974F;
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getAverage();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, (FeaturePredicate) null, "");
      Range range0 = new Range(10);
      // Undeclared exception!
      try { 
        filteredEntryGroup0.truncate(range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.SimpleEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("lv=|}')up");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      strand0.getBases();
      Range range0 = new Range(97);
      Bases bases1 = strand0.getBases();
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases1, 0, 2, "lv=|}')up");
      Bases bases2 = sequenceChangeEvent0.getBases();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases2).when(strand1).getBases();
      doReturn(false).when(strand1).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand1);
      float[] floatArray0 = new float[4];
      bases1.truncate(range0);
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 0.0F;
      aGWindowAlgorithm0.getValues(2, 2, floatArray0);
      aGWindowAlgorithm0.getDefaultStepSize(521);
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getValues(126, (-969), floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 126 > end: -969
         //
         verifyException("uk.ac.sanger.artemis.plot.AGWindowAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("uk.ac.sanger.artemis.plot.AGWindowAlgorithm");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 1789, (-648), "P~,P-<q&~");
      Bases bases1 = sequenceChangeEvent0.getBases();
      sequenceChangeEvent0.getBases();
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases1);
      Bases bases2 = simpleEntryGroup0.getBases();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases2).when(strand0).getBases();
      doReturn(true).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (-810.43207F);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      floatArray0[8] = (float) 1;
      aGWindowAlgorithm0.getValues(2, 2, floatArray0);
      aGWindowAlgorithm0.getAverage();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraphicsConfigurationWithTransparency graphicsConfigurationWithTransparency0 = new GraphicsConfigurationWithTransparency();
      JWindow jWindow0 = null;
      try {
        jWindow0 = new JWindow(graphicsConfigurationWithTransparency0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Bases bases1 = strand0.getBases();
      Range range0 = new Range(1);
      Bases bases2 = bases1.truncate(range0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases2, 0, 2, "");
      Bases bases3 = sequenceChangeEvent0.getBases();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases3).when(strand1).getBases();
      doReturn(false).when(strand1).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand1);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 1;
      aGWindowAlgorithm0.getValues(2, 2, floatArray0);
      aGWindowAlgorithm0.getDefaultStepSize((-563));
      aGWindowAlgorithm0.getDefaultMinWindowSize();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("internal error - unexpected exception: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Entry.newEntry(bases0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      aGWindowAlgorithm0.setUserMaxMin(false);
      aGWindowAlgorithm0.setAlgorithmName((String) null);
      aGWindowAlgorithm0.getMaximum();
      aGWindowAlgorithm0.getMinimumInternal();
      aGWindowAlgorithm0.getMinimum();
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getValues(2, 3540, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.max_min_disabled = false;
      aGWindowAlgorithm0.setScalingFlag(true);
      aGWindowAlgorithm0.getMaximum();
      aGWindowAlgorithm0.getDefaultWindowSize();
      aGWindowAlgorithm0.setUserMaxMin(true);
      aGWindowAlgorithm0.getDefaultWindowSize();
      aGWindowAlgorithm0.getDefaultStepSize(1);
      aGWindowAlgorithm0.getMaximumInternal();
      aGWindowAlgorithm0.getDefaultStepSize(1);
      aGWindowAlgorithm0.getValueCount();
      aGWindowAlgorithm0.getMaximum();
      aGWindowAlgorithm0.getDefaultWindowSize();
      aGWindowAlgorithm0.setUserMaxMin(true);
      aGWindowAlgorithm0.getDefaultWindowSize();
      aGWindowAlgorithm0.getDefaultStepSize(1);
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      boolean boolean0 = false;
      aGWindowAlgorithm0.getDefaultStepSize(1);
      aGWindowAlgorithm0.setUserMaxMin(false);
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Bases bases1 = strand0.getBases();
      Range range0 = new Range(97);
      Bases bases2 = bases1.truncate(range0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases2, 0, 2, "");
      Bases bases3 = sequenceChangeEvent0.getBases();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases3).when(strand1).getBases();
      doReturn(false).when(strand1).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand1);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 1;
      aGWindowAlgorithm0.getValues(2, 2, floatArray0);
      aGWindowAlgorithm0.getDefaultStepSize(521);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.max_min_disabled = true;
      aGWindowAlgorithm0.getDefaultWindowSize();
      aGWindowAlgorithm0.setUserMin(1.0F);
      aGWindowAlgorithm0.getDefaultMinWindowSize();
      aGWindowAlgorithm0.getMinimum();
      aGWindowAlgorithm0.setRevCompDisplay(true);
      float[] floatArray0 = new float[8];
      aGWindowAlgorithm0.getMinimum();
      FileSystemHandling.shouldAllThrowIOExceptions();
      aGWindowAlgorithm0.setUserMin((-1255.5F));
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (-1410);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (-195.2104F);
      aGWindowAlgorithm0.setUserMax(93);
      aGWindowAlgorithm0.getDefaultMaxWindowSize();
      aGWindowAlgorithm0.getMinimumInternal();
      floatArray0[6] = (float) (-1410);
      floatArray0[7] = (float) 1;
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getValues(93, (-1410), floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 93 > end: -1410
         //
         verifyException("uk.ac.sanger.artemis.plot.AGWindowAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      doReturn((Strand) null).when(bases0).getReverseStrand();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getDefaultStepSize((-2418));
      aGWindowAlgorithm0.setUserMin(0.0F);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2418);
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (-2418);
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = 970.26F;
      floatArray0[6] = (float) 61;
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getValues(61, (-2418), floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 61 > end: -2418
         //
         verifyException("uk.ac.sanger.artemis.plot.AGWindowAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getDefaultStepSize(1789);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1789;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 97;
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getValues(97, 2, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getDefaultStepSize(10);
      aGWindowAlgorithm0.getValueCount();
      aGWindowAlgorithm0.getDefaultMaxWindowSize();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getDefaultStepSize(951);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getValueCount();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getMaximumInternal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getDefaultMinWindowSize();
      aGWindowAlgorithm0.getMinimumInternal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.setRevCompDisplay(false);
      aGWindowAlgorithm0.getDefaultMinWindowSize();
      aGWindowAlgorithm0.getDefaultMaxWindowSize();
      aGWindowAlgorithm0.getMaximum();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      aGWindowAlgorithm0.getDefaultMinWindowSize();
      floatArray0[1] = (-286.0F);
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getValues(2, 1, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AGWindowAlgorithm aGWindowAlgorithm0 = null;
      try {
        aGWindowAlgorithm0 = new AGWindowAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getValues(2, 2, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      boolean boolean0 = true;
      aGWindowAlgorithm0.setRevCompDisplay(true);
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getDefaultWindowSize();
      aGWindowAlgorithm0.getDefaultStepSize(1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Key key0 = new Key("+k");
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "ag_content", false);
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "ag_content");
      Clipboard clipboard0 = new Clipboard("PRf<~>3=|*b3");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      Short short0 = new Short((short) (-1414));
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1090), 429, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 5, 1470, ";}& noe");
      sequenceChangeEvent0.getRange();
      // Undeclared exception!
      try { 
        bases0.truncate((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      aGWindowAlgorithm0.getDefaultMinWindowSize();
      aGWindowAlgorithm0.setUserMaxMin(false);
      aGWindowAlgorithm0.setAlgorithmName((String) null);
      aGWindowAlgorithm0.getMaximum();
      aGWindowAlgorithm0.getMinimum();
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getValues(2, 3540, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.add(keyListener0, keyListener0);
      AWTEventMulticaster.remove(keyListener1, keyListener1);
      jInternalFrame0.addKeyListener((KeyListener) null);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      jInternalFrame_JDesktopIcon0.getDesktopPane();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getMinimum();
      aGWindowAlgorithm0.setUserMaxMin(true);
      aGWindowAlgorithm0.getDefaultStepSize(2);
      aGWindowAlgorithm0.getDefaultWindowSize();
      aGWindowAlgorithm0.getMaximumInternal();
      aGWindowAlgorithm0.getValueCount();
      aGWindowAlgorithm0.setAlgorithmName("AG Content (%)");
      aGWindowAlgorithm0.getMaximumInternal();
      aGWindowAlgorithm0.getMaximum();
      aGWindowAlgorithm0.getMaximumInternal();
      aGWindowAlgorithm0.getDefaultStepSize(2);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.SMALL_CAPS;
      aGWindowAlgorithm0.getMaximum();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      aGWindowAlgorithm0.getMaximumInternal();
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getDefaultStepSize((-5122));
      aGWindowAlgorithm0.setUserMaxMin(false);
      aGWindowAlgorithm0.getDefaultMaxWindowSize();
      aGWindowAlgorithm0.getMinimumInternal();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.UNDERLINE_ON;
      aGWindowAlgorithm0.getDefaultWindowSize();
      aGWindowAlgorithm0.getMinimumInternal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getDefaultMaxWindowSize();
      aGWindowAlgorithm0.max_min_disabled = true;
      aGWindowAlgorithm0.getDefaultWindowSize();
      aGWindowAlgorithm0.getDefaultWindowSize();
      aGWindowAlgorithm0.getDefaultMinWindowSize();
      aGWindowAlgorithm0.getMinimumInternal();
      aGWindowAlgorithm0.getValueCount();
      aGWindowAlgorithm0.getDefaultMinWindowSize();
      float[] floatArray0 = new float[7];
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getValues(120, 1, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("uk.ac.sanger.artemis.plot.AGWindowAlgorithm");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 1789, (-648), "P~,P-<q&~");
      Bases bases1 = sequenceChangeEvent0.getBases();
      sequenceChangeEvent0.getBases();
      Bases.reverseComplement("P~,P-<q&~");
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases1);
      simpleEntryGroup0.getBases();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (-810.43207F);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      floatArray0[8] = (float) 1;
      // Undeclared exception!
      try { 
        aGWindowAlgorithm0.getValues(2, 2, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }
}
