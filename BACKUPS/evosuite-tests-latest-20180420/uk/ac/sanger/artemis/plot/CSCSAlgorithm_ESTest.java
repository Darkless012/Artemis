/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:48:51 GMT 2018
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.FeatureKeyQualifierPredicate;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.io.StreamSequence;
import uk.ac.sanger.artemis.plot.AGWindowAlgorithm;
import uk.ac.sanger.artemis.plot.CSCSAlgorithm;
import uk.ac.sanger.artemis.plot.LineAttributes;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CSCSAlgorithm_ESTest extends CSCSAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("sequence name is ");
      StreamSequence streamSequence0 = emblStreamSequence0.copy();
      Bases bases0 = new Bases(streamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      int int0 = 63;
      cSCSAlgorithm0.getMaximumInternal();
      cSCSAlgorithm0.getDefaultMaxWindowSize();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 63;
      // Undeclared exception!
      try { 
        cSCSAlgorithm0.getValues(63, (-2020), floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 2038 > end: -45
         //
         verifyException("uk.ac.sanger.artemis.plot.CSCSAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(true, true).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      Graphics graphics0 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      Color[] colorArray0 = new Color[5];
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      colorArray0[0] = color0;
      colorArray0[1] = color0;
      colorArray0[2] = color0;
      cSCSAlgorithm0.setUserMax(2);
      colorArray0[3] = color0;
      colorArray0[4] = color0;
      cSCSAlgorithm0.drawLegend(graphics0, 1, 1765, colorArray0);
      cSCSAlgorithm0.getMinimumInternal();
      Graphics graphics1 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      cSCSAlgorithm0.drawLegend(graphics1, 1765, 148, colorArray0);
      cSCSAlgorithm0.getDefaultMinWindowSize();
      float[] floatArray0 = new float[8];
      floatArray0[0] = 527.16F;
      floatArray0[1] = (float) (-5261);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1765;
      floatArray0[4] = (float) (-5261);
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1765;
      floatArray0[7] = (float) (-5261);
      cSCSAlgorithm0.getValues((-5261), 5, floatArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      Strand strand1 = aGWindowAlgorithm0.getStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand1);
      cSCSAlgorithm0.getValueCount();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) 2;
      // Undeclared exception!
      try { 
        cSCSAlgorithm0.getValues(1, (-5), floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("Fastpath call {0} - No result was returned and we expected a long.");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 1, 2, "");
      Bases bases1 = sequenceChangeEvent0.getBases();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases1).when(strand0).getBases();
      doReturn(true, true).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      cSCSAlgorithm0.getDefaultStepSize(61);
      float[] floatArray0 = new float[1];
      cSCSAlgorithm0.setScalingFlag(false);
      floatArray0[0] = (float) 1;
      // Undeclared exception!
      try { 
        cSCSAlgorithm0.getValues(2, 1, floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 2 > end: 1
         //
         verifyException("uk.ac.sanger.artemis.plot.CSCSAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Key key0 = Key.CDS;
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "'U6D::WEN%624M!");
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "(2{t0xA2!Df4Z");
      Range range0 = new Range((-1));
      // Undeclared exception!
      try { 
        filteredEntryGroup0.truncate(range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.SimpleEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(true, true).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      Graphics graphics0 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      Graphics graphics1 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      LineAttributes[] lineAttributesArray0 = new LineAttributes[2];
      cSCSAlgorithm0.getMinimumInternal();
      LineAttributes lineAttributes0 = mock(LineAttributes.class, new ViolatedAssumptionAnswer());
      lineAttributesArray0[0] = lineAttributes0;
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      cSCSAlgorithm0.getDefaultStepSize(287);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      cSCSAlgorithm0.setUserMaxMin(true);
      cSCSAlgorithm0.getDefaultMinWindowSize();
      cSCSAlgorithm0.getDefaultStepSize(1);
      cSCSAlgorithm0.getDefaultWindowSize();
      cSCSAlgorithm0.getDefaultWindowSize();
      cSCSAlgorithm0.getAverage();
      cSCSAlgorithm0.getDefaultMinWindowSize();
      float float0 = 0.0F;
      cSCSAlgorithm0.getDefaultMinWindowSize();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-5812);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 1;
      // Undeclared exception!
      try { 
        cSCSAlgorithm0.getValues((-5812), 0, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      cSCSAlgorithm0.getAverage();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      cSCSAlgorithm0.getDefaultStepSize((-565));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSCSAlgorithm cSCSAlgorithm0 = null;
      try {
        cSCSAlgorithm0 = new CSCSAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.CSCSAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("uk.ac.sanger.artemis.plot.CSCSAlgorithm");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(true, true).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      cSCSAlgorithm0.getMaximumInternal();
      cSCSAlgorithm0.getMinimum();
      cSCSAlgorithm0.setRevCompDisplay(true);
      cSCSAlgorithm0.getDefaultMaxWindowSize();
      cSCSAlgorithm0.max_min_disabled = true;
      cSCSAlgorithm0.getDefaultWindowSize();
      cSCSAlgorithm0.getDefaultStepSize(2);
      cSCSAlgorithm0.setAlgorithmName("");
      cSCSAlgorithm0.getMaximumInternal();
      cSCSAlgorithm0.getMaximumInternal();
      cSCSAlgorithm0.getDefaultMaxWindowSize();
      cSCSAlgorithm0.getDefaultStepSize(84);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      cSCSAlgorithm0.getDefaultMaxWindowSize();
      Graphics graphics0 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      Color[] colorArray0 = new Color[5];
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      colorArray0[0] = color0;
      colorArray0[1] = color0;
      colorArray0[2] = color0;
      colorArray0[3] = color0;
      colorArray0[4] = color0;
      cSCSAlgorithm0.drawLegend(graphics0, 1235, (-514), colorArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(true, true).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      Graphics graphics0 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      cSCSAlgorithm0.getMaximumInternal();
      cSCSAlgorithm0.setUserMax(2);
      cSCSAlgorithm0.getMinimumInternal();
      Graphics graphics1 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      cSCSAlgorithm0.getDefaultMinWindowSize();
      float[] floatArray0 = new float[8];
      floatArray0[0] = 527.16F;
      floatArray0[1] = (float) (-5261);
      floatArray0[3] = (float) 1765;
      floatArray0[4] = (float) (-5261);
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1765;
      floatArray0[7] = (float) (-5261);
      cSCSAlgorithm0.getValues((-5261), 5, floatArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      cSCSAlgorithm0.max_min_disabled = false;
      cSCSAlgorithm0.getDefaultWindowSize();
      cSCSAlgorithm0.getMinimumInternal();
      int int0 = 0;
      cSCSAlgorithm0.getDefaultMinWindowSize();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      cSCSAlgorithm0.setAlgorithmName((String) null);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 0;
      // Undeclared exception!
      try { 
        cSCSAlgorithm0.getValues(0, 47, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(true, true).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      cSCSAlgorithm0.setUserMin(0.0F);
      cSCSAlgorithm0.setUserMax(1002.3794F);
      cSCSAlgorithm0.getDefaultMaxWindowSize();
      cSCSAlgorithm0.getMinimumInternal();
      cSCSAlgorithm0.getMaximum();
      cSCSAlgorithm0.getMinimum();
      cSCSAlgorithm0.setRevCompDisplay(true);
      cSCSAlgorithm0.getValueCount();
      cSCSAlgorithm0.setRevCompDisplay(true);
      cSCSAlgorithm0.getMaximumInternal();
      cSCSAlgorithm0.getMinimumInternal();
      cSCSAlgorithm0.getMinimumInternal();
      cSCSAlgorithm0.getMinimumInternal();
      cSCSAlgorithm0.getDefaultMaxWindowSize();
      cSCSAlgorithm0.getDefaultWindowSize();
      cSCSAlgorithm0.getAverage();
      cSCSAlgorithm0.getDefaultStepSize(4);
      Graphics graphics0 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      Color[] colorArray0 = new Color[4];
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      colorArray0[0] = color0;
      colorArray0[1] = color0;
      colorArray0[3] = colorArray0[2];
      cSCSAlgorithm0.drawLegend(graphics0, 525, 0, colorArray0);
      cSCSAlgorithm0.getDefaultMinWindowSize();
      cSCSAlgorithm0.getMaximumInternal();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 68, (-2426), "");
      Bases bases1 = sequenceChangeEvent0.getBases();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases1).when(strand0).getBases();
      doReturn(true, false).when(strand0).isForwardStrand();
      CSCSAlgorithm cSCSAlgorithm0 = new CSCSAlgorithm(strand0);
      cSCSAlgorithm0.getMaximumInternal();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      cSCSAlgorithm0.getDefaultMaxWindowSize();
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 2;
      // Undeclared exception!
      try { 
        cSCSAlgorithm0.getValues(1, 1, floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 1 > end: 0
         //
         verifyException("uk.ac.sanger.artemis.plot.CSCSAlgorithm", e);
      }
  }
}
