/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 11:46:52 GMT 2018
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics;
import java.awt.datatransfer.Clipboard;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.EntryGroup;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.SimpleGotoEventSource;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.AGWindowAlgorithm;
import uk.ac.sanger.artemis.plot.LineAttributes;
import uk.ac.sanger.artemis.plot.PositionalAsymmetryAlgorithm;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class PositionalAsymmetryAlgorithm_ESTest extends PositionalAsymmetryAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("uk.ac.sanger.artemis.plot.PositionalAsymmetryAlgorithm", "");
      Bases bases0 = new Bases(fastaStreamSequence0);
      bases0.toString();
      Strand strand0 = bases0.getForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      Strand strand1 = aGWindowAlgorithm0.getStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand1);
      positionalAsymmetryAlgorithm0.getDefaultStepSize((-5));
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) (-5);
      floatArray0[2] = (float) 1;
      floatArray0[3] = 1767.2778F;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1298;
      positionalAsymmetryAlgorithm0.getValues((-5), 1298, floatArray0);
      positionalAsymmetryAlgorithm0.getDefaultStepSize(19);
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) (-5);
      floatArray1[1] = (float) 1;
      floatArray1[2] = (float) 1;
      floatArray1[3] = (float) 1;
      floatArray1[4] = (float) (-5);
      floatArray1[5] = (float) 1;
      floatArray1[6] = (float) 1;
      positionalAsymmetryAlgorithm0.getValues(1, 5, floatArray1);
      positionalAsymmetryAlgorithm0.getMaximumInternal();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("uk.ac.sanger.artemis.plot.PositionalAsymmetryAlgorithm", "");
      Bases bases0 = new Bases(fastaStreamSequence0);
      bases0.toString();
      Strand strand0 = bases0.getForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      Strand strand1 = aGWindowAlgorithm0.getStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand1);
      positionalAsymmetryAlgorithm0.getDefaultStepSize((-5));
      positionalAsymmetryAlgorithm0.getDefaultStepSize(19);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-5);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) (-5);
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      positionalAsymmetryAlgorithm0.getValues(1, 5, floatArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("jjP(VksEVS`]K");
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertNotNull(emblStreamSequence0);
      
      Bases bases0 = new Bases(emblStreamSequence0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotNull(bases0);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotNull(simpleEntryGroup0);
      
      FeatureVector featureVector0 = new FeatureVector();
      assertNotNull(featureVector0);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "");
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(filteredEntryGroup0.hasUnsavedChanges());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertNotNull(filteredEntryGroup0);
      
      Bases bases1 = filteredEntryGroup0.getBases();
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(filteredEntryGroup0.hasUnsavedChanges());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotNull(bases1);
      
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases1).when(strand0).getBases();
      doReturn(true, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(filteredEntryGroup0.hasUnsavedChanges());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals("Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNotNull(positionalAsymmetryAlgorithm0);
      
      Float float0 = positionalAsymmetryAlgorithm0.getMinimum();
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(filteredEntryGroup0.hasUnsavedChanges());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals("Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNull(float0);
      
      Integer integer0 = positionalAsymmetryAlgorithm0.getDefaultStepSize(1);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(filteredEntryGroup0.hasUnsavedChanges());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals("Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertNull(integer0);
      
      Integer integer1 = positionalAsymmetryAlgorithm0.getDefaultStepSize(180);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(filteredEntryGroup0.hasUnsavedChanges());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals("Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(18, (int)integer1);
      assertNotNull(integer1);
      
      Float float1 = positionalAsymmetryAlgorithm0.getMinimumInternal();
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(filteredEntryGroup0.hasUnsavedChanges());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals("Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = positionalAsymmetryAlgorithm0.getMaximumInternal();
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(filteredEntryGroup0.hasUnsavedChanges());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals("Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(10000.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = positionalAsymmetryAlgorithm0.getMinimumInternal();
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(filteredEntryGroup0.hasUnsavedChanges());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals("Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = positionalAsymmetryAlgorithm0.getMinimumInternal();
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(filteredEntryGroup0.hasUnsavedChanges());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals("Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 180;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      positionalAsymmetryAlgorithm0.getValues(2, 2, floatArray0);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, simpleEntryGroup0.getAllFeaturesCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(filteredEntryGroup0.hasUnsavedChanges());
      assertEquals(0, filteredEntryGroup0.size());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals("Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(4, floatArray0.length);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[6];
      floatArray1[0] = 3269.0752F;
      floatArray1[1] = (-90.489F);
      floatArray1[2] = (float) (-3757);
      floatArray1[3] = (float) 1;
      floatArray1[4] = (float) 1;
      floatArray1[5] = (float) (-5);
      // Undeclared exception!
      try { 
        positionalAsymmetryAlgorithm0.getValues(1, (-3757), floatArray1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 3771 > end: 13
         //
         verifyException("uk.ac.sanger.artemis.plot.PositionalAsymmetryAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("internal error - unexpected exception: ", "internal error - unexpected exception: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getDefaultStepSize(1);
      float[] floatArray0 = new float[8];
      positionalAsymmetryAlgorithm0.setUserMin(2);
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 2;
      floatArray0[2] = 0.0F;
      positionalAsymmetryAlgorithm0.setUserMaxMin(true);
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 2;
      floatArray0[5] = 6537.9F;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 0;
      positionalAsymmetryAlgorithm0.getValues(0, 2, floatArray0);
      positionalAsymmetryAlgorithm0.getMinimumInternal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("jjP(VksEVS`]K");
      Bases bases0 = new Bases(emblStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "");
      Bases bases1 = filteredEntryGroup0.getBases();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases1).when(strand0).getBases();
      doReturn(true, true).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getMinimum();
      positionalAsymmetryAlgorithm0.getDefaultStepSize(180);
      positionalAsymmetryAlgorithm0.getMinimumInternal();
      positionalAsymmetryAlgorithm0.getMaximumInternal();
      positionalAsymmetryAlgorithm0.getMinimumInternal();
      positionalAsymmetryAlgorithm0.getMinimumInternal();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 180;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      positionalAsymmetryAlgorithm0.getValues(2, 2, floatArray0);
      positionalAsymmetryAlgorithm0.getDefaultMaxWindowSize();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      Graphics graphics0 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      positionalAsymmetryAlgorithm0.setAlgorithmName("positional_asymmetry");
      LineAttributes[] lineAttributesArray0 = new LineAttributes[4];
      LineAttributes lineAttributes0 = mock(LineAttributes.class, new ViolatedAssumptionAnswer());
      lineAttributesArray0[0] = lineAttributes0;
      lineAttributesArray0[1] = lineAttributes0;
      lineAttributesArray0[2] = lineAttributes0;
      lineAttributesArray0[3] = lineAttributes0;
      positionalAsymmetryAlgorithm0.getDefaultStepSize(26);
      // Undeclared exception!
      try { 
        positionalAsymmetryAlgorithm0.drawLegend(graphics0, 1, 1, lineAttributesArray0, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.awt.Graphics$MockitoMock$582973190 cannot be cast to java.awt.Graphics2D
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "pT0+(&U [h&J";
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("pT0+(&U [h&J");
      Bases bases0 = new Bases(rawStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Range range0 = null;
      try {
        range0 = new Range(1042, 2);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // start: 1042 > end: 2
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getDefaultStepSize(10);
      positionalAsymmetryAlgorithm0.getMinimumInternal();
      positionalAsymmetryAlgorithm0.getMinimum();
      float[] floatArray0 = new float[1];
      positionalAsymmetryAlgorithm0.getMinimum();
      positionalAsymmetryAlgorithm0.getDefaultWindowSize();
      positionalAsymmetryAlgorithm0.getMinimumInternal();
      floatArray0[0] = (float) 2;
      positionalAsymmetryAlgorithm0.getDefaultWindowSize();
      boolean boolean0 = true;
      positionalAsymmetryAlgorithm0.setScalingFlag(true);
      positionalAsymmetryAlgorithm0.getMinimum();
      // Undeclared exception!
      try { 
        positionalAsymmetryAlgorithm0.getValues(762, 10, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getValueCount();
      positionalAsymmetryAlgorithm0.getMinimumInternal();
      positionalAsymmetryAlgorithm0.setUserMax(0.0F);
      positionalAsymmetryAlgorithm0.getDefaultStepSize(1830);
      positionalAsymmetryAlgorithm0.getDefaultStepSize(2);
      positionalAsymmetryAlgorithm0.getDefaultMaxWindowSize();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        positionalAsymmetryAlgorithm0.getValues(1, 0, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getMinimumInternal();
      // Undeclared exception!
      try { 
        positionalAsymmetryAlgorithm0.getValues(2, 933, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getDefaultMaxWindowSize();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getDefaultStepSize(2);
      positionalAsymmetryAlgorithm0.getDefaultWindowSize();
      positionalAsymmetryAlgorithm0.getDefaultWindowSize();
      positionalAsymmetryAlgorithm0.getDefaultStepSize(2);
      int int0 = 84;
      float[] floatArray0 = null;
      positionalAsymmetryAlgorithm0.getDefaultWindowSize();
      positionalAsymmetryAlgorithm0.getMaximumInternal();
      // Undeclared exception!
      try { 
        positionalAsymmetryAlgorithm0.getValues(84, 1, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = null;
      try {
        positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.PositionalAsymmetryAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.setUserMaxMin(true);
      positionalAsymmetryAlgorithm0.getDefaultStepSize(340);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getDefaultStepSize(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getDefaultMinWindowSize();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertNotNull(positionalAsymmetryAlgorithm0);
      
      Integer integer0 = positionalAsymmetryAlgorithm0.getDefaultMaxWindowSize();
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertEquals(5000, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = positionalAsymmetryAlgorithm0.getMinimum();
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertNull(float0);
      
      Integer integer1 = positionalAsymmetryAlgorithm0.getDefaultMinWindowSize();
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertEquals(10, (int)integer1);
      assertNotNull(integer1);
      
      Graphics graphics0 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      LineAttributes[] lineAttributesArray0 = new LineAttributes[9];
      LineAttributes lineAttributes0 = mock(LineAttributes.class, new ViolatedAssumptionAnswer());
      lineAttributesArray0[0] = lineAttributes0;
      lineAttributesArray0[3] = lineAttributes0;
      positionalAsymmetryAlgorithm0.setUserMaxMin(true);
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertTrue(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      
      lineAttributesArray0[2] = lineAttributesArray0[1];
      lineAttributesArray0[3] = lineAttributesArray0[2];
      lineAttributesArray0[4] = lineAttributesArray0[3];
      lineAttributesArray0[5] = lineAttributesArray0[4];
      lineAttributesArray0[6] = lineAttributes0;
      lineAttributesArray0[7] = lineAttributes0;
      positionalAsymmetryAlgorithm0.setScalingFlag(true);
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertTrue(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      
      int int0 = 219;
      // Undeclared exception!
      try { 
        positionalAsymmetryAlgorithm0.drawLegend(graphics0, 0, 0, lineAttributesArray0, 219);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.awt.Graphics$MockitoMock$582973190 cannot be cast to java.awt.Graphics2D
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getDefaultWindowSize();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getMinimum();
      positionalAsymmetryAlgorithm0.getValueCount();
      positionalAsymmetryAlgorithm0.getMaximumInternal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getMaximumInternal();
      positionalAsymmetryAlgorithm0.getMinimum();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Bases.complement("internal error - unexpected exception: ");
      positionalAsymmetryAlgorithm0.getMinimum();
      positionalAsymmetryAlgorithm0.setRevCompDisplay(true);
      positionalAsymmetryAlgorithm0.getMinimumInternal();
      // Undeclared exception!
      try { 
        strand0.makeMarker(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`)ojal[F&NV c");
      AGWindowAlgorithm aGWindowAlgorithm0 = null;
      try {
        aGWindowAlgorithm0 = new AGWindowAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("uk.ac.sanger.artemis.plot.PositionalAsymmetryAlgorithm", "");
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertNotNull(fastaStreamSequence0);
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertNotNull(bases0);
      
      String string0 = bases0.toString();
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals("uknacnsangnrnartnmnsnnnntnnnsntnnnannsymmntrynngnrnthm", string0);
      assertNotNull(string0);
      
      Strand strand0 = bases0.getReverseStrand();
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertNotNull(strand0);
      
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertNotNull(aGWindowAlgorithm0);
      
      Strand strand1 = aGWindowAlgorithm0.getStrand();
      assertSame(strand0, strand1);
      assertSame(strand1, strand0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(2, strand1.getDirection());
      assertFalse(strand1.isForwardStrand());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertNotNull(strand1);
      
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand1);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(2, strand1.getDirection());
      assertFalse(strand1.isForwardStrand());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertNotNull(positionalAsymmetryAlgorithm0);
      
      Integer integer0 = positionalAsymmetryAlgorithm0.getDefaultStepSize((-5));
      assertSame(strand0, strand1);
      assertSame(strand1, strand0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(2, strand1.getDirection());
      assertFalse(strand1.isForwardStrand());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertNull(integer0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) (-5);
      floatArray0[2] = (float) 1;
      floatArray0[3] = 1767.2778F;
      floatArray0[4] = (float) 1;
      positionalAsymmetryAlgorithm0.getValues(0, 5, floatArray0);
      assertSame(strand0, strand1);
      assertSame(strand1, strand0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(2, strand1.getDirection());
      assertFalse(strand1.isForwardStrand());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(6, floatArray0.length);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertArrayEquals(new float[] {0.0F, (-5.0F), 1.0F, 1767.2778F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      floatArray0[5] = (float) 1298;
      positionalAsymmetryAlgorithm0.getValues((-5), 1298, floatArray0);
      assertSame(strand0, strand1);
      assertSame(strand1, strand0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(2, strand1.getDirection());
      assertFalse(strand1.isForwardStrand());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(6, floatArray0.length);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertArrayEquals(new float[] {15.437498F, (-5.0F), 1.0F, 1767.2778F, 1.0F, 1298.0F}, floatArray0, 0.01F);
      
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_TTB;
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-5);
      floatArray1[1] = (float) 1;
      floatArray1[2] = (float) 1;
      floatArray1[3] = (float) 1;
      floatArray1[4] = (float) (-5);
      floatArray1[5] = (float) 1;
      floatArray1[6] = (float) 1;
      positionalAsymmetryAlgorithm0.getValues(1, 5, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertSame(strand0, strand1);
      assertSame(strand1, strand0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(2, strand1.getDirection());
      assertFalse(strand1.isForwardStrand());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(7, floatArray1.length);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 1.0F, (-5.0F), 1.0F, 1.0F}, floatArray1, 0.01F);
      
      Float float0 = positionalAsymmetryAlgorithm0.getMaximumInternal();
      assertSame(strand0, strand1);
      assertSame(strand1, strand0);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(54, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(2, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(5, fastaStreamSequence0.getTCount());
      assertEquals(42, fastaStreamSequence0.getOtherCount());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(2, strand1.getDirection());
      assertFalse(strand1.isForwardStrand());
      assertFalse(positionalAsymmetryAlgorithm0.isRevCompDisplay());
      assertEquals(1, positionalAsymmetryAlgorithm0.getValueCount());
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, positionalAsymmetryAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Reverse Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertNull(positionalAsymmetryAlgorithm0.getAverage());
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(10000.0F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("jjP(VksEVS`]K");
      Bases bases0 = new Bases(emblStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "");
      emblStreamSequence0.setFromChar(bases0.letter_index);
      Bases bases1 = filteredEntryGroup0.getBases();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases1).when(strand0).getBases();
      doReturn(true, false).when(strand0).isForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.getMinimum();
      positionalAsymmetryAlgorithm0.getDefaultStepSize(1);
      positionalAsymmetryAlgorithm0.getDefaultStepSize(180);
      positionalAsymmetryAlgorithm0.getMinimumInternal();
      positionalAsymmetryAlgorithm0.getMaximumInternal();
      positionalAsymmetryAlgorithm0.getMinimumInternal();
      positionalAsymmetryAlgorithm0.getMinimumInternal();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 180;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      positionalAsymmetryAlgorithm0.getValues(2, 2, floatArray0);
      // Undeclared exception!
      try { 
        positionalAsymmetryAlgorithm0.getValues(1, 0, floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 6 > end: 5
         //
         verifyException("uk.ac.sanger.artemis.plot.PositionalAsymmetryAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Key key0 = Key.CDS;
      Clipboard clipboard0 = new Clipboard("TRIPLE");
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      assertEquals(3, rawStreamSequence0.getFormatType());
  }
}
