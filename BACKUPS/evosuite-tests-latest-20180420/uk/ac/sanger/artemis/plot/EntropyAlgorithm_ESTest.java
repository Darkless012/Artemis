/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:20:32 GMT 2018
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics;
import java.awt.datatransfer.Clipboard;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.EntryGroup;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.SimpleGotoEventSource;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.StreamSequence;
import uk.ac.sanger.artemis.plot.EntropyAlgorithm;
import uk.ac.sanger.artemis.plot.LineAttributes;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class EntropyAlgorithm_ESTest extends EntropyAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Key key0 = Key.CDS;
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getDefaultStepSize(0);
      entropyAlgorithm0.setAlgorithmName("'q");
      entropyAlgorithm0.getDefaultMaxWindowSize();
      entropyAlgorithm0.getDefaultStepSize(2);
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("W A-DTh1e42");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      boolean boolean0 = false;
      entropyAlgorithm0.getMaximum();
      entropyAlgorithm0.setScalingFlag(false);
      entropyAlgorithm0.getValueCount();
      entropyAlgorithm0.getMaximumInternal();
      int int0 = (-1350);
      float[] floatArray0 = new float[4];
      entropyAlgorithm0.getAverage();
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1350);
      floatArray0[3] = (float) (-1350);
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getValues((-1350), 1, floatArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("SM*X>'@%SnN8D5*>");
      Selection selection0 = new Selection(clipboard0);
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource((EntryGroup) null);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getDefaultStepSize(0);
      entropyAlgorithm0.setAlgorithmName("'q");
      entropyAlgorithm0.getDefaultMaxWindowSize();
      entropyAlgorithm0.getDefaultStepSize(2);
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      Bases bases1 = entropyAlgorithm0.getBases();
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases1, 20, 3858, "");
      Bases bases2 = sequenceChangeEvent0.getBases();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases2).when(strand1).getBases();
      doReturn(false, false).when(strand1).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm1 = new EntropyAlgorithm(strand1);
      entropyAlgorithm1.setUserMin(1);
      float[] floatArray0 = new float[6];
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getValues((-1), (-2641), floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 2642 > end: 2
         //
         verifyException("uk.ac.sanger.artemis.plot.EntropyAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("", (String) null);
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, (FeatureVector) null, "yY]9");
      Bases bases1 = filteredEntryGroup0.getBases();
      Strand strand0 = bases1.getReverseStrand();
      Bases bases2 = strand0.getBases();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases2).when(strand1).getBases();
      doReturn(false, true).when(strand1).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand1);
      entropyAlgorithm0.getDefaultStepSize(1);
      entropyAlgorithm0.max_min_disabled = true;
      boolean boolean0 = false;
      entropyAlgorithm0.getAverage();
      entropyAlgorithm0.getDefaultWindowSize();
      // Undeclared exception!
      try { 
        simpleEntryGroup0.featureAt(72);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - index out of range: 72
         //
         verifyException("uk.ac.sanger.artemis.SimpleEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(true, true).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.max_min_disabled = true;
      entropyAlgorithm0.setScalingFlag(true);
      entropyAlgorithm0.setUserMaxMin(true);
      entropyAlgorithm0.max_min_disabled = false;
      entropyAlgorithm0.setUserMin(2281.456F);
      entropyAlgorithm0.setUserMax(0);
      entropyAlgorithm0.setUserMaxMin(false);
      entropyAlgorithm0.getDefaultStepSize(0);
      entropyAlgorithm0.setUserMaxMin(true);
      entropyAlgorithm0.getMinimumInternal();
      entropyAlgorithm0.getDefaultMinWindowSize();
      entropyAlgorithm0.getMinimumInternal();
      entropyAlgorithm0.getDefaultMinWindowSize();
      entropyAlgorithm0.setUserMaxMin(true);
      entropyAlgorithm0.getMinimum();
      entropyAlgorithm0.setScalingFlag(false);
      entropyAlgorithm0.getMaximumInternal();
      entropyAlgorithm0.getDefaultStepSize(1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getDefaultWindowSize();
      entropyAlgorithm0.getDefaultWindowSize();
      entropyAlgorithm0.getDefaultStepSize(10);
      entropyAlgorithm0.setUserMax(2157.0F);
      entropyAlgorithm0.getDefaultStepSize(1476);
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getValueCount();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getDefaultStepSize(1387);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getDefaultWindowSize();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getMinimumInternal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getDefaultMaxWindowSize();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getDefaultStepSize(20);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EntropyAlgorithm entropyAlgorithm0 = null;
      try {
        entropyAlgorithm0 = new EntropyAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.EntropyAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getDefaultMinWindowSize();
      entropyAlgorithm0.getMaximumInternal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getMaximumInternal();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.setAlgorithmName((String) null);
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1720);
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getValues((-1720), 0, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getMinimum();
      entropyAlgorithm0.setUserMax(1);
      entropyAlgorithm0.max_min_disabled = false;
      entropyAlgorithm0.setScalingFlag(false);
      entropyAlgorithm0.setUserMaxMin(false);
      entropyAlgorithm0.getDefaultMinWindowSize();
      entropyAlgorithm0.getDefaultMaxWindowSize();
      entropyAlgorithm0.getDefaultStepSize(0);
      entropyAlgorithm0.getMaximum();
      entropyAlgorithm0.setUserMin(2);
      entropyAlgorithm0.getDefaultMaxWindowSize();
      entropyAlgorithm0.getDefaultStepSize(1);
      entropyAlgorithm0.getDefaultStepSize(2);
      entropyAlgorithm0.getDefaultMinWindowSize();
      entropyAlgorithm0.getMinimumInternal();
      entropyAlgorithm0.getValueCount();
      entropyAlgorithm0.getMaximumInternal();
      entropyAlgorithm0.getDefaultWindowSize();
      entropyAlgorithm0.getValueCount();
      Graphics graphics0 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      LineAttributes[] lineAttributesArray0 = new LineAttributes[9];
      LineAttributes lineAttributes0 = mock(LineAttributes.class, new ViolatedAssumptionAnswer());
      lineAttributesArray0[0] = lineAttributes0;
      lineAttributesArray0[1] = lineAttributes0;
      lineAttributesArray0[2] = lineAttributes0;
      lineAttributesArray0[3] = lineAttributes0;
      lineAttributesArray0[4] = lineAttributes0;
      lineAttributesArray0[5] = lineAttributes0;
      lineAttributesArray0[6] = lineAttributes0;
      lineAttributesArray0[7] = lineAttributes0;
      lineAttributesArray0[8] = lineAttributes0;
      // Undeclared exception!
      try { 
        entropyAlgorithm0.drawLegend(graphics0, 4145, 1, lineAttributesArray0, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.awt.Graphics$MockitoMock$128125583 cannot be cast to java.awt.Graphics2D
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getMaximumInternal();
      entropyAlgorithm0.getValueCount();
      entropyAlgorithm0.setRevCompDisplay(true);
      entropyAlgorithm0.getDefaultWindowSize();
      entropyAlgorithm0.getDefaultMinWindowSize();
      int int0 = 1176;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getValues((-1837), (-523), floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getMaximum();
      entropyAlgorithm0.getMaximumInternal();
      entropyAlgorithm0.getMinimumInternal();
      entropyAlgorithm0.getDefaultStepSize(11);
      entropyAlgorithm0.getDefaultMaxWindowSize();
      entropyAlgorithm0.getDefaultMinWindowSize();
      entropyAlgorithm0.getMaximumInternal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "7V Bw");
      Entry entry0 = filteredEntryGroup0.createEntry();
      entry0.getBases();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false, false).when(strand0).isForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.max_min_disabled = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      entropyAlgorithm0.setScalingFlag(true);
      entropyAlgorithm0.getMinimum();
      entropyAlgorithm0.setUserMax(0.0F);
      entropyAlgorithm0.getMinimumInternal();
      entropyAlgorithm0.setRevCompDisplay(false);
      Float float0 = new Float((float) 2);
      entropyAlgorithm0.setAlgorithmName("SS/z#p:>VHHh");
      entropyAlgorithm0.setAlgorithmName("SS/z#p:>VHHh");
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_ISOLATED;
      entropyAlgorithm0.getDefaultMaxWindowSize();
      entropyAlgorithm0.getMinimum();
      entropyAlgorithm0.getDefaultMinWindowSize();
      entropyAlgorithm0.getDefaultWindowSize();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EntropyAlgorithm entropyAlgorithm0 = null;
      try {
        entropyAlgorithm0 = new EntropyAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.EntropyAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("I)*h52");
      StreamSequence streamSequence0 = emblStreamSequence0.copy();
      Bases bases0 = new Bases(streamSequence0);
  }
}
