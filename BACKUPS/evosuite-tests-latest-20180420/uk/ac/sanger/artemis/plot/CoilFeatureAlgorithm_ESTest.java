/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:32:16 GMT 2018
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.plot.CoilFeatureAlgorithm;
import uk.ac.sanger.artemis.sequence.AminoAcidSequence;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CoilFeatureAlgorithm_ESTest extends CoilFeatureAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("CZJW", true);
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(aminoAcidSequence0).when(feature0).getTranslation();
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm(feature0);
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        coilFeatureAlgorithm0.getValues(0, 0, floatArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("c3ZLEnXE3iCEEB[", false);
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(aminoAcidSequence0).when(feature0).getTranslation();
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm(feature0);
      float[] floatArray0 = new float[7];
      // Undeclared exception!
      try { 
        coilFeatureAlgorithm0.getValues((-2150), 690, floatArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm(feature0);
      coilFeatureAlgorithm0.getMaximumInternal();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      float[] floatArray0 = new float[5];
      // Undeclared exception!
      try { 
        coilFeatureAlgorithm0.getValues((-3445), (-3445), floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.CoilFeatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("^Ys^Jg9pz<(s)e)X$");
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(aminoAcidSequence0).when(feature0).getTranslation();
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm(feature0);
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        coilFeatureAlgorithm0.getValues(0, 0, floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: ^
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("+0s^Jg9pz<qs)e)X$");
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn(aminoAcidSequence0).when(feature0).getTranslation();
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm(feature0);
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        coilFeatureAlgorithm0.getValues(10, 10, floatArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      coilFeatureAlgorithm0.getDefaultMinWindowSize();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      coilFeatureAlgorithm0.getMinimumInternal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm(feature0);
      coilFeatureAlgorithm0.getValueCount();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      coilFeatureAlgorithm0.getDefaultStepSize(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      coilFeatureAlgorithm0.getDefaultMaxWindowSize();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      coilFeatureAlgorithm0.getAverage();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm(feature0);
      coilFeatureAlgorithm0.getDefaultWindowSize();
  }
}
