/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 10 12:21:47 GMT 2018
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.LineGroup;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.ATDeviationAlgorithm;
import uk.ac.sanger.artemis.plot.LineAttributes;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ATDeviationAlgorithm_ESTest extends ATDeviationAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("All terms must be from the same ontology: ");
      Bases bases0 = new Bases(emblStreamSequence0);
      Range range0 = new Range(1);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(0, 1, range0);
      Range range1 = sequenceChangeEvent0.getRange();
      Range range2 = range1.copy();
      SequenceChangeEvent sequenceChangeEvent1 = new SequenceChangeEvent(bases0, 0, range2, 5);
      Bases bases1 = sequenceChangeEvent1.getBases();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases1).when(strand0).getBases();
      doReturn(true).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.getDefaultWindowSize();
      aTDeviationAlgorithm0.getDefaultStepSize(1910);
      aTDeviationAlgorithm0.setAlgorithmName("internal error - strands do not match");
      aTDeviationAlgorithm0.setRevCompDisplay(true);
      aTDeviationAlgorithm0.setAlgorithmName("5gMf7=GnJ25");
      aTDeviationAlgorithm0.getDefaultWindowSize();
      aTDeviationAlgorithm0.setRevCompDisplay(true);
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      aTDeviationAlgorithm0.max_min_disabled = true;
      aTDeviationAlgorithm0.getMaximumInternal();
      aTDeviationAlgorithm0.getAverage();
      aTDeviationAlgorithm0.getAverage();
      aTDeviationAlgorithm0.getMaximumInternal();
      aTDeviationAlgorithm0.getDefaultWindowSize();
      aTDeviationAlgorithm0.getMaximumInternal();
      aTDeviationAlgorithm0.getValueCount();
      aTDeviationAlgorithm0.getMinimumInternal();
      aTDeviationAlgorithm0.getValueCount();
      aTDeviationAlgorithm0.getMaximumInternal();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'g';
      charArray0[2] = 'y';
      charArray0[3] = 'b';
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      Graphics graphics0 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      LineAttributes[] lineAttributesArray0 = new LineAttributes[4];
      LineAttributes lineAttributes0 = mock(LineAttributes.class, new ViolatedAssumptionAnswer());
      lineAttributesArray0[0] = lineAttributes0;
      lineAttributesArray0[1] = lineAttributes0;
      lineAttributesArray0[2] = lineAttributes0;
      lineAttributesArray0[3] = lineAttributes0;
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm0.drawLegend(graphics0, (-1509), 0, lineAttributesArray0, (-1107));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.awt.Graphics$MockitoMock$353868624 cannot be cast to java.awt.Graphics2D
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.setUserMin(2);
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      aTDeviationAlgorithm0.getDefaultWindowSize();
      aTDeviationAlgorithm0.setUserMin((-277.75912F));
      aTDeviationAlgorithm0.getMinimumInternal();
      aTDeviationAlgorithm0.setUserMaxMin(false);
      aTDeviationAlgorithm0.setUserMin(1);
      aTDeviationAlgorithm0.getMaximumInternal();
      aTDeviationAlgorithm0.getMaximumInternal();
      aTDeviationAlgorithm0.getValueCount();
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("}-:1j(^icg; b:F>");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(true).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.getDefaultMaxWindowSize();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 1;
      aTDeviationAlgorithm0.getValues((-778), (-778), floatArray0);
      aTDeviationAlgorithm0.setRevCompDisplay(true);
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      aTDeviationAlgorithm0.getDefaultWindowSize();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Entry entry0 = Entry.newEntry(bases0);
      Bases bases1 = entry0.getBases();
      Strand strand0 = bases1.getForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      Bases bases2 = aTDeviationAlgorithm0.getBases();
      Strand strand1 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases2).when(strand1).getBases();
      doReturn(true).when(strand1).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm1 = new ATDeviationAlgorithm(strand1);
      aTDeviationAlgorithm1.setAlgorithmName("");
      aTDeviationAlgorithm1.getDefaultMinWindowSize();
      aTDeviationAlgorithm1.getMinimum();
      float[] floatArray0 = new float[8];
      floatArray0[2] = (float) 2;
      aTDeviationAlgorithm1.setUserMaxMin(true);
      floatArray0[1] = (float) 1;
      aTDeviationAlgorithm1.setScalingFlag(true);
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) (-5);
      aTDeviationAlgorithm1.setScalingFlag(true);
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm1.getValues(2, 1, floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 2 > end: 1
         //
         verifyException("uk.ac.sanger.artemis.plot.ATDeviationAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.getDefaultStepSize(2098);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ATDeviationAlgorithm aTDeviationAlgorithm0 = null;
      try {
        aTDeviationAlgorithm0 = new ATDeviationAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.getDefaultStepSize(2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.getMaximumInternal();
      aTDeviationAlgorithm0.getMinimumInternal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.getValueCount();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.max_min_disabled = false;
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      aTDeviationAlgorithm0.getDefaultWindowSize();
      aTDeviationAlgorithm0.getDefaultMaxWindowSize();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      int int0 = (-639);
      aTDeviationAlgorithm0.getDefaultWindowSize();
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm0.getValues(1498, (-2672), floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.setUserMin(0.0F);
      aTDeviationAlgorithm0.setUserMin(1);
      boolean boolean0 = false;
      aTDeviationAlgorithm0.setScalingFlag(false);
      boolean boolean1 = false;
      aTDeviationAlgorithm0.setUserMax(2);
      aTDeviationAlgorithm0.getMaximum();
      aTDeviationAlgorithm0.setAlgorithmName("at_deviation");
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      aTDeviationAlgorithm0.setScalingFlag(false);
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.setScalingFlag(true);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm0.getValues(2, 1, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.getMinimum();
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("}-:1j(^icg; b:F>");
      StringWriter stringWriter0 = new StringWriter(2463);
      stringWriter0.append('q');
      LineGroup.writeStartOfGFFEntry(stringWriter0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases0).when(strand0).getBases();
      doReturn(true).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.getDefaultMaxWindowSize();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 1;
      aTDeviationAlgorithm0.getValues((-778), (-778), floatArray0);
      aTDeviationAlgorithm0.setRevCompDisplay(true);
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      aTDeviationAlgorithm0.getDefaultWindowSize();
      aTDeviationAlgorithm0.getAverage();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.setUserMaxMin(false);
      aTDeviationAlgorithm0.max_min_disabled = false;
      aTDeviationAlgorithm0.max_min_disabled = false;
      aTDeviationAlgorithm0.getMinimumInternal();
      aTDeviationAlgorithm0.setRevCompDisplay(false);
      aTDeviationAlgorithm0.setAlgorithmName("");
      aTDeviationAlgorithm0.setUserMin(500);
      aTDeviationAlgorithm0.getDefaultStepSize((-1518));
      aTDeviationAlgorithm0.setScalingFlag(false);
      aTDeviationAlgorithm0.getDefaultStepSize(500);
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      aTDeviationAlgorithm0.getValueCount();
      aTDeviationAlgorithm0.getDefaultMaxWindowSize();
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      aTDeviationAlgorithm0.getDefaultWindowSize();
      aTDeviationAlgorithm0.getMinimumInternal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.setUserMin(2);
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      aTDeviationAlgorithm0.getDefaultMinWindowSize();
      aTDeviationAlgorithm0.getDefaultStepSize(2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("All terms must be from the same ontology: ");
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertNotNull(emblStreamSequence0);
      
      Bases bases0 = new Bases(emblStreamSequence0);
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Range range0 = new Range(1);
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertNotNull(range0);
      
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(0, 1, range0);
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertNotNull(sequenceChangeEvent0);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      
      Range range1 = sequenceChangeEvent0.getRange();
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertNotNull(range1);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      
      Range range2 = range1.copy();
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNotNull(range2);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      
      SequenceChangeEvent sequenceChangeEvent1 = new SequenceChangeEvent(bases0, 0, range2, 5);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertNotNull(sequenceChangeEvent1);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      
      Bases bases1 = sequenceChangeEvent1.getBases();
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertNotNull(bases1);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn(bases1).when(strand0).getBases();
      doReturn(true).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(aTDeviationAlgorithm0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Integer integer0 = aTDeviationAlgorithm0.getDefaultWindowSize();
      assertEquals(30, (int)integer0);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(integer0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Integer integer1 = aTDeviationAlgorithm0.getDefaultStepSize(1910);
      assertEquals(191, (int)integer1);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertFalse(integer1.equals((Object)integer0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(integer1);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      aTDeviationAlgorithm0.setAlgorithmName("internal error - strands do not match");
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("internal error - strands do not match", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      aTDeviationAlgorithm0.setRevCompDisplay(false);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("internal error - strands do not match", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      aTDeviationAlgorithm0.setAlgorithmName("5gMf7=GnJ25");
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Integer integer2 = aTDeviationAlgorithm0.getDefaultWindowSize();
      assertEquals(30, (int)integer2);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(integer2);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      aTDeviationAlgorithm0.setRevCompDisplay(false);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Integer integer3 = aTDeviationAlgorithm0.getDefaultMinWindowSize();
      assertEquals(10, (int)integer3);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(integer3);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      aTDeviationAlgorithm0.max_min_disabled = true;
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      
      Float float0 = aTDeviationAlgorithm0.getMaximumInternal();
      assertEquals(1.0F, (float)float0, 0.01F);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(float0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Float float1 = aTDeviationAlgorithm0.getAverage();
      assertEquals((-0.6F), (float)float1, 0.01F);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(float1);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Float float2 = aTDeviationAlgorithm0.getAverage();
      assertEquals((-0.6F), (float)float2, 0.01F);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(float2);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Float float3 = aTDeviationAlgorithm0.getMaximumInternal();
      assertEquals(1.0F, (float)float3, 0.01F);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(float3);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Integer integer4 = aTDeviationAlgorithm0.getDefaultWindowSize();
      assertEquals(30, (int)integer4);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(integer4);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Float float4 = aTDeviationAlgorithm0.getMaximumInternal();
      assertEquals(1.0F, (float)float4, 0.01F);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(float4);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      int int0 = aTDeviationAlgorithm0.getValueCount();
      assertEquals(1, int0);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Float float5 = aTDeviationAlgorithm0.getMinimumInternal();
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertNotNull(float5);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      int int1 = aTDeviationAlgorithm0.getValueCount();
      assertEquals(1, int1);
      assertSame(bases0, bases1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(sequenceChangeEvent0, sequenceChangeEvent1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(sequenceChangeEvent1, sequenceChangeEvent0);
      assertSame(bases1, bases0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(sequenceChangeEvent0.equals((Object)sequenceChangeEvent1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(sequenceChangeEvent1.equals((Object)sequenceChangeEvent0));
      assertTrue(int1 == int0);
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getGCount());
      assertEquals(36, emblStreamSequence0.getOtherCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(42, emblStreamSequence0.length());
      assertEquals(4, emblStreamSequence0.getTCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1, sequenceChangeEvent0.getPosition());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertEquals(1, range2.getStart());
      assertEquals(1, range2.getCount());
      assertEquals(1, range2.getEnd());
      assertNull(sequenceChangeEvent1.getSubSequence());
      assertEquals(0, sequenceChangeEvent1.getPosition());
      assertEquals(0, sequenceChangeEvent1.getType());
      assertEquals(5, sequenceChangeEvent1.getLength());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("5gMf7=GnJ25", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Bases bases0 = mock(Bases.class, new ViolatedAssumptionAnswer());
      Strand strand0 = mock(Strand.class, new ViolatedAssumptionAnswer());
      doReturn((Bases) null).when(strand0).getBases();
      doReturn(false).when(strand0).isForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2695;
      floatArray0[1] = (float) 2695;
      aTDeviationAlgorithm0.setRevCompDisplay(true);
      floatArray0[2] = (float) 0;
      aTDeviationAlgorithm0.getDefaultWindowSize();
      aTDeviationAlgorithm0.setScalingFlag(false);
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm0.getValues(2695, 0, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }
}
