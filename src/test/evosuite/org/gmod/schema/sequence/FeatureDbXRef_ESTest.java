/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 13:52:30 GMT 2018
 */

package org.gmod.schema.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gmod.schema.general.DbXRef;
import org.gmod.schema.sequence.Feature;
import org.gmod.schema.sequence.FeatureDbXRef;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class FeatureDbXRef_ESTest extends FeatureDbXRef_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FeatureDbXRef featureDbXRef0 = new FeatureDbXRef();
      featureDbXRef0.setCurrent(true);
      boolean boolean0 = featureDbXRef0.isCurrent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FeatureDbXRef featureDbXRef0 = new FeatureDbXRef();
      featureDbXRef0.setFeatureDbXRefId(1603);
      int int0 = featureDbXRef0.getFeatureDbXRefId();
      assertEquals(1603, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FeatureDbXRef featureDbXRef0 = new FeatureDbXRef();
      featureDbXRef0.setFeatureDbXRefId((-1998));
      int int0 = featureDbXRef0.getFeatureDbXRefId();
      assertEquals((-1998), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FeatureDbXRef featureDbXRef0 = new FeatureDbXRef((DbXRef) null, (Feature) null, true);
      featureDbXRef0.getFeature();
      assertTrue(featureDbXRef0.isCurrent());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DbXRef dbXRef0 = mock(DbXRef.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureDbXRef featureDbXRef0 = new FeatureDbXRef(dbXRef0, feature0, false);
      boolean boolean0 = featureDbXRef0.isCurrent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FeatureDbXRef featureDbXRef0 = new FeatureDbXRef();
      DbXRef dbXRef0 = featureDbXRef0.getDbXRef();
      assertNull(dbXRef0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DbXRef dbXRef0 = mock(DbXRef.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureDbXRef featureDbXRef0 = new FeatureDbXRef(dbXRef0, feature0, false);
      featureDbXRef0.setDbXRef(dbXRef0);
      assertFalse(featureDbXRef0.isCurrent());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DbXRef dbXRef0 = mock(DbXRef.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureDbXRef featureDbXRef0 = new FeatureDbXRef(dbXRef0, feature0, false);
      int int0 = featureDbXRef0.getFeatureDbXRefId();
      assertFalse(featureDbXRef0.isCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DbXRef dbXRef0 = mock(DbXRef.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureDbXRef featureDbXRef0 = new FeatureDbXRef(dbXRef0, feature0, false);
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      featureDbXRef0.setFeature(feature1);
      assertFalse(featureDbXRef0.isCurrent());
  }
}
