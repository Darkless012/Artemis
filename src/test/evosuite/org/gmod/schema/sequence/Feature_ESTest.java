/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 13:11:53 GMT 2018
 */

package org.gmod.schema.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gmod.schema.analysis.AnalysisFeature;
import org.gmod.schema.cv.CvTerm;
import org.gmod.schema.general.DbXRef;
import org.gmod.schema.organism.Organism;
import org.gmod.schema.phylogeny.Phylonode;
import org.gmod.schema.sequence.Feature;
import org.gmod.schema.sequence.FeatureCvTerm;
import org.gmod.schema.sequence.FeatureDbXRef;
import org.gmod.schema.sequence.FeatureLoc;
import org.gmod.schema.sequence.FeatureProp;
import org.gmod.schema.sequence.FeaturePub;
import org.gmod.schema.sequence.FeatureRelationship;
import org.gmod.schema.sequence.FeatureSynonym;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Feature_ESTest extends Feature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureId(0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureProp> collection1 = feature0.getFeatureProps();
      assertNotNull(collection1);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureId(0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureRelationship> collection2 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection2);
      assertSame(collection2, collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureProps(collection1);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureId(0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      
      byte[] byteArray0 = new byte[0];
      feature0.setResidues(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      FeatureProp featureProp0 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      doReturn(",").when(featureProp0).toString();
      feature0.addFeatureProp(featureProp0);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeLastModified(timestamp0);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      FeatureProp featureProp1 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      feature0.addFeatureProp(featureProp1);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      feature0.setSeqLen(integer0);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      feature0.setAnalysis(false);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureLoc> collection3 = feature0.getFeatureLocsForFeatureId();
      assertNotNull(collection3);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      String string0 = feature0.getName();
      assertNull(string0);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      Collection<Phylonode> collection4 = feature0.getPhylonodes();
      assertNull(collection4);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      feature0.setPhylonodes((Collection<Phylonode>) null);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      Timestamp timestamp1 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeLastModified(timestamp1);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      feature0.setObsolete(false);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureLocsForSrcFeatureId(collection3);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      int int0 = feature0.getSeqLen();
      assertEquals(0, int0);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      FeatureLoc featureLoc0 = feature0.getFeatureLoc();
      assertNull(featureLoc0);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      
      byte[] byteArray1 = feature0.getResidues();
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      
      feature0.setFeatureId(1180);
      assertFalse(feature0.isObsolete());
      assertEquals(1180, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      
      feature0.setMd5Checksum("^Si7z'T2(");
      assertFalse(feature0.isObsolete());
      assertEquals(1180, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("^Si7z'T2(", feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      
      feature0.setName("z:5\"h CWe@KM:XNEy");
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(1180, feature0.getFeatureId());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("^Si7z'T2(", feature0.getMd5Checksum());
      
      byte[] byteArray0 = feature0.getResidues();
      assertNull(byteArray0);
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(1180, feature0.getFeatureId());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("^Si7z'T2(", feature0.getMd5Checksum());
      
      Collection<FeatureLoc> collection0 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection0);
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(1180, feature0.getFeatureId());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("^Si7z'T2(", feature0.getMd5Checksum());
      
      feature0.setFeatureLocsForFeatureId(collection0);
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(1180, feature0.getFeatureId());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("^Si7z'T2(", feature0.getMd5Checksum());
      
      feature0.setName("^Si7z'T2(");
      assertFalse(feature0.isObsolete());
      assertEquals(1180, feature0.getFeatureId());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("^Si7z'T2(", feature0.getMd5Checksum());
      
      feature0.setFeatureId((-1));
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("^Si7z'T2(", feature0.getMd5Checksum());
      
      int int0 = feature0.getSeqLen();
      assertEquals((-1), int0);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("^Si7z'T2(", feature0.getMd5Checksum());
      
      feature0.setMd5Checksum("z:5\"h CWe@KM:XNEy");
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      int int1 = feature0.getSeqLen();
      assertEquals((-1), int1);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertTrue(int1 == int0);
      
      int int2 = feature0.getSeqLen();
      assertEquals((-1), int2);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Collection<FeatureSynonym> collection1 = feature0.getFeatureSynonyms();
      assertNotNull(collection1);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      Collection<FeatureCvTerm> collection2 = feature0.getFeatureCvTerms();
      assertNull(collection2);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      Collection<FeatureRelationship> collection3 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection3);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      Collection<Phylonode> collection4 = feature0.getPhylonodes();
      assertNull(collection4);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      Collection<FeatureRelationship> collection5 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection5);
      assertNotSame(collection5, collection3);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertTrue(collection5.equals((Object)collection3));
      
      DbXRef dbXRef0 = feature0.getDbXRef();
      assertNull(dbXRef0);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      Collection<Phylonode> collection6 = feature0.getPhylonodes();
      assertNull(collection6);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      Collection<FeatureDbXRef> collection7 = feature0.getFeatureDbXRefs();
      assertNull(collection7);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      int int3 = feature0.getFeatureId();
      assertEquals((-1), int3);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      Collection<AnalysisFeature> collection8 = feature0.getAnalysisFeatures();
      assertNull(collection8);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      CvTerm cvTerm0 = feature0.getCvTerm();
      assertNull(cvTerm0);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      Organism organism0 = feature0.getOrganism();
      assertNull(organism0);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      Collection<FeatureSynonym> collection9 = feature0.getFeatureSynonyms();
      assertNotNull(collection9);
      assertSame(collection9, collection1);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      Collection<FeatureSynonym> collection10 = feature0.getFeatureSynonyms();
      assertNotNull(collection10);
      assertSame(collection10, collection1);
      assertSame(collection10, collection9);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      
      CvTerm cvTerm1 = feature0.getCvTerm();
      assertNull(cvTerm1);
      assertEquals((-1), feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("^Si7z'T2(", feature0.getName());
      assertEquals("z:5\"h CWe@KM:XNEy", feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals("^Si7z'T2(", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn("org.gmod.schema.cv.Cv").when(organism0).toString();
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature(organism0, cvTerm0, "org.gmod.schema.sequence.FeaturePub", true, true, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      
      DbXRef dbXRef0 = feature0.getDbXRef();
      assertNull(dbXRef0);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      
      feature0.setDbXRef((DbXRef) null);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection0);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      
      Collection<FeatureRelationship> collection1 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection1);
      assertSame(collection1, collection0);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      
      String string0 = feature0.getMd5Checksum();
      assertNull(string0);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      
      Collection<Phylonode> collection2 = feature0.getPhylonodes();
      assertNull(collection2);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      
      Collection<Phylonode> collection3 = feature0.getPhylonodes();
      assertNull(collection3);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      
      Organism organism1 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm1 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Feature feature1 = new Feature(organism1, cvTerm1, "", false, false, (Timestamp) null, (Timestamp) null);
      assertNotNull(feature1);
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertEquals("", feature1.getUniqueName());
      assertEquals("", feature1.getDisplayName());
      assertEquals(0, feature1.getFeatureId());
      assertNull(feature1.getName());
      assertEquals((-1), feature1.getSeqLen());
      assertFalse(feature1.equals((Object)feature0));
      
      Collection<FeatureLoc> collection4 = feature1.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection4);
      assertNotSame(feature1, feature0);
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertEquals("", feature1.getUniqueName());
      assertEquals("", feature1.getDisplayName());
      assertEquals(0, feature1.getFeatureId());
      assertNull(feature1.getName());
      assertEquals((-1), feature1.getSeqLen());
      assertFalse(feature1.equals((Object)feature0));
      
      feature0.setFeatureLocsForFeatureId(collection4);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertEquals("", feature1.getUniqueName());
      assertEquals("", feature1.getDisplayName());
      assertEquals(0, feature1.getFeatureId());
      assertNull(feature1.getName());
      assertEquals((-1), feature1.getSeqLen());
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      
      DbXRef dbXRef1 = feature0.getDbXRef();
      assertNull(dbXRef1);
      assertNotSame(feature0, feature1);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertFalse(feature0.equals((Object)feature1));
      
      feature0.setDbXRef((DbXRef) null);
      assertNotSame(feature0, feature1);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertFalse(feature0.equals((Object)feature1));
      
      CvTerm cvTerm2 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      feature0.setCvTerm(cvTerm2);
      assertNotSame(feature0, feature1);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertFalse(feature0.equals((Object)feature1));
      
      Organism organism2 = feature0.getOrganism();
      assertNotNull(organism2);
      assertNotSame(feature0, feature1);
      assertSame(organism2, organism0);
      assertNotSame(organism2, organism1);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertNull(organism2.getAbbreviation());
      assertEquals(0, organism2.getOrganismId());
      assertNull(organism2.getComment());
      assertNull(organism2.getSpecies());
      assertNull(organism2.getGenus());
      assertNull(organism2.getCommonName());
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(organism2.equals((Object)organism1));
      
      feature0.setFeatureRelationshipsForSubjectId(collection1);
      assertNotSame(feature0, feature1);
      assertSame(collection1, collection0);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertFalse(feature0.equals((Object)feature1));
      
      feature0.setPhylonodes((Collection<Phylonode>) null);
      assertNotSame(feature0, feature1);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertFalse(feature0.equals((Object)feature1));
      
      Collection<FeatureRelationship> collection5 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection5);
      assertNotSame(feature0, feature1);
      assertNotSame(collection5, collection0);
      assertNotSame(collection5, collection1);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertFalse(feature0.equals((Object)feature1));
      assertTrue(collection5.equals((Object)collection1));
      assertTrue(collection5.equals((Object)collection0));
      
      feature0.setFeatureId(32);
      assertNotSame(feature0, feature1);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(32, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertFalse(feature0.equals((Object)feature1));
      
      feature0.setAnalysis(true);
      assertNotSame(feature0, feature1);
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(32, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertFalse(feature0.equals((Object)feature1));
      
      feature0.setMd5Checksum("org.gmod.schema.sequence.FeaturePub");
      assertNotSame(feature0, feature1);
      assertTrue(feature0.isObsolete());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(32, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getMd5Checksum());
      assertFalse(feature0.equals((Object)feature1));
      
      int int0 = feature0.getFeatureId();
      assertNotSame(feature0, feature1);
      assertEquals(32, int0);
      assertTrue(feature0.isObsolete());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(32, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getUniqueName());
      assertEquals("org.gmod.schema.sequence.FeaturePub", feature0.getMd5Checksum());
      assertFalse(feature0.equals((Object)feature1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureId(0);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection0);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureProp> collection1 = feature0.getFeatureProps();
      assertNotNull(collection1);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureId(0);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureRelationship> collection2 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection2);
      assertSame(collection2, collection0);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureProps(collection1);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureId(2568);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(2568, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureId(0);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      byte[] byteArray0 = new byte[0];
      feature0.setResidues(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      FeatureProp featureProp0 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      doReturn("df").when(featureProp0).toString();
      feature0.addFeatureProp(featureProp0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeLastModified(timestamp0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      FeatureProp featureProp1 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      feature0.addFeatureProp(featureProp1);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      feature0.setSeqLen(integer0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setAnalysis(false);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureLoc> collection3 = feature0.getFeatureLocsForFeatureId();
      assertNotNull(collection3);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      String string0 = feature0.getName();
      assertNull(string0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Collection<Phylonode> collection4 = feature0.getPhylonodes();
      assertNull(collection4);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setPhylonodes((Collection<Phylonode>) null);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Timestamp timestamp1 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeLastModified(timestamp1);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setObsolete(false);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      String string1 = feature0.getName();
      assertNull(string1);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureLocsForSrcFeatureId(collection3);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      int int0 = feature0.getSeqLen();
      assertEquals(0, int0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature((Organism) null, cvTerm0, "org.gmod.schema.sequence.FeatureCvTerm", false, false, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getDisplayName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      
      int int0 = feature0.getFeatureId();
      assertEquals(0, int0);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getDisplayName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      
      Collection<FeatureSynonym> collection0 = feature0.getFeatureSynonyms();
      assertNotNull(collection0);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getDisplayName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)111;
      byteArray0[8] = (byte)0;
      feature0.setResidues(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-7), (byte)0, (byte) (-51), (byte)92, (byte) (-56), (byte) (-1), (byte)111, (byte)0}, byteArray0);
      assertEquals(9, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getDisplayName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d3c58e51a5516df83afc3c6ccbf836c2", feature0.getMd5Checksum());
      
      feature0.setFeatureSynonyms(collection0);
      assertEquals(9, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getDisplayName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d3c58e51a5516df83afc3c6ccbf836c2", feature0.getMd5Checksum());
      
      byte[] byteArray1 = feature0.getResidues(0, 1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(9, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getDisplayName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d3c58e51a5516df83afc3c6ccbf836c2", feature0.getMd5Checksum());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Collection<AnalysisFeature> collection1 = feature0.getAnalysisFeatures();
      assertNull(collection1);
      assertEquals(9, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getDisplayName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d3c58e51a5516df83afc3c6ccbf836c2", feature0.getMd5Checksum());
      
      feature0.setAnalysisFeatures((Collection<AnalysisFeature>) null);
      assertEquals(9, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getDisplayName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d3c58e51a5516df83afc3c6ccbf836c2", feature0.getMd5Checksum());
      
      Collection<FeaturePub> collection2 = feature0.getFeaturePubs();
      assertNull(collection2);
      assertEquals(9, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getDisplayName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d3c58e51a5516df83afc3c6ccbf836c2", feature0.getMd5Checksum());
      
      feature0.setFeaturePubs((Collection<FeaturePub>) null);
      assertEquals(9, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getDisplayName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d3c58e51a5516df83afc3c6ccbf836c2", feature0.getMd5Checksum());
      
      feature0.setFeaturePubs((Collection<FeaturePub>) null);
      assertEquals(9, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getDisplayName());
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d3c58e51a5516df83afc3c6ccbf836c2", feature0.getMd5Checksum());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature(organism0, cvTerm0, "dws+UMSUOAa", true, false, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("dws+UMSUOAa", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals("dws+UMSUOAa", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("dws+UMSUOAa", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals("dws+UMSUOAa", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      
      Collection<FeatureRelationship> collection1 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection1);
      assertNotSame(collection1, collection0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("dws+UMSUOAa", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals("dws+UMSUOAa", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertTrue(collection1.equals((Object)collection0));
      
      feature0.setFeatureRelationshipsForSubjectId(collection1);
      assertNotSame(collection1, collection0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("dws+UMSUOAa", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals("dws+UMSUOAa", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertTrue(collection1.equals((Object)collection0));
      
      feature0.setUniqueName("");
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      
      Collection<FeatureRelationship> collection2 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection2);
      assertSame(collection2, collection0);
      assertNotSame(collection2, collection1);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertTrue(collection2.equals((Object)collection1));
      
      String string0 = feature0.getUniqueName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      
      Collection<FeatureLoc> collection3 = feature0.getFeatureLocsForFeatureId();
      assertNotNull(collection3);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      
      Collection<Phylonode> collection4 = feature0.getPhylonodes();
      assertNull(collection4);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      
      Collection<FeatureLoc> collection5 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection5);
      assertNotSame(collection5, collection3);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertTrue(collection5.equals((Object)collection3));
      
      feature0.setFeatureLocsForSrcFeatureId(collection5);
      assertNotSame(collection5, collection3);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertTrue(collection5.equals((Object)collection3));
      
      String string1 = feature0.getUniqueName();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      
      byte[] byteArray0 = new byte[0];
      feature0.setResidues(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertEquals(0, feature0.getSeqLen());
      
      feature0.setAnalysis(false);
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals(0, feature0.getSeqLen());
      
      String string2 = feature0.getDisplayName();
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals(0, feature0.getSeqLen());
      
      Timestamp timestamp1 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeAccessioned(timestamp1);
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals(0, feature0.getSeqLen());
      
      feature0.setFeatureRelationshipsForObjectId(collection1);
      assertNotSame(collection1, collection2);
      assertNotSame(collection1, collection0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals(0, feature0.getSeqLen());
      assertTrue(collection1.equals((Object)collection0));
      assertTrue(collection1.equals((Object)collection2));
      
      boolean boolean0 = feature0.isAnalysis();
      assertFalse(boolean0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals(0, feature0.getSeqLen());
      
      feature0.setTimeLastModified((Timestamp) null);
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals(0, feature0.getSeqLen());
      
      FeatureProp featureProp0 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      feature0.addFeatureProp(featureProp0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals(0, feature0.getSeqLen());
      
      feature0.setFeatureCvTerms((Collection<FeatureCvTerm>) null);
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals(0, feature0.getSeqLen());
      
      Collection<FeatureDbXRef> collection6 = feature0.getFeatureDbXRefs();
      assertNull(collection6);
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals(0, feature0.getSeqLen());
      
      Timestamp timestamp2 = feature0.getTimeLastModified();
      assertNull(timestamp2);
      assertEquals(0, feature0.getFeatureId());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals(0, feature0.getSeqLen());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature(organism0, cvTerm0, (String) null, false, false, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)57;
      feature0.setResidues(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)82, (byte)100, (byte)57}, byteArray0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertEquals("bf667dcdf61400a51022623b0dfcf7b3", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(3, feature0.getSeqLen());
      
      Collection<FeatureProp> collection0 = feature0.getFeatureProps();
      assertNotNull(collection0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertEquals("bf667dcdf61400a51022623b0dfcf7b3", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(3, feature0.getSeqLen());
      
      feature0.setFeatureId((-1456));
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertEquals("bf667dcdf61400a51022623b0dfcf7b3", feature0.getMd5Checksum());
      assertEquals((-1456), feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(3, feature0.getSeqLen());
      
      feature0.setFeatureProps(collection0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertEquals("bf667dcdf61400a51022623b0dfcf7b3", feature0.getMd5Checksum());
      assertEquals((-1456), feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(3, feature0.getSeqLen());
      
      String string0 = feature0.getName();
      assertNull(string0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertEquals("bf667dcdf61400a51022623b0dfcf7b3", feature0.getMd5Checksum());
      assertEquals((-1456), feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(3, feature0.getSeqLen());
      
      Collection<FeatureSynonym> collection1 = feature0.getFeatureSynonyms();
      assertNotNull(collection1);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertEquals("bf667dcdf61400a51022623b0dfcf7b3", feature0.getMd5Checksum());
      assertEquals((-1456), feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(3, feature0.getSeqLen());
      
      feature0.setFeatureSynonyms(collection1);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertEquals("bf667dcdf61400a51022623b0dfcf7b3", feature0.getMd5Checksum());
      assertEquals((-1456), feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(3, feature0.getSeqLen());
      
      boolean boolean0 = feature0.isObsolete();
      assertFalse(boolean0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertEquals("bf667dcdf61400a51022623b0dfcf7b3", feature0.getMd5Checksum());
      assertEquals((-1456), feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(3, feature0.getSeqLen());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureLoc> collection0 = feature0.getFeatureLocsForFeatureId();
      assertNotNull(collection0);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeatureLocsForFeatureId(collection0);
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Integer integer0 = new Integer((-3565));
      assertNotNull(integer0);
      assertEquals((-3565), (int)integer0);
      
      feature0.setSeqLen(integer0);
      assertEquals((-3565), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureProp> collection1 = feature0.getFeatureProps();
      assertNotNull(collection1);
      assertEquals((-3565), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Organism organism0 = feature0.getOrganism();
      assertNull(organism0);
      assertEquals((-3565), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      int int0 = feature0.getSeqLen();
      assertEquals((-3565), int0);
      assertEquals((-3565), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<Phylonode> collection2 = feature0.getPhylonodes();
      assertNull(collection2);
      assertEquals((-3565), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Integer integer1 = new Integer((-3565));
      assertNotNull(integer1);
      assertEquals((-3565), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      feature0.setSeqLen(integer1);
      assertEquals((-3565), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      FeatureProp featureProp0 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(featureProp0).toString();
      feature0.addFeatureProp(featureProp0);
      assertEquals((-3565), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeatureId(0);
      assertEquals((-3565), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      FeatureProp featureProp1 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      feature0.addFeatureProp(featureProp1);
      assertEquals((-3565), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureLoc> collection3 = feature0.getFeatureLocsForFeatureId();
      assertNotNull(collection3);
      assertSame(collection3, collection0);
      assertEquals((-3565), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeatureLocsForFeatureId(collection3);
      assertSame(collection3, collection0);
      assertEquals((-3565), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature(organism0, cvTerm0, "", false, true, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertEquals("", feature0.getDisplayName());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      
      Collection<FeatureDbXRef> collection0 = feature0.getFeatureDbXRefs();
      assertNull(collection0);
      assertEquals("", feature0.getDisplayName());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      
      feature0.setFeatureDbXRefs((Collection<FeatureDbXRef>) null);
      assertEquals("", feature0.getDisplayName());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      feature0.setSeqLen(integer0);
      assertEquals("", feature0.getDisplayName());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      
      feature0.setFeatureId((-2367));
      assertEquals("", feature0.getDisplayName());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals((-2367), feature0.getFeatureId());
      assertEquals(0, feature0.getSeqLen());
      
      feature0.setUniqueName("");
      assertEquals("", feature0.getDisplayName());
      assertEquals("", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals((-2367), feature0.getFeatureId());
      assertEquals(0, feature0.getSeqLen());
      
      // Undeclared exception!
      try { 
        feature0.setSeqLen((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length of '' attempted to be set to null
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature(organism0, cvTerm0, "org.gmod.schema.analysis.AnalysisFeature", true, true, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.analysis.AnalysisFeature", feature0.getDisplayName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.analysis.AnalysisFeature", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      
      String string0 = feature0.getUniqueName();
      assertNotNull(string0);
      assertEquals("org.gmod.schema.analysis.AnalysisFeature", string0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("org.gmod.schema.analysis.AnalysisFeature", feature0.getDisplayName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.analysis.AnalysisFeature", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature(organism0, cvTerm0, "", true, true, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("", feature0.getUniqueName());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      feature0.setResidues(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("5d0f777f904fa6c35f00211c015b1e20", feature0.getMd5Checksum());
      assertEquals("", feature0.getDisplayName());
      assertTrue(feature0.isObsolete());
      assertEquals(3, feature0.getSeqLen());
      assertEquals("", feature0.getUniqueName());
      
      // Undeclared exception!
      try { 
        feature0.getResidues(0, 987);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      
      feature0.setAnalysis(false);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      
      feature0.setFeatureRelationshipsForSubjectId(collection0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Collection<FeatureSynonym> collection1 = feature0.getFeatureSynonyms();
      assertNotNull(collection1);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      
      byteArray0[2] = (byte)0;
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeAccessioned(timestamp0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      
      feature0.setResidues(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("693e9af84d3dfcc71e640e005bdc5e2e", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      
      Collection<FeatureLoc> collection2 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection2);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("693e9af84d3dfcc71e640e005bdc5e2e", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      
      feature0.setResidues(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("693e9af84d3dfcc71e640e005bdc5e2e", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      
      Collection<FeatureRelationship> collection3 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection3);
      assertSame(collection3, collection0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("693e9af84d3dfcc71e640e005bdc5e2e", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      
      byte[] byteArray1 = feature0.getResidues(0, 0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals("693e9af84d3dfcc71e640e005bdc5e2e", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cvTerm0).toString();
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timestamp0).toString();
      Feature feature0 = new Feature(organism0, cvTerm0, "", true, true, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeatureCvTerms((Collection<FeatureCvTerm>) null);
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setName("v_");
      assertTrue(feature0.isObsolete());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      FeatureLoc featureLoc0 = feature0.getFeatureLoc();
      assertNull(featureLoc0);
      assertTrue(feature0.isObsolete());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeatureLoc((FeatureLoc) null);
      assertTrue(feature0.isObsolete());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      feature0.setResidues(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      
      feature0.setFeatureLoc((FeatureLoc) null);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      
      Date date0 = feature0.getTimeAccessioned();
      assertNotNull(date0);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertNull(date0.toString());
      
      Organism organism1 = mock(Organism.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(organism1).toString();
      feature0.setOrganism(organism1);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      
      DbXRef dbXRef0 = feature0.getDbXRef();
      assertNull(dbXRef0);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      
      String string0 = feature0.getName();
      assertNotNull(string0);
      assertEquals("v_", string0);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      
      Organism organism2 = feature0.getOrganism();
      assertNotNull(organism2);
      assertNotSame(organism2, organism0);
      assertSame(organism2, organism1);
      assertEquals(0, organism2.getOrganismId());
      assertNull(organism2.getSpecies());
      assertNull(organism2.getAbbreviation());
      assertNull(organism2.getGenus());
      assertNull(organism2.getCommonName());
      assertNull(organism2.getComment());
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertFalse(organism2.equals((Object)organism0));
      
      feature0.setOrganism(organism2);
      assertNotSame(organism2, organism0);
      assertSame(organism2, organism1);
      assertEquals(0, organism2.getOrganismId());
      assertNull(organism2.getSpecies());
      assertNull(organism2.getAbbreviation());
      assertNull(organism2.getGenus());
      assertNull(organism2.getCommonName());
      assertNull(organism2.getComment());
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertFalse(organism2.equals((Object)organism0));
      
      feature0.setOrganism(organism2);
      assertNotSame(organism2, organism0);
      assertSame(organism2, organism1);
      assertEquals(0, organism2.getOrganismId());
      assertNull(organism2.getSpecies());
      assertNull(organism2.getAbbreviation());
      assertNull(organism2.getGenus());
      assertNull(organism2.getCommonName());
      assertNull(organism2.getComment());
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertFalse(organism2.equals((Object)organism0));
      
      Collection<FeatureProp> collection0 = feature0.getFeatureProps();
      assertNotNull(collection0);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      
      feature0.setFeatureProps(collection0);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      
      byte[] byteArray1 = feature0.getResidues();
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray1);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      
      CvTerm cvTerm1 = feature0.getCvTerm();
      assertNotNull(cvTerm1);
      assertSame(cvTerm1, cvTerm0);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertEquals(0, cvTerm1.getCvTermId());
      assertEquals(0, cvTerm1.getIsRelationshipType());
      assertNull(cvTerm1.getName());
      assertEquals(0, cvTerm1.getIsObsolete());
      assertNull(cvTerm1.getDefinition());
      
      feature0.setUniqueName("DIk4Yy#6[0vWv");
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals("DIk4Yy#6[0vWv", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      
      Collection<FeaturePub> collection1 = feature0.getFeaturePubs();
      assertNull(collection1);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals("DIk4Yy#6[0vWv", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      
      feature0.setFeaturePubs((Collection<FeaturePub>) null);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals("DIk4Yy#6[0vWv", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      
      String string1 = feature0.getMd5Checksum();
      assertNotNull(string1);
      assertEquals("93b47212aea013b33dda11d51fbad42f", string1);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals("DIk4Yy#6[0vWv", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      assertFalse(string1.equals((Object)string0));
      
      Collection<FeatureLoc> collection2 = feature0.getFeatureLocsForFeatureId();
      assertNotNull(collection2);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals("DIk4Yy#6[0vWv", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
      
      feature0.setFeatureLocsForSrcFeatureId(collection2);
      assertTrue(feature0.isObsolete());
      assertEquals(2, feature0.getSeqLen());
      assertEquals("DIk4Yy#6[0vWv", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("v_", feature0.getDisplayName());
      assertTrue(feature0.isAnalysis());
      assertEquals("93b47212aea013b33dda11d51fbad42f", feature0.getMd5Checksum());
      assertEquals("v_", feature0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureSynonym> collection0 = feature0.getFeatureSynonyms();
      assertNotNull(collection0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureSynonyms(collection0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      feature0.setResidues(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)0, (byte)16}, byteArray0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      feature0.setObsolete(false);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureProp> collection1 = feature0.getFeatureProps();
      assertNotNull(collection1);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureProps(collection1);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      Collection<Phylonode> collection2 = feature0.getPhylonodes();
      assertNull(collection2);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      feature0.setAnalysis(false);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      int int0 = feature0.getSeqLen();
      assertEquals(3, int0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      String string0 = feature0.getDisplayName();
      assertNull(string0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureSynonyms(collection0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureRelationship> collection3 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection3);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureRelationshipsForObjectId(collection3);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureSynonym> collection4 = feature0.getFeatureSynonyms();
      assertNotNull(collection4);
      assertSame(collection4, collection0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      String string1 = feature0.getMd5Checksum();
      assertNotNull(string1);
      assertEquals("b10ec43c99ad98a2baec38b274338f47", string1);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureRelationship> collection5 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection5);
      assertSame(collection5, collection3);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b10ec43c99ad98a2baec38b274338f47", feature0.getMd5Checksum());
      assertEquals(3, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      FeatureLoc featureLoc0 = feature0.getFeatureLoc();
      assertNull(featureLoc0);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setAnalysis(false);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureCvTerm> collection0 = feature0.getFeatureCvTerms();
      assertNull(collection0);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeatureCvTerms((Collection<FeatureCvTerm>) null);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      feature0.setOrganism(organism0);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureDbXRef> collection1 = feature0.getFeatureDbXRefs();
      assertNull(collection1);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeaturePub> collection2 = feature0.getFeaturePubs();
      assertNull(collection2);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeaturePubs((Collection<FeaturePub>) null);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeatureDbXRefs((Collection<FeatureDbXRef>) null);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      byte[] byteArray0 = feature0.getResidues();
      assertNull(byteArray0);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureLoc> collection3 = feature0.getFeatureLocsForFeatureId();
      assertNotNull(collection3);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      
      Feature feature1 = new Feature();
      assertNotNull(feature1);
      assertNull(feature1.getName());
      assertEquals(0, feature1.getFeatureId());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.equals((Object)feature0));
      
      feature1.setFeaturePubs((Collection<FeaturePub>) null);
      assertNotSame(feature1, feature0);
      assertNull(feature1.getName());
      assertEquals(0, feature1.getFeatureId());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.equals((Object)feature0));
      
      Collection<FeatureRelationship> collection4 = feature1.getFeatureRelationshipsForObjectId();
      assertNotNull(collection4);
      assertNotSame(feature1, feature0);
      assertNull(feature1.getName());
      assertEquals(0, feature1.getFeatureId());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.equals((Object)feature0));
      
      feature0.setFeatureRelationshipsForSubjectId(collection4);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature1.getName());
      assertEquals(0, feature1.getFeatureId());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getDisplayName());
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      
      Timestamp timestamp0 = feature1.getTimeLastModified();
      assertNull(timestamp0);
      assertNotSame(feature1, feature0);
      assertNull(feature1.getName());
      assertEquals(0, feature1.getFeatureId());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.equals((Object)feature0));
      
      feature0.setFeatureSynonyms((Collection<FeatureSynonym>) null);
      assertNotSame(feature0, feature1);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.equals((Object)feature1));
      
      feature1.setObsolete(false);
      assertNotSame(feature1, feature0);
      assertNull(feature1.getName());
      assertEquals(0, feature1.getFeatureId());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.equals((Object)feature0));
      
      feature0.setFeatureDbXRefs((Collection<FeatureDbXRef>) null);
      assertNotSame(feature0, feature1);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.equals((Object)feature1));
      
      Integer integer0 = new Integer((-4424));
      assertNotNull(integer0);
      assertEquals((-4424), (int)integer0);
      
      Collection<FeatureLoc> collection5 = feature1.getFeatureLocsForFeatureId();
      assertNotNull(collection5);
      assertNotSame(collection5, collection3);
      assertNotSame(feature1, feature0);
      assertNull(feature1.getName());
      assertEquals(0, feature1.getFeatureId());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getDisplayName());
      assertTrue(collection5.equals((Object)collection3));
      assertFalse(feature1.equals((Object)feature0));
      
      feature0.setSeqLen(integer0);
      assertNotSame(feature0, feature1);
      assertEquals((-4424), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.equals((Object)feature1));
      
      Collection<FeatureLoc> collection6 = feature1.getFeatureLocsForFeatureId();
      assertNotNull(collection6);
      assertNotSame(collection6, collection3);
      assertSame(collection6, collection5);
      assertNotSame(feature1, feature0);
      assertNull(feature1.getName());
      assertEquals(0, feature1.getFeatureId());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getDisplayName());
      assertTrue(collection6.equals((Object)collection3));
      assertFalse(feature1.equals((Object)feature0));
      
      feature0.setFeatureCvTerms((Collection<FeatureCvTerm>) null);
      assertNotSame(feature0, feature1);
      assertEquals((-4424), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.equals((Object)feature1));
      
      Collection<FeatureProp> collection7 = feature1.getFeatureProps();
      assertNotNull(collection7);
      assertNotSame(feature1, feature0);
      assertNull(feature1.getName());
      assertEquals(0, feature1.getFeatureId());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.equals((Object)feature0));
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      feature1.setCvTerm(cvTerm0);
      assertNotSame(feature1, feature0);
      assertNull(feature1.getName());
      assertEquals(0, feature1.getFeatureId());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.equals((Object)feature0));
      
      // Undeclared exception!
      try { 
        feature0.getResidues((-4130), (-4424));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp1 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature((Organism) null, cvTerm0, "org.gmod.schema.phylogeny.Phylonode", false, false, timestamp0, timestamp1);
      assertNotNull(feature0);
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Timestamp timestamp2 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Collection<FeatureCvTerm> collection0 = feature0.getFeatureCvTerms();
      assertNull(collection0);
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      feature0.setFeatureCvTerms((Collection<FeatureCvTerm>) null);
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      feature0.setTimeAccessioned(timestamp2);
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Timestamp timestamp3 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeAccessioned(timestamp3);
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Collection<Phylonode> collection1 = feature0.getPhylonodes();
      assertNull(collection1);
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      feature0.setPhylonodes((Collection<Phylonode>) null);
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)16;
      feature0.setResidues(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)98, (byte)16}, byteArray0);
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      
      feature0.setName("");
      assertEquals("", feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      
      String string0 = feature0.getName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      
      FeatureLoc featureLoc0 = feature0.getFeatureLoc();
      assertNull(featureLoc0);
      assertEquals("", feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      
      String string1 = feature0.getDisplayName();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("", feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      
      Collection<FeatureRelationship> collection2 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection2);
      assertEquals("", feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      
      feature0.setPhylonodes((Collection<Phylonode>) null);
      assertEquals("", feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      
      Timestamp timestamp4 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeLastModified(timestamp4);
      assertEquals("", feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      
      feature0.setObsolete(false);
      assertEquals("", feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      
      Collection<FeatureLoc> collection3 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection3);
      assertEquals("", feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp1 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature(organism0, cvTerm0, "NT+G", true, true, timestamp0, timestamp1);
      assertNotNull(feature0);
      assertEquals("NT+G", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("NT+G", feature0.getDisplayName());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeaturePub> collection0 = feature0.getFeaturePubs();
      assertNull(collection0);
      assertEquals("NT+G", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("NT+G", feature0.getDisplayName());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureRelationship> collection1 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection1);
      assertEquals("NT+G", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("NT+G", feature0.getDisplayName());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeaturePubs((Collection<FeaturePub>) null);
      assertEquals("NT+G", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("NT+G", feature0.getDisplayName());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getMd5Checksum());
      
      boolean boolean0 = feature0.isObsolete();
      assertTrue(boolean0);
      assertEquals("NT+G", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isAnalysis());
      assertEquals("NT+G", feature0.getDisplayName());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getMd5Checksum());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature(organism0, cvTerm0, "", true, true, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      FeatureRelationship featureRelationship0 = null;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      feature0.setFeatureId(3595);
      assertEquals(3595, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureRelationship> collection0 = null;
      feature0.setFeatureRelationshipsForObjectId((Collection<FeatureRelationship>) null);
      assertEquals(3595, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setSeqLen(integer0);
      assertEquals(3595, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals(0, feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureLoc> collection1 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection1);
      assertEquals(3595, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals(0, feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      // Undeclared exception!
      try { 
        feature0.addFeatureRelationshipsForSubjectId((FeatureRelationship) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cvTerm0).toString();
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature((Organism) null, cvTerm0, "b`a?Q]Ny$9^<", true, true, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertTrue(feature0.isObsolete());
      assertEquals("b`a?Q]Ny$9^<", feature0.getDisplayName());
      assertNull(feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      
      feature0.setTimeAccessioned((Timestamp) null);
      assertTrue(feature0.isObsolete());
      assertEquals("b`a?Q]Ny$9^<", feature0.getDisplayName());
      assertNull(feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      
      Collection<Phylonode> collection0 = feature0.getPhylonodes();
      assertNull(collection0);
      assertTrue(feature0.isObsolete());
      assertEquals("b`a?Q]Ny$9^<", feature0.getDisplayName());
      assertNull(feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      
      CvTerm cvTerm1 = feature0.getCvTerm();
      assertNotNull(cvTerm1);
      assertSame(cvTerm1, cvTerm0);
      assertTrue(feature0.isObsolete());
      assertEquals("b`a?Q]Ny$9^<", feature0.getDisplayName());
      assertNull(feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(cvTerm1.getName());
      assertEquals(0, cvTerm1.getCvTermId());
      assertEquals(0, cvTerm1.getIsObsolete());
      assertNull(cvTerm1.getDefinition());
      assertEquals(0, cvTerm1.getIsRelationshipType());
      
      Collection<FeatureLoc> collection1 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection1);
      assertTrue(feature0.isObsolete());
      assertEquals("b`a?Q]Ny$9^<", feature0.getDisplayName());
      assertNull(feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      
      feature0.setFeatureLocsForFeatureId(collection1);
      assertTrue(feature0.isObsolete());
      assertEquals("b`a?Q]Ny$9^<", feature0.getDisplayName());
      assertNull(feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      
      byte[] byteArray0 = new byte[1];
      feature0.setAnalysis(true);
      assertTrue(feature0.isObsolete());
      assertEquals("b`a?Q]Ny$9^<", feature0.getDisplayName());
      assertNull(feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      
      byteArray0[0] = (byte)0;
      feature0.setResidues(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("b`a?Q]Ny$9^<", feature0.getDisplayName());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      
      feature0.setName("0");
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("0", feature0.getDisplayName());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("0", feature0.getName());
      
      Collection<FeatureSynonym> collection2 = feature0.getFeatureSynonyms();
      assertNotNull(collection2);
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("0", feature0.getDisplayName());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("0", feature0.getName());
      
      feature0.setFeatureSynonyms(collection2);
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("0", feature0.getDisplayName());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("0", feature0.getName());
      
      feature0.setTimeLastModified((Timestamp) null);
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("0", feature0.getDisplayName());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("0", feature0.getName());
      
      Collection<FeatureProp> collection3 = feature0.getFeatureProps();
      assertNotNull(collection3);
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("0", feature0.getDisplayName());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("0", feature0.getName());
      
      feature0.setFeatureProps(collection3);
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("0", feature0.getDisplayName());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("0", feature0.getName());
      
      feature0.setTimeLastModified((Timestamp) null);
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("0", feature0.getDisplayName());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("0", feature0.getName());
      
      Collection<FeatureRelationship> collection4 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection4);
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("0", feature0.getDisplayName());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("0", feature0.getName());
      
      String string0 = feature0.getDisplayName();
      assertNotNull(string0);
      assertEquals("0", string0);
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("0", feature0.getDisplayName());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("0", feature0.getName());
      
      byte[] byteArray1 = feature0.getResidues();
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("0", feature0.getDisplayName());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("0", feature0.getName());
      
      feature0.setFeatureLocsForFeatureId(collection1);
      assertTrue(feature0.isObsolete());
      assertEquals(1, feature0.getSeqLen());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertTrue(feature0.isAnalysis());
      assertEquals("0", feature0.getDisplayName());
      assertEquals("b`a?Q]Ny$9^<", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("0", feature0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature(organism0, cvTerm0, "f", false, false, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("f", feature0.getUniqueName());
      assertEquals("f", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)94;
      feature0.setResidues(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-90), (byte) (-110), (byte)1, (byte) (-1), (byte) (-51), (byte)34, (byte)94}, byteArray0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("f", feature0.getUniqueName());
      assertEquals("f", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertEquals(8, feature0.getSeqLen());
      assertEquals("957c9136bd454977248ebf643f1a4532", feature0.getMd5Checksum());
      
      feature0.setObsolete(false);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("f", feature0.getUniqueName());
      assertEquals("f", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertEquals(8, feature0.getSeqLen());
      assertEquals("957c9136bd454977248ebf643f1a4532", feature0.getMd5Checksum());
      
      Collection<FeatureProp> collection0 = feature0.getFeatureProps();
      assertNotNull(collection0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("f", feature0.getUniqueName());
      assertEquals("f", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertEquals(8, feature0.getSeqLen());
      assertEquals("957c9136bd454977248ebf643f1a4532", feature0.getMd5Checksum());
      
      feature0.setMd5Checksum("f");
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("f", feature0.getUniqueName());
      assertEquals("f", feature0.getMd5Checksum());
      assertEquals("f", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertEquals(8, feature0.getSeqLen());
      
      // Undeclared exception!
      try { 
        feature0.getResidues((-1976), (-1976));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature((Organism) null, cvTerm0, "", false, false, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("", feature0.getUniqueName());
      
      DbXRef dbXRef0 = feature0.getDbXRef();
      assertNull(dbXRef0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("", feature0.getUniqueName());
      
      feature0.setDbXRef((DbXRef) null);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("", feature0.getUniqueName());
      
      byte[] byteArray0 = null;
      feature0.setResidues((byte[]) null);
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("", feature0.getUniqueName());
      
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection0);
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("", feature0.getUniqueName());
      
      feature0.setFeatureRelationshipsForSubjectId(collection0);
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("", feature0.getUniqueName());
      
      feature0.setOrganism((Organism) null);
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("", feature0.getUniqueName());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      feature0.setSeqLen(integer0);
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("", feature0.getUniqueName());
      
      Collection<FeatureProp> collection1 = feature0.getFeatureProps();
      assertNotNull(collection1);
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("", feature0.getUniqueName());
      
      // Undeclared exception!
      try { 
        feature0.addFeatureProp((FeatureProp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cvTerm0).toString();
      Feature feature0 = new Feature(organism0, cvTerm0, "", true, true, (Timestamp) null, (Timestamp) null);
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureLoc> collection0 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureRelationship> collection1 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection1);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      boolean boolean0 = feature0.isAnalysis();
      assertTrue(boolean0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      CvTerm cvTerm1 = feature0.getCvTerm();
      assertNotNull(cvTerm1);
      assertSame(cvTerm1, cvTerm0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, cvTerm1.getIsObsolete());
      assertNull(cvTerm1.getDefinition());
      assertNull(cvTerm1.getName());
      assertEquals(0, cvTerm1.getCvTermId());
      assertEquals(0, cvTerm1.getIsRelationshipType());
      
      feature0.setFeatureLocsForSrcFeatureId(collection0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      FeatureLoc featureLoc0 = feature0.getFeatureLoc();
      assertNull(featureLoc0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeatureLoc((FeatureLoc) null);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      int int0 = feature0.getSeqLen();
      assertEquals((-1), int0);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      FeatureLoc featureLoc1 = feature0.getFeatureLoc();
      assertNull(featureLoc1);
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      String string0 = feature0.getName();
      assertNull(string0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      DbXRef dbXRef0 = feature0.getDbXRef();
      assertNull(dbXRef0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      Collection<AnalysisFeature> collection0 = feature0.getAnalysisFeatures();
      assertNull(collection0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      feature0.setAnalysisFeatures((Collection<AnalysisFeature>) null);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      feature0.setUniqueName((String) null);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      Collection<FeatureRelationship> collection1 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection1);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      feature0.setObsolete(false);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      Organism organism0 = feature0.getOrganism();
      assertNull(organism0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      feature0.setOrganism((Organism) null);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      String string1 = feature0.getName();
      assertNull(string1);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      feature0.setFeatureRelationshipsForObjectId(collection1);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      feature0.setOrganism((Organism) null);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      Collection<FeatureCvTerm> collection2 = feature0.getFeatureCvTerms();
      assertNull(collection2);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      Collection<FeatureLoc> collection3 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection3);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      feature0.setFeatureLocsForFeatureId(collection3);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      feature0.setUniqueName("!D`s74");
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("!D`s74", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("!D`s74", feature0.getUniqueName());
      
      feature0.setFeatureRelationshipsForSubjectId(collection1);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("!D`s74", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("!D`s74", feature0.getUniqueName());
      
      Timestamp timestamp0 = feature0.getTimeLastModified();
      assertNull(timestamp0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("!D`s74", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("!D`s74", feature0.getUniqueName());
      
      Date date0 = feature0.getTimeAccessioned();
      assertNull(date0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("!D`s74", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("!D`s74", feature0.getUniqueName());
      
      feature0.setObsolete(false);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("!D`s74", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("!D`s74", feature0.getUniqueName());
      
      String string2 = feature0.getName();
      assertNull(string2);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("!D`s74", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("!D`s74", feature0.getUniqueName());
      
      String string3 = feature0.getDisplayName();
      assertNotNull(string3);
      assertEquals("!D`s74", string3);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("!D`s74", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("!D`s74", feature0.getUniqueName());
      
      Collection<AnalysisFeature> collection4 = feature0.getAnalysisFeatures();
      assertNull(collection4);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("!D`s74", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("!D`s74", feature0.getUniqueName());
      
      feature0.setFeatureRelationshipsForSubjectId(collection1);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("!D`s74", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("!D`s74", feature0.getUniqueName());
      
      Timestamp timestamp1 = feature0.getTimeLastModified();
      assertNull(timestamp1);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("!D`s74", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("!D`s74", feature0.getUniqueName());
      
      byte[] byteArray0 = feature0.getResidues();
      assertNull(byteArray0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("!D`s74", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("!D`s74", feature0.getUniqueName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeatureRelationshipsForSubjectId(collection0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeLastModified(timestamp0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeatureId(0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setMd5Checksum((String) null);
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setUniqueName("9");
      assertEquals("9", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("9", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      
      byte[] byteArray0 = feature0.getResidues();
      assertNull(byteArray0);
      assertEquals("9", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("9", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setResidues((byte[]) null);
      assertEquals("9", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("9", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      
      String string0 = feature0.getMd5Checksum();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("9", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("9", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      int int0 = feature0.getFeatureId();
      assertEquals(0, int0);
      assertEquals("9", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("9", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      
      Collection<FeatureProp> collection1 = feature0.getFeatureProps();
      assertNotNull(collection1);
      assertEquals("9", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("9", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      
      feature0.setFeatureProps(collection1);
      assertEquals("9", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("9", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      
      Collection<FeatureLoc> collection2 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection2);
      assertEquals("9", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("9", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      
      feature0.setFeatureLocsForSrcFeatureId(collection2);
      assertEquals("9", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("9", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      
      CvTerm cvTerm1 = feature0.getCvTerm();
      assertNull(cvTerm1);
      assertEquals("9", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("9", feature0.getUniqueName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setAnalysis(false);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureDbXRef> collection0 = feature0.getFeatureDbXRefs();
      assertNull(collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      FeatureProp featureProp0 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      feature0.addFeatureProp(featureProp0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setFeatureDbXRefs((Collection<FeatureDbXRef>) null);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeaturePub> collection1 = feature0.getFeaturePubs();
      assertNull(collection1);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setFeaturePubs((Collection<FeaturePub>) null);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Organism organism0 = feature0.getOrganism();
      assertNull(organism0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Timestamp timestamp0 = feature0.getTimeLastModified();
      assertNull(timestamp0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setMd5Checksum("");
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertEquals("", feature0.getMd5Checksum());
      
      String string0 = feature0.getName();
      assertNull(string0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertEquals("", feature0.getMd5Checksum());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      int int0 = 0;
      Collection<FeatureLoc> collection0 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setFeatureLocsForFeatureId(collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setName("@");
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("@", feature0.getName());
      assertEquals("@", feature0.getDisplayName());
      
      feature0.setFeatureId(0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("@", feature0.getName());
      assertEquals("@", feature0.getDisplayName());
      
      FeatureLoc featureLoc0 = feature0.getFeatureLoc();
      assertNull(featureLoc0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("@", feature0.getName());
      assertEquals("@", feature0.getDisplayName());
      
      feature0.setFeatureId((-947));
      assertEquals((-1), feature0.getSeqLen());
      assertEquals((-947), feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertEquals("@", feature0.getName());
      assertEquals("@", feature0.getDisplayName());
      
      // Undeclared exception!
      try { 
        feature0.addFeatureLocsForFeatureId((FeatureLoc) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      int int0 = feature0.getSeqLen();
      assertEquals((-1), int0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureCvTerm> collection0 = feature0.getFeatureCvTerms();
      assertNull(collection0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setFeatureCvTerms((Collection<FeatureCvTerm>) null);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)0;
      feature0.setResidues(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte) (-43), (byte)0}, byteArray0);
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("5ff14a081d17268c4d5452fe2dde50cd", feature0.getMd5Checksum());
      assertEquals(7, feature0.getSeqLen());
      
      feature0.setName("org.gmod.schema.cv.Cv");
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("5ff14a081d17268c4d5452fe2dde50cd", feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getName());
      assertEquals(7, feature0.getSeqLen());
      
      Organism organism0 = feature0.getOrganism();
      assertNull(organism0);
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("5ff14a081d17268c4d5452fe2dde50cd", feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getName());
      assertEquals(7, feature0.getSeqLen());
      
      Collection<FeaturePub> collection0 = feature0.getFeaturePubs();
      assertNull(collection0);
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("5ff14a081d17268c4d5452fe2dde50cd", feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getName());
      assertEquals(7, feature0.getSeqLen());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setDbXRef((DbXRef) null);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection0);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureDbXRef> collection1 = feature0.getFeatureDbXRefs();
      assertNull(collection1);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setFeatureDbXRefs((Collection<FeatureDbXRef>) null);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureProp> collection2 = feature0.getFeatureProps();
      assertNotNull(collection2);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      FeatureProp featureProp0 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      feature0.addFeatureProp(featureProp0);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureDbXRef> collection3 = feature0.getFeatureDbXRefs();
      assertNull(collection3);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      boolean boolean0 = feature0.isAnalysis();
      assertFalse(boolean0);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      feature0.setOrganism(organism0);
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      // Undeclared exception!
      try { 
        feature0.getResidues(1630, 1630);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      String string0 = "C1QXG";
      boolean boolean0 = false;
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature(organism0, cvTerm0, "C1QXG", false, false, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("C1QXG", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("C1QXG", feature0.getUniqueName());
      
      Timestamp timestamp1 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Collection<FeatureDbXRef> collection0 = feature0.getFeatureDbXRefs();
      assertNull(collection0);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("C1QXG", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("C1QXG", feature0.getUniqueName());
      
      feature0.setFeatureDbXRefs((Collection<FeatureDbXRef>) null);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("C1QXG", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("C1QXG", feature0.getUniqueName());
      
      feature0.setTimeLastModified(timestamp1);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("C1QXG", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("C1QXG", feature0.getUniqueName());
      
      Collection<Phylonode> collection1 = feature0.getPhylonodes();
      assertNull(collection1);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("C1QXG", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("C1QXG", feature0.getUniqueName());
      
      FeatureLoc featureLoc0 = feature0.getFeatureLoc();
      assertNull(featureLoc0);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("C1QXG", feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertEquals("C1QXG", feature0.getUniqueName());
      
      // Undeclared exception!
      try { 
        feature0.addFeatureLocsForFeatureId((FeatureLoc) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      feature0.setObsolete(true);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getUniqueName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureProp> collection0 = feature0.getFeatureProps();
      assertNotNull(collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      feature0.setFeatureProps(collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureLoc> collection1 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection1);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureRelationship> collection2 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection2);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      feature0.setCvTerm(cvTerm0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Organism organism0 = feature0.getOrganism();
      assertNull(organism0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureSynonym> collection3 = feature0.getFeatureSynonyms();
      assertNotNull(collection3);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      boolean boolean0 = feature0.isObsolete();
      assertFalse(boolean0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureRelationship> collection4 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection4);
      assertNotSame(collection4, collection2);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertTrue(collection4.equals((Object)collection2));
      
      FeatureRelationship featureRelationship0 = mock(FeatureRelationship.class, new ViolatedAssumptionAnswer());
      feature0.addFeatureRelationshipsForSubjectId(featureRelationship0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertNull(feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      feature0.setResidues(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNull(feature0.getDisplayName());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertEquals(1, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      
      int int0 = feature0.getFeatureId();
      assertEquals(0, int0);
      assertNull(feature0.getDisplayName());
      assertEquals("93b885adfe0da089cdf634904fd59f71", feature0.getMd5Checksum());
      assertEquals(1, feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      
      feature0.setResidues((byte[]) null);
      assertEquals(0, feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Collection<FeatureSynonym> collection0 = feature0.getFeatureSynonyms();
      assertNotNull(collection0);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      feature0.setFeatureSynonyms(collection0);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeAccessioned(timestamp0);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Collection<FeatureRelationship> collection1 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection1);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      FeatureProp featureProp0 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(featureProp0).toString();
      feature0.addFeatureProp(featureProp0);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Collection<FeatureProp> collection2 = feature0.getFeatureProps();
      assertNotNull(collection2);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(collection2.contains(featureProp0));
      
      FeatureProp featureProp1 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      feature0.addFeatureProp(featureProp1);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Collection<FeatureDbXRef> collection3 = feature0.getFeatureDbXRefs();
      assertNull(collection3);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      feature0.setFeatureDbXRefs((Collection<FeatureDbXRef>) null);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      FeatureLoc featureLoc0 = feature0.getFeatureLoc();
      assertNull(featureLoc0);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      feature0.setFeatureLoc((FeatureLoc) null);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      FeatureProp featureProp0 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      feature0.addFeatureProp(featureProp0);
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<Phylonode> collection0 = feature0.getPhylonodes();
      assertNull(collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      FeatureRelationship featureRelationship0 = mock(FeatureRelationship.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        feature0.addFeatureRelationshipsForSubjectId(featureRelationship0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      
      Collection<AnalysisFeature> collection0 = feature0.getAnalysisFeatures();
      assertNull(collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      
      Feature feature1 = new Feature();
      assertNotNull(feature1);
      assertNull(feature1.getDisplayName());
      assertEquals(0, feature1.getFeatureId());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getName());
      assertFalse(feature1.isAnalysis());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.equals((Object)feature0));
      
      Collection<FeatureLoc> collection1 = feature1.getFeatureLocsForFeatureId();
      assertNotNull(collection1);
      assertNotSame(feature1, feature0);
      assertNull(feature1.getDisplayName());
      assertEquals(0, feature1.getFeatureId());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getName());
      assertFalse(feature1.isAnalysis());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature1.equals((Object)feature0));
      
      feature0.setFeatureLocsForFeatureId(collection1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature1.getDisplayName());
      assertEquals(0, feature1.getFeatureId());
      assertEquals((-1), feature1.getSeqLen());
      assertNull(feature1.getName());
      assertFalse(feature1.isAnalysis());
      assertFalse(feature1.isObsolete());
      assertNull(feature1.getUniqueName());
      assertNull(feature1.getMd5Checksum());
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      
      feature0.setAnalysisFeatures((Collection<AnalysisFeature>) null);
      assertNotSame(feature0, feature1);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertFalse(feature0.equals((Object)feature1));
      
      // Undeclared exception!
      try { 
        feature0.addFeatureProp((FeatureProp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Timestamp timestamp0 = feature0.getTimeLastModified();
      assertNull(timestamp0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureLoc> collection0 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureProp> collection1 = feature0.getFeatureProps();
      assertNotNull(collection1);
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      DbXRef dbXRef0 = feature0.getDbXRef();
      assertNull(dbXRef0);
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      
      String string0 = feature0.getDisplayName();
      assertNull(string0);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      
      boolean boolean0 = feature0.isAnalysis();
      assertFalse(boolean0);
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      
      // Undeclared exception!
      try { 
        feature0.getResidues(976, 976);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureCvTerm> collection0 = feature0.getFeatureCvTerms();
      assertNull(collection0);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureCvTerms((Collection<FeatureCvTerm>) null);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      feature0.setOrganism((Organism) null);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      DbXRef dbXRef0 = feature0.getDbXRef();
      assertNull(dbXRef0);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      feature0.setDbXRef((DbXRef) null);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureSynonym> collection1 = feature0.getFeatureSynonyms();
      assertNotNull(collection1);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      String string0 = feature0.getUniqueName();
      assertNull(string0);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      String string1 = feature0.getName();
      assertNull(string1);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      feature0.setPhylonodes((Collection<Phylonode>) null);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      Integer integer0 = new Integer((-1186));
      assertNotNull(integer0);
      assertEquals((-1186), (int)integer0);
      
      feature0.setSeqLen(integer0);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1186), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      Organism organism0 = feature0.getOrganism();
      assertNull(organism0);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1186), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      Collection<FeatureLoc> collection2 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection2);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1186), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      
      String string2 = feature0.getMd5Checksum();
      assertNull(string2);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals((-1186), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureSynonym> collection0 = feature0.getFeatureSynonyms();
      assertNotNull(collection0);
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setFeatureSynonyms(collection0);
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setFeatureRelationshipsForObjectId((Collection<FeatureRelationship>) null);
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<Phylonode> collection1 = feature0.getPhylonodes();
      assertNull(collection1);
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setPhylonodes((Collection<Phylonode>) null);
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      int int0 = feature0.getFeatureId();
      assertEquals(0, int0);
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureRelationship> collection2 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection2);
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Date date0 = feature0.getTimeAccessioned();
      assertNull(date0);
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureRelationship> collection3 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection3);
      assertSame(collection3, collection2);
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setFeatureRelationshipsForObjectId(collection3);
      assertSame(collection3, collection2);
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection0);
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      
      Collection<FeatureRelationship> collection1 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection1);
      assertSame(collection1, collection0);
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      
      FeatureLoc featureLoc0 = feature0.getFeatureLoc();
      assertNull(featureLoc0);
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getUniqueName());
      
      // Undeclared exception!
      try { 
        feature0.addFeatureLocsForFeatureId((FeatureLoc) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      
      Collection<FeatureDbXRef> collection0 = feature0.getFeatureDbXRefs();
      assertNull(collection0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      
      Collection<FeatureSynonym> collection1 = feature0.getFeatureSynonyms();
      assertNotNull(collection1);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      
      feature0.setFeatureSynonyms(collection1);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      
      feature0.setFeatureDbXRefs((Collection<FeatureDbXRef>) null);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      
      CvTerm cvTerm0 = feature0.getCvTerm();
      assertNull(cvTerm0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      
      int int0 = feature0.getFeatureId();
      assertEquals(0, int0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
      
      Date date0 = feature0.getTimeAccessioned();
      assertNull(date0);
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getDisplayName());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals(0, feature0.getFeatureId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureCvTerm> collection0 = feature0.getFeatureCvTerms();
      assertNull(collection0);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      
      feature0.setFeatureCvTerms((Collection<FeatureCvTerm>) null);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      
      feature0.setUniqueName("92E> yd");
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Timestamp timestamp0 = feature0.getTimeLastModified();
      assertNull(timestamp0);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Collection<FeatureLoc> collection1 = feature0.getFeatureLocsForFeatureId();
      assertNotNull(collection1);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      int int0 = feature0.getSeqLen();
      assertEquals((-1), int0);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Collection<AnalysisFeature> collection2 = feature0.getAnalysisFeatures();
      assertNull(collection2);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      feature0.setAnalysisFeatures((Collection<AnalysisFeature>) null);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Timestamp timestamp1 = feature0.getTimeLastModified();
      assertNull(timestamp1);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      feature0.setFeatureLocsForSrcFeatureId(collection1);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Collection<FeatureRelationship> collection3 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection3);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Collection<FeatureCvTerm> collection4 = feature0.getFeatureCvTerms();
      assertNull(collection4);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      feature0.setFeatureCvTerms((Collection<FeatureCvTerm>) null);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      
      Integer integer0 = new Integer((-1975));
      assertNotNull(integer0);
      assertEquals((-1975), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      feature0.setSeqLen(integer0);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1975), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(integer0.equals((Object)int0));
      
      feature0.setTimeLastModified((Timestamp) null);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1975), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      
      Collection<FeaturePub> collection5 = feature0.getFeaturePubs();
      assertNull(collection5);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1975), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      
      Timestamp timestamp2 = feature0.getTimeLastModified();
      assertNull(timestamp2);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1975), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      
      feature0.setFeatureCvTerms((Collection<FeatureCvTerm>) null);
      assertFalse(feature0.isAnalysis());
      assertFalse(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1975), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertEquals("92E> yd", feature0.getDisplayName());
      assertEquals("92E> yd", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timestamp0).toString();
      Feature feature0 = new Feature(organism0, cvTerm0, (String) null, true, true, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      assertTrue(feature0.isAnalysis());
      assertNull(feature0.getDisplayName());
      
      Date date0 = feature0.getTimeAccessioned();
      assertNotNull(date0);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      assertTrue(feature0.isAnalysis());
      assertNull(feature0.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp1 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature((Organism) null, cvTerm0, "org.gmod.schema.phylogeny.Phylonode", false, false, timestamp0, timestamp1);
      assertNotNull(feature0);
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Timestamp timestamp2 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Collection<FeatureCvTerm> collection0 = feature0.getFeatureCvTerms();
      assertNull(collection0);
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setFeatureCvTerms((Collection<FeatureCvTerm>) null);
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setTimeAccessioned(timestamp2);
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Timestamp timestamp3 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeAccessioned(timestamp3);
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      Collection<Phylonode> collection1 = feature0.getPhylonodes();
      assertNull(collection1);
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      feature0.setPhylonodes((Collection<Phylonode>) null);
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)16;
      feature0.setResidues(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)98, (byte)16}, byteArray0);
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getName());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      
      feature0.setName("");
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getName());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      
      String string0 = feature0.getName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getName());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      
      FeatureLoc featureLoc0 = feature0.getFeatureLoc();
      assertNull(featureLoc0);
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getName());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      
      String string1 = feature0.getDisplayName();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getName());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      
      Collection<FeatureRelationship> collection2 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection2);
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getName());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      
      feature0.setPhylonodes((Collection<Phylonode>) null);
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getName());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      
      Timestamp timestamp4 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeLastModified(timestamp4);
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getName());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      
      Collection<FeatureLoc> collection3 = feature0.getFeatureLocsForSrcFeatureId();
      assertNotNull(collection3);
      assertEquals("", feature0.getDisplayName());
      assertEquals("org.gmod.schema.phylogeny.Phylonode", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertEquals("", feature0.getName());
      assertEquals("b7431815854504d10f44c992baaa27ec", feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals(4, feature0.getSeqLen());
      
      // Undeclared exception!
      try { 
        feature0.getResidues((int) (byte) (-1), (int) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      Collection<FeatureProp> collection0 = feature0.getFeatureProps();
      assertNotNull(collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getUniqueName());
      assertNull(feature0.getMd5Checksum());
      
      // Undeclared exception!
      try { 
        feature0.setSeqLen((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length of 'null' attempted to be set to null
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature((Organism) null, cvTerm0, "", false, false, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      
      FeatureRelationship featureRelationship0 = mock(FeatureRelationship.class, new ViolatedAssumptionAnswer());
      Collection<FeaturePub> collection0 = feature0.getFeaturePubs();
      assertNull(collection0);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      
      Collection<FeatureProp> collection1 = feature0.getFeatureProps();
      assertNotNull(collection1);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      
      feature0.setFeatureProps(collection1);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      
      feature0.setFeaturePubs((Collection<FeaturePub>) null);
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertEquals("", feature0.getDisplayName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isObsolete());
      assertEquals("", feature0.getUniqueName());
      
      // Undeclared exception!
      try { 
        feature0.addFeatureRelationshipsForSubjectId(featureRelationship0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertNull(feature0.getName());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getDisplayName());
      
      feature0.setUniqueName("org.gmod.schema.cv.Cv");
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
      
      feature0.setUniqueName("org.gmod.schema.cv.Cv");
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
      
      Collection<FeatureDbXRef> collection0 = feature0.getFeatureDbXRefs();
      assertNull(collection0);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
      
      feature0.setFeatureDbXRefs((Collection<FeatureDbXRef>) null);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
      
      DbXRef dbXRef0 = feature0.getDbXRef();
      assertNull(dbXRef0);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
      
      feature0.setDbXRef((DbXRef) null);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
      
      int int0 = feature0.getSeqLen();
      assertEquals((-1), int0);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
      
      feature0.setFeatureId((byte)0);
      assertNull(feature0.getName());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
      
      feature0.setMd5Checksum("org.gmod.schema.cv.Cv");
      assertNull(feature0.getName());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
      
      feature0.setName("org.gmod.schema.cv.Cv");
      assertEquals("org.gmod.schema.cv.Cv", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getName());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
      
      feature0.setMd5Checksum("org.gmod.schema.cv.Cv");
      assertEquals("org.gmod.schema.cv.Cv", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getName());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
      
      Organism organism0 = feature0.getOrganism();
      assertNull(organism0);
      assertEquals("org.gmod.schema.cv.Cv", feature0.getMd5Checksum());
      assertFalse(feature0.isObsolete());
      assertFalse(feature0.isAnalysis());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getName());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getDisplayName());
      assertEquals(0, feature0.getFeatureId());
      assertEquals((-1), feature0.getSeqLen());
      assertEquals("org.gmod.schema.cv.Cv", feature0.getUniqueName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      doReturn(":").when(timestamp0).toString();
      Feature feature0 = new Feature(organism0, cvTerm0, ":", false, true, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertEquals(":", feature0.getDisplayName());
      assertEquals(":", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      
      Date date0 = feature0.getTimeAccessioned();
      assertNotNull(date0);
      assertEquals(":", feature0.getDisplayName());
      assertEquals(":", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      assertEquals(":", date0.toString());
      
      int int0 = feature0.getSeqLen();
      assertEquals((-1), int0);
      assertEquals(":", feature0.getDisplayName());
      assertEquals(":", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      
      int int1 = feature0.getSeqLen();
      assertEquals((-1), int1);
      assertEquals(":", feature0.getDisplayName());
      assertEquals(":", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      assertTrue(int1 == int0);
      
      Organism organism1 = mock(Organism.class, new ViolatedAssumptionAnswer());
      feature0.setOrganism(organism1);
      assertEquals(":", feature0.getDisplayName());
      assertEquals(":", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      
      feature0.setAnalysis(false);
      assertEquals(":", feature0.getDisplayName());
      assertEquals(":", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      
      String string0 = feature0.getName();
      assertNull(string0);
      assertEquals(":", feature0.getDisplayName());
      assertEquals(":", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      
      Timestamp timestamp1 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeLastModified(timestamp1);
      assertEquals(":", feature0.getDisplayName());
      assertEquals(":", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      
      feature0.setFeatureId((-1));
      assertEquals((-1), feature0.getFeatureId());
      assertEquals(":", feature0.getDisplayName());
      assertEquals(":", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      
      Collection<FeatureLoc> collection0 = feature0.getFeatureLocsForFeatureId();
      assertNotNull(collection0);
      assertEquals((-1), feature0.getFeatureId());
      assertEquals(":", feature0.getDisplayName());
      assertEquals(":", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
      
      Collection<FeatureProp> collection1 = feature0.getFeatureProps();
      assertNotNull(collection1);
      assertEquals((-1), feature0.getFeatureId());
      assertEquals(":", feature0.getDisplayName());
      assertEquals(":", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(feature0.isObsolete());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Feature feature0 = new Feature();
      assertNotNull(feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setFeatureLocsForFeatureId((Collection<FeatureLoc>) null);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setFeatureRelationshipsForSubjectId(collection0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp1 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setFeatureLocsForSrcFeatureId((Collection<FeatureLoc>) null);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<FeatureDbXRef> collection1 = feature0.getFeatureDbXRefs();
      assertNull(collection1);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Collection<AnalysisFeature> collection2 = feature0.getAnalysisFeatures();
      assertNull(collection2);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      feature0.setAnalysisFeatures((Collection<AnalysisFeature>) null);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      String string0 = feature0.getName();
      assertNull(string0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      
      Feature feature1 = new Feature();
      assertNotNull(feature1);
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getUniqueName());
      assertNull(feature1.getMd5Checksum());
      assertEquals((-1), feature1.getSeqLen());
      assertFalse(feature1.isObsolete());
      assertEquals(0, feature1.getFeatureId());
      assertNull(feature1.getName());
      assertFalse(feature1.equals((Object)feature0));
      
      DbXRef dbXRef0 = feature1.getDbXRef();
      assertNull(dbXRef0);
      assertNotSame(feature1, feature0);
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getUniqueName());
      assertNull(feature1.getMd5Checksum());
      assertEquals((-1), feature1.getSeqLen());
      assertFalse(feature1.isObsolete());
      assertEquals(0, feature1.getFeatureId());
      assertNull(feature1.getName());
      assertFalse(feature1.equals((Object)feature0));
      
      feature0.setDbXRef((DbXRef) null);
      assertNotSame(feature0, feature1);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertFalse(feature0.equals((Object)feature1));
      
      feature1.setFeatureRelationshipsForObjectId(collection0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertNull(feature0.getUniqueName());
      assertFalse(feature0.isObsolete());
      assertEquals(0, feature0.getFeatureId());
      assertNull(feature0.getName());
      assertNull(feature0.getDisplayName());
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getUniqueName());
      assertNull(feature1.getMd5Checksum());
      assertEquals((-1), feature1.getSeqLen());
      assertFalse(feature1.isObsolete());
      assertEquals(0, feature1.getFeatureId());
      assertNull(feature1.getName());
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature1.equals((Object)feature0));
      
      Collection<AnalysisFeature> collection3 = feature1.getAnalysisFeatures();
      assertNull(collection3);
      assertNotSame(feature1, feature0);
      assertNull(feature1.getDisplayName());
      assertFalse(feature1.isAnalysis());
      assertNull(feature1.getUniqueName());
      assertNull(feature1.getMd5Checksum());
      assertEquals((-1), feature1.getSeqLen());
      assertFalse(feature1.isObsolete());
      assertEquals(0, feature1.getFeatureId());
      assertNull(feature1.getName());
      assertFalse(feature1.equals((Object)feature0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature(organism0, cvTerm0, "Vm):l>\"e7k~Y=1dd", false, false, timestamp0, timestamp0);
      assertNotNull(feature0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      String string0 = feature0.getName();
      assertNull(string0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      byte[] byteArray0 = feature0.getResidues();
      assertNull(byteArray0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      DbXRef dbXRef0 = feature0.getDbXRef();
      assertNull(dbXRef0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      feature0.setDbXRef((DbXRef) null);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      boolean boolean0 = feature0.isObsolete();
      assertFalse(boolean0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      feature0.setFeatureRelationshipsForSubjectId(collection0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      int int0 = feature0.getFeatureId();
      assertEquals(0, int0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      Collection<FeatureRelationship> collection1 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection1);
      assertSame(collection1, collection0);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      Collection<FeatureRelationship> collection2 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection2);
      assertSame(collection2, collection0);
      assertSame(collection2, collection1);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      feature0.setObsolete(false);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      Collection<FeatureRelationship> collection3 = feature0.getFeatureRelationshipsForObjectId();
      assertNotNull(collection3);
      assertSame(collection3, collection0);
      assertSame(collection3, collection1);
      assertSame(collection3, collection2);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      Collection<FeatureRelationship> collection4 = feature0.getFeatureRelationshipsForSubjectId();
      assertNotNull(collection4);
      assertSame(collection4, collection0);
      assertSame(collection4, collection1);
      assertSame(collection4, collection3);
      assertSame(collection4, collection2);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      boolean boolean1 = feature0.isAnalysis();
      assertFalse(boolean1);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      assertTrue(boolean1 == boolean0);
      
      String string1 = feature0.getMd5Checksum();
      assertNull(string1);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
      
      Collection<FeatureSynonym> collection5 = feature0.getFeatureSynonyms();
      assertNotNull(collection5);
      assertEquals(0, feature0.getFeatureId());
      assertFalse(feature0.isObsolete());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getDisplayName());
      assertEquals("Vm):l>\"e7k~Y=1dd", feature0.getUniqueName());
      assertFalse(feature0.isAnalysis());
      assertNull(feature0.getMd5Checksum());
      assertEquals((-1), feature0.getSeqLen());
      assertNull(feature0.getName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      doReturn("").when(cvTerm0).toString();
      Feature feature0 = new Feature(organism0, cvTerm0, "", true, true, (Timestamp) null, (Timestamp) null);
      assertNotNull(feature0);
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      
      CvTerm cvTerm1 = feature0.getCvTerm();
      assertNotNull(cvTerm1);
      assertSame(cvTerm1, cvTerm0);
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
      assertEquals(0, cvTerm1.getIsObsolete());
      assertNull(cvTerm1.getDefinition());
      assertNull(cvTerm1.getName());
      assertEquals(0, cvTerm1.getCvTermId());
      assertEquals(0, cvTerm1.getIsRelationshipType());
      
      Timestamp timestamp0 = feature0.getTimeLastModified();
      assertNull(timestamp0);
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
      assertNull(feature0.getMd5Checksum());
      assertEquals("", feature0.getUniqueName());
      assertEquals(0, feature0.getFeatureId());
      assertTrue(feature0.isAnalysis());
      assertEquals("", feature0.getDisplayName());
      assertNull(feature0.getName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Feature feature0 = new Feature();
      feature0.setFeatureId(0);
      feature0.getFeatureRelationshipsForSubjectId();
      Collection<FeatureProp> collection0 = feature0.getFeatureProps();
      feature0.setFeatureId(0);
      feature0.setFeatureProps(collection0);
      feature0.setFeatureId(0);
      feature0.setFeatureId(0);
      byte[] byteArray0 = new byte[10];
      feature0.setResidues(byteArray0);
      FeatureProp featureProp0 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      feature0.addFeatureProp(featureProp0);
      Integer integer0 = new Integer(0);
      feature0.setSeqLen(integer0);
      Collection<FeatureLoc> collection1 = feature0.getFeatureLocsForSrcFeatureId();
      feature0.getName();
      feature0.getPhylonodes();
      feature0.setPhylonodes((Collection<Phylonode>) null);
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeLastModified(timestamp0);
      feature0.setObsolete(false);
      feature0.setFeatureLocsForSrcFeatureId(collection1);
      feature0.getSeqLen();
      feature0.getFeatureLoc();
      assertEquals(0, feature0.getSeqLen());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      doReturn("k-jqa").when(timestamp0).toString();
      Feature feature0 = new Feature(organism0, cvTerm0, "Hj:BwY\u0002", false, true, timestamp0, timestamp0);
      CvTerm cvTerm1 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Collection<FeatureRelationship> collection0 = feature0.getFeatureRelationshipsForSubjectId();
      feature0.setFeatureRelationshipsForSubjectId(collection0);
      feature0.setCvTerm(cvTerm1);
      FeatureProp featureProp0 = mock(FeatureProp.class, new ViolatedAssumptionAnswer());
      feature0.addFeatureProp(featureProp0);
      Collection<FeatureRelationship> collection1 = feature0.getFeatureRelationshipsForObjectId();
      feature0.getDbXRef();
      String string0 = feature0.getDisplayName();
      assertNotNull(string0);
      
      feature0.getTimeLastModified();
      feature0.getFeatureLocsForSrcFeatureId();
      feature0.getFeatureLocsForSrcFeatureId();
      feature0.getFeaturePubs();
      feature0.getFeatureLoc();
      feature0.setFeatureLoc((FeatureLoc) null);
      feature0.setFeatureRelationshipsForSubjectId(collection1);
      feature0.getName();
      feature0.getDbXRef();
      feature0.setDbXRef((DbXRef) null);
      assertFalse(feature0.isAnalysis());
      assertEquals((-1), feature0.getSeqLen());
      assertTrue(feature0.isObsolete());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature();
      feature0.getFeatureLoc();
      feature0.getFeatureProps();
      feature0.getDbXRef();
      // Undeclared exception!
      try { 
        feature0.addFeatureLocsForFeatureId((FeatureLoc) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gmod.schema.sequence.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Organism organism0 = mock(Organism.class, new ViolatedAssumptionAnswer());
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      Feature feature0 = new Feature();
      Collection<FeatureSynonym> collection0 = feature0.getFeatureSynonyms();
      feature0.setFeatureSynonyms(collection0);
      feature0.setObsolete(true);
      Collection<FeatureLoc> collection1 = feature0.getFeatureLocsForFeatureId();
      feature0.setFeatureLocsForSrcFeatureId(collection1);
      feature0.getFeatureCvTerms();
      feature0.getFeatureSynonyms();
      feature0.getFeatureProps();
      feature0.getFeatureCvTerms();
      feature0.getResidues();
      feature0.isAnalysis();
      feature0.getPhylonodes();
      feature0.setPhylonodes((Collection<Phylonode>) null);
      feature0.getFeatureRelationshipsForObjectId();
      feature0.getFeatureCvTerms();
      feature0.setMd5Checksum("l/ h>JNJ#;]:6}v@m");
      Timestamp timestamp1 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      feature0.setTimeAccessioned(timestamp1);
      feature0.setResidues((byte[]) null);
      feature0.getAnalysisFeatures();
      assertTrue(feature0.isObsolete());
  }
}
