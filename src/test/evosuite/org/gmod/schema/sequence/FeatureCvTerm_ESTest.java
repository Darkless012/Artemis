/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 14:07:26 GMT 2018
 */

package org.gmod.schema.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gmod.schema.cv.CvTerm;
import org.gmod.schema.pub.Pub;
import org.gmod.schema.sequence.Feature;
import org.gmod.schema.sequence.FeatureCvTerm;
import org.gmod.schema.sequence.FeatureCvTermDbXRef;
import org.gmod.schema.sequence.FeatureCvTermProp;
import org.gmod.schema.sequence.FeatureCvTermPub;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class FeatureCvTerm_ESTest extends FeatureCvTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setNot(true);
      boolean boolean0 = featureCvTerm0.isNot();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      int int0 = featureCvTerm0.getRank();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setRank((-3272));
      int int0 = featureCvTerm0.getRank();
      assertEquals((-3272), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      Pub pub0 = mock(Pub.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm((CvTerm) null, feature0, pub0, true, 0);
      featureCvTerm0.setFeatureCvTermPubs((Collection<FeatureCvTermPub>) null);
      featureCvTerm0.getFeatureCvTermPubs();
      assertEquals(0, featureCvTerm0.getRank());
      assertTrue(featureCvTerm0.isNot());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setFeatureCvTermProps((Collection<FeatureCvTermProp>) null);
      Collection<FeatureCvTermProp> collection0 = featureCvTerm0.getFeatureCvTermProps();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setFeatureCvTermId(1);
      int int0 = featureCvTerm0.getFeatureCvTermId();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setFeatureCvTermId((-192));
      int int0 = featureCvTerm0.getFeatureCvTermId();
      assertEquals((-192), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      featureCvTerm0.setFeatureCvTermDbXRefs((Collection<FeatureCvTermDbXRef>) null);
      Collection<FeatureCvTermDbXRef> collection0 = featureCvTerm0.getFeatureCvTermDbXRefs();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      CvTerm cvTerm0 = featureCvTerm0.getCvTerm();
      assertNull(cvTerm0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm(cvTerm0, feature0, (Pub) null, false, 2515);
      Feature feature1 = mock(Feature.class, new ViolatedAssumptionAnswer());
      featureCvTerm0.setFeature(feature1);
      assertEquals(2515, featureCvTerm0.getRank());
      assertFalse(featureCvTerm0.isNot());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm(cvTerm0, feature0, (Pub) null, false, 2515);
      int int0 = featureCvTerm0.getRank();
      assertFalse(featureCvTerm0.isNot());
      assertEquals(2515, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm(cvTerm0, feature0, (Pub) null, false, 2515);
      int int0 = featureCvTerm0.getFeatureCvTermId();
      assertEquals(0, int0);
      assertEquals(2515, featureCvTerm0.getRank());
      assertFalse(featureCvTerm0.isNot());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm(cvTerm0, feature0, (Pub) null, false, 2515);
      Collection<FeatureCvTermProp> collection0 = featureCvTerm0.getFeatureCvTermProps();
      featureCvTerm0.setFeatureCvTermProps(collection0);
      assertEquals(2515, featureCvTerm0.getRank());
      assertFalse(featureCvTerm0.isNot());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      doReturn("org.gmWd.schema.cvCvTermDbXef").when(cvTerm0).toString();
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm(cvTerm0, feature0, (Pub) null, false, 2515);
      CvTerm cvTerm1 = featureCvTerm0.getCvTerm();
      featureCvTerm0.setCvTerm(cvTerm1);
      assertEquals(2515, featureCvTerm0.getRank());
      assertFalse(featureCvTerm0.isNot());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      Feature feature0 = featureCvTerm0.getFeature();
      assertNull(feature0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm(cvTerm0, feature0, (Pub) null, false, 2515);
      featureCvTerm0.getPub();
      assertEquals(2515, featureCvTerm0.getRank());
      assertFalse(featureCvTerm0.isNot());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm(cvTerm0, feature0, (Pub) null, false, 2515);
      boolean boolean0 = featureCvTerm0.isNot();
      assertEquals(2515, featureCvTerm0.getRank());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm(cvTerm0, feature0, (Pub) null, false, 2515);
      Collection<FeatureCvTermDbXRef> collection0 = featureCvTerm0.getFeatureCvTermDbXRefs();
      featureCvTerm0.setFeatureCvTermDbXRefs(collection0);
      assertEquals(2515, featureCvTerm0.getRank());
      assertFalse(featureCvTerm0.isNot());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm();
      Collection<FeatureCvTermPub> collection0 = featureCvTerm0.getFeatureCvTermPubs();
      featureCvTerm0.setFeatureCvTermPubs(collection0);
      assertEquals(0, featureCvTerm0.getRank());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      FeatureCvTerm featureCvTerm0 = new FeatureCvTerm(cvTerm0, feature0, (Pub) null, false, 2515);
      featureCvTerm0.setPub((Pub) null);
      assertEquals(2515, featureCvTerm0.getRank());
      assertFalse(featureCvTerm0.isNot());
  }
}
