/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 14:33:14 GMT 2018
 */

package org.gmod.schema.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gmod.schema.general.Db;
import org.gmod.schema.general.DbXRef;
import org.gmod.schema.phylogeny.PhylonodeDbXRef;
import org.gmod.schema.phylogeny.Phylotree;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class DbXRef_ESTest extends DbXRef_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef((Db) null, " .q_''Fe^!y'");
      String string0 = dbXRef0.getVersion();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      dbXRef0.setVersion("");
      String string0 = dbXRef0.getVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef((Db) null, " .q_''Fe^!y'");
      dbXRef0.setPhylotrees((Set<Phylotree>) null);
      dbXRef0.getPhylotrees();
      assertEquals("1", dbXRef0.getVersion());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      dbXRef0.setPhylonodeDbXRefs((Set<PhylonodeDbXRef>) null);
      Set<PhylonodeDbXRef> set0 = dbXRef0.getPhylonodeDbXRefs();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      dbXRef0.setDescription("9n5Q|t@mMEvR");
      String string0 = dbXRef0.getDescription();
      assertEquals("9n5Q|t@mMEvR", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef((Db) null, "");
      dbXRef0.setDescription("");
      dbXRef0.getDescription();
      assertEquals("1", dbXRef0.getVersion());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      dbXRef0.setDbXRefId((-1603));
      int int0 = dbXRef0.getDbXRefId();
      assertEquals((-1603), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      dbXRef0.setAccession("aP3bVMR&,@/TGU{[");
      String string0 = dbXRef0.getAccession();
      assertEquals("aP3bVMR&,@/TGU{[", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      dbXRef0.setAccession("");
      String string0 = dbXRef0.getAccession();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      String string0 = dbXRef0.getAccession();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      Db db0 = dbXRef0.getDb();
      assertNull(db0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Db db0 = mock(Db.class, new ViolatedAssumptionAnswer());
      DbXRef dbXRef0 = new DbXRef(db0, "");
      dbXRef0.getCvTerms();
      assertEquals("1", dbXRef0.getVersion());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      int int0 = dbXRef0.getDbXRefId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Db db0 = mock(Db.class, new ViolatedAssumptionAnswer());
      DbXRef dbXRef0 = new DbXRef(db0, "");
      dbXRef0.setDb(db0);
      assertEquals("1", dbXRef0.getVersion());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      String string0 = dbXRef0.getVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      dbXRef0.setDbXRefId(1);
      int int0 = dbXRef0.getDbXRefId();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Db db0 = mock(Db.class, new ViolatedAssumptionAnswer());
      DbXRef dbXRef0 = new DbXRef(db0, "");
      Set<PhylonodeDbXRef> set0 = dbXRef0.getPhylonodeDbXRefs();
      dbXRef0.setPhylonodeDbXRefs(set0);
      assertEquals("1", dbXRef0.getVersion());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DbXRef dbXRef0 = new DbXRef();
      Set<Phylotree> set0 = dbXRef0.getPhylotrees();
      dbXRef0.setPhylotrees(set0);
      assertNull(dbXRef0.getVersion());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Db db0 = mock(Db.class, new ViolatedAssumptionAnswer());
      DbXRef dbXRef0 = new DbXRef(db0, "");
      dbXRef0.getDescription();
      assertEquals("1", dbXRef0.getVersion());
  }
}
