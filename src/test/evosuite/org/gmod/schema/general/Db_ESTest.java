/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 19 19:52:11 GMT 2018
 */

package org.gmod.schema.general;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gmod.schema.general.Db;
import org.gmod.schema.general.DbXRef;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Db_ESTest extends Db_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Db db0 = new Db();
      db0.setUrlPrefix(" 8OAod$lh2%A'q");
      String string0 = db0.getUrlPrefix();
      assertEquals(" 8OAod$lh2%A'q", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Db db0 = new Db();
      db0.setUrl(" 8OAod$lh2%A'q");
      String string0 = db0.getUrl();
      assertEquals(" 8OAod$lh2%A'q", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Db db0 = new Db();
      db0.setName("etry;#ir`+LvlB");
      String string0 = db0.getName();
      assertEquals("etry;#ir`+LvlB", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Db db0 = new Db();
      db0.setName("");
      String string0 = db0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Db db0 = new Db();
      db0.setDescription(" X");
      String string0 = db0.getDescription();
      assertEquals(" X", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Db db0 = new Db();
      db0.setDbId((-3931));
      int int0 = db0.getDbId();
      assertEquals((-3931), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Db db0 = new Db();
      Collection<DbXRef> collection0 = db0.getDbXRefs();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Db db0 = new Db();
      String string0 = db0.getUrlPrefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Db db0 = new Db();
      db0.setUrl("");
      String string0 = db0.getUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Db db0 = new Db();
      db0.setDbXRefs((Set<DbXRef>) null);
      Collection<DbXRef> collection0 = db0.getDbXRefs();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Db db0 = new Db();
      int int0 = db0.getDbId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Db db0 = new Db();
      db0.setDescription("");
      String string0 = db0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Db db0 = new Db();
      String string0 = db0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Db db0 = new Db();
      String string0 = db0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Db db0 = new Db();
      db0.setDbId(1);
      int int0 = db0.getDbId();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Db db0 = new Db();
      String string0 = db0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Db db0 = new Db();
      db0.setUrlPrefix("");
      String string0 = db0.getUrlPrefix();
      assertEquals("", string0);
  }
}
