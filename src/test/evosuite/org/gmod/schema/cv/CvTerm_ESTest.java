/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 19 22:31:04 GMT 2018
 */

package org.gmod.schema.cv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gmod.schema.cv.Cv;
import org.gmod.schema.cv.CvTerm;
import org.gmod.schema.cv.CvTermRelationship;
import org.gmod.schema.general.DbXRef;
import org.gmod.schema.phylogeny.Phylonode;
import org.gmod.schema.phylogeny.PhylonodeProp;
import org.gmod.schema.phylogeny.PhylonodeRelationship;
import org.gmod.schema.phylogeny.Phylotree;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CvTerm_ESTest extends CvTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setName("org.gmod.schema.cv.CvTerm");
      String string0 = cvTerm0.getName();
      assertEquals("org.gmod.schema.cv.CvTerm", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setName("");
      String string0 = cvTerm0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setIsRelationshipType((-370));
      int int0 = cvTerm0.getIsRelationshipType();
      assertEquals((-370), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setIsObsolete((-1505));
      int int0 = cvTerm0.getIsObsolete();
      assertEquals((-1505), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setDefinition("org.gmod.schema.sequence.FeatureCvTerm");
      String string0 = cvTerm0.getDefinition();
      assertEquals("org.gmod.schema.sequence.FeatureCvTerm", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm((Cv) null, (DbXRef) null, "", "org.gmod.schema.cv.CvTerm");
      assertEquals("org.gmod.schema.cv.CvTerm", cvTerm0.getDefinition());
      
      cvTerm0.setDefinition("");
      cvTerm0.getDefinition();
      assertEquals("", cvTerm0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setCvTermId(1231);
      int int0 = cvTerm0.getCvTermId();
      assertEquals(1231, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setCvTermId((-370));
      int int0 = cvTerm0.getCvTermId();
      assertEquals((-370), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setCvTermRelationshipsForSubjectId((Collection<CvTermRelationship>) null);
      assertEquals(0, cvTerm0.getCvTermId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      String string0 = cvTerm0.getDefinition();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setPhylonodeRelationships((Collection<PhylonodeRelationship>) null);
      assertNull(cvTerm0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      Collection<CvTermRelationship> collection0 = cvTerm0.getCvTermRelationshipsForSubjectId();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      Cv cv0 = cvTerm0.getCv();
      assertNull(cv0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setCvTermRelationshipsForObjectId((Collection<CvTermRelationship>) null);
      assertNull(cvTerm0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      Collection<Phylotree> collection0 = cvTerm0.getPhylotrees();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setPhylotrees((Collection<Phylotree>) null);
      assertNull(cvTerm0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      Collection<Phylonode> collection0 = cvTerm0.getPhylonodes();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setPhylonodeProps((Collection<PhylonodeProp>) null);
      assertNull(cvTerm0.getDefinition());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setIsObsolete(1393);
      int int0 = cvTerm0.getIsObsolete();
      assertEquals(1393, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      Collection<PhylonodeRelationship> collection0 = cvTerm0.getPhylonodeRelationships();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      int int0 = cvTerm0.getCvTermId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      DbXRef dbXRef0 = cvTerm0.getDbXRef();
      assertNull(dbXRef0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      String string0 = cvTerm0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      Cv cv0 = mock(Cv.class, new ViolatedAssumptionAnswer());
      cvTerm0.setCv(cv0);
      assertEquals(0, cvTerm0.getCvTermId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      DbXRef dbXRef0 = mock(DbXRef.class, new ViolatedAssumptionAnswer());
      cvTerm0.setDbXRef(dbXRef0);
      assertNull(cvTerm0.getDefinition());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      Collection<PhylonodeProp> collection0 = cvTerm0.getPhylonodeProps();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setPhylonodes((Collection<Phylonode>) null);
      assertEquals(0, cvTerm0.getCvTermId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      cvTerm0.setIsRelationshipType(1393);
      int int0 = cvTerm0.getIsRelationshipType();
      assertEquals(1393, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      int int0 = cvTerm0.getIsObsolete();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      int int0 = cvTerm0.getIsRelationshipType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CvTerm cvTerm0 = new CvTerm();
      Collection<CvTermRelationship> collection0 = cvTerm0.getCvTermRelationshipsForObjectId();
      assertNull(collection0);
  }
}
