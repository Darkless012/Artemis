/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 13:55:03 GMT 2018
 */

package org.gmod.schema.cv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gmod.schema.cv.Cv;
import org.gmod.schema.cv.CvTerm;
import org.gmod.schema.cv.CvTermPath;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Cv_ESTest extends Cv_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cv cv0 = new Cv();
      cv0.setName("dZ=Oz2pi5Cu3HKw-jDR");
      String string0 = cv0.getName();
      assertEquals("dZ=Oz2pi5Cu3HKw-jDR", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cv cv0 = new Cv();
      cv0.setName("");
      String string0 = cv0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cv cv0 = new Cv();
      cv0.setDefinition("");
      String string0 = cv0.getDefinition();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cv cv0 = new Cv();
      cv0.setCvId((-1952));
      int int0 = cv0.getCvId();
      assertEquals((-1952), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cv cv0 = new Cv();
      Collection<CvTermPath> collection0 = cv0.getCvTermPaths();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cv cv0 = new Cv();
      String string0 = cv0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cv cv0 = new Cv();
      Collection<CvTerm> collection0 = cv0.getCvTerms();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cv cv0 = new Cv();
      cv0.setCvTerms((Set<CvTerm>) null);
      Collection<CvTerm> collection0 = cv0.getCvTerms();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cv cv0 = new Cv();
      String string0 = cv0.getDefinition();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cv cv0 = new Cv();
      cv0.setCvId(1);
      int int0 = cv0.getCvId();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cv cv0 = new Cv();
      int int0 = cv0.getCvId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cv cv0 = new Cv();
      cv0.setCvTermPaths((Set<CvTermPath>) null);
      Collection<CvTermPath> collection0 = cv0.getCvTermPaths();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cv cv0 = new Cv();
      cv0.setDefinition("s(+?l07W@#9k-49$;gJ");
      String string0 = cv0.getDefinition();
      assertEquals("s(+?l07W@#9k-49$;gJ", string0);
  }
}
