/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 19 22:14:46 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RangeVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class RangeVector_ESTest extends RangeVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RangeVector rangeVector0 = new RangeVector();
      rangeVector0.reverse();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rangeVector0.forEach(consumer0);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      rangeVector0.containsRange(range0);
      rangeVector0.parallelStream();
      rangeVector0.setSize(2956);
      rangeVector0.trimToSize();
      rangeVector0.iterator();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      rangeVector0.insertElementAt(range1, 2956);
      Range range2 = mock(Range.class, new ViolatedAssumptionAnswer());
      rangeVector0.trimToSize();
      rangeVector0.containsRange(range2);
      Range range3 = mock(Range.class, new ViolatedAssumptionAnswer());
      rangeVector0.containsRange(range3);
      rangeVector0.reverse();
      rangeVector0.reverse();
      assertEquals(2957, rangeVector0.size());
      
      Range range4 = mock(Range.class, new ViolatedAssumptionAnswer());
      rangeVector0.containsRange(range4);
      Range range5 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      rangeVector0.containsRange(range5);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Range range0 = null;
      RangeVector rangeVector0 = new RangeVector((Range) null);
      rangeVector0.trimToSize();
      rangeVector0.sort((Comparator<? super Range>) null);
      rangeVector0.addElement((Range) null);
      // Undeclared exception!
      try { 
        rangeVector0.containsRange((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.RangeVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RangeVector rangeVector0 = new RangeVector();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      RangeVector rangeVector0 = new RangeVector(range0);
      rangeVector0.reverse();
  }
}
