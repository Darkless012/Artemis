/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 19 22:16:22 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.BetweenRange;
import uk.ac.sanger.artemis.io.Range;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BetweenRange_ESTest extends BetweenRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BetweenRange betweenRange0 = new BetweenRange(0, 3873);
      BetweenRange betweenRange1 = new BetweenRange(0, 0);
      boolean boolean0 = betweenRange0.equals((Range) betweenRange1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BetweenRange betweenRange0 = new BetweenRange(2076, 2076);
      BetweenRange betweenRange1 = new BetweenRange((-2259), 1);
      boolean boolean0 = betweenRange0.equals((Range) betweenRange1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BetweenRange betweenRange0 = new BetweenRange(1139, 1139);
      Range range0 = betweenRange0.copy();
      assertNotSame(betweenRange0, range0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BetweenRange betweenRange0 = new BetweenRange(0, 0);
      Range range0 = betweenRange0.copy();
      assertEquals(1, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BetweenRange betweenRange0 = new BetweenRange((-811), 45);
      Range range0 = betweenRange0.copy();
      assertNotSame(betweenRange0, range0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BetweenRange betweenRange0 = null;
      try {
        betweenRange0 = new BetweenRange(1, (-2074));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // start: 1 > end: -2074
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BetweenRange betweenRange0 = new BetweenRange((-811), (-811));
      BetweenRange betweenRange1 = new BetweenRange((-811), 45);
      boolean boolean0 = betweenRange0.equals((Range) betweenRange1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BetweenRange betweenRange0 = new BetweenRange((-811), (-811));
      BetweenRange betweenRange1 = new BetweenRange(45, 45);
      boolean boolean0 = betweenRange0.equals((Range) betweenRange1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BetweenRange betweenRange0 = new BetweenRange((-811), (-811));
      boolean boolean0 = betweenRange0.equals((Range) betweenRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BetweenRange betweenRange0 = new BetweenRange((-811), (-811));
      Range range0 = betweenRange0.change((-811), (-811));
      boolean boolean0 = betweenRange0.equals(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BetweenRange betweenRange0 = new BetweenRange((-811), (-811));
      Range range0 = betweenRange0.copy();
      assertFalse(range0.equals((Object)betweenRange0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BetweenRange betweenRange0 = new BetweenRange((-811), (-811));
      String string0 = betweenRange0.toString();
      assertEquals("-811^-811", string0);
  }
}
