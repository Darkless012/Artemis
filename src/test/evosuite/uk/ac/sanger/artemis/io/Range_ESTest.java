/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 04 13:16:47 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.Range;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-3721));
      Range range1 = new Range((-10));
      boolean boolean0 = range1.fuzzyOverlaps(range0, (-10));
      assertEquals((-10), range1.getEnd());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-1), 1);
      boolean boolean0 = range0.fuzzyOverlaps(range0, (-1));
      assertEquals(3, range0.getCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-1105), (-67));
      Range range1 = new Range((-67), 0);
      boolean boolean0 = range0.contains(range1);
      assertFalse(boolean0);
      assertEquals(68, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(24);
      Range range1 = new Range(24, 1998);
      boolean boolean0 = range0.equals(range1);
      assertEquals(24, range0.getEnd());
      assertFalse(boolean0);
      assertEquals(1975, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-3702));
      Range range1 = new Range(0);
      boolean boolean0 = range0.equals(range1);
      assertEquals((-3702), range0.getEnd());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(1, 1);
      Range range1 = new Range(1, 1073);
      Range range2 = range0.truncate(range1);
      assertEquals(1, range2.getCount());
      assertEquals(1073, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0, 2970);
      Range range1 = new Range(0, 0);
      boolean boolean0 = range0.contains(range1);
      assertEquals(2971, range0.getCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(717);
      int int0 = range0.getStart();
      assertEquals(717, range0.getEnd());
      assertEquals(717, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-82), 0);
      int int0 = range0.getStart();
      assertEquals(83, range0.getCount());
      assertEquals((-82), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0);
      int int0 = range0.getEnd();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-1105), (-67));
      int int0 = range0.getEnd();
      assertEquals(1039, range0.getCount());
      assertEquals((-67), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(1086, 2093);
      Range range1 = range0.copy();
      assertEquals(1008, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-67), 0);
      range0.copy();
      assertEquals(68, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0, 2477);
      Range range1 = range0.copy();
      assertEquals(2478, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0);
      Range range1 = range0.change(0, 0);
      assertEquals(1, range1.getCount());
      assertEquals(0, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-549));
      Range range1 = range0.change((-549), (-549));
      assertEquals((-549), range0.getEnd());
      assertEquals(1, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(3221);
      // Undeclared exception!
      try { 
        range0.truncate((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range((-1069), (-27));
      // Undeclared exception!
      try { 
        range0.overlaps((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(1086, 2093);
      // Undeclared exception!
      try { 
        range0.fuzzyOverlaps((Range) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(1);
      // Undeclared exception!
      try { 
        range0.contains((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(0);
      Range range1 = range0.truncate(range0);
      boolean boolean0 = range1.overlaps(range0);
      assertEquals(1, range1.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0, 0);
      Range range1 = new Range(2195);
      boolean boolean0 = range0.overlaps(range1);
      assertEquals(1, range0.getCount());
      assertFalse(boolean0);
      assertEquals(2195, range1.getEnd());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-4142), (-1));
      boolean boolean0 = range0.overlaps(range0);
      assertEquals(4142, range0.getCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range((-4142), (-1));
      Range range1 = new Range((-950), 0);
      boolean boolean0 = range0.overlaps(range1);
      assertEquals(951, range1.getCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range((-785), (-1673));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // start: -785 > end: -1673
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(0, 2477);
      int int0 = range0.getStart();
      assertEquals(2478, range0.getCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range(0, 2477);
      int int0 = range0.getEnd();
      assertEquals(2478, range0.getCount());
      assertEquals(2477, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(0);
      Range range1 = range0.truncate(range0);
      Range range2 = range0.change(0, 1);
      boolean boolean0 = range2.fuzzyOverlaps(range1, 0);
      assertTrue(boolean0);
      assertEquals(1, range1.getCount());
      assertEquals(0, range0.getEnd());
      assertEquals(2, range2.getCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0);
      Range range1 = range0.truncate(range0);
      boolean boolean0 = range0.fuzzyOverlaps(range1, 0);
      assertFalse(boolean0);
      assertEquals(1, range1.getCount());
      assertEquals(0, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(0, 0);
      boolean boolean0 = range0.fuzzyOverlaps(range0, 0);
      assertTrue(boolean0);
      assertEquals(1, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-2194));
      Range range1 = new Range(0);
      boolean boolean0 = range0.contains(range1);
      assertFalse(boolean0);
      assertEquals((-2194), range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(0, 0);
      Range range1 = range0.change(0, 4716);
      boolean boolean0 = range1.equals(range0);
      assertEquals(4717, range1.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range((-2194));
      Range range1 = new Range(0);
      boolean boolean0 = range1.equals(range0);
      assertEquals((-2194), range0.getEnd());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertEquals(0, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(0, 0);
      boolean boolean0 = range0.equals((Range) null);
      assertFalse(boolean0);
      assertEquals(1, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(0, 2477);
      Range range1 = range0.change(229, 229);
      Range range2 = range0.truncate(range1);
      assertNotNull(range2);
      assertEquals(1, range2.getCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-2194));
      Range range1 = new Range(0);
      range0.truncate(range1);
      assertEquals((-2194), range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(0, 0);
      Range range1 = range0.truncate(range0);
      assertNotNull(range1);
      
      range1.truncate(range0);
      assertEquals(1, range1.getCount());
      assertEquals(0, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(0, range0.getStart());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(0, 2477);
      Range range1 = range0.truncate(range0);
      assertNotNull(range1);
      
      boolean boolean0 = range0.contains(range1);
      assertEquals(2477, range0.getEnd());
      assertEquals(2478, range1.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(2478, range0.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(2014, 2014);
      Range range1 = new Range(0, 2014);
      boolean boolean0 = range0.contains(range1);
      assertEquals(2015, range1.getCount());
      assertEquals(0, range1.getStart());
      assertFalse(boolean0);
      assertEquals(2014, range1.getEnd());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(0, 2477);
      boolean boolean0 = range0.contains(range0);
      assertTrue(boolean0);
      assertEquals(0, range0.getStart());
      assertEquals(2478, range0.getCount());
      assertEquals(2477, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(0, 2477);
      String string0 = range0.toString();
      assertEquals("0..2477", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(0, 2477);
      Range range1 = range0.change(229, 229);
      String string0 = range1.toString();
      assertEquals("229", string0);
      assertEquals(2478, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(0, 2477);
      int int0 = range0.getCount();
      assertEquals(2478, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(0, 0);
      try { 
        range0.change(3031, 1553);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // start: 3031 > end: 1553
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-2194));
      Range range1 = range0.copy();
      assertEquals((-2194), range0.getStart());
      assertEquals((-2194), range0.getEnd());
      assertEquals(1, range1.getCount());
  }
}
