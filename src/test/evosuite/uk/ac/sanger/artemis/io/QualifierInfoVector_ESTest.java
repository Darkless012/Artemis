/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 15:21:43 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.KeyVector;
import uk.ac.sanger.artemis.io.QualifierInfo;
import uk.ac.sanger.artemis.io.QualifierInfoVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QualifierInfoVector_ESTest extends QualifierInfoVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QualifierInfoVector qualifierInfoVector0 = new QualifierInfoVector();
      qualifierInfoVector0.add((QualifierInfo) null);
      qualifierInfoVector0.setElementAt((QualifierInfo) null, 0);
      assertEquals(1, qualifierInfoVector0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QualifierInfoVector qualifierInfoVector0 = new QualifierInfoVector();
      Key key0 = new Key("9Z52]9UR9sCmQ$k*[t", false);
      KeyVector keyVector0 = new KeyVector(key0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("Vx'$M)[0xU890d#5", (-363), keyVector0, keyVector0, true);
      qualifierInfoVector0.add(qualifierInfo0);
      int int0 = qualifierInfoVector0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QualifierInfoVector qualifierInfoVector0 = new QualifierInfoVector();
      qualifierInfoVector0.addElement((QualifierInfo) null);
      QualifierInfo qualifierInfo0 = qualifierInfoVector0.elementAt(0);
      assertNull(qualifierInfo0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QualifierInfoVector qualifierInfoVector0 = new QualifierInfoVector();
      Key key0 = new Key("sA&:szKU,/o{");
      KeyVector keyVector0 = new KeyVector(key0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("", 0, keyVector0, keyVector0, false);
      qualifierInfoVector0.add(qualifierInfo0);
      QualifierInfo qualifierInfo1 = qualifierInfoVector0.elementAt(0);
      assertEquals(1, QualifierInfo.QUOTED_TEXT);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QualifierInfoVector qualifierInfoVector0 = new QualifierInfoVector();
      KeyVector keyVector0 = new KeyVector();
      QualifierInfo qualifierInfo0 = new QualifierInfo("AF", 8, keyVector0, keyVector0, false);
      qualifierInfoVector0.add(qualifierInfo0);
      QualifierInfo qualifierInfo1 = qualifierInfoVector0.elementAt(0);
      assertEquals("AF", qualifierInfo1.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QualifierInfoVector qualifierInfoVector0 = new QualifierInfoVector();
      Key key0 = new Key("9Z52]9UR9sCmQ$k*[t", false);
      KeyVector keyVector0 = new KeyVector(key0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("Vx'$M)[0xU890d#5", (-363), keyVector0, keyVector0, true);
      qualifierInfoVector0.add(qualifierInfo0);
      QualifierInfo qualifierInfo1 = qualifierInfoVector0.elementAt(0);
      assertEquals(2, QualifierInfo.TEXT);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QualifierInfoVector qualifierInfoVector0 = new QualifierInfoVector();
      Key key0 = new Key("9Z52]9UR9sCmQ$k*[t", false);
      KeyVector keyVector0 = new KeyVector(key0);
      QualifierInfo qualifierInfo0 = new QualifierInfo("Vx'$M)[0xU890d#5", (-363), keyVector0, keyVector0, true);
      qualifierInfoVector0.add(qualifierInfo0);
      QualifierInfoVector qualifierInfoVector1 = qualifierInfoVector0.copy();
      assertEquals(1, qualifierInfoVector1.size());
      assertNotSame(qualifierInfoVector1, qualifierInfoVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QualifierInfoVector qualifierInfoVector0 = new QualifierInfoVector();
      QualifierInfoVector qualifierInfoVector1 = qualifierInfoVector0.copy();
      assertNotSame(qualifierInfoVector1, qualifierInfoVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QualifierInfoVector qualifierInfoVector0 = new QualifierInfoVector();
      int int0 = qualifierInfoVector0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QualifierInfoVector qualifierInfoVector0 = new QualifierInfoVector();
      // Undeclared exception!
      try { 
        qualifierInfoVector0.elementAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QualifierInfoVector qualifierInfoVector0 = new QualifierInfoVector();
      // Undeclared exception!
      try { 
        qualifierInfoVector0.setElementAt((QualifierInfo) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
