/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 06 18:17:46 GMT 2018
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureRecognizer;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetContext;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.event.ComponentListener;
import java.awt.event.ContainerListener;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ImageObserver;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.awt.image.renderable.ParameterBlock;
import java.awt.print.PageFormat;
import java.beans.PropertyChangeListener;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DropMode;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JViewport;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.Border;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.plaf.synth.SynthButtonUI;
import javax.swing.plaf.synth.SynthToolBarUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.xmlgraphics.java2d.DefaultGraphics2D;
import org.apache.xmlgraphics.java2d.GraphicsConfigurationWithTransparency;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.circular.Block;
import uk.ac.sanger.artemis.circular.DNADraw;
import uk.ac.sanger.artemis.circular.Feature;
import uk.ac.sanger.artemis.circular.GCGraph;
import uk.ac.sanger.artemis.circular.GCSkewGraph;
import uk.ac.sanger.artemis.circular.Graph;
import uk.ac.sanger.artemis.circular.Track;
import uk.ac.sanger.artemis.circular.TrackManager;
import uk.ac.sanger.artemis.circular.UserGraph;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.KeyVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RangeVector;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.util.FastVector;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DNADraw_ESTest extends DNADraw_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      GraphicsConfigurationWithTransparency graphicsConfigurationWithTransparency0 = new GraphicsConfigurationWithTransparency();
      BufferedImage bufferedImage0 = graphicsConfigurationWithTransparency0.createCompatibleImage(2747, 3300, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        dNADraw0.drawAll(graphics2D0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getGcGraph();
      dNADraw0.setGcSkewGraph((Graph) null);
      dNADraw0.getEnd();
      dNADraw0.getClientProperty((Object) null);
      dNADraw0.setMinorTickInterval(53);
      dNADraw0.setBorderWidth2(4000);
      dNADraw0.getAngleFromPosition(36, 0.0);
      dNADraw0.getVersion();
      dNADraw0.getBasesPerLine();
      dNADraw0.getLocationPoint();
      dNADraw0.getLineAttributes();
      dNADraw0.getUserGraphs();
      dNADraw0.getBorderWidth2();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DNAPlotterACT Release 18.0.0-SNAPSHOT");
      Vector<Integer> vector0 = new Vector<Integer>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dNADraw0.getBlock();
      dNADraw0.getNumberOfLines();
      dNADraw0.getX();
      dNADraw0.getLineAttributes();
      dNADraw0.getLineAttributes();
      dNADraw0.getLineHeight();
      dNADraw0.getStartTick();
      dNADraw0.setMinorTickInterval(1606);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getGraphics();
      int int0 = 1473;
      dNADraw0.setSize((-2260), 1473);
      dNADraw0.zoomIn();
      DragSourceEvent dragSourceEvent0 = mock(DragSourceEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.dragExit(dragSourceEvent0);
      Point point0 = dNADraw0.getLocation();
      Point point1 = dNADraw0.getLocation(point0);
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtLocation(point1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      Point point0 = null;
      dNADraw0.getEnd();
      dNADraw0.setBorderHeight2(4000);
      dNADraw0.setStartTick(4000);
      dNADraw0.requestFocus(true);
      dNADraw0.setSingleBaseWidth(0.0F);
      dNADraw0.setBorderWidth2((-321));
      // Undeclared exception!
      try { 
        dNADraw0.setUserGraph((UserGraph) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "\\4]L\\hISaC+Rmh";
      StringVector stringVector0 = StringVector.getStrings("bf2v)n\"jquWP_.;aX", "\u0004]LhISaC+Rmh");
      Hashtable<DefaultGraphics2D, Object> hashtable0 = null;
      int int0 = (-1759);
      int int1 = 0;
      LinkedHashSet<Feature> linkedHashSet0 = new LinkedHashSet<Feature>();
      stringVector0.removeAll(linkedHashSet0);
      DNADraw dNADraw0 = new DNADraw();
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("bf2v)n\"jquWP_.;aX");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Track track0 = new Track((-798.604), (String) null, false, false, entry0);
      // Undeclared exception!
      try { 
        dNADraw0.addFeaturesToTrack(stringVector0, track0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to uk.ac.sanger.artemis.circular.Feature
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      MouseMotionListener mouseMotionListener0 = mock(MouseMotionListener.class, new ViolatedAssumptionAnswer());
      dNADraw0.isFocusable();
      dNADraw0.getTopLevelAncestor();
      dNADraw0.removeMouseMotionListener(mouseMotionListener0);
      int int0 = ImageObserver.ALLBITS;
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      dNADraw0.removeMouseWheelListener(mouseWheelListener0);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      dNADraw0.addContainerListener(containerListener0);
      DropTargetDragEvent dropTargetDragEvent0 = mock(DropTargetDragEvent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dropTargetDragEvent0).isDataFlavorSupported(any(java.awt.datatransfer.DataFlavor.class));
      dNADraw0.dragEnter(dropTargetDragEvent0);
      DragSourceDragEvent dragSourceDragEvent0 = mock(DragSourceDragEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.setBasesPerLine(32);
      dNADraw0.dragOver(dragSourceDragEvent0);
      dNADraw0.getBases();
      dNADraw0.setBases((Bases) null);
      dNADraw0.setBorderWidth2(2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RangeVector rangeVector0 = new RangeVector((Range) null);
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      org.biojava.bio.seq.Feature.ByLocationComparator feature_ByLocationComparator0 = org.biojava.bio.seq.Feature.byLocationOrder;
      rangeVector0.sort(feature_ByLocationComparator0);
      boolean boolean0 = true;
      dNADraw0.getRestrictionEnzyme();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("N>-T1f=pIqVW");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector<BufferedImage> vector0 = new Vector<BufferedImage>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(dNADraw0, 1897, 1897, 35, 35, 1036, 35, 0, 1897, false, (MenuElement[]) null, menuSelectionManager0);
      dNADraw0.getPopupLocation(menuDragMouseEvent0);
      dNADraw0.getBlockAtLocation((Point) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<DropMode> stack0 = new Stack<DropMode>();
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      dNADraw0.getLocationPoint();
      dNADraw0.zoomOut();
      DropMode dropMode0 = DropMode.ON;
      stack0.add(dropMode0);
      dNADraw0.setLineHeight(75);
      dNADraw0.getTrackManager();
      dNADraw0.calculateTickPosistions();
      dNADraw0.getBorderHeight2();
      dNADraw0.getTrackManager();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      basicPanelUI0.getAccessibleChild(dNADraw0, 3700);
      dNADraw0.setUI(basicPanelUI0);
      dNADraw0.getBasesPerLine();
      dNADraw0.calculateTickPosistions();
      dNADraw0.calculateTickPosistions();
      dNADraw0.getUserGraphs();
      dNADraw0.getBorderHeight2();
      dNADraw0.getLocationPoint();
      dNADraw0.setMinorTickInterval(20000);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(dNADraw0, 1975, 1975, (-260466144), 75, 3200, (-260466144), false, 20000, 51, 182);
      // Undeclared exception!
      try { 
        dNADraw0.getToolTipText((MouseEvent) mouseWheelEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setBorderHeight2(0);
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      blastEntryInformation0.getUserKeys();
      Bases bases0 = new Bases((Sequence) null);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      simpleEntryGroup0.getSequenceEntry();
      Track track0 = new Track(0, "LJ_@K^E", true, false, (Entry) null);
      // Undeclared exception!
      try { 
        dNADraw0.addFeaturesToTrack((List) null, track0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<DNADraw> stack0 = new Stack<DNADraw>();
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      dNADraw0.getRestrictionEnzyme();
      dNADraw0.setStartTick(8907);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      DNADraw dNADraw1 = gCGraph0.getCurrentDna();
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      dNADraw1.addPropertyChangeListener((PropertyChangeListener) metalRootPaneUI0);
      dNADraw1.firePropertyChange("", false, false);
      dNADraw1.dropActionChanged((DragSourceDragEvent) null);
      dNADraw1.getStartTick();
      dNADraw0.getLocationPoint();
      dNADraw0.getAngleFromPosition(8938, 2.4);
      dNADraw0.getLocationPoint();
      dNADraw0.getTrackManager();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DNADraw.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hashtable<Boolean, Boolean> hashtable0 = new Hashtable<Boolean, Boolean>();
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getBorderHeight2();
      dNADraw0.addBlock((Block) null);
      dNADraw0.getGcSkewGraph();
      Hashtable<Boolean, Boolean> hashtable1 = new Hashtable<Boolean, Boolean>();
      hashtable0.putAll(hashtable1);
      Boolean boolean0 = GVTAttributedCharacterIterator.TextAttribute.STRIKETHROUGH_ON;
      Boolean boolean1 = GVTAttributedCharacterIterator.TextAttribute.OVERLINE_ON;
      hashtable0.put(boolean0, boolean1);
      dNADraw0.setLineHeight((-5412.0693F));
      dNADraw0.addBlock((Block) null);
      dNADraw0.setGcGraph((Graph) null);
      dNADraw0.getNumberOfLines();
      dNADraw0.getNumberOfLines();
      dNADraw0.setStart(0);
      dNADraw0.getUserGraphs();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Feature> vector0 = new Vector<Feature>();
      Vector<BufferedImage> vector1 = new Vector<BufferedImage>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector1, vector1, vector1);
      dNADraw0.setStart(49);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getGcGraph();
      dNADraw0.setGcSkewGraph((Graph) null);
      dNADraw0.getLineHeight();
      dNADraw0.getEnd();
      dNADraw0.setEnd(53);
      dNADraw0.getClientProperty((Object) null);
      dNADraw0.setMinorTickInterval(53);
      dNADraw0.setBorderWidth2(4000);
      dNADraw0.getAngleFromPosition(36, 0.0);
      dNADraw0.getVersion();
      dNADraw0.getBasesPerLine();
      dNADraw0.getLocationPoint();
      dNADraw0.getLineAttributes();
      dNADraw0.getUserGraphs();
      assertEquals(4000, dNADraw0.getBorderWidth2());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getBorderWidth2();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(dNADraw0, 0, (-1L), 0, 0, 155, (-349), true, 0, 0, 0);
      dNADraw0.getToolTipLocation(mouseWheelEvent0);
      dNADraw0.getSingleBaseWidth();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getVisibleRect();
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtLocation((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw((Vector) null, (Vector) null, (Vector) null, (Vector) null);
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      DNADraw dNADraw1 = gCGraph0.getCurrentDna();
      Hashtable<MouseEvent, Feature> hashtable0 = new Hashtable<MouseEvent, Feature>();
      MouseEvent mouseEvent0 = new MouseEvent(dNADraw1, 0, 0, 0, (-930), (-440), 226, false);
      Feature feature0 = new Feature("Display as Circular Plot", 3954, 1335, (-440));
      hashtable0.put(mouseEvent0, feature0);
      // Undeclared exception!
      try { 
        dNADraw1.setLineAttributes(hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringVector stringVector0 = StringVector.getStrings("GZ\")G@w\"&,");
      DNADraw dNADraw0 = new DNADraw(stringVector0, stringVector0, stringVector0, stringVector0);
      dNADraw0.setRestrictionEnzyme(stringVector0);
      dNADraw0.getEnd();
      dNADraw0.getAngleFromPosition((-564), (-1231.9226366236471));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.isCircular();
      Stack<DefaultGraphics2D> stack0 = new Stack<DefaultGraphics2D>();
      DefaultGraphics2D defaultGraphics2D0 = new DefaultGraphics2D(true);
      stack0.add(defaultGraphics2D0);
      dNADraw0.getUI();
      stack0.add(defaultGraphics2D0);
      dNADraw0.setGeneticMarker(stack0);
      Point point0 = dNADraw0.getLocationPoint();
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtLocation(point0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlgraphics.java2d.DefaultGraphics2D cannot be cast to uk.ac.sanger.artemis.circular.Block
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = false;
      StringVector stringVector0 = StringVector.getStrings("", "", false);
      DNADraw dNADraw0 = new DNADraw(stringVector0, stringVector0, stringVector0, stringVector0);
      dNADraw0.addFeaturesToTrack(stringVector0, (Track) null, false);
      stringVector0.removeAllElements();
      dNADraw0.setLineHeight(0.0F);
      Feature feature0 = new Feature("", 8712, 8913, 8913);
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      synthToolBarUI0.getFloatingColor();
      Block block0 = new Block("org.apache.xalan.templates.ElemParam", 0, 350, (Color) null, 0.0F, (Track) null, dNADraw0);
      block0.getTrack();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector<Color> vector0 = null;
      DNADraw dNADraw0 = new DNADraw((Vector) null, (Vector) null, (Vector) null, (Vector) null);
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      DNADraw dNADraw1 = gCGraph0.getCurrentDna();
      Track track0 = new Track((-396.165944), (Entry) null);
      track0.setAny(false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        dNADraw1.addFeaturesToTrack((List) null, track0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getParameters();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      parameterBlock0.setSources(vector0);
      dNADraw0.getHierarchyListeners();
      parameterBlock0.add(420L);
      dNADraw0.getLocationPoint();
      dNADraw0.zoomIn();
      dNADraw0.setLineSize(16000);
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      simpleEntryGroup0.removeAllElements();
      dNADraw0.setArtemisEntryGroup(simpleEntryGroup0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getRestrictionEnzyme();
      dNADraw0.setGeneticMarker((Vector) null);
      dNADraw0.setSingleBaseWidth(0.0F);
      // Undeclared exception!
      try { 
        dNADraw0.createMenuBar();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          DNADraw dNADraw0 = new DNADraw();
          dNADraw0.validate();
          dNADraw0.createToolTip();
          dNADraw0.dragOver((DropTargetDragEvent) null);
          // Undeclared exception!
          try { 
            dNADraw0.doPrintActions();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"queuePrintJob\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkPrintJobAccess(SecurityManager.java:1378)
             // java.awt.print.PrinterJob.getPrinterJob(PrinterJob.java:75)
             // uk.ac.sanger.artemis.circular.DNADraw.doPrintActions(DNADraw.java:1008)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getTopLevelAncestor();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      defaultCaret0.getMarkBias();
      AWTEventMulticaster.add((MouseListener) null, (MouseListener) null);
      dNADraw0.addMouseListener((MouseListener) null);
      dNADraw0.setNumberOfLines(71);
      dNADraw0.setAlignmentX(71);
      dNADraw0.setBorderWidth2(71);
      dNADraw0.isCircular();
      dNADraw0.getTrackManager();
      dNADraw0.setCloseAndDispose(true, (JFrame) null);
      // Undeclared exception!
      try { 
        dNADraw0.getFeaturePoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      String string0 = "V";
      dNADraw0.getGraphics();
      // Undeclared exception!
      try { 
        dNADraw0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getGraphics();
      dNADraw0.getInputContext();
      PageFormat pageFormat0 = mock(PageFormat.class, new ViolatedAssumptionAnswer());
      dNADraw0.setSize((-2260), 1473);
      // Undeclared exception!
      try { 
        dNADraw0.print((Graphics) null, pageFormat0, 1473);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getGraphics();
      dNADraw0.getVetoableChangeListeners();
      dNADraw0.printComponents((Graphics) null);
      dNADraw0.removeAll();
      dNADraw0.setPlasmidLocation(0, 0);
      int int0 = (-1243);
      dNADraw0.paintImmediately(0, 0, 4352, (-1243));
      dNADraw0.getArtemisEntryGroup();
      DragSourceDragEvent dragSourceDragEvent0 = mock(DragSourceDragEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.dragOver(dragSourceDragEvent0);
      dNADraw0.zoomIn();
      dNADraw0.getMinorTickInterval();
      dNADraw0.getVersion();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics();
      // Undeclared exception!
      try { 
        dNADraw0.drawLinearPanel(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setBounds((-3017), (-3017), 1538, 2147483645);
      AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      AWTEventMulticaster.add((MouseListener) null, (MouseListener) null);
      dNADraw0.addMouseListener((MouseListener) null);
      dNADraw0.isCircular();
      dNADraw0.getTrackManager();
      dNADraw0.setCloseAndDispose(true, (JFrame) null);
      // Undeclared exception!
      try { 
        dNADraw0.getFeaturePoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector<GCSkewGraph> vector0 = new Vector<GCSkewGraph>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.getFeaturePoints();
      dNADraw0.getEnd();
      dNADraw0.getDebugGraphicsOptions();
      org.biojava.bio.seq.Feature.ByLocationComparator feature_ByLocationComparator0 = org.biojava.bio.seq.Feature.byLocationOrder;
      vector0.sort(feature_ByLocationComparator0);
      dNADraw0.getDiameter();
      dNADraw0.getBasesPerLine();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      boolean boolean0 = false;
      DefaultGraphics2D defaultGraphics2D0 = new DefaultGraphics2D(false);
      Polygon polygon0 = new Polygon();
      polygon0.getBounds2D();
      defaultGraphics2D0.drawPolygon(polygon0);
      // Undeclared exception!
      try { 
        dNADraw0.paintComponent(defaultGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlgraphics.java2d.AbstractGraphics2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      int int0 = 1892;
      dNADraw0.setNumberOfLines(1892);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics();
      dNADraw0.setIgnoreRepaint(true);
      boolean boolean0 = true;
      dNADraw0.isOptimizedDrawingEnabled();
      // Undeclared exception!
      try { 
        dNADraw0.drawAll(graphics2D0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getVersion();
      DefaultGraphics2D defaultGraphics2D0 = new DefaultGraphics2D(true);
      // Undeclared exception!
      try { 
        dNADraw0.drawCircularPanel(defaultGraphics2D0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlgraphics.java2d.AbstractGraphics2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      MouseMotionListener mouseMotionListener0 = mock(MouseMotionListener.class, new ViolatedAssumptionAnswer());
      dNADraw0.isFocusable();
      dNADraw0.getTopLevelAncestor();
      dNADraw0.removeMouseMotionListener(mouseMotionListener0);
      dNADraw0.getMinorTickInterval();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      dNADraw0.removeMouseWheelListener(mouseWheelListener0);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      dNADraw0.addContainerListener(containerListener0);
      DropTargetDragEvent dropTargetDragEvent0 = mock(DropTargetDragEvent.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dropTargetDragEvent0).isDataFlavorSupported(any(java.awt.datatransfer.DataFlavor.class));
      dNADraw0.dragEnter(dropTargetDragEvent0);
      DragSourceDragEvent dragSourceDragEvent0 = mock(DragSourceDragEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.setBasesPerLine(100);
      dNADraw0.dragOver(dragSourceDragEvent0);
      dNADraw0.getBases();
      dNADraw0.setBases((Bases) null);
      dNADraw0.setBorderWidth2(2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getGeneticMarker();
      dNADraw0.setNumberOfLines(2097151);
      dNADraw0.getGraphics();
      // Undeclared exception!
      try { 
        dNADraw0.print((Graphics) null, (PageFormat) null, (-2255));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setStartTick((-1530));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DNADraw dNADraw0 = null;
      try {
        dNADraw0 = new DNADraw((Vector) null, (Vector) null, (Hashtable) null, 1853, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getUI();
      dNADraw0.repaint();
      ComponentOrientation componentOrientation0 = dNADraw0.getComponentOrientation();
      dNADraw0.setComponentOrientation(componentOrientation0);
      int int0 = (-530);
      dNADraw0.setEnd((-530));
      dNADraw0.getComponentListeners();
      dNADraw0.getBlock();
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn((uk.ac.sanger.artemis.Feature) null).when(feature0).getArtemisFeature();
      Track track0 = mock(Track.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dNADraw0.addFeatureToTrack(feature0, track0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw((Vector) null, (Vector) null, (Vector) null, (Vector) null);
      dNADraw0.getFocusTraversalPolicy();
      dNADraw0.getPropertyChangeListeners();
      dNADraw0.getGraphics();
      dNADraw0.printAll((Graphics) null);
      DropTargetEvent dropTargetEvent0 = mock(DropTargetEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.dragExit(dropTargetEvent0);
      // Undeclared exception!
      try { 
        dNADraw0.dragEnter((DropTargetDragEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      // Undeclared exception!
      try { 
        dNADraw0.dragGestureRecognized((DragGestureEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector<Range> vector0 = new Vector<Range>();
      Hashtable<AWTKeyStroke, Object> hashtable0 = new Hashtable<AWTKeyStroke, Object>();
      DNADraw dNADraw0 = null;
      try {
        dNADraw0 = new DNADraw(vector0, vector0, hashtable0, (-1738), 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      UserGraph userGraph0 = mock(UserGraph.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(userGraph0).getFileName();
      dNADraw0.setUserGraph(userGraph0);
      int int0 = (-4539);
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtBasePosition((-4539));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      // Undeclared exception!
      try { 
        dNADraw0.setUserGraph((UserGraph) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getStart();
      dNADraw0.getComponents();
      dNADraw0.getArtemisEntryGroup();
      dNADraw0.calculateTickPosistions();
      dNADraw0.getEnd();
      UserGraph userGraph0 = null;
      try {
        userGraph0 = new UserGraph(dNADraw0, "w[[~nKXXUY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      gCGraph0.getCurrentDna();
      dNADraw0.getGeneticMarker();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getColorModel();
      SynthButtonUI synthButtonUI0 = new SynthButtonUI();
      SynthButtonUI.createUI(dNADraw0);
      dNADraw0.removePropertyChangeListener("=~!5ErruQh[", (PropertyChangeListener) synthButtonUI0);
      dNADraw0.addNotify();
      dNADraw0.getLineSize();
      int int0 = 536870912;
      // Undeclared exception!
      dNADraw0.setEnd(536870912);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getNumberOfLines();
      dNADraw0.getBases();
      dNADraw0.setBases((Bases) null);
      dNADraw0.getMinorTickInterval();
      JButton jButton0 = new JButton("'RbNsS|Q/15^96,n.{");
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget(jButton0, 100, dNADraw0, true);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      Cursor cursor0 = dNADraw0.getCursor();
      dNADraw0.setCursor(cursor0);
      dNADraw0.getRestrictionEnzyme();
      DropTargetDragEvent dropTargetDragEvent0 = mock(DropTargetDragEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.getFocusTraversalPolicy();
      DragSourceDragEvent dragSourceDragEvent0 = mock(DragSourceDragEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.dragEnter(dragSourceDragEvent0);
      dNADraw0.getGraphics();
      DropTargetDragEvent dropTargetDragEvent1 = mock(DropTargetDragEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.dropActionChanged(dropTargetDragEvent1);
      DragSourceDragEvent dragSourceDragEvent1 = mock(DragSourceDragEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.dragEnter(dragSourceDragEvent1);
      dNADraw0.getGeneticMarker();
      dNADraw0.getRestrictionEnzyme();
      DragSourceEvent dragSourceEvent0 = mock(DragSourceEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.dragExit(dragSourceEvent0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.calculateTickPosistions();
      dNADraw0.getBorder();
      dNADraw0.getBases();
      dNADraw0.getGraphics();
      dNADraw0.dragDropEnd((DragSourceDropEvent) null);
      DragGestureRecognizer dragGestureRecognizer0 = mock(DragGestureRecognizer.class, new ViolatedAssumptionAnswer());
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      int int0 = (-1917);
      Point point0 = gridBagLayout0.location(0, (-1917));
      ArrayList<MouseEvent> arrayList0 = new ArrayList<MouseEvent>();
      int int1 = 97;
      point0.y = 72;
      boolean boolean0 = false;
      int int2 = (-1686);
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = blastEntryInformation0.getDefaultKey();
      KeyVector keyVector0 = new KeyVector(key0);
      org.biojava.bio.seq.Feature.ByLocationComparator feature_ByLocationComparator0 = org.biojava.bio.seq.Feature.byLocationOrder;
      FastVector fastVector0 = keyVector0.mysort(feature_ByLocationComparator0);
      // Undeclared exception!
      try { 
        arrayList0.addAll(157, (Collection<? extends MouseEvent>) fastVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 157, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw((Vector) null, (Vector) null, (Vector) null, (Vector) null);
      dNADraw0.getBases();
      dNADraw0.setSingleBaseWidth((-814.42426F));
      dNADraw0.getLineHeight();
      dNADraw0.getLocationPoint();
      UserGraph userGraph0 = null;
      try {
        userGraph0 = new UserGraph(dNADraw0, "fw(\"&Y'u`h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      DNADraw dNADraw1 = gCGraph0.getCurrentDna();
      dNADraw1.setFocusTraversalKeysEnabled(false);
      dNADraw0.getTrackManager();
      dNADraw0.setTrackManager((TrackManager) null);
      dNADraw0.getBlock();
      dNADraw0.setTickInterval(1048584);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.calculateTickPosistions();
      dNADraw0.getAngleFromPosition(127773, 127773);
      dNADraw0.setEnd(1820);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      TitledBorder titledBorder0 = new TitledBorder((Border) null);
      JViewport jViewport0 = dNADraw0.jsp.getViewport();
      Insets insets0 = jViewport0.getInsets();
      Insets insets1 = titledBorder0.getBorderInsets((Component) dNADraw0, insets0);
      dNADraw0.getInsets(insets1);
      dNADraw0.getArtemisEntryGroup();
      dNADraw0.setLineHeight(0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          DNADraw dNADraw0 = new DNADraw();
          Hashtable hashtable0 = dNADraw0.getLineAttributes();
          dNADraw0.getBorderHeight2();
          dNADraw0.setLineAttributes(hashtable0);
          // Undeclared exception!
          try { 
            dNADraw0.doPrintActions();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"queuePrintJob\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkPrintJobAccess(SecurityManager.java:1378)
             // java.awt.print.PrinterJob.getPrinterJob(PrinterJob.java:75)
             // uk.ac.sanger.artemis.circular.DNADraw.doPrintActions(DNADraw.java:1008)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dNADraw0.repaint(345, 345, 500, 500);
      dNADraw0.calculateTickPosistions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Feature feature0 = new Feature("DNAPlotterArtemis Release 18.0.0-SNAPSHOT", 15, 781, 345);
      SystemColor systemColor0 = SystemColor.textInactiveText;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Track track0 = new Track(500, "-t", "-t", false, false, true, (Entry) null);
      Block block0 = new Block("DNAPlotterArtemis Release 18.0.0-SNAPSHOT", 15, 781, systemColor0, (-1.0F), track0, dNADraw0);
      Track track1 = block0.getTrack();
      dNADraw0.addFeatureToTrack(feature0, track1, true);
      dNADraw0.getBlockAtBasePosition(1080049119);
      dNADraw0.getDiameter();
      dNADraw0.zoomIn();
      dNADraw0.getAngleFromPosition(360, (-150.0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      float float0 = Component.BOTTOM_ALIGNMENT;
      dNADraw0.getLocale();
      dNADraw0.getContainerListeners();
      dNADraw0.getActionMap();
      DropTargetDropEvent dropTargetDropEvent0 = mock(DropTargetDropEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Transferable) null).when(dropTargetDropEvent0).getTransferable();
      // Undeclared exception!
      try { 
        dNADraw0.drop(dropTargetDropEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RangeVector rangeVector0 = new RangeVector();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.getRestrictionEnzyme();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(dNADraw0, 3, 3, 3, 3, 3000, 13, 3000, (-1540), false, 300, 3000, (-385463897));
      dNADraw0.getToolTipText((MouseEvent) mouseWheelEvent0);
      dNADraw0.getLineAttributes();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw((Vector) null, (Vector) null, (Vector) null, (Vector) null);
      MouseEvent mouseEvent0 = new MouseEvent(dNADraw0, 2400, 2400, 2400, 100, 1144, (-326), false);
      // Undeclared exception!
      try { 
        dNADraw0.getToolTipText(mouseEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Stack<DNADraw> stack0 = new Stack<DNADraw>();
      Vector<String> vector0 = new StringVector();
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, vector0, vector0);
      vector0.removeAllElements();
      dNADraw0.setStartTick(0);
      dNADraw0.getUserGraphs();
      dNADraw0.getBlockAtBasePosition(4000);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>();
      vector0.add((DefaultTableModel) null);
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtBasePosition(2010);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringVector stringVector0 = new StringVector("");
      DNADraw dNADraw0 = new DNADraw(stringVector0, stringVector0, stringVector0, stringVector0);
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtBasePosition(714);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to uk.ac.sanger.artemis.circular.Block
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getAngleFromPosition(1783, (-613.707864004318));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getDiameter();
      dNADraw0.setGcSkewGraph((Graph) null);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      Feature feature0 = new Feature("", 1371, 1371, 1371);
      dNADraw0.addFeatureToTrack(feature0, (Track) null, false);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      int int0 = (-1306);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      Block block0 = new Block("t,\"~V|:D", 20000, (-1306), systemColor0, (-1395.3F), (Track) null);
      // Undeclared exception!
      try { 
        dNADraw0.createImage(block0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "&m*k;iKOG";
      stringArray0[1] = "=De9f";
      stringArray0[2] = "!0_'5";
      stringArray0[3] = "";
      stringArray0[4] = "rB";
      stringArray0[5] = "";
      DNADraw.main(stringArray0);
      DNADraw dNADraw0 = new DNADraw();
      Point point0 = new Point();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(dNADraw0, 3621, 0, 0, (-2448), 3621, (-2448), (-2448), (-1962), true, 0, 0, 79, 0.0);
      DragGestureEvent dragGestureEvent0 = mock(DragGestureEvent.class, new ViolatedAssumptionAnswer());
      doReturn(mouseWheelEvent0).when(dragGestureEvent0).getTriggerEvent();
      dNADraw0.setForeground((Color) null);
      dNADraw0.dragGestureRecognized(dragGestureEvent0);
      dNADraw0.getUserGraphs();
      DragSourceEvent dragSourceEvent0 = mock(DragSourceEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.dragExit(dragSourceEvent0);
      DropTargetEvent dropTargetEvent0 = mock(DropTargetEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.dragExit(dropTargetEvent0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      DragGestureEvent dragGestureEvent0 = mock(DragGestureEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Point) null).when(dragGestureEvent0).getDragOrigin();
      doReturn((InputEvent) null).when(dragGestureEvent0).getTriggerEvent();
      // Undeclared exception!
      try { 
        dNADraw0.dragGestureRecognized(dragGestureEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setOpaque(false);
      dNADraw0.setStartTick(1);
      dNADraw0.getUI();
      dNADraw0.setStart(500);
      String string0 = "=}w@Q1c}f";
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 500;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, (RenderingHints) null);
      ColorModel colorModel0 = ColorModel.getRGBdefault();
      Hashtable<DefaultGraphics2D, Range> hashtable0 = new Hashtable<DefaultGraphics2D, Range>();
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(colorModel0, (WritableRaster) null, false, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.transferFocusBackward();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dNADraw0.getMouseWheelListeners();
      dNADraw0.getSingleBaseWidth();
      DefaultComboBoxModel<Range> defaultComboBoxModel0 = new DefaultComboBoxModel<Range>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d>(F");
      JList<Range> jList0 = new JList<Range>(defaultComboBoxModel0);
      jList0.addNotify();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      Class<FilteredEntryGroup> class0 = FilteredEntryGroup.class;
      defaultComboBoxModel0.getListeners(class0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jList0.getCellBounds((-1), (-1));
      dNADraw0.scrollRectToVisible((Rectangle) null);
      dNADraw0.getBorderHeight2();
      dNADraw0.getUserGraphs();
      dNADraw0.getBasesPerLine();
      dNADraw0.getEnd();
      dNADraw0.getBorderWidth2();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setStartTick((-1570));
      GraphicsConfigurationWithTransparency graphicsConfigurationWithTransparency0 = new GraphicsConfigurationWithTransparency();
      BufferedImage bufferedImage0 = graphicsConfigurationWithTransparency0.createCompatibleImage(2747, 3300, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        dNADraw0.drawAll(graphics2D0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.createImage(4163, (-1794));
      dNADraw0.getNumberOfLines();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getGcGraph();
      dNADraw0.containsGraph((Graph) null);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DragGestureRecognizer dragGestureRecognizer0 = null;
      int int0 = 1539;
      Vector<Feature> vector0 = new Vector<Feature>();
      Hashtable<MouseEvent, GCGraph> hashtable0 = new Hashtable<MouseEvent, GCGraph>();
      DNADraw dNADraw0 = null;
      try {
        dNADraw0 = new DNADraw(vector0, vector0, hashtable0, 1539, 3743, 3743);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw((Vector) null, (Vector) null, (Vector) null, (Vector) null);
      Bases bases0 = new Bases((Sequence) null);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      simpleEntryGroup0.getSequenceEntry();
      Track track0 = new Track((-431.90851), "-t", true, true, (Entry) null);
      // Undeclared exception!
      try { 
        dNADraw0.addFeaturesToTrack((List) null, track0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.zoomOut();
      dNADraw0.getGcSkewGraph();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      dNADraw0.setStart(47);
      dNADraw0.setPlasmidLocation(8912, 8912);
      dNADraw0.calculateTickPosistions();
      dNADraw0.setLineSize(8912);
      boolean boolean0 = false;
      dNADraw0.getStartTick();
      MouseEvent mouseEvent0 = null;
      try {
        mouseEvent0 = new MouseEvent((Component) null, 8912, 8912, 112, 8203, 47, (-972), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getDropTarget();
      dNADraw0.setDropTarget((DropTarget) null);
      dNADraw0.createImage(0, (-1862));
      int int0 = (-3063);
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtBasePosition((-3063));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getGeneticMarker();
      dNADraw0.setBorderHeight2(64);
      dNADraw0.setBorderWidth2(73);
      dNADraw0.getRestrictionEnzyme();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics();
      dNADraw0.getContainerListeners();
      // Undeclared exception!
      try { 
        dNADraw0.drawLinearPanel(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getGraphics();
      dNADraw0.getVetoableChangeListeners();
      dNADraw0.printComponents((Graphics) null);
      dNADraw0.removeAll();
      dNADraw0.setPlasmidLocation(0, 0);
      int int0 = (-1243);
      dNADraw0.paintImmediately(0, 0, 4352, (-1243));
      dNADraw0.getArtemisEntryGroup();
      DragSourceDragEvent dragSourceDragEvent0 = mock(DragSourceDragEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.dragOver(dragSourceDragEvent0);
      dNADraw0.zoomIn();
      dNADraw0.getMinorTickInterval();
      dNADraw0.getVersion();
      DefaultGraphics2D defaultGraphics2D0 = new DefaultGraphics2D(false);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(202);
      TitledBorder titledBorder0 = new TitledBorder(softBevelBorder0);
      Font font0 = titledBorder0.getTitleFont();
      FontMetrics fontMetrics0 = defaultGraphics2D0.getFontMetrics(font0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics();
      // Undeclared exception!
      try { 
        dNADraw0.drawLinearPanel(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getStartTick();
      dNADraw0.isCircular();
      dNADraw0.getGeneticMarker();
      // Undeclared exception!
      try { 
        dNADraw0.dragEnter((DropTargetDragEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      MouseEvent mouseEvent0 = mock(MouseEvent.class, new ViolatedAssumptionAnswer());
      dNADraw0.getPopupLocation(mouseEvent0);
      dNADraw0.setTickInterval(1350);
      // Undeclared exception!
      try { 
        dNADraw0.createMenuBar();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setMinorTickInterval(1145);
      dNADraw0.getTickInterval();
      Button button0 = null;
      try {
        button0 = new Button("");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
