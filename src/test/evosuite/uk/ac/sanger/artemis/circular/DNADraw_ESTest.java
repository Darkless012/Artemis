/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 10:50:43 GMT 2018
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.TextArea;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.print.PageFormat;
import java.util.Hashtable;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import org.emboss.jemboss.JembossParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.EntryGroup;
import uk.ac.sanger.artemis.circular.DNADraw;
import uk.ac.sanger.artemis.circular.GCGraph;
import uk.ac.sanger.artemis.circular.GCSkewGraph;
import uk.ac.sanger.artemis.circular.Graph;
import uk.ac.sanger.artemis.circular.TrackManager;
import uk.ac.sanger.artemis.circular.UserGraph;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DNADraw_ESTest extends DNADraw_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertNotNull(dNADraw0);
      
      int int0 = dNADraw0.getStart();
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertNotNull(dNADraw0);
      
      int int0 = dNADraw0.getLineSize();
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertNotNull(dNADraw0);
      
      Vector vector0 = dNADraw0.getGeneticMarker();
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw((Vector) null, (Vector) null, (Vector) null, (Vector) null);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertNotNull(dNADraw0);
      
      int int0 = dNADraw0.getEnd();
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(4000, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertNotNull(dNADraw0);
      
      double double0 = dNADraw0.getDiameter();
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals((-150.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.isCygwin());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertEquals("", jembossParams0.getServiceUserName());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertFalse(jembossParams0.getDebug());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertNotNull(jembossParams0);
      
      Vector vector0 = jembossParams0.modeVector();
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.isCygwin());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertEquals("", jembossParams0.getServiceUserName());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertFalse(jembossParams0.getDebug());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertNotNull(vector0);
      
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, (Vector) null);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.isCygwin());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertEquals("", jembossParams0.getServiceUserName());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertFalse(jembossParams0.getDebug());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertNotNull(dNADraw0);
      
      Vector vector1 = dNADraw0.getBlock();
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.isCygwin());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertEquals("", jembossParams0.getServiceUserName());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertFalse(jembossParams0.getDebug());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals("[interactive, batch]", vector1.toString());
      assertEquals(2, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertNotNull(vector1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.getDebug());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertNull(jembossParams0.getSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertNotNull(jembossParams0);
      
      Vector vector0 = jembossParams0.getPrivateServers();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.getDebug());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertNull(jembossParams0.getSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, (Vector) null);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.getDebug());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertNull(jembossParams0.getSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertNotNull(dNADraw0);
      
      Vector vector1 = dNADraw0.getBlock();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.getDebug());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertNull(jembossParams0.getSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertNotNull(vector1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertNotNull(dNADraw0);
      
      // Undeclared exception!
      try { 
        dNADraw0.print((Graphics) null, (PageFormat) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertNotNull(dNADraw0);
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(dNADraw0, 22, 22, 22, 22, 22, 132, false, 58, (-515), 58);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(132, mouseWheelEvent0.getClickCount());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals((-29870), mouseWheelEvent0.getUnitsToScroll());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals(58, mouseWheelEvent0.getWheelRotation());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals(22, mouseWheelEvent0.getX());
      assertEquals(22, mouseWheelEvent0.getY());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(22L, mouseWheelEvent0.getWhen());
      assertEquals(22, mouseWheelEvent0.getModifiers());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertEquals((-515), mouseWheelEvent0.getScrollAmount());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(58, mouseWheelEvent0.getScrollType());
      assertEquals(22, mouseWheelEvent0.getID());
      assertNotNull(mouseWheelEvent0);
      
      // Undeclared exception!
      try { 
        dNADraw0.getToolTipText((MouseEvent) mouseWheelEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertNotNull(dNADraw0);
      
      // Undeclared exception!
      try { 
        dNADraw0.getFeaturePoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertFalse(jembossParams0.isUseTFM());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertNull(jembossParams0.getSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertFalse(jembossParams0.getDebug());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertNull(jembossParams0.getCygwinRoot());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.isBrowserProxy());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("", jembossParams0.getServiceUserName());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertNotNull(jembossParams0);
      
      Vector vector0 = jembossParams0.modeVector();
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertFalse(jembossParams0.isUseTFM());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertNull(jembossParams0.getSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertFalse(jembossParams0.getDebug());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertNull(jembossParams0.getCygwinRoot());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.isBrowserProxy());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("", jembossParams0.getServiceUserName());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("[interactive, batch]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertNotNull(vector0);
      
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, (Vector) null);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertFalse(jembossParams0.isUseTFM());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertNull(jembossParams0.getSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertFalse(jembossParams0.getDebug());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertNull(jembossParams0.getCygwinRoot());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.isBrowserProxy());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("", jembossParams0.getServiceUserName());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("[interactive, batch]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertNotNull(dNADraw0);
      
      // Undeclared exception!
      try { 
        dNADraw0.getFeaturePoints();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to uk.ac.sanger.artemis.circular.Block
         //
         verifyException("uk.ac.sanger.artemis.circular.BlockComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertNotNull(dNADraw0);
      
      Point point0 = dNADraw0.getLocationPoint();
      assertEquals(75, point0.x);
      assertEquals(75, point0.y);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(75.0, point0.getX(), 0.01);
      assertEquals(75.0, point0.getY(), 0.01);
      assertNotNull(point0);
      
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtLocation(point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertNotNull(dNADraw0);
      
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtBasePosition(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertNotNull(dNADraw0);
      
      EntryGroup entryGroup0 = dNADraw0.getArtemisEntryGroup();
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertNull(entryGroup0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 30000);
      assertNotNull(defaultTableModel0);
      
      Vector vector0 = defaultTableModel0.getDataVector();
      assertFalse(vector0.isEmpty());
      assertEquals(30000, vector0.size());
      assertEquals(30000, vector0.capacity());
      assertNotNull(vector0);
      
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      assertFalse(vector0.isEmpty());
      assertEquals(30000, vector0.size());
      assertEquals(30000, vector0.capacity());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertNotNull(dNADraw0);
      
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtBasePosition(30000);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to uk.ac.sanger.artemis.circular.Block
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<KeyStroke> stack0 = new Stack<KeyStroke>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertNotNull(dNADraw0);
      
      Hashtable hashtable0 = dNADraw0.getFeaturePoints();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      DNADraw dNADraw1 = null;
      try {
        dNADraw1 = new DNADraw(stack0, stack0, hashtable0, 20000, 0, 811);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertNotNull(dNADraw0);
      
      boolean boolean0 = dNADraw0.containsGraph((Graph) null);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertNotNull(dNADraw0);
      
      boolean boolean0 = dNADraw0.setMinorTickInterval(0);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertNotNull(dNADraw0);
      
      boolean boolean0 = dNADraw0.setTickInterval(60);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertNotNull(dNADraw0);
      
      boolean boolean0 = dNADraw0.setStartTick(4000);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertNotNull(dNADraw0);
      
      dNADraw0.zoomOut();
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertFalse(jembossParams0.getUseProxy());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getDebug());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertNotNull(jembossParams0);
      
      Vector vector0 = jembossParams0.modeVector();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertFalse(jembossParams0.getUseProxy());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getDebug());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertNotNull(vector0);
      
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertFalse(jembossParams0.getUseProxy());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getDebug());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertNotNull(dNADraw0);
      
      dNADraw0.zoomIn();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertFalse(jembossParams0.getUseProxy());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getDebug());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertNotNull(dNADraw0);
      
      String string0 = dNADraw0.getVersion();
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertNotNull(dNADraw0);
      
      Graph graph0 = dNADraw0.getGcGraph();
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertNull(graph0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertNotNull(dNADraw0);
      
      dNADraw0.setArtemisEntryGroup((EntryGroup) null);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertNotNull(dNADraw0);
      
      dNADraw0.setLineSize(2962);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Stack<UserGraph> stack0 = new Stack<UserGraph>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertNotNull(dNADraw0);
      
      dNADraw0.setLineHeight((-0.8F));
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals((-0.8F), dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getUseAuth());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertNull(jembossParams0.getSoapService());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertFalse(jembossParams0.getDebug());
      assertNotNull(jembossParams0);
      
      Vector vector0 = jembossParams0.modeVector();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getUseAuth());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertNull(jembossParams0.getSoapService());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertFalse(jembossParams0.getDebug());
      assertEquals(2, vector0.size());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getUseAuth());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertNull(jembossParams0.getSoapService());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertFalse(jembossParams0.getDebug());
      assertEquals(2, vector0.size());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertNotNull(dNADraw0);
      
      int int0 = dNADraw0.getBasesPerLine();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertTrue(jembossParams0.getUseAuth());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.isUseTFM());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertNull(jembossParams0.getSoapService());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertFalse(jembossParams0.getDebug());
      assertEquals(2, vector0.size());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertNotNull(dNADraw0);
      
      dNADraw0.setBases((Bases) null);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JembossParams jembossParams0 = new JembossParams();
          assertEquals(1, JembossParams.SERVER_ERR);
          assertEquals(0, JembossParams.SERVER_OK);
          assertEquals(2, JembossParams.SERVER_DOWN);
          assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
          assertFalse(jembossParams0.getUseProxy());
          assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
          assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
          assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
          assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
          assertFalse(jembossParams0.isCygwin());
          assertFalse(jembossParams0.getPrivateServerFailover());
          assertEquals(8080, jembossParams0.getProxyPortNum());
          assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
          assertNull(jembossParams0.getSoapService());
          assertEquals("interactive", jembossParams0.getCurrentMode());
          assertFalse(jembossParams0.getDebug());
          assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
          assertEquals("", jembossParams0.getProxyAuthPasswd());
          assertTrue(jembossParams0.getUseAuth());
          assertEquals(8080, jembossParams0.getBrowserProxyPort());
          assertFalse(jembossParams0.isJembossServer());
          assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
          assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
          assertTrue(jembossParams0.getHasBatchMode());
          assertFalse(jembossParams0.isUseTFM());
          assertEquals("wwwcache", jembossParams0.getProxyHost());
          assertFalse(jembossParams0.getUseProxyAuth());
          assertFalse(jembossParams0.getPublicServerFailover());
          assertEquals("", jembossParams0.getProxyAuthUser());
          assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
          assertEquals("", jembossParams0.getServiceUserName());
          assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
          assertFalse(jembossParams0.getUseHTTPSProxy());
          assertNull(jembossParams0.getCygwinRoot());
          assertFalse(jembossParams0.isBrowserProxy());
          assertTrue(jembossParams0.getHasInteractiveMode());
          assertNotNull(jembossParams0);
          
          Vector vector0 = jembossParams0.getPrivateServers();
          assertEquals(1, JembossParams.SERVER_ERR);
          assertEquals(0, JembossParams.SERVER_OK);
          assertEquals(2, JembossParams.SERVER_DOWN);
          assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
          assertFalse(jembossParams0.getUseProxy());
          assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
          assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
          assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
          assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
          assertFalse(jembossParams0.isCygwin());
          assertFalse(jembossParams0.getPrivateServerFailover());
          assertEquals(8080, jembossParams0.getProxyPortNum());
          assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
          assertNull(jembossParams0.getSoapService());
          assertEquals("interactive", jembossParams0.getCurrentMode());
          assertFalse(jembossParams0.getDebug());
          assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
          assertEquals("", jembossParams0.getProxyAuthPasswd());
          assertTrue(jembossParams0.getUseAuth());
          assertEquals(8080, jembossParams0.getBrowserProxyPort());
          assertFalse(jembossParams0.isJembossServer());
          assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
          assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
          assertTrue(jembossParams0.getHasBatchMode());
          assertFalse(jembossParams0.isUseTFM());
          assertEquals("wwwcache", jembossParams0.getProxyHost());
          assertFalse(jembossParams0.getUseProxyAuth());
          assertFalse(jembossParams0.getPublicServerFailover());
          assertEquals("", jembossParams0.getProxyAuthUser());
          assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
          assertEquals("", jembossParams0.getServiceUserName());
          assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
          assertFalse(jembossParams0.getUseHTTPSProxy());
          assertNull(jembossParams0.getCygwinRoot());
          assertFalse(jembossParams0.isBrowserProxy());
          assertTrue(jembossParams0.getHasInteractiveMode());
          assertEquals("[]", vector0.toString());
          assertEquals(10, vector0.capacity());
          assertEquals(0, vector0.size());
          assertTrue(vector0.isEmpty());
          assertNotNull(vector0);
          
          DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
          assertEquals(1, JembossParams.SERVER_ERR);
          assertEquals(0, JembossParams.SERVER_OK);
          assertEquals(2, JembossParams.SERVER_DOWN);
          assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
          assertFalse(jembossParams0.getUseProxy());
          assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
          assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
          assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
          assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
          assertFalse(jembossParams0.isCygwin());
          assertFalse(jembossParams0.getPrivateServerFailover());
          assertEquals(8080, jembossParams0.getProxyPortNum());
          assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
          assertNull(jembossParams0.getSoapService());
          assertEquals("interactive", jembossParams0.getCurrentMode());
          assertFalse(jembossParams0.getDebug());
          assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
          assertEquals("", jembossParams0.getProxyAuthPasswd());
          assertTrue(jembossParams0.getUseAuth());
          assertEquals(8080, jembossParams0.getBrowserProxyPort());
          assertFalse(jembossParams0.isJembossServer());
          assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
          assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
          assertTrue(jembossParams0.getHasBatchMode());
          assertFalse(jembossParams0.isUseTFM());
          assertEquals("wwwcache", jembossParams0.getProxyHost());
          assertFalse(jembossParams0.getUseProxyAuth());
          assertFalse(jembossParams0.getPublicServerFailover());
          assertEquals("", jembossParams0.getProxyAuthUser());
          assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
          assertEquals("", jembossParams0.getServiceUserName());
          assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
          assertFalse(jembossParams0.getUseHTTPSProxy());
          assertNull(jembossParams0.getCygwinRoot());
          assertFalse(jembossParams0.isBrowserProxy());
          assertTrue(jembossParams0.getHasInteractiveMode());
          assertEquals("[]", vector0.toString());
          assertEquals(10, vector0.capacity());
          assertEquals(0, vector0.size());
          assertTrue(vector0.isEmpty());
          assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
          assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
          assertFalse(dNADraw0.isFocusCycleRoot());
          assertEquals(0, dNADraw0.getBorderHeight2());
          assertEquals(0, dNADraw0.getNumberOfLines());
          assertEquals(20000, dNADraw0.getBasesPerLine());
          assertFalse(dNADraw0.isFocusTraversalPolicySet());
          assertFalse(dNADraw0.getIgnoreRepaint());
          assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
          assertFalse(dNADraw0.getScrollableTracksViewportHeight());
          assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
          assertFalse(dNADraw0.getScrollableTracksViewportWidth());
          assertEquals(0, dNADraw0.getBorderWidth2());
          assertNotNull(dNADraw0);
          
          // Undeclared exception!
          try { 
            dNADraw0.doPrintActions();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"queuePrintJob\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkPrintJobAccess(SecurityManager.java:1378)
             // java.awt.print.PrinterJob.getPrinterJob(PrinterJob.java:75)
             // uk.ac.sanger.artemis.circular.DNADraw.doPrintActions(DNADraw.java:1008)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertNotNull(dNADraw0);
      
      GCGraph gCGraph0 = new GCGraph(dNADraw0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(1, gCGraph0.getStrokeSize());
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
      assertNotNull(gCGraph0);
      
      dNADraw0.setGcGraph(gCGraph0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(1, gCGraph0.getStrokeSize());
      assertFalse(gCGraph0.getIgnoreRepaint());
      assertFalse(gCGraph0.isFocusCycleRoot());
      assertFalse(gCGraph0.isFocusTraversalPolicyProvider());
      assertEquals(0.2F, gCGraph0.getGraphHeight(), 0.01F);
      assertEquals(0.4, gCGraph0.getTrack(), 0.01);
      assertEquals(200, gCGraph0.getBaseStepSize());
      assertTrue(gCGraph0.getFocusTraversalKeysEnabled());
      assertEquals(3.4028235E38F, gCGraph0.getMinValue(), 0.01F);
      assertFalse(gCGraph0.isFocusTraversalPolicySet());
      assertEquals(1.4E-45F, gCGraph0.getMaxValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertNull(jembossParams0.getCygwinRoot());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertNull(jembossParams0.getSoapService());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertFalse(jembossParams0.isUseTFM());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertEquals("", jembossParams0.getServiceUserName());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.isBrowserProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.getDebug());
      assertFalse(jembossParams0.isJembossServer());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertNotNull(jembossParams0);
      
      Vector vector0 = jembossParams0.modeVector();
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertNull(jembossParams0.getCygwinRoot());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertNull(jembossParams0.getSoapService());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertFalse(jembossParams0.isUseTFM());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertEquals("", jembossParams0.getServiceUserName());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.isBrowserProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.getDebug());
      assertFalse(jembossParams0.isJembossServer());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertNotNull(vector0);
      
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertNull(jembossParams0.getCygwinRoot());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertNull(jembossParams0.getSoapService());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertFalse(jembossParams0.isUseTFM());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertEquals("", jembossParams0.getServiceUserName());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.isBrowserProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.getDebug());
      assertFalse(jembossParams0.isJembossServer());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertNotNull(dNADraw0);
      
      TrackManager trackManager0 = dNADraw0.getTrackManager();
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertNull(jembossParams0.getCygwinRoot());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertNull(jembossParams0.getSoapService());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertFalse(jembossParams0.isUseTFM());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertEquals("", jembossParams0.getServiceUserName());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertFalse(jembossParams0.isBrowserProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertFalse(jembossParams0.getDebug());
      assertFalse(jembossParams0.isJembossServer());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("[interactive, batch]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertNull(trackManager0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertNotNull(dNADraw0);
      
      dNADraw0.setSingleBaseWidth((-2448.91F));
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals((-2448.91F), dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertNotNull(dNADraw0);
      
      dNADraw0.setEnd(0);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertNotNull(dNADraw0);
      
      Vector vector0 = dNADraw0.getBlock();
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertNotNull(dNADraw0);
      
      dNADraw0.setBorderWidth2((-743));
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals((-743), dNADraw0.getBorderWidth2());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertNotNull(dNADraw0);
      
      Vector vector0 = dNADraw0.getRestrictionEnzyme();
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertNotNull(dNADraw0);
      
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
      assertNotNull(gCSkewGraph0);
      
      dNADraw0.setGcSkewGraph(gCSkewGraph0);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(gCSkewGraph0.getFocusTraversalKeysEnabled());
      assertEquals(0.4, gCSkewGraph0.getTrack(), 0.01);
      assertEquals(0.2F, gCSkewGraph0.getGraphHeight(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicyProvider());
      assertFalse(gCSkewGraph0.isFocusCycleRoot());
      assertEquals(1, gCSkewGraph0.getStrokeSize());
      assertEquals(200, gCSkewGraph0.getBaseStepSize());
      assertEquals(1.4E-45F, gCSkewGraph0.getMaxValue(), 0.01F);
      assertFalse(gCSkewGraph0.getIgnoreRepaint());
      assertEquals(3.4028235E38F, gCSkewGraph0.getMinValue(), 0.01F);
      assertFalse(gCSkewGraph0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertNotNull(dNADraw0);
      
      dNADraw0.dragOver((DragSourceDragEvent) null);
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertNull(jembossParams0.getCygwinRoot());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.getUseProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.getDebug());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertNull(jembossParams0.getSoapService());
      assertNotNull(jembossParams0);
      
      Vector vector0 = jembossParams0.modeVector();
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertNull(jembossParams0.getCygwinRoot());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.getUseProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.getDebug());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertNull(jembossParams0.getSoapService());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[interactive, batch]", vector0.toString());
      assertNotNull(vector0);
      
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertNull(jembossParams0.getCygwinRoot());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.getUseProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.getDebug());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertNull(jembossParams0.getSoapService());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[interactive, batch]", vector0.toString());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertNotNull(dNADraw0);
      
      dNADraw0.setBasesPerLine(2303);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertFalse(jembossParams0.isJembossServer());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertFalse(jembossParams0.isCygwin());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertNull(jembossParams0.getCygwinRoot());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertFalse(jembossParams0.isBrowserProxy());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.getUseProxy());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.getDebug());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertNull(jembossParams0.getSoapService());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[interactive, batch]", vector0.toString());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(2303, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertNotNull(dNADraw0);
      
      dNADraw0.setPlasmidLocation(405, 1448);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getDebug());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertNotNull(jembossParams0);
      
      Vector vector0 = jembossParams0.getPrivateServers();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getDebug());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getDebug());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertNotNull(dNADraw0);
      
      float float0 = dNADraw0.getLineHeight();
      assertEquals(2, JembossParams.SERVER_DOWN);
      assertEquals(0, JembossParams.SERVER_OK);
      assertEquals(1, JembossParams.SERVER_ERR);
      assertEquals("", jembossParams0.getProxyAuthUser());
      assertEquals("http://www.uk.embnet.org/Software/EMBOSS/Apps/", jembossParams0.getembURL());
      assertTrue(jembossParams0.getUseAuth());
      assertEquals("", jembossParams0.getServiceUserName());
      assertEquals("interactive", jembossParams0.getCurrentMode());
      assertEquals("JembossAuthServer", jembossParams0.getPublicSoapService());
      assertEquals("", jembossParams0.getProxyAuthPasswd());
      assertTrue(jembossParams0.getHasInteractiveMode());
      assertFalse(jembossParams0.isCygwin());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPrivateSoapURL());
      assertEquals("https://jemboss.hgmp.mrc.ac.uk:8443/axis/services", jembossParams0.getPublicSoapURL());
      assertFalse(jembossParams0.isJembossServer());
      assertEquals(8080, jembossParams0.getBrowserProxyPort());
      assertEquals("/usr/local/share/EMBOSS/data/", jembossParams0.getEmbossData());
      assertEquals("wwwcache", jembossParams0.getBrowserProxyHost());
      assertFalse(jembossParams0.isUseTFM());
      assertTrue(jembossParams0.getHasBatchMode());
      assertEquals(8080, jembossParams0.getProxyPortNum());
      assertEquals("/usr/bin/:/bin", jembossParams0.getEmbossPath());
      assertEquals("JembossAuthServer", jembossParams0.getPrivateSoapService());
      assertEquals("/usr/local/share/EMBOSS/acd/", jembossParams0.getAcdDirToParse());
      assertFalse(jembossParams0.getUseProxy());
      assertEquals("/usr/local/share/EMBOSS/", jembossParams0.getPlplot());
      assertFalse(jembossParams0.getUseHTTPSProxy());
      assertNull(jembossParams0.getCygwinRoot());
      assertFalse(jembossParams0.isBrowserProxy());
      assertNull(jembossParams0.getSoapService());
      assertFalse(jembossParams0.getDebug());
      assertEquals("wwwcache", jembossParams0.getProxyHost());
      assertFalse(jembossParams0.getPublicServerFailover());
      assertFalse(jembossParams0.getUseProxyAuth());
      assertEquals("/usr/local/bin/", jembossParams0.getEmbossBin());
      assertFalse(jembossParams0.getPrivateServerFailover());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(200.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertNotNull(dNADraw0);
      
      int int0 = dNADraw0.getTickInterval();
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(500, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertNotNull(dNADraw0);
      
      int int0 = dNADraw0.getBorderWidth2();
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertNotNull(dNADraw0);
      
      Graph graph0 = dNADraw0.getGcSkewGraph();
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertNull(graph0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      Vector vector0 = defaultTableModel0.getDataVector();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertNotNull(vector0);
      
      Vector<TextArea> vector1 = new Vector<TextArea>();
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertNotNull(vector1);
      
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector1, vector1);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertNotNull(dNADraw0);
      
      dNADraw0.setBorderHeight2(0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertNotNull(dNADraw0);
      
      dNADraw0.setStart(405);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertNotNull(dNADraw0);
      
      Bases bases0 = dNADraw0.getBases();
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertNull(bases0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertNotNull(dNADraw0);
      
      dNADraw0.setNumberOfLines(4);
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertEquals(4, dNADraw0.getNumberOfLines());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertNotNull(dNADraw0);
      
      int int0 = dNADraw0.getBorderHeight2();
      assertFalse(dNADraw0.getScrollableTracksViewportWidth());
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertFalse(dNADraw0.isFocusCycleRoot());
      assertEquals(0, dNADraw0.getBorderHeight2());
      assertFalse(dNADraw0.isFocusTraversalPolicySet());
      assertFalse(dNADraw0.getIgnoreRepaint());
      assertFalse(dNADraw0.isFocusTraversalPolicyProvider());
      assertEquals(0, dNADraw0.getNumberOfLines());
      assertTrue(dNADraw0.getFocusTraversalKeysEnabled());
      assertFalse(dNADraw0.getScrollableTracksViewportHeight());
      assertEquals(0.0F, dNADraw0.getSingleBaseWidth(), 0.01F);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(0, dNADraw0.getBorderWidth2());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      Hashtable hashtable0 = dNADraw0.getLineAttributes();
      DNADraw dNADraw1 = new DNADraw((Vector) null, (Vector) null, hashtable0, 79, 4662, 0);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, dNADraw1.getBasesPerLine());
      assertEquals(200.0F, dNADraw1.getLineHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      // Undeclared exception!
      try { 
        dNADraw0.createMenuBar();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
