/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 14:05:27 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JFrame;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.EntrySource;
import uk.ac.sanger.artemis.EntrySourceVector;
import uk.ac.sanger.artemis.components.BioJavaEntrySource;
import uk.ac.sanger.artemis.components.FileDialogEntrySource;
import uk.ac.sanger.artemis.util.InputStreamProgressListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EntrySourceVector_ESTest extends EntrySourceVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      entrySourceVector0.addElement((EntrySource) null);
      int int0 = entrySourceVector0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      BioJavaEntrySource bioJavaEntrySource0 = new BioJavaEntrySource();
      entrySourceVector0.add(bioJavaEntrySource0);
      boolean boolean0 = entrySourceVector0.removeElement(bioJavaEntrySource0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      entrySourceVector0.add((EntrySource) null);
      int int0 = entrySourceVector0.indexOf((EntrySource) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      BioJavaEntrySource bioJavaEntrySource0 = new BioJavaEntrySource();
      BioJavaEntrySource bioJavaEntrySource1 = new BioJavaEntrySource();
      entrySourceVector0.add(bioJavaEntrySource0);
      entrySourceVector0.add(bioJavaEntrySource1);
      int int0 = entrySourceVector0.indexOf(bioJavaEntrySource1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      entrySourceVector0.add((EntrySource) null);
      EntrySource entrySource0 = entrySourceVector0.elementAt(0);
      assertNull(entrySource0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      BioJavaEntrySource bioJavaEntrySource0 = new BioJavaEntrySource();
      entrySourceVector0.add(bioJavaEntrySource0);
      EntrySource entrySource0 = entrySourceVector0.elementAt(0);
      assertSame(entrySource0, bioJavaEntrySource0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      FileDialogEntrySource fileDialogEntrySource0 = new FileDialogEntrySource((JFrame) null, inputStreamProgressListener0);
      entrySourceVector0.add(fileDialogEntrySource0);
      EntrySource entrySource0 = entrySourceVector0.elementAt(0);
      assertEquals("Filesystem", entrySource0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      entrySourceVector0.add((EntrySource) null);
      entrySourceVector0.addElement((EntrySource) null);
      assertEquals(1, entrySourceVector0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      BioJavaEntrySource bioJavaEntrySource0 = new BioJavaEntrySource();
      int int0 = entrySourceVector0.indexOf(bioJavaEntrySource0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      BioJavaEntrySource bioJavaEntrySource0 = new BioJavaEntrySource();
      boolean boolean0 = entrySourceVector0.contains(bioJavaEntrySource0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      entrySourceVector0.addElement((EntrySource) null);
      boolean boolean0 = entrySourceVector0.contains((EntrySource) null);
      assertEquals(1, entrySourceVector0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      BioJavaEntrySource bioJavaEntrySource0 = new BioJavaEntrySource();
      boolean boolean0 = entrySourceVector0.removeElement(bioJavaEntrySource0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      entrySourceVector0.removeAllElements();
      assertEquals(0, entrySourceVector0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      Object object0 = entrySourceVector0.clone();
      assertNotSame(object0, entrySourceVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      int int0 = entrySourceVector0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EntrySourceVector entrySourceVector0 = new EntrySourceVector();
      // Undeclared exception!
      try { 
        entrySourceVector0.elementAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
