/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 16:51:23 GMT 2018
 */

package uk.ac.sanger.artemis.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.util.FastVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastVector_ESTest extends FastVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      Object object0 = new Object();
      fastVector0.add(object0);
      fastVector0.setElementAt((Object) null, 0);
      assertFalse(fastVector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      Object object0 = new Object();
      Stream stream0 = fastVector0.stream();
      fastVector0.insertElementAfter(object0, stream0);
      FastVector fastVector1 = fastVector0.mysort((Comparator) null);
      assertNotSame(fastVector1, fastVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      fastVector0.add((Object) fastVector0);
      Object object0 = fastVector0.lastElement();
      assertSame(object0, fastVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      // Undeclared exception!
      try { 
        fastVector0.setElementAt(fastVector0, (-2695));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      fastVector0.add((Object) mockMinguoDate0);
      fastVector0.insertElementAfter(mockMinguoDate0, mockMinguoDate0);
      assertFalse(fastVector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      fastVector0.add((Object) mockMinguoDate0);
      // Undeclared exception!
      try { 
        fastVector0.add((Object) mockMinguoDate0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - object added a second time
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      // Undeclared exception!
      try { 
        fastVector0.add((Object) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      Object object0 = new Object();
      fastVector0.add(object0);
      Stream stream0 = fastVector0.stream();
      fastVector0.insertElementAfter(object0, stream0);
      // Undeclared exception!
      try { 
        fastVector0.mysort((Comparator) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      // Undeclared exception!
      try { 
        fastVector0.setElementAt((Object) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FastVector fastVector1 = fastVector0.mysort(comparator0);
      assertNotSame(fastVector1, fastVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastVector fastVector0 = new FastVector();
      // Undeclared exception!
      try { 
        fastVector0.lastElement();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
