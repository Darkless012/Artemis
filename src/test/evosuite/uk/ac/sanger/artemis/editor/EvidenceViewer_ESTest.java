/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 08 19:43:05 GMT 2018
 */

package uk.ac.sanger.artemis.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.io.CharArrayWriter;
import javax.swing.DebugGraphics;
import javax.swing.JApplet;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.plaf.multi.MultiMenuItemUI;
import javax.swing.plaf.synth.SynthLabelUI;
import org.apache.batik.anim.dom.SVG12OMDocument;
import org.apache.batik.anim.dom.SVGDOMImplementation;
import org.apache.batik.dom.AbstractNode;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.svggen.SVGGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.DOMImplementation;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.editor.EvidenceViewer;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.GFFDocumentEntry;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class EvidenceViewer_ESTest extends EvidenceViewer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature(emblStreamFeature0);
      Feature feature0 = new Feature(genbankStreamFeature0);
      Entry entry0 = Entry.newEntry((Bases) null);
      Feature feature1 = feature0.copyTo(entry0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Range range0 = new Range((-989));
      FeatureVector featureVector0 = simpleEntryGroup0.getFeaturesInRange(range0);
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature1, featureVector0, jDesktopPane0);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MultiMenuItemUI multiMenuItemUI0 = new MultiMenuItemUI();
      Dimension dimension0 = evidenceViewer0.getSize();
      evidenceViewer0.setSize(dimension0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDesktopPane0, 0, (-2330L), 35, 0, 2, 0, (-2095), 0, true, (-1074), (-592), (-592), 1.0);
      evidenceViewer_MouseClickListener0.mouseClicked(mouseWheelEvent0);
      featureVector0.insertElementAfter(feature0, feature1);
      emblStreamFeature0.copy();
      MouseWheelEvent mouseWheelEvent1 = new MouseWheelEvent(jDesktopPane0, (-1074), (-2330L), (-1074), (-1074), (-1074), (-1074), (-989), 35, false, 1363, (-989), 0, 0.0);
      evidenceViewer_MouseClickListener0.mouseEntered(mouseWheelEvent1);
      evidenceViewer_MouseClickListener0.mouseClicked(mouseWheelEvent1);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) stringBuffer0, 0, 0);
      CharArrayWriter charArrayWriter3 = charArrayWriter2.append('0');
      genbankStreamFeature0.writeToStream(charArrayWriter3);
      Feature feature0 = new Feature(genbankStreamFeature0);
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      Bases bases0 = new Bases(rawStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Range range0 = new Range(0);
      FeatureVector featureVector0 = simpleEntryGroup0.getFeaturesInRange(range0);
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      jDesktopPane0.removeNotify();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, jDesktopPane0);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ea&");
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(evidenceViewer0, 1, 2, 2, 8944, (-1169), 64, 0, 0, true, 130, 4743, 0);
      evidenceViewer_MouseClickListener0.mouseReleased(mouseWheelEvent0);
      evidenceViewer_MouseClickListener0.mouseExited(mouseWheelEvent0);
      // Undeclared exception!
      try { 
        feature0.duplicate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) stringBuffer0, 0, 0);
      CharArrayWriter charArrayWriter3 = charArrayWriter2.append('0');
      genbankStreamFeature0.writeToStream(charArrayWriter3);
      Feature feature0 = new Feature(genbankStreamFeature0);
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      Bases bases0 = new Bases(rawStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Range range0 = new Range(0);
      FeatureVector featureVector0 = simpleEntryGroup0.getFeaturesInRange(range0);
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, jDesktopPane0);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(evidenceViewer0, 1, 2, 2, 8944, (-1122), 64, 0, 0, true, 130, 4743, 0);
      evidenceViewer_MouseClickListener0.mouseReleased(mouseWheelEvent0);
      SynthLabelUI synthLabelUI0 = new SynthLabelUI();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      // Undeclared exception!
      try { 
        evidenceViewer0.paintComponent(debugGraphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature(emblStreamFeature0);
      Feature feature0 = new Feature(genbankStreamFeature0);
      Entry entry0 = Entry.newEntry((Bases) null);
      Feature feature1 = feature0.copyTo(entry0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Range range0 = new Range((-989));
      FeatureVector featureVector0 = simpleEntryGroup0.getFeaturesInRange(range0);
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature1, featureVector0, jDesktopPane0);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MultiMenuItemUI multiMenuItemUI0 = new MultiMenuItemUI();
      Dimension dimension0 = evidenceViewer0.getSize();
      evidenceViewer0.setSize(dimension0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDesktopPane0, 0, (-2330L), 35, 0, 2, 0, (-2095), 0, true, (-1074), (-592), (-592), 1.0);
      evidenceViewer_MouseClickListener0.mouseClicked(mouseWheelEvent0);
      emblStreamFeature0.copy();
      MouseWheelEvent mouseWheelEvent1 = new MouseWheelEvent(jDesktopPane0, (-1074), (-2330L), (-1074), (-1074), (-1074), (-1074), (-989), 35, false, 1363, (-989), 0, 0.0);
      evidenceViewer_MouseClickListener0.mouseEntered(mouseWheelEvent1);
      evidenceViewer_MouseClickListener0.mouseClicked(mouseWheelEvent1);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature(emblStreamFeature0);
      Feature feature0 = new Feature(genbankStreamFeature0);
      Entry entry0 = Entry.newEntry((Bases) null);
      Feature feature1 = feature0.copyTo(entry0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Range range0 = new Range((-989));
      FeatureVector featureVector0 = simpleEntryGroup0.getFeaturesInRange(range0);
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature1, featureVector0, jDesktopPane0);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MultiMenuItemUI multiMenuItemUI0 = new MultiMenuItemUI();
      Dimension dimension0 = evidenceViewer0.getSize();
      evidenceViewer0.setSize(dimension0);
      emblStreamFeature0.copy();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDesktopPane0, (-1074), (-2330L), (-1074), (-1074), (-1074), (-1074), (-989), 35, false, 1363, (-989), 0, 0.0);
      evidenceViewer_MouseClickListener0.mouseEntered(mouseWheelEvent0);
      evidenceViewer_MouseClickListener0.mouseClicked(mouseWheelEvent0);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) stringBuffer0, 0, 0);
      CharArrayWriter charArrayWriter3 = charArrayWriter2.append('0');
      genbankStreamFeature0.writeToStream(charArrayWriter3);
      Feature feature0 = new Feature(genbankStreamFeature0);
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      Bases bases0 = new Bases(rawStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Range range0 = new Range(0);
      FeatureVector featureVector0 = simpleEntryGroup0.getFeaturesInRange(range0);
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, jDesktopPane0);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(evidenceViewer0, 1, 2, 2, 8944, (-1169), 64, 0, 0, true, 130, 4743, 0);
      evidenceViewer_MouseClickListener0.mouseReleased(mouseWheelEvent0);
      // Undeclared exception!
      try { 
        feature0.duplicate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      doReturn((Location) null).when(feature0).getLocation();
      FeatureVector featureVector0 = mock(FeatureVector.class, new ViolatedAssumptionAnswer());
      JDesktopPane jDesktopPane0 = mock(JDesktopPane.class, new ViolatedAssumptionAnswer());
      EvidenceViewer evidenceViewer0 = null;
      try {
        evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, jDesktopPane0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.EvidenceViewer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature(emblStreamFeature0);
      Feature feature0 = new Feature(genbankStreamFeature0);
      Entry entry0 = Entry.newEntry((Bases) null);
      Feature feature1 = feature0.copyTo(entry0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      int int0 = (-989);
      Range range0 = new Range((-989));
      FeatureVector featureVector0 = simpleEntryGroup0.getFeaturesInRange(range0);
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature1, featureVector0, jDesktopPane0);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      int int1 = (-1074);
      long long0 = (-2330L);
      int int2 = 35;
      MultiMenuItemUI multiMenuItemUI0 = new MultiMenuItemUI();
      // Undeclared exception!
      try { 
        multiMenuItemUI0.getPreferredSize(evidenceViewer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, false, true, true);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      jInternalFrame_JDesktopIcon0.getDesktopPane();
      EvidenceViewer evidenceViewer0 = null;
      try {
        evidenceViewer0 = new EvidenceViewer((Feature) null, (FeatureVector) null, (JDesktopPane) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.EvidenceViewer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature(emblStreamFeature0);
      Feature feature0 = new Feature(genbankStreamFeature0);
      Entry entry0 = Entry.newEntry((Bases) null);
      Feature feature1 = feature0.copyTo(entry0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Range range0 = new Range((-989));
      FeatureVector featureVector0 = simpleEntryGroup0.getFeaturesInRange((Range) null);
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature1, featureVector0, jDesktopPane0);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MultiMenuItemUI multiMenuItemUI0 = new MultiMenuItemUI();
      Dimension dimension0 = evidenceViewer0.getSize();
      evidenceViewer0.setSize(dimension0);
      emblStreamFeature0.copy();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDesktopPane0, (-1074), (-1074), (-1074), (-1074), (-1074), (-1074), (-989), 35, false, 1363, (-989), 0, 0.0);
      evidenceViewer_MouseClickListener0.mouseEntered(mouseWheelEvent0);
      evidenceViewer_MouseClickListener0.mouseClicked(mouseWheelEvent0);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      assertNotNull(charArrayWriter1);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, charArrayWriter1.size());
      assertEquals("", charArrayWriter1.toString());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) stringBuffer0, 0, 0);
      assertNotNull(charArrayWriter2);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, charArrayWriter1.size());
      assertEquals("", charArrayWriter1.toString());
      assertEquals("", charArrayWriter2.toString());
      assertEquals(0, charArrayWriter2.size());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      
      CharArrayWriter charArrayWriter3 = charArrayWriter2.append('\'');
      assertNotNull(charArrayWriter3);
      assertEquals("'", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("'", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter2.size());
      assertEquals("'", charArrayWriter2.toString());
      assertEquals("'", charArrayWriter3.toString());
      assertEquals(1, charArrayWriter3.size());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter3);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter1, charArrayWriter3);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter3);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter2);
      assertSame(charArrayWriter3, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      genbankStreamFeature0.writeToStream(charArrayWriter3);
      assertEquals(24, charArrayWriter0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(24, charArrayWriter1.size());
      assertEquals(24, charArrayWriter2.size());
      assertEquals(24, charArrayWriter3.size());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter3);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter1, charArrayWriter3);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter3);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter2);
      assertSame(charArrayWriter3, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter1);
      
      Feature feature0 = new Feature(genbankStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      assertNotNull(rawStreamSequence0);
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Range range0 = new Range(0);
      assertNotNull(range0);
      assertEquals(1, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(0, range0.getEnd());
      
      FeatureVector featureVector0 = simpleEntryGroup0.getFeaturesInRange(range0);
      assertNotNull(featureVector0);
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(0, range0.getEnd());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, jDesktopPane0);
      assertNotNull(evidenceViewer0);
      assertFalse(evidenceViewer0.isFocusTraversalPolicySet());
      assertFalse(evidenceViewer0.isFocusCycleRoot());
      assertFalse(evidenceViewer0.isFocusTraversalPolicyProvider());
      assertTrue(evidenceViewer0.getFocusTraversalKeysEnabled());
      assertFalse(evidenceViewer0.getIgnoreRepaint());
      assertFalse(feature0.isReadOnly());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(0, range0.getEnd());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      assertNotNull(evidenceViewer_MouseClickListener0);
      assertFalse(evidenceViewer0.isFocusTraversalPolicySet());
      assertFalse(evidenceViewer0.isFocusCycleRoot());
      assertFalse(evidenceViewer0.isFocusTraversalPolicyProvider());
      assertTrue(evidenceViewer0.getFocusTraversalKeysEnabled());
      assertFalse(evidenceViewer0.getIgnoreRepaint());
      assertFalse(feature0.isReadOnly());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(0, range0.getEnd());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Color color0 = jDesktopPane0.getBackground();
      assertNotNull(color0);
      assertEquals((-12490326), color0.getRGB());
      assertEquals(170, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("", "", "Set Breakpoint");
      assertNotNull(genericDocumentType0);
      assertEquals("", genericDocumentType0.getPublicId());
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertEquals("", genericDocumentType0.getName());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("Set Breakpoint", genericDocumentType0.getSystemId());
      assertNull(genericDocumentType0.getInternalSubset());
      assertTrue(genericDocumentType0.isReadonly());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertEquals("", genericDocumentType0.getNodeName());
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      
      DOMImplementation dOMImplementation0 = SVGDOMImplementation.getDOMImplementation();
      assertNotNull(dOMImplementation0);
      
      SVG12OMDocument sVG12OMDocument0 = new SVG12OMDocument(genericDocumentType0, dOMImplementation0);
      assertNotNull(sVG12OMDocument0);
      assertEquals("", genericDocumentType0.getPublicId());
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertEquals("", genericDocumentType0.getName());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("Set Breakpoint", genericDocumentType0.getSystemId());
      assertNull(genericDocumentType0.getInternalSubset());
      assertTrue(genericDocumentType0.isReadonly());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertEquals("", genericDocumentType0.getNodeName());
      assertEquals("", sVG12OMDocument0.getReferrer());
      assertFalse(sVG12OMDocument0.isReadonly());
      assertNull(sVG12OMDocument0.getNamespaceURI());
      assertNull(sVG12OMDocument0.getXmlEncoding());
      assertNull(sVG12OMDocument0.getURL());
      assertFalse(sVG12OMDocument0.isSVG12());
      assertNull(sVG12OMDocument0.getDocumentURI());
      assertNull(sVG12OMDocument0.getInputEncoding());
      assertFalse(sVG12OMDocument0.getEventsEnabled());
      assertEquals("1.0", sVG12OMDocument0.getXmlVersion());
      assertEquals("#document", sVG12OMDocument0.getNodeName());
      assertNull(sVG12OMDocument0.getDomain());
      assertTrue(sVG12OMDocument0.hasChildNodes());
      assertTrue(sVG12OMDocument0.getStrictErrorChecking());
      assertFalse(sVG12OMDocument0.getXmlStandalone());
      assertEquals((short)9, sVG12OMDocument0.getNodeType());
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(sVG12OMDocument0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // The current document is unable to create an element of the requested type (namespace: http://www.w3.org/2000/svg, name: g).
         //
         verifyException("org.apache.batik.dom.AbstractNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      assertNotNull(charArrayWriter1);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, charArrayWriter1.size());
      assertEquals("", charArrayWriter1.toString());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) stringBuffer0, 0, 0);
      assertNotNull(charArrayWriter2);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, charArrayWriter1.size());
      assertEquals("", charArrayWriter1.toString());
      assertEquals(0, charArrayWriter2.size());
      assertEquals("", charArrayWriter2.toString());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      
      CharArrayWriter charArrayWriter3 = charArrayWriter2.append('0');
      assertNotNull(charArrayWriter3);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("0", charArrayWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("0", charArrayWriter1.toString());
      assertEquals("0", charArrayWriter2.toString());
      assertEquals(1, charArrayWriter2.size());
      assertEquals(1, charArrayWriter3.size());
      assertEquals("0", charArrayWriter3.toString());
      assertSame(charArrayWriter0, charArrayWriter3);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter3);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter3);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter3, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter2);
      assertSame(charArrayWriter3, charArrayWriter1);
      
      genbankStreamFeature0.writeToStream(charArrayWriter3);
      assertEquals(24, charArrayWriter0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(24, charArrayWriter1.size());
      assertEquals(24, charArrayWriter2.size());
      assertEquals(24, charArrayWriter3.size());
      assertSame(charArrayWriter0, charArrayWriter3);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter3);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter3);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter3, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter2);
      assertSame(charArrayWriter3, charArrayWriter1);
      
      Feature feature0 = new Feature(genbankStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      assertNotNull(rawStreamSequence0);
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertNotNull(bases0);
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Range range0 = new Range(0);
      assertNotNull(range0);
      assertEquals(0, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, range0.getCount());
      
      FeatureVector featureVector0 = simpleEntryGroup0.getFeaturesInRange(range0);
      assertNotNull(featureVector0);
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, jDesktopPane0);
      assertNotNull(evidenceViewer0);
      assertFalse(feature0.isReadOnly());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, range0.getCount());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(evidenceViewer0.isFocusCycleRoot());
      assertFalse(evidenceViewer0.isFocusTraversalPolicySet());
      assertFalse(evidenceViewer0.isFocusTraversalPolicyProvider());
      assertFalse(evidenceViewer0.getIgnoreRepaint());
      assertTrue(evidenceViewer0.getFocusTraversalKeysEnabled());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      assertNotNull(evidenceViewer_MouseClickListener0);
      assertFalse(feature0.isReadOnly());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, range0.getCount());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(evidenceViewer0.isFocusCycleRoot());
      assertFalse(evidenceViewer0.isFocusTraversalPolicySet());
      assertFalse(evidenceViewer0.isFocusTraversalPolicyProvider());
      assertFalse(evidenceViewer0.getIgnoreRepaint());
      assertTrue(evidenceViewer0.getFocusTraversalKeysEnabled());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Color color0 = jDesktopPane0.getBackground();
      assertNotNull(color0);
      assertEquals((-12490326), color0.getRGB());
      assertEquals(170, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(evidenceViewer0, 1, 2, 2, 8944, (-1169), 64, 0, 0, true, 130, 4743, 0);
      assertNotNull(mouseWheelEvent0);
      assertEquals(0, mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals((-1169), mouseWheelEvent0.getY());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(8944, mouseWheelEvent0.getX());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(64, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertEquals(2L, mouseWheelEvent0.getWhen());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(1, mouseWheelEvent0.getID());
      assertEquals(2, mouseWheelEvent0.getModifiers());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(130, mouseWheelEvent0.getScrollType());
      assertEquals(0, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(4743, mouseWheelEvent0.getScrollAmount());
      assertFalse(feature0.isReadOnly());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, range0.getCount());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(evidenceViewer0.isFocusCycleRoot());
      assertFalse(evidenceViewer0.isFocusTraversalPolicySet());
      assertFalse(evidenceViewer0.isFocusTraversalPolicyProvider());
      assertFalse(evidenceViewer0.getIgnoreRepaint());
      assertTrue(evidenceViewer0.getFocusTraversalKeysEnabled());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      evidenceViewer_MouseClickListener0.mouseReleased(mouseWheelEvent0);
      assertEquals(0, mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals((-1169), mouseWheelEvent0.getY());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(8944, mouseWheelEvent0.getX());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(64, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertEquals(2L, mouseWheelEvent0.getWhen());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(1, mouseWheelEvent0.getID());
      assertEquals(2, mouseWheelEvent0.getModifiers());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(130, mouseWheelEvent0.getScrollType());
      assertEquals(0, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(4743, mouseWheelEvent0.getScrollAmount());
      assertFalse(feature0.isReadOnly());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, range0.getCount());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(evidenceViewer0.isFocusCycleRoot());
      assertFalse(evidenceViewer0.isFocusTraversalPolicySet());
      assertFalse(evidenceViewer0.isFocusTraversalPolicyProvider());
      assertFalse(evidenceViewer0.getIgnoreRepaint());
      assertTrue(evidenceViewer0.getFocusTraversalKeysEnabled());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      evidenceViewer_MouseClickListener0.mousePressed(mouseWheelEvent0);
      assertEquals(0, mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals((-1169), mouseWheelEvent0.getY());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(8944, mouseWheelEvent0.getX());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(64, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertEquals(2L, mouseWheelEvent0.getWhen());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(1, mouseWheelEvent0.getID());
      assertEquals(2, mouseWheelEvent0.getModifiers());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(130, mouseWheelEvent0.getScrollType());
      assertEquals(0, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(4743, mouseWheelEvent0.getScrollAmount());
      assertFalse(feature0.isReadOnly());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(0, rawStreamSequence0.getACount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(0, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, range0.getCount());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(evidenceViewer0.isFocusCycleRoot());
      assertFalse(evidenceViewer0.isFocusTraversalPolicySet());
      assertFalse(evidenceViewer0.isFocusTraversalPolicyProvider());
      assertFalse(evidenceViewer0.getIgnoreRepaint());
      assertTrue(evidenceViewer0.getFocusTraversalKeysEnabled());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      // Undeclared exception!
      try { 
        feature0.duplicate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature(emblStreamFeature0);
      Feature feature0 = new Feature(genbankStreamFeature0);
      Entry entry0 = Entry.newEntry((Bases) null);
      Feature feature1 = feature0.copyTo(entry0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Range range0 = new Range((-989));
      FeatureVector featureVector0 = simpleEntryGroup0.getFeaturesInRange(range0);
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature1, featureVector0, jDesktopPane0);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MultiMenuItemUI multiMenuItemUI0 = new MultiMenuItemUI();
      Dimension dimension0 = evidenceViewer0.getSize();
      evidenceViewer0.setSize(dimension0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDesktopPane0, 0, (-2330L), 35, 0, (-989), 0, (-2095), 0, true, (-989), (-592), (-592), 1.0);
      evidenceViewer_MouseClickListener0.mouseClicked(mouseWheelEvent0);
      emblStreamFeature0.copy();
      MouseWheelEvent mouseWheelEvent1 = new MouseWheelEvent(jDesktopPane0, (-989), (-2330L), (-989), (-989), (-989), (-989), (-989), 35, false, 1363, (-989), 0, 0.0);
      evidenceViewer_MouseClickListener0.mouseEntered(mouseWheelEvent1);
      evidenceViewer_MouseClickListener0.mouseClicked(mouseWheelEvent1);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDesktopPane jDesktopPane0 = mock(JDesktopPane.class, new ViolatedAssumptionAnswer());
      MouseEvent mouseEvent0 = mock(MouseEvent.class, new ViolatedAssumptionAnswer());
      MouseEvent mouseEvent1 = mock(MouseEvent.class, new ViolatedAssumptionAnswer());
  }
}
