/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 13:57:38 GMT 2018
 */

package uk.ac.sanger.artemis.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Checkbox;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Window;
import java.awt.event.KeyListener;
import javax.swing.DebugGraphics;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JLayer;
import javax.swing.JList;
import javax.swing.JRootPane;
import javax.swing.JSplitPane;
import javax.swing.JToolTip;
import javax.swing.JTree;
import javax.swing.plaf.ComponentUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.editor.MultiLineToolTipUI;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiLineToolTipUI_ESTest extends MultiLineToolTipUI_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      MultiLineToolTipUI.initialize();
      JToolTip jToolTip0 = new JToolTip();
      Dimension dimension0 = multiLineToolTipUI0.getMinimumSize(jToolTip0);
      assertEquals(6, dimension0.width);
      assertEquals(21, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiLineToolTipUI.setDisplayAcceleratorKey(true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JSplitPane jSplitPane0 = new JSplitPane();
      multiLineToolTipUI0.installUI(jSplitPane0);
      assertFalse(jSplitPane0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.add(keyListener0, keyListener0);
      AWTEventMulticaster.remove(keyListener1, keyListener1);
      jToolTip0.removeKeyListener((KeyListener) null);
      Dimension dimension0 = multiLineToolTipUI0.getPreferredSize(jToolTip0);
      assertEquals(21, dimension0.height);
      assertEquals(6, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Dimension dimension0 = multiLineToolTipUI0.getPreferredSize(jToolTip0);
      assertEquals(6, dimension0.width);
      assertEquals(21, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.add(keyListener0, keyListener0);
      AWTEventMulticaster.remove(keyListener1, keyListener1);
      jToolTip0.removeKeyListener((KeyListener) null);
      Dimension dimension0 = multiLineToolTipUI0.getMaximumSize(jToolTip0);
      assertEquals(21, dimension0.height);
      assertEquals(6, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Dimension dimension0 = multiLineToolTipUI0.getMaximumSize(jToolTip0);
      assertEquals(21, dimension0.height);
      assertEquals(6, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.uninstallUI((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.LookAndFeel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      DebugGraphics debugGraphics0 = new DebugGraphics();
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.paint(debugGraphics0, (JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JColorChooser jColorChooser0 = new JColorChooser();
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.paint((Graphics) null, jColorChooser0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JColorChooser cannot be cast to javax.swing.JToolTip
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.installUI((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.LookAndFeel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JLayer<Checkbox> jLayer0 = new JLayer<Checkbox>();
      ComponentUI componentUI0 = MultiLineToolTipUI.createUI(jLayer0);
      // Undeclared exception!
      try { 
        componentUI0.installUI(jLayer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // JLayer.setBorder() not supported
         //
         verifyException("javax.swing.JLayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getPreferredSize((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      Object[] objectArray0 = new Object[5];
      JTree jTree0 = new JTree(objectArray0);
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getPreferredSize(jTree0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JTree cannot be cast to javax.swing.JToolTip
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getMinimumSize((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JList<Window> jList0 = new JList<Window>();
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getMinimumSize(jList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JList cannot be cast to javax.swing.JToolTip
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getMaximumSize((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JRootPane jRootPane0 = new JRootPane();
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getMaximumSize(jRootPane0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JRootPane cannot be cast to javax.swing.JToolTip
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getAcceleratorString((JToolTip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      String string0 = multiLineToolTipUI0.getAcceleratorString(jToolTip0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      JToolTip jToolTip1 = jToolTip0.createToolTip();
      String string0 = multiLineToolTipUI0.getAcceleratorString(jToolTip1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      multiLineToolTipUI0.paint((Graphics) null, jToolTip0);
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiLineToolTipUI.displayAccelerator = true;
      JToolTip jToolTip0 = new JToolTip();
      Dimension dimension0 = jToolTip0.getPreferredSize();
      assertEquals(6, dimension0.width);
      assertEquals(21, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      multiLineToolTipUI0.uninstallUI(jToolTip0);
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiLineToolTipUI.setDisplayAcceleratorKey(false);
  }
}
