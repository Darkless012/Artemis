/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 12:35:10 GMT 2018
 */

package uk.ac.sanger.artemis.components.genebuilder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Graphics2D;
import java.awt.SystemColor;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMImplementation;
import uk.ac.sanger.artemis.components.genebuilder.MapPanel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapPanel_ESTest extends MapPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MapPanel mapPanel0 = new MapPanel();
      int int0 = mapPanel0.getFontHeight();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      // Undeclared exception!
      try { 
        MapPanel.drawFeature((Graphics2D) null, (-664), (-664), (-664), color0, color0, 1085.24F, false, 0.0F, (-664));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.MapPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("", "-{a", "@C#czW>oqx");
      GenericDOMImplementation genericDOMImplementation0 = new GenericDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, genericDOMImplementation0);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(genericDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
      sVGGraphics2D0.setComposite((Composite) null);
      // Undeclared exception!
      try { 
        MapPanel.drawFeature(sVGGraphics2D0, 0, 3187, 0, (Color) null, (Color) null, (-1478.473F), false, (-543.09F), (-1154));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.svggen.SVGCustomComposite", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("^@ErYw'=[<&=zkF01K~", "^@ErYw'=[<&=zkF01K~", (String) null);
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, (DOMImplementation) null);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(genericDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
      SystemColor systemColor0 = SystemColor.menuText;
      // Undeclared exception!
      try { 
        MapPanel.drawFeature(sVGGraphics2D0, 75, (short)8, (short)4, systemColor0, (Color) null, 0.0F, true, (-3662), (short)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative width
         //
         verifyException("java.awt.BasicStroke", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Color color0 = Color.RED;
      // Undeclared exception!
      try { 
        MapPanel.drawFeature((Graphics2D) null, 136, (-1), 0, color0, (-1), true, (-1.0F), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.MapPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GenericDocumentType genericDocumentType0 = new GenericDocumentType(">DLIgp671", "total bases ", "total bases ");
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(genericDocument0);
      MapPanel.drawFeature(sVGGraphics2D0, 13, 0, (short)2, (Color) null, (Color) null, 1.0F, false, 2690.6445F, (short)32);
      assertEquals(3, SVGGraphics2D.DEFAULT_MAX_GC_OVERRIDES);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("] in logger [", "", "");
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(genericDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
      SystemColor systemColor0 = SystemColor.menu;
      // Undeclared exception!
      try { 
        MapPanel.drawFeature(sVGGraphics2D0, (-610), 0, (-1603), systemColor0, 761.83F, true, (-1603), (short)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative width
         //
         verifyException("java.awt.BasicStroke", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MapPanel mapPanel0 = new MapPanel();
      int int0 = mapPanel0.getViewerBorder();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      GenericDocumentType genericDocumentType0 = new GenericDocumentType(">DLIgp671", "total bases ", "total bases ");
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(genericDocument0);
      MapPanel.drawFeature(sVGGraphics2D0, (-1557), 3, 75, (Color) null, 675, true, 3229.98F, (short)8);
      assertEquals(3, SVGGraphics2D.DEFAULT_MAX_GC_OVERRIDES);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MapPanel mapPanel0 = new MapPanel();
      int int0 = mapPanel0.getTranscriptSize();
      assertEquals(75, int0);
  }
}
