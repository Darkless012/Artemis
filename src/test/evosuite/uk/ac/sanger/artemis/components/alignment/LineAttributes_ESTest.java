/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 19 21:49:31 GMT 2018
 */

package uk.ac.sanger.artemis.components.alignment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.util.List;
import javax.swing.JPanel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.alignment.LineAttributes;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LineAttributes_ESTest extends LineAttributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      LineAttributes lineAttributes0 = new LineAttributes(color0);
      LineAttributes.init(0);
      Color color1 = mock(Color.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(color1).toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "Configure Lines";
      stringArray0[2] = "a!%;o_I";
      stringArray0[3] = "uk.ac.sanger.artemis.components.alignment.LineAttributes$1";
      stringArray0[4] = "V$)AT)%V[LU";
      stringArray0[5] = "";
      LineAttributes.PLOT_TYPES = stringArray0;
      LineAttributes lineAttributes1 = new LineAttributes(color1);
      BasicStroke basicStroke0 = lineAttributes1.getStroke();
      lineAttributes0.setStroke(basicStroke0);
      Color color2 = mock(Color.class, new ViolatedAssumptionAnswer());
      lineAttributes0.setLineColour(color2);
      BasicStroke basicStroke1 = lineAttributes0.getStroke();
      lineAttributes0.setStroke(basicStroke1);
      Color color3 = mock(Color.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(color3).toString();
      lineAttributes0.setLineColour(color3);
      lineAttributes1.getPlotType();
      lineAttributes0.getLineColour();
      lineAttributes1.getPlotType();
      lineAttributes1.getLineColour();
      lineAttributes1.getStroke();
      lineAttributes0.getLineColour();
      lineAttributes0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      LineAttributes lineAttributes0 = new LineAttributes(color0);
      BasicStroke basicStroke0 = lineAttributes0.getStroke();
      Color color1 = mock(Color.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(color1).toString();
      lineAttributes0.setLineColour(color1);
      LineAttributes.init(4043);
      lineAttributes0.setStroke(basicStroke0);
      lineAttributes0.setStroke(basicStroke0);
      lineAttributes0.getPlotType();
      LineAttributes.init(0);
      LineAttributes.getStrokes();
      lineAttributes0.setStroke(basicStroke0);
      lineAttributes0.setStroke(basicStroke0);
      Color color2 = lineAttributes0.getLineColour();
      LineAttributes.getStrokes();
      LineAttributes.getStrokes();
      LineAttributes.getStrokes();
      lineAttributes0.setLineColour(color2);
      lineAttributes0.getStroke();
      lineAttributes0.getPlotType();
      lineAttributes0.setLineColour(color2);
      BasicStroke basicStroke1 = lineAttributes0.getStroke();
      lineAttributes0.setLineColour(color2);
      lineAttributes0.getLineColour();
      lineAttributes0.getLineColour();
      LineAttributes.init(4043);
      lineAttributes0.setStroke(basicStroke1);
      LineAttributes.init(4043);
      LineAttributes.getStrokes();
      lineAttributes0.getLineColour();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineAttributes lineAttributes0 = new LineAttributes((Color) null);
      LineAttributes.init(279);
      lineAttributes0.setStroke((BasicStroke) null);
      LineAttributes.init(279);
      LineAttributes.PLOT_TYPES = lineAttributes0.PLOT_TYPES;
      lineAttributes0.getStroke();
      lineAttributes0.getLineColour();
      lineAttributes0.getPlotType();
      // Undeclared exception!
      try { 
        LineAttributes.init((-816));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.LineAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineAttributes.init(1);
      LineAttributes lineAttributes0 = new LineAttributes((Color) null);
      lineAttributes0.setLineColour((Color) null);
      lineAttributes0.setLineColour((Color) null);
      LineAttributes.PLOT_TYPES = lineAttributes0.PLOT_TYPES;
      LineAttributes.PLOT_TYPES = lineAttributes0.PLOT_TYPES;
      lineAttributes0.setLineColour((Color) null);
      LineAttributes.getStrokes();
      LineAttributes.getStrokes();
      lineAttributes0.getPlotType();
      lineAttributes0.setLineColour((Color) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      LineAttributes lineAttributes0 = new LineAttributes(color0);
      LineAttributes.PLOT_TYPES = lineAttributes0.PLOT_TYPES;
      Color color1 = mock(Color.class, new ViolatedAssumptionAnswer());
      Color color2 = mock(Color.class, new ViolatedAssumptionAnswer());
      LineAttributes lineAttributes1 = new LineAttributes(color2);
      BasicStroke basicStroke0 = lineAttributes1.getStroke();
      lineAttributes0.setStroke(basicStroke0);
      lineAttributes0.setLineColour(color1);
      LineAttributes[] lineAttributesArray0 = LineAttributes.init(75);
      lineAttributes1.setStroke(basicStroke0);
      List<String> list0 = null;
      JPanel jPanel0 = mock(JPanel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        LineAttributes.configurePlots((List<String>) null, lineAttributesArray0, jPanel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.LineAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(color0).toString();
      LineAttributes lineAttributes0 = new LineAttributes(color0);
      Color color1 = lineAttributes0.getLineColour();
      List<String> list0 = null;
      LineAttributes[] lineAttributesArray0 = new LineAttributes[8];
      lineAttributesArray0[0] = lineAttributes0;
      LineAttributes lineAttributes1 = new LineAttributes(color1);
      LineAttributes.PLOT_TYPES = null;
      lineAttributesArray0[1] = lineAttributes1;
      lineAttributesArray0[2] = lineAttributes0;
      lineAttributesArray0[3] = lineAttributes0;
      lineAttributesArray0[4] = lineAttributes0;
      // Undeclared exception!
      try { 
        LineAttributes.init(1481);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.LineAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      LineAttributes lineAttributes0 = new LineAttributes(color0);
      // Undeclared exception!
      try { 
        LineAttributes.init((-192));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.LineAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      LineAttributes lineAttributes0 = new LineAttributes(color0);
      LineAttributes[] lineAttributesArray0 = new LineAttributes[3];
      lineAttributesArray0[0] = lineAttributes0;
      lineAttributesArray0[1] = lineAttributes0;
      lineAttributesArray0[2] = lineAttributes0;
      JPanel jPanel0 = mock(JPanel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        LineAttributes.configurePlots((List<String>) null, lineAttributesArray0, jPanel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.LineAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineAttributes[] lineAttributesArray0 = LineAttributes.init(1);
      LineAttributes.init(1);
      LineAttributes.getStrokes();
      JPanel jPanel0 = mock(JPanel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        LineAttributes.configurePlots((List<String>) null, lineAttributesArray0, jPanel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.LineAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      LineAttributes lineAttributes0 = new LineAttributes(color0);
      lineAttributes0.setLineColour((Color) null);
      // Undeclared exception!
      try { 
        LineAttributes.init((-461));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.LineAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(color0).toString();
      LineAttributes lineAttributes0 = new LineAttributes(color0);
      BasicStroke basicStroke0 = lineAttributes0.getStroke();
      lineAttributes0.setStroke(basicStroke0);
      lineAttributes0.setStroke(basicStroke0);
      BasicStroke basicStroke1 = lineAttributes0.getStroke();
      lineAttributes0.setStroke(basicStroke1);
      lineAttributes0.getStroke();
      Color color1 = lineAttributes0.getLineColour();
      lineAttributes0.setStroke(basicStroke0);
      LineAttributes.init(0);
      LineAttributes.getStrokes();
      LineAttributes.init(1168);
      lineAttributes0.setLineColour(color1);
      lineAttributes0.getPlotType();
      LineAttributes.init(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      LineAttributes lineAttributes0 = new LineAttributes(color0);
      BasicStroke basicStroke0 = lineAttributes0.getStroke();
      lineAttributes0.setStroke(basicStroke0);
      LineAttributes.init(1419);
      lineAttributes0.getPlotType();
      LineAttributes.getStrokes();
      LineAttributes.getStrokes();
      Color color1 = mock(Color.class, new ViolatedAssumptionAnswer());
      lineAttributes0.setLineColour(color1);
      assertEquals("Open", lineAttributes0.getPlotType());
  }
}
