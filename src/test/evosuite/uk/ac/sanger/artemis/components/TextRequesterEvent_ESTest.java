/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 19 19:46:56 GMT 2018
 */

package uk.ac.sanger.artemis.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.TextRequester;
import uk.ac.sanger.artemis.components.TextRequesterEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TextRequesterEvent_ESTest extends TextRequesterEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TextRequester textRequester0 = mock(TextRequester.class, new ViolatedAssumptionAnswer());
      TextRequesterEvent textRequesterEvent0 = new TextRequesterEvent(textRequester0, "South", 2);
      int int0 = textRequesterEvent0.getType();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TextRequester textRequester0 = mock(TextRequester.class, new ViolatedAssumptionAnswer());
      TextRequesterEvent textRequesterEvent0 = new TextRequesterEvent(textRequester0, (String) null, (-1464));
      int int0 = textRequesterEvent0.getType();
      assertEquals((-1464), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TextRequester textRequester0 = mock(TextRequester.class, new ViolatedAssumptionAnswer());
      TextRequesterEvent textRequesterEvent0 = new TextRequesterEvent(textRequester0, (String) null, (-1464));
      textRequesterEvent0.getRequesterText();
      assertEquals((-1464), textRequesterEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TextRequester textRequester0 = mock(TextRequester.class, new ViolatedAssumptionAnswer());
      TextRequesterEvent textRequesterEvent0 = new TextRequesterEvent(textRequester0, "South", 2);
      textRequesterEvent0.getRequesterText();
      assertEquals(2, textRequesterEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TextRequesterEvent textRequesterEvent0 = null;
      try {
        textRequesterEvent0 = new TextRequesterEvent((TextRequester) null, "", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TextRequester textRequester0 = mock(TextRequester.class, new ViolatedAssumptionAnswer());
      TextRequesterEvent textRequesterEvent0 = new TextRequesterEvent(textRequester0, "", 0);
      int int0 = textRequesterEvent0.getType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TextRequester textRequester0 = mock(TextRequester.class, new ViolatedAssumptionAnswer());
      TextRequesterEvent textRequesterEvent0 = new TextRequesterEvent(textRequester0, "", 0);
      textRequesterEvent0.getRequesterText();
      assertEquals(0, textRequesterEvent0.getType());
  }
}
