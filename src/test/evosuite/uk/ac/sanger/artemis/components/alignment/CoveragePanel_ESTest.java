/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 11:46:48 GMT 2018
 */

package uk.ac.sanger.artemis.components.alignment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import htsjdk.samtools.SAMFileHeader;
import htsjdk.samtools.SAMRecord;
import htsjdk.samtools.ValidationStringency;
import java.awt.AWTEventMulticaster;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.image.BufferedImage;
import java.beans.VetoableChangeListener;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ActionMap;
import javax.swing.DebugGraphics;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JSplitPane;
import javax.swing.JToolTip;
import javax.swing.JWindow;
import javax.swing.plaf.basic.BasicPopupMenuSeparatorUI;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.text.DefaultCaret;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.svggen.CachedImageHandlerBase64Encoder;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.xalan.templates.DecimalFormatProperties;
import org.apache.xalan.templates.ElemCallTemplate;
import org.apache.xalan.templates.ElemIf;
import org.apache.xmlgraphics.java2d.GraphicsConfigurationWithoutTransparency;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.components.EntryEdit;
import uk.ac.sanger.artemis.components.alignment.BamView;
import uk.ac.sanger.artemis.components.alignment.CoveragePanel;
import uk.ac.sanger.artemis.components.alignment.LineAttributes;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class CoveragePanel_ESTest extends CoveragePanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      
      int int0 = coveragePanel0.getX();
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertEquals(0, int0);
      
      GraphicsConfigurationWithoutTransparency graphicsConfigurationWithoutTransparency0 = new GraphicsConfigurationWithoutTransparency();
      assertNotNull(graphicsConfigurationWithoutTransparency0);
      
      coveragePanel0.repaint(0, 0, 0, 0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      
      BufferedImage bufferedImage0 = graphicsConfigurationWithoutTransparency0.createCompatibleImage(4163, 4163);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(4163, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(4163, bufferedImage0.getHeight());
      assertEquals(4163, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(4163, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertNotNull(graphics2D0);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(4163, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(4163, bufferedImage0.getHeight());
      assertEquals(4163, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(4163, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      
      Graphics2D graphics2D1 = (Graphics2D)bufferedImage0.getGraphics();
      assertFalse(graphics2D1.equals(graphics2D0));
      assertNotNull(graphics2D1);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(4163, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(4163, bufferedImage0.getHeight());
      assertEquals(4163, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(4163, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      
      coveragePanel0.paintComponent(graphics2D1);
      assertFalse(graphics2D1.equals(graphics2D0));
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(4163, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(4163, bufferedImage0.getHeight());
      assertEquals(4163, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(4163, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      
      List<String> list0 = coveragePanel0.getSelected();
      assertNotNull(list0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = coveragePanel0.getToolTipText(2119);
      assertNull(string0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      coveragePanel0.setPlotHeatMap(true);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      
      coveragePanel0.paintComponent(graphics2D1);
      assertFalse(graphics2D1.equals(graphics2D0));
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(4163, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(4163, bufferedImage0.getHeight());
      assertEquals(4163, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(4163, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      
      String string1 = coveragePanel0.getToolTipText(259);
      assertNull(string1);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      
      List<String> list1 = coveragePanel0.getSelected();
      assertNotNull(list1);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertSame(list1, list0);
      
      String string2 = coveragePanel0.getToolTipText(917);
      assertNull(string2);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      
      coveragePanel0.setEnabled(false);
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      
      boolean boolean0 = coveragePanel0.isFocusOwner();
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(boolean0);
      
      boolean boolean1 = coveragePanel0.hasSelectedBams();
      assertTrue(boolean1 == boolean0);
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(boolean1);
      
      JSplitPane jSplitPane0 = new JSplitPane();
      assertNotNull(jSplitPane0);
      assertTrue(jSplitPane0.getFocusTraversalKeysEnabled());
      assertFalse(jSplitPane0.isFocusTraversalPolicyProvider());
      assertFalse(jSplitPane0.isFocusCycleRoot());
      assertFalse(jSplitPane0.isFocusTraversalPolicySet());
      assertFalse(jSplitPane0.getIgnoreRepaint());
      
      // Undeclared exception!
      try { 
        coveragePanel0.createMenus(jSplitPane0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot add to layout: unknown constraint: null
         //
         verifyException("javax.swing.plaf.basic.BasicSplitPaneUI$BasicHorizontalLayoutManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      coveragePanel0.max = 0;
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      coveragePanel0.setPlotHeatMap(false);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        coveragePanel0.draw((Graphics2D) null, 3381, 300, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = CoveragePanel.isRedraw();
      assertFalse(boolean0);
      
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      
      coveragePanel0.setPlotByStrand(false);
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      
      boolean boolean1 = CoveragePanel.isRedraw();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = coveragePanel0.isDoubleBuffered();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        coveragePanel0.init((BamView) null, 2.0F, (-3261), 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      coveragePanel0.setPlotHeatMap(true);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      int int0 = 0;
      LineAttributes[] lineAttributesArray0 = CoveragePanel.getLineAttributes(0);
      assertNotNull(lineAttributesArray0);
      assertEquals(0, lineAttributesArray0.length);
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.remove(keyListener0, keyListener0);
      assertNull(keyListener1);
      
      KeyListener keyListener2 = AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      assertNull(keyListener2);
      
      boolean boolean0 = coveragePanel0.isValidateRoot();
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(boolean0);
      
      coveragePanel0.addKeyListener((KeyListener) null);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      coveragePanel0.setPlotByStrand(true);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      LineAttributes[] lineAttributesArray1 = CoveragePanel.getLineAttributes(0);
      assertNotNull(lineAttributesArray1);
      assertSame(lineAttributesArray1, lineAttributesArray0);
      assertEquals(0, lineAttributesArray1.length);
      
      boolean boolean1 = coveragePanel0.isPaintingTile();
      assertTrue(boolean1 == boolean0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(boolean1);
      
      float float0 = coveragePanel0.getMaxCoverage();
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals(Float.NaN, float0, 0.01F);
      
      List<String> list0 = coveragePanel0.getSelected();
      assertNotNull(list0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      float float1 = coveragePanel0.getMaxCoverage();
      assertEquals(float1, float0, 0.01F);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals(Float.NaN, float1, 0.01F);
      
      boolean boolean2 = coveragePanel0.isPlotHeatMap();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertTrue(boolean2);
      
      String string0 = "f";
      // Undeclared exception!
      try { 
        coveragePanel0.addRecord((SAMRecord) null, 0, "f", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = CoveragePanel.isRedraw();
      assertFalse(boolean0);
      
      CoveragePanel coveragePanel0 = new CoveragePanel((BamView) null);
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      coveragePanel0.autoWinSize = false;
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      coveragePanel0.init((BamView) null, 2.0F, 612, 0);
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      float float0 = coveragePanel0.getMaxCoverage();
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineAttributes[] lineAttributesArray0 = CoveragePanel.getLineAttributes(155);
      assertNotNull(lineAttributesArray0);
      assertEquals(155, lineAttributesArray0.length);
      
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      coveragePanel0.singleClick(true, 155);
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      LineAttributes[] lineAttributesArray1 = CoveragePanel.getLineAttributes(155);
      assertNotNull(lineAttributesArray1);
      assertSame(lineAttributesArray1, lineAttributesArray0);
      assertEquals(155, lineAttributesArray1.length);
      
      String string0 = coveragePanel0.getToolTipText(155);
      assertNull(string0);
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      assertNotNull(componentOrientation0);
      assertFalse(componentOrientation0.isLeftToRight());
      assertTrue(componentOrientation0.isHorizontal());
      
      coveragePanel0.applyComponentOrientation(componentOrientation0);
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(componentOrientation0.isLeftToRight());
      assertTrue(componentOrientation0.isHorizontal());
      
      String string1 = coveragePanel0.getToolTipText(0);
      assertNull(string1);
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = coveragePanel0.isPlotHeatMap();
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(boolean0);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertFalse(simpleEntryGroup0.hasUnsavedChanges());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      
      EntryEdit entryEdit0 = null;
      try {
        entryEdit0 = new EntryEdit(simpleEntryGroup0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = CoveragePanel.isRedraw();
      assertFalse(boolean0);
      
      CoveragePanel coveragePanel0 = new CoveragePanel((BamView) null);
      assertNotNull(coveragePanel0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      
      coveragePanel0.autoWinSize = false;
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      
      coveragePanel0.init((BamView) null, 2.0F, 612, 0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      
      SAMFileHeader sAMFileHeader0 = new SAMFileHeader();
      assertNotNull(sAMFileHeader0);
      assertNull(sAMFileHeader0.getCreator());
      assertEquals("1.5", sAMFileHeader0.getVersion());
      assertNull(sAMFileHeader0.getTextHeader());
      
      SAMFileHeader sAMFileHeader1 = sAMFileHeader0.clone();
      assertTrue(sAMFileHeader1.equals((Object)sAMFileHeader0));
      assertNotNull(sAMFileHeader1);
      assertNull(sAMFileHeader0.getCreator());
      assertEquals("1.5", sAMFileHeader0.getVersion());
      assertNull(sAMFileHeader0.getTextHeader());
      assertNull(sAMFileHeader1.getCreator());
      assertEquals("1.5", sAMFileHeader1.getVersion());
      assertEquals("", sAMFileHeader1.getTextHeader());
      assertNotSame(sAMFileHeader0, sAMFileHeader1);
      assertNotSame(sAMFileHeader1, sAMFileHeader0);
      
      SAMRecord sAMRecord0 = new SAMRecord(sAMFileHeader1);
      assertTrue(sAMFileHeader0.equals((Object)sAMFileHeader1));
      assertTrue(sAMFileHeader1.equals((Object)sAMFileHeader0));
      assertNotNull(sAMRecord0);
      assertNull(sAMFileHeader0.getCreator());
      assertEquals("1.5", sAMFileHeader0.getVersion());
      assertNull(sAMFileHeader0.getTextHeader());
      assertNull(sAMFileHeader1.getCreator());
      assertEquals("1.5", sAMFileHeader1.getVersion());
      assertEquals("", sAMFileHeader1.getTextHeader());
      assertFalse(sAMRecord0.isSecondaryOrSupplementary());
      assertEquals("*", sAMRecord0.getReferenceName());
      assertFalse(sAMRecord0.getDuplicateReadFlag());
      assertNull(sAMRecord0.getReadName());
      assertFalse(sAMRecord0.getSupplementaryAlignmentFlag());
      assertEquals(0, sAMRecord0.getMateAlignmentStart());
      assertFalse(sAMRecord0.getReadNegativeStrandFlag());
      assertFalse(sAMRecord0.isSecondaryAlignment());
      assertEquals(ValidationStringency.SILENT, sAMRecord0.getValidationStringency());
      assertEquals("*", sAMRecord0.getMateReferenceName());
      assertFalse(sAMRecord0.getReadPairedFlag());
      assertFalse(sAMRecord0.getReadUnmappedFlag());
      assertEquals(0, sAMRecord0.getAlignmentStart());
      assertEquals(0, sAMRecord0.getStart());
      assertFalse(sAMRecord0.getReadFailsVendorQualityCheckFlag());
      assertEquals(0, sAMRecord0.getMappingQuality());
      assertFalse(sAMRecord0.getNotPrimaryAlignmentFlag());
      assertEquals(0, sAMRecord0.getReadLength());
      assertEquals("*", sAMRecord0.getContig());
      assertEquals(0, sAMRecord0.getInferredInsertSize());
      assertEquals((-1), sAMRecord0.getAttributesBinarySize());
      assertEquals(0, sAMRecord0.getFlags());
      assertEquals((-1), SAMRecord.NO_ALIGNMENT_REFERENCE_INDEX);
      assertEquals(255, SAMRecord.UNKNOWN_MAPPING_QUALITY);
      assertEquals(0, SAMRecord.NO_ALIGNMENT_START);
      assertEquals(536870912, SAMRecord.MAX_INSERT_SIZE);
      assertEquals(0, SAMRecord.NO_MAPPING_QUALITY);
      
      // Undeclared exception!
      try { 
        coveragePanel0.addRecord(sAMRecord0, (-851), "8y~h>i?E4mS", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertNotNull(defaultCaret0);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      
      MouseListener mouseListener0 = AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      assertNull(mouseListener0);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      
      MouseListener mouseListener1 = AWTEventMulticaster.add((MouseListener) null, (MouseListener) null);
      assertNull(mouseListener1);
      
      coveragePanel0.removeMouseListener((MouseListener) null);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      
      coveragePanel0.singleClick(false, (-3768));
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      
      coveragePanel0.singleClick(false, 240);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      
      String string0 = coveragePanel0.getToolTipText((-850));
      assertNull(string0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      
      boolean boolean0 = coveragePanel0.isPlotHeatMap();
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(boolean0);
      
      coveragePanel0.setIgnoreRepaint(false);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener2 = AWTEventMulticaster.remove(keyListener0, keyListener1);
      assertFalse(keyListener2.equals((Object)keyListener1));
      assertNotNull(keyListener2);
      assertNotSame(keyListener2, keyListener1);
      assertSame(keyListener2, keyListener0);
      
      KeyListener keyListener3 = AWTEventMulticaster.add(keyListener2, keyListener2);
      assertFalse(keyListener2.equals((Object)keyListener1));
      assertNotNull(keyListener3);
      assertNotSame(keyListener2, keyListener1);
      assertSame(keyListener2, keyListener0);
      
      coveragePanel0.addKeyListener(keyListener3);
      assertFalse(keyListener2.equals((Object)keyListener1));
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertNotSame(keyListener2, keyListener1);
      assertSame(keyListener2, keyListener0);
      
      CoveragePanel.HeatMapLn coveragePanel_HeatMapLn0 = coveragePanel0.new HeatMapLn((-3768), 0, "");
      assertNotNull(coveragePanel_HeatMapLn0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      
      String string1 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string1);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertEquals("", string1);
      
      String string2 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string2);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertEquals("", string2);
      
      String string3 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string3);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertEquals("", string3);
      
      LineAttributes[] lineAttributesArray0 = CoveragePanel.getLineAttributes(2574);
      assertNotNull(lineAttributesArray0);
      assertEquals(2574, lineAttributesArray0.length);
      
      coveragePanel0.setPlotHeatMap(true);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      
      boolean boolean1 = CoveragePanel.isRedraw();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float float0 = coveragePanel0.getMaxCoverage();
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertEquals(Float.NaN, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        coveragePanel0.singleClick(true, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = CoveragePanel.isRedraw();
      assertFalse(boolean0);
      
      // Undeclared exception!
      CoveragePanel.getLineAttributes(134217728);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = CoveragePanel.isRedraw();
      assertFalse(boolean0);
      
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      boolean boolean1 = false;
      coveragePanel0.setPlotHeatMap(false);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        coveragePanel0.createMenus((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      coveragePanel0.setSize(3243, 3243);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      int int0 = coveragePanel0.getBaseline(3243, 3243);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals((-1), int0);
      
      float float0 = coveragePanel0.getAlignmentY();
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5F, float0, 0.01F);
      
      boolean boolean0 = coveragePanel0.isPaintingForPrint();
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(boolean0);
      
      coveragePanel0.repaint();
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      coveragePanel0.setSize(2139095040, 3243);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      VetoableChangeListener[] vetoableChangeListenerArray0 = coveragePanel0.getVetoableChangeListeners();
      assertNotNull(vetoableChangeListenerArray0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals(0, vetoableChangeListenerArray0.length);
      
      int int1 = 288;
      LineAttributes[] lineAttributesArray0 = CoveragePanel.getLineAttributes(288);
      assertNotNull(lineAttributesArray0);
      assertEquals(288, lineAttributesArray0.length);
      
      boolean boolean1 = coveragePanel0.hasSelectedBams();
      assertTrue(boolean1 == boolean0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(boolean1);
      
      float float1 = coveragePanel0.getMaxCoverage();
      assertNotEquals(float1, float0, 0.01F);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals(Float.NaN, float1, 0.01F);
      
      LineAttributes[] lineAttributesArray1 = CoveragePanel.getLineAttributes((-1));
      assertNotNull(lineAttributesArray1);
      assertSame(lineAttributesArray1, lineAttributesArray0);
      assertEquals(288, lineAttributesArray1.length);
      
      CoveragePanel.HeatMapLn coveragePanel_HeatMapLn0 = coveragePanel0.new HeatMapLn(0, 1070, "Show combined plot");
      assertNotNull(coveragePanel_HeatMapLn0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      String string0 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals("Show combined plot", string0);
      
      String string1 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string1);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals("Show combined plot", string1);
      
      String string2 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string2);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals("Show combined plot", string2);
      
      String string3 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string3);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals("Show combined plot", string3);
      
      // Undeclared exception!
      CoveragePanel.getLineAttributes(40960);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoveragePanel.getLineAttributes((-2827));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.LineAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      
      CoveragePanel coveragePanel1 = new CoveragePanel();
      assertFalse(coveragePanel1.equals((Object)coveragePanel0));
      assertNotNull(coveragePanel1);
      assertTrue(coveragePanel1.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel1.isFocusCycleRoot());
      assertFalse(coveragePanel1.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel1.isFocusTraversalPolicySet());
      assertFalse(coveragePanel1.getIgnoreRepaint());
      
      JToolTip jToolTip0 = coveragePanel1.createToolTip();
      assertFalse(coveragePanel1.equals((Object)coveragePanel0));
      assertNotNull(jToolTip0);
      assertTrue(coveragePanel1.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel1.isFocusCycleRoot());
      assertFalse(coveragePanel1.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel1.isFocusTraversalPolicySet());
      assertFalse(coveragePanel1.getIgnoreRepaint());
      assertFalse(jToolTip0.isFocusTraversalPolicySet());
      assertTrue(jToolTip0.getFocusTraversalKeysEnabled());
      assertFalse(jToolTip0.getIgnoreRepaint());
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
      assertFalse(jToolTip0.isFocusCycleRoot());
      assertNotSame(coveragePanel1, coveragePanel0);
      
      KeyListener[] keyListenerArray0 = jToolTip0.getKeyListeners();
      assertFalse(coveragePanel1.equals((Object)coveragePanel0));
      assertNotNull(keyListenerArray0);
      assertTrue(coveragePanel1.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel1.isFocusCycleRoot());
      assertFalse(coveragePanel1.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel1.isFocusTraversalPolicySet());
      assertFalse(coveragePanel1.getIgnoreRepaint());
      assertFalse(jToolTip0.isFocusTraversalPolicySet());
      assertTrue(jToolTip0.getFocusTraversalKeysEnabled());
      assertFalse(jToolTip0.getIgnoreRepaint());
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
      assertFalse(jToolTip0.isFocusCycleRoot());
      assertNotSame(coveragePanel1, coveragePanel0);
      assertEquals(0, keyListenerArray0.length);
      
      coveragePanel0.createMenus(jToolTip0);
      assertFalse(coveragePanel0.equals((Object)coveragePanel1));
      assertFalse(coveragePanel1.equals((Object)coveragePanel0));
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel1.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel1.isFocusCycleRoot());
      assertFalse(coveragePanel1.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel1.isFocusTraversalPolicySet());
      assertFalse(coveragePanel1.getIgnoreRepaint());
      assertFalse(jToolTip0.isFocusTraversalPolicySet());
      assertTrue(jToolTip0.getFocusTraversalKeysEnabled());
      assertFalse(jToolTip0.getIgnoreRepaint());
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
      assertFalse(jToolTip0.isFocusCycleRoot());
      assertNotSame(coveragePanel0, coveragePanel1);
      assertNotSame(coveragePanel1, coveragePanel0);
      
      List<String> list0 = coveragePanel0.getSelected();
      assertFalse(coveragePanel0.equals((Object)coveragePanel1));
      assertNotNull(list0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(coveragePanel0, coveragePanel1);
      
      boolean boolean0 = coveragePanel1.hasSelectedBams();
      assertFalse(coveragePanel1.equals((Object)coveragePanel0));
      assertTrue(coveragePanel1.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel1.isFocusCycleRoot());
      assertFalse(coveragePanel1.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel1.isFocusTraversalPolicySet());
      assertFalse(coveragePanel1.getIgnoreRepaint());
      assertFalse(boolean0);
      assertNotSame(coveragePanel1, coveragePanel0);
      
      coveragePanel0.setPlotByStrand(true);
      assertFalse(coveragePanel0.equals((Object)coveragePanel1));
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertNotSame(coveragePanel0, coveragePanel1);
      
      // Undeclared exception!
      try { 
        coveragePanel0.addRecord((SAMRecord) null, (-2851), "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      
      List<String> list0 = coveragePanel0.getSelected();
      assertNotNull(list0);
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      coveragePanel0.setSize(3243, 3243);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      int int0 = coveragePanel0.getBaseline(3243, 3243);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals((-1), int0);
      
      float float0 = coveragePanel0.getAlignmentY();
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5F, float0, 0.01F);
      
      boolean boolean0 = coveragePanel0.isPaintingForPrint();
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(boolean0);
      
      coveragePanel0.max = 3243;
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      coveragePanel0.repaint();
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      coveragePanel0.setSize(2139095040, 3243);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      VetoableChangeListener[] vetoableChangeListenerArray0 = coveragePanel0.getVetoableChangeListeners();
      assertNotNull(vetoableChangeListenerArray0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals(0, vetoableChangeListenerArray0.length);
      
      LineAttributes[] lineAttributesArray0 = CoveragePanel.getLineAttributes(288);
      assertNotNull(lineAttributesArray0);
      assertEquals(288, lineAttributesArray0.length);
      
      float float1 = coveragePanel0.getMaxCoverage();
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      LineAttributes[] lineAttributesArray1 = CoveragePanel.getLineAttributes((-1));
      assertNotNull(lineAttributesArray1);
      assertSame(lineAttributesArray1, lineAttributesArray0);
      assertEquals(288, lineAttributesArray1.length);
      
      CoveragePanel.HeatMapLn coveragePanel_HeatMapLn0 = coveragePanel0.new HeatMapLn((-8), 1070, "Show combined plot");
      assertNotNull(coveragePanel_HeatMapLn0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      String string0 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals("Show combined plot", string0);
      
      String string1 = coveragePanel0.getName();
      assertNull(string1);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      String string2 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string2);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals("Show combined plot", string2);
      
      String string3 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string3);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals("Show combined plot", string3);
      
      DecimalFormatProperties decimalFormatProperties0 = new DecimalFormatProperties(288);
      assertNotNull(decimalFormatProperties0);
      assertEquals(0, decimalFormatProperties0.exprGetNumChildren());
      assertEquals('0', decimalFormatProperties0.getZeroDigit());
      assertFalse(decimalFormatProperties0.hasTextLitOnly());
      assertEquals(0, decimalFormatProperties0.getEndLineNumber());
      assertEquals("decimal-format", decimalFormatProperties0.getNodeName());
      assertNull(decimalFormatProperties0.getWholeText());
      assertEquals(83, decimalFormatProperties0.getXSLToken());
      assertEquals(',', decimalFormatProperties0.getGroupingSeparator());
      assertEquals('%', decimalFormatProperties0.getPercent());
      assertNull(decimalFormatProperties0.getSystemId());
      assertTrue(decimalFormatProperties0.getXmlSpace());
      assertEquals('.', decimalFormatProperties0.getDecimalSeparator());
      assertEquals('#', decimalFormatProperties0.getDigit());
      assertFalse(decimalFormatProperties0.hasChildNodes());
      assertNull(decimalFormatProperties0.getXmlEncoding());
      assertEquals("decimal-format", decimalFormatProperties0.getLocalName());
      assertEquals('-', decimalFormatProperties0.getMinusSign());
      assertEquals(';', decimalFormatProperties0.getPatternSeparator());
      assertEquals(0, decimalFormatProperties0.getEndColumnNumber());
      assertNull(decimalFormatProperties0.getPublicId());
      assertEquals((short)1, decimalFormatProperties0.getNodeType());
      assertNull(decimalFormatProperties0.getXmlVersion());
      assertEquals(0, decimalFormatProperties0.getLength());
      assertFalse(decimalFormatProperties0.isId());
      assertEquals(0, decimalFormatProperties0.getLineNumber());
      assertEquals("Infinity", decimalFormatProperties0.getInfinity());
      assertFalse(decimalFormatProperties0.isWhitespaceInElementContent());
      assertEquals(288, decimalFormatProperties0.getUid());
      assertEquals("NaN", decimalFormatProperties0.getNaN());
      assertNull(decimalFormatProperties0.getDocumentURI());
      assertEquals("decimal-format", decimalFormatProperties0.getTagName());
      assertEquals(0, decimalFormatProperties0.getColumnNumber());
      assertFalse(decimalFormatProperties0.hasVariableDecl());
      assertNull(decimalFormatProperties0.getBaseURI());
      assertEquals('\u2030', decimalFormatProperties0.getPerMille());
      assertNull(decimalFormatProperties0.getBaseIdentifier());
      assertFalse(decimalFormatProperties0.getXmlStandalone());
      assertFalse(decimalFormatProperties0.isCompiledTemplate());
      assertNull(decimalFormatProperties0.getActualEncoding());
      assertTrue(decimalFormatProperties0.canAcceptVariables());
      assertFalse(decimalFormatProperties0.handlesNullPrefixes());
      
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(decimalFormatProperties0);
      assertNotNull(sVGGeneratorContext0);
      assertEquals(0, decimalFormatProperties0.exprGetNumChildren());
      assertEquals('0', decimalFormatProperties0.getZeroDigit());
      assertFalse(decimalFormatProperties0.hasTextLitOnly());
      assertEquals(0, decimalFormatProperties0.getEndLineNumber());
      assertEquals("decimal-format", decimalFormatProperties0.getNodeName());
      assertNull(decimalFormatProperties0.getWholeText());
      assertEquals(83, decimalFormatProperties0.getXSLToken());
      assertEquals(',', decimalFormatProperties0.getGroupingSeparator());
      assertEquals('%', decimalFormatProperties0.getPercent());
      assertNull(decimalFormatProperties0.getSystemId());
      assertTrue(decimalFormatProperties0.getXmlSpace());
      assertEquals('.', decimalFormatProperties0.getDecimalSeparator());
      assertEquals('#', decimalFormatProperties0.getDigit());
      assertFalse(decimalFormatProperties0.hasChildNodes());
      assertNull(decimalFormatProperties0.getXmlEncoding());
      assertEquals("decimal-format", decimalFormatProperties0.getLocalName());
      assertEquals('-', decimalFormatProperties0.getMinusSign());
      assertEquals(';', decimalFormatProperties0.getPatternSeparator());
      assertEquals(0, decimalFormatProperties0.getEndColumnNumber());
      assertNull(decimalFormatProperties0.getPublicId());
      assertEquals((short)1, decimalFormatProperties0.getNodeType());
      assertNull(decimalFormatProperties0.getXmlVersion());
      assertEquals(0, decimalFormatProperties0.getLength());
      assertFalse(decimalFormatProperties0.isId());
      assertEquals(0, decimalFormatProperties0.getLineNumber());
      assertEquals("Infinity", decimalFormatProperties0.getInfinity());
      assertFalse(decimalFormatProperties0.isWhitespaceInElementContent());
      assertEquals(288, decimalFormatProperties0.getUid());
      assertEquals("NaN", decimalFormatProperties0.getNaN());
      assertNull(decimalFormatProperties0.getDocumentURI());
      assertEquals("decimal-format", decimalFormatProperties0.getTagName());
      assertEquals(0, decimalFormatProperties0.getColumnNumber());
      assertFalse(decimalFormatProperties0.hasVariableDecl());
      assertNull(decimalFormatProperties0.getBaseURI());
      assertEquals('\u2030', decimalFormatProperties0.getPerMille());
      assertNull(decimalFormatProperties0.getBaseIdentifier());
      assertFalse(decimalFormatProperties0.getXmlStandalone());
      assertFalse(decimalFormatProperties0.isCompiledTemplate());
      assertNull(decimalFormatProperties0.getActualEncoding());
      assertTrue(decimalFormatProperties0.canAcceptVariables());
      assertFalse(decimalFormatProperties0.handlesNullPrefixes());
      assertFalse(sVGGeneratorContext0.isEmbeddedFontsOn());
      assertEquals("Generated by the Batik Graphics2D SVG Generator", sVGGeneratorContext0.getComment());
      assertEquals(4, sVGGeneratorContext0.getPrecision());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoveragePanel coveragePanel0 = new CoveragePanel((BamView) null);
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      coveragePanel0.userWinSize = 612;
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      coveragePanel0.autoWinSize = false;
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      coveragePanel0.init((BamView) null, 2.0F, 612, 612);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      SAMFileHeader sAMFileHeader0 = new SAMFileHeader();
      assertNotNull(sAMFileHeader0);
      assertEquals("1.5", sAMFileHeader0.getVersion());
      assertNull(sAMFileHeader0.getCreator());
      assertNull(sAMFileHeader0.getTextHeader());
      
      SAMFileHeader sAMFileHeader1 = sAMFileHeader0.clone();
      assertTrue(sAMFileHeader1.equals((Object)sAMFileHeader0));
      assertNotNull(sAMFileHeader1);
      assertEquals("1.5", sAMFileHeader0.getVersion());
      assertNull(sAMFileHeader0.getCreator());
      assertNull(sAMFileHeader0.getTextHeader());
      assertNull(sAMFileHeader1.getCreator());
      assertEquals("", sAMFileHeader1.getTextHeader());
      assertEquals("1.5", sAMFileHeader1.getVersion());
      assertNotSame(sAMFileHeader0, sAMFileHeader1);
      assertNotSame(sAMFileHeader1, sAMFileHeader0);
      
      SAMRecord sAMRecord0 = new SAMRecord(sAMFileHeader1);
      assertTrue(sAMFileHeader0.equals((Object)sAMFileHeader1));
      assertTrue(sAMFileHeader1.equals((Object)sAMFileHeader0));
      assertNotNull(sAMRecord0);
      assertEquals("1.5", sAMFileHeader0.getVersion());
      assertNull(sAMFileHeader0.getCreator());
      assertNull(sAMFileHeader0.getTextHeader());
      assertNull(sAMFileHeader1.getCreator());
      assertEquals("", sAMFileHeader1.getTextHeader());
      assertEquals("1.5", sAMFileHeader1.getVersion());
      assertEquals("*", sAMRecord0.getContig());
      assertFalse(sAMRecord0.getReadUnmappedFlag());
      assertEquals(0, sAMRecord0.getMappingQuality());
      assertFalse(sAMRecord0.getReadFailsVendorQualityCheckFlag());
      assertEquals("*", sAMRecord0.getReferenceName());
      assertFalse(sAMRecord0.getReadPairedFlag());
      assertEquals("*", sAMRecord0.getMateReferenceName());
      assertFalse(sAMRecord0.isSecondaryOrSupplementary());
      assertEquals(0, sAMRecord0.getReadLength());
      assertEquals((-1), sAMRecord0.getAttributesBinarySize());
      assertFalse(sAMRecord0.getNotPrimaryAlignmentFlag());
      assertEquals(0, sAMRecord0.getInferredInsertSize());
      assertEquals(0, sAMRecord0.getFlags());
      assertEquals(0, sAMRecord0.getStart());
      assertNull(sAMRecord0.getReadName());
      assertEquals(0, sAMRecord0.getMateAlignmentStart());
      assertFalse(sAMRecord0.getDuplicateReadFlag());
      assertFalse(sAMRecord0.getReadNegativeStrandFlag());
      assertFalse(sAMRecord0.getSupplementaryAlignmentFlag());
      assertFalse(sAMRecord0.isSecondaryAlignment());
      assertEquals(ValidationStringency.SILENT, sAMRecord0.getValidationStringency());
      assertEquals(0, sAMRecord0.getAlignmentStart());
      assertEquals(255, SAMRecord.UNKNOWN_MAPPING_QUALITY);
      assertEquals(0, SAMRecord.NO_MAPPING_QUALITY);
      assertEquals(536870912, SAMRecord.MAX_INSERT_SIZE);
      assertEquals(0, SAMRecord.NO_ALIGNMENT_START);
      assertEquals((-1), SAMRecord.NO_ALIGNMENT_REFERENCE_INDEX);
      
      coveragePanel0.addRecord(sAMRecord0, (-851), "8y~h>i?E4mS", true);
      assertTrue(sAMFileHeader0.equals((Object)sAMFileHeader1));
      assertTrue(sAMFileHeader1.equals((Object)sAMFileHeader0));
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals("1.5", sAMFileHeader0.getVersion());
      assertNull(sAMFileHeader0.getCreator());
      assertNull(sAMFileHeader0.getTextHeader());
      assertNull(sAMFileHeader1.getCreator());
      assertEquals("", sAMFileHeader1.getTextHeader());
      assertEquals("1.5", sAMFileHeader1.getVersion());
      assertEquals("*", sAMRecord0.getContig());
      assertFalse(sAMRecord0.getReadUnmappedFlag());
      assertEquals(0, sAMRecord0.getMappingQuality());
      assertFalse(sAMRecord0.getReadFailsVendorQualityCheckFlag());
      assertEquals("*", sAMRecord0.getReferenceName());
      assertFalse(sAMRecord0.getReadPairedFlag());
      assertEquals("*", sAMRecord0.getMateReferenceName());
      assertFalse(sAMRecord0.isSecondaryOrSupplementary());
      assertEquals(0, sAMRecord0.getReadLength());
      assertEquals((-1), sAMRecord0.getAttributesBinarySize());
      assertFalse(sAMRecord0.getNotPrimaryAlignmentFlag());
      assertEquals(0, sAMRecord0.getInferredInsertSize());
      assertEquals(0, sAMRecord0.getFlags());
      assertEquals(0, sAMRecord0.getStart());
      assertNull(sAMRecord0.getReadName());
      assertEquals(0, sAMRecord0.getMateAlignmentStart());
      assertFalse(sAMRecord0.getDuplicateReadFlag());
      assertFalse(sAMRecord0.getReadNegativeStrandFlag());
      assertFalse(sAMRecord0.getSupplementaryAlignmentFlag());
      assertFalse(sAMRecord0.isSecondaryAlignment());
      assertEquals(ValidationStringency.SILENT, sAMRecord0.getValidationStringency());
      assertEquals(0, sAMRecord0.getAlignmentStart());
      assertNotSame(sAMFileHeader0, sAMFileHeader1);
      assertNotSame(sAMFileHeader1, sAMFileHeader0);
      assertEquals(255, SAMRecord.UNKNOWN_MAPPING_QUALITY);
      assertEquals(0, SAMRecord.NO_MAPPING_QUALITY);
      assertEquals(536870912, SAMRecord.MAX_INSERT_SIZE);
      assertEquals(0, SAMRecord.NO_ALIGNMENT_START);
      assertEquals((-1), SAMRecord.NO_ALIGNMENT_REFERENCE_INDEX);
      
      boolean boolean1 = coveragePanel0.hasSelectedBams();
      assertFalse(boolean1 == boolean0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(boolean1);
      
      boolean boolean2 = coveragePanel0.hasSelectedBams();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = CoveragePanel.isRedraw();
      assertFalse(boolean0);
      
      CoveragePanel coveragePanel0 = new CoveragePanel((BamView) null);
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      
      // Undeclared exception!
      try { 
        coveragePanel0.init((BamView) null, 2.0F, 612, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      int int0 = 0;
      CoveragePanel.HeatMapLn coveragePanel_HeatMapLn0 = coveragePanel0.new HeatMapLn(0, 0, "SNP marks");
      assertNotNull(coveragePanel_HeatMapLn0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      LineAttributes[] lineAttributesArray0 = CoveragePanel.getLineAttributes(0);
      assertNotNull(lineAttributesArray0);
      assertEquals(0, lineAttributesArray0.length);
      
      String string0 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals("SNP marks", string0);
      
      String string1 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string1);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals("SNP marks", string1);
      
      String string2 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string2);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals("SNP marks", string2);
      
      String string3 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string3);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals("SNP marks", string3);
      
      String string4 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string4);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals("SNP marks", string4);
      
      ActionMap actionMap0 = coveragePanel0.getActionMap();
      assertNotNull(actionMap0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      ActionMap actionMap1 = actionMap0.getParent();
      assertNull(actionMap1);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      Object[] objectArray0 = actionMap0.keys();
      assertNull(objectArray0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      ActionMap actionMap2 = actionMap0.getParent();
      assertNull(actionMap2);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      coveragePanel0.setActionMap((ActionMap) null);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      coveragePanel0.singleClick(true, 0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        coveragePanel0.showLabels(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel((BamView) null);
      assertNotNull(coveragePanel0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      
      // Undeclared exception!
      try { 
        coveragePanel0.init((BamView) null, 0.191F, (-641), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      HierarchyBoundsListener[] hierarchyBoundsListenerArray0 = coveragePanel0.getHierarchyBoundsListeners();
      assertNotNull(hierarchyBoundsListenerArray0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals(0, hierarchyBoundsListenerArray0.length);
      
      float float0 = coveragePanel0.getMaxCoverage();
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals(Float.NaN, float0, 0.01F);
      
      CachedImageHandlerBase64Encoder cachedImageHandlerBase64Encoder0 = new CachedImageHandlerBase64Encoder();
      assertNotNull(cachedImageHandlerBase64Encoder0);
      assertEquals(2, cachedImageHandlerBase64Encoder0.getBufferedImageType());
      assertEquals("", cachedImageHandlerBase64Encoder0.getRefPrefix());
      
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      assertNotNull(metalComboBoxUI0);
      
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      assertNotNull(metalComboBoxUI_MetalComboBoxLayoutManager0);
      
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.minimumLayoutSize(coveragePanel0);
      assertNotNull(dimension0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals(10.0, dimension0.getWidth(), 0.01);
      assertEquals(11.0, dimension0.getHeight(), 0.01);
      assertEquals(10, dimension0.width);
      assertEquals(11, dimension0.height);
      
      BufferedImage bufferedImage0 = cachedImageHandlerBase64Encoder0.buildBufferedImage(dimension0);
      assertNotNull(bufferedImage0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals(2, cachedImageHandlerBase64Encoder0.getBufferedImageType());
      assertEquals("", cachedImageHandlerBase64Encoder0.getRefPrefix());
      assertEquals(10.0, dimension0.getWidth(), 0.01);
      assertEquals(11.0, dimension0.getHeight(), 0.01);
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(11, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(11, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, dimension0.width);
      assertEquals(11, dimension0.height);
      
      Graphics graphics2D0 = bufferedImage0.getGraphics();
      assertNotNull(graphics2D0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals(2, cachedImageHandlerBase64Encoder0.getBufferedImageType());
      assertEquals("", cachedImageHandlerBase64Encoder0.getRefPrefix());
      assertEquals(10.0, dimension0.getWidth(), 0.01);
      assertEquals(11.0, dimension0.getHeight(), 0.01);
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(11, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(11, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, dimension0.width);
      assertEquals(11, dimension0.height);
      
      coveragePanel0.paintComponent(graphics2D0);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertEquals(2, cachedImageHandlerBase64Encoder0.getBufferedImageType());
      assertEquals("", cachedImageHandlerBase64Encoder0.getRefPrefix());
      assertEquals(10.0, dimension0.getWidth(), 0.01);
      assertEquals(11.0, dimension0.getHeight(), 0.01);
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(11, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(11, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, dimension0.width);
      assertEquals(11, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      
      boolean boolean0 = coveragePanel0.hasSelectedBams();
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(boolean0);
      
      DebugGraphics debugGraphics0 = new DebugGraphics();
      assertNotNull(debugGraphics0);
      
      // Undeclared exception!
      try { 
        coveragePanel0.paintComponent(debugGraphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      float float0 = coveragePanel0.getMaxCoverage();
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals(Float.NaN, float0, 0.01F);
      
      CoveragePanel.HeatMapLn coveragePanel_HeatMapLn0 = coveragePanel0.new HeatMapLn((-2021), (-2021), "w");
      assertNotNull(coveragePanel_HeatMapLn0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      String string0 = coveragePanel_HeatMapLn0.toString();
      assertNotNull(string0);
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      
      CoveragePanel.HeatMapLn coveragePanel_HeatMapLn0 = coveragePanel0.new HeatMapLn(0, 326, "E");
      assertNotNull(coveragePanel_HeatMapLn0);
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = CoveragePanel.isRedraw();
      assertFalse(boolean0);
      
      CoveragePanel coveragePanel0 = new CoveragePanel();
      assertNotNull(coveragePanel0);
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      coveragePanel0.setPlotByStrand(false);
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      
      boolean boolean1 = CoveragePanel.isRedraw();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(coveragePanel0, (-1), (-320L), 474, (-1), 474, (-1), (-809), (-1), true, (-1), (-1), (-1), (-1));
      assertNotNull(mouseWheelEvent0);
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals((-1), mouseWheelEvent0.getScrollType());
      assertEquals((-1), mouseWheelEvent0.getXOnScreen());
      assertEquals((-1), mouseWheelEvent0.getClickCount());
      assertEquals((-1), mouseWheelEvent0.getX());
      assertEquals(474, mouseWheelEvent0.getY());
      assertEquals(26, mouseWheelEvent0.getModifiers());
      assertEquals((-809), mouseWheelEvent0.getYOnScreen());
      assertEquals((-1), mouseWheelEvent0.getWheelRotation());
      assertEquals((-1), mouseWheelEvent0.getScrollAmount());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(1, mouseWheelEvent0.getUnitsToScroll());
      assertEquals((-1), mouseWheelEvent0.getID());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals((-320L), mouseWheelEvent0.getWhen());
      
      Point point0 = coveragePanel0.getToolTipLocation(mouseWheelEvent0);
      assertNull(point0);
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals((-1), mouseWheelEvent0.getScrollType());
      assertEquals((-1), mouseWheelEvent0.getXOnScreen());
      assertEquals((-1), mouseWheelEvent0.getClickCount());
      assertEquals((-1), mouseWheelEvent0.getX());
      assertEquals(474, mouseWheelEvent0.getY());
      assertEquals(26, mouseWheelEvent0.getModifiers());
      assertEquals((-809), mouseWheelEvent0.getYOnScreen());
      assertEquals((-1), mouseWheelEvent0.getWheelRotation());
      assertEquals((-1), mouseWheelEvent0.getScrollAmount());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(1, mouseWheelEvent0.getUnitsToScroll());
      assertEquals((-1), mouseWheelEvent0.getID());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals((-320L), mouseWheelEvent0.getWhen());
      
      boolean boolean2 = coveragePanel0.isDoubleBuffered();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(coveragePanel0.isFocusTraversalPolicySet());
      assertFalse(coveragePanel0.isFocusCycleRoot());
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
      assertFalse(coveragePanel0.getIgnoreRepaint());
      assertTrue(coveragePanel0.getFocusTraversalKeysEnabled());
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        coveragePanel0.init((BamView) null, 2.0F, (-3261), 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      CoveragePanel coveragePanel0 = new CoveragePanel((BamView) null);
      coveragePanel0.autoWinSize = false;
      coveragePanel0.init((BamView) null, 2.0F, 612, 612);
      SAMFileHeader sAMFileHeader0 = new SAMFileHeader();
      SAMFileHeader sAMFileHeader1 = sAMFileHeader0.clone();
      SAMRecord sAMRecord0 = new SAMRecord(sAMFileHeader1);
      coveragePanel0.addRecord(sAMRecord0, (-851), "8y~h>i?E4mS", true);
      assertFalse(coveragePanel0.getIgnoreRepaint());
      
      boolean boolean1 = coveragePanel0.hasSelectedBams();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel((BamView) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      coveragePanel0.removeMouseListener(defaultCaret0);
      Random.setNextRandom(240);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      coveragePanel0.setBounds((Rectangle) defaultCaret0);
      coveragePanel0.setPlotByStrand(false);
      assertFalse(coveragePanel0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      coveragePanel0.getX();
      GraphicsConfigurationWithoutTransparency graphicsConfigurationWithoutTransparency0 = new GraphicsConfigurationWithoutTransparency();
      coveragePanel0.repaint(0, 0, 0, 0);
      BufferedImage bufferedImage0 = graphicsConfigurationWithoutTransparency0.createCompatibleImage(4163, 4163);
      bufferedImage0.createGraphics();
      Graphics graphics0 = bufferedImage0.getGraphics();
      coveragePanel0.paintComponent(graphics0);
      List<String> list0 = coveragePanel0.getSelected();
      coveragePanel0.getToolTipText(2119);
      coveragePanel0.setPlotHeatMap(true);
      coveragePanel0.paintComponent(graphics0);
      coveragePanel0.getToolTipText(259);
      List<String> list1 = coveragePanel0.getSelected();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      AWTEventMulticaster.add((MouseListener) null, (MouseListener) null);
      coveragePanel0.removeMouseListener(defaultCaret0);
      coveragePanel0.getToolTipText((-850));
      coveragePanel0.isPlotHeatMap();
      coveragePanel0.setIgnoreRepaint(false);
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      CoveragePanel.getLineAttributes(2574);
      coveragePanel0.setPlotHeatMap(true);
      CoveragePanel.isRedraw();
      coveragePanel0.getMaxCoverage();
      // Undeclared exception!
      try { 
        coveragePanel0.singleClick(true, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      coveragePanel0.setSize(3243, 3243);
      coveragePanel0.getBaseline(3243, 3243);
      coveragePanel0.getAlignmentY();
      coveragePanel0.isPaintingForPrint();
      coveragePanel0.repaint();
      coveragePanel0.getVetoableChangeListeners();
      CoveragePanel.getLineAttributes(288);
      coveragePanel0.hasSelectedBams();
      coveragePanel0.getMaxCoverage();
      CoveragePanel.getLineAttributes((-1));
      CoveragePanel.getLineAttributes(1070);
      coveragePanel0.singleClick(false, 288);
      coveragePanel0.singleClick(false, 3291);
      coveragePanel0.setPlotByStrand(false);
      coveragePanel0.singleClick(false, 3291);
      // Undeclared exception!
      try { 
        coveragePanel0.showLabels(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      coveragePanel0.getComponentListeners();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      coveragePanel0.list();
      ElemIf elemIf0 = new ElemIf();
      coveragePanel0.isPlotHeatMap();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      coveragePanel0.setPlotByStrand(true);
      CoveragePanel.isRedraw();
      coveragePanel0.setPlotByStrand(false);
      coveragePanel0.isPlotHeatMap();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertEquals("", decimalFormat0.getPositiveSuffix());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      coveragePanel0.setPlotHeatMap(false);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      // Undeclared exception!
      try { 
        coveragePanel0.draw((Graphics2D) null, 3381, 300, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CoveragePanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CoveragePanel coveragePanel0 = new CoveragePanel();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      coveragePanel0.addMouseWheelListener((MouseWheelListener) null);
      coveragePanel0.firePropertyChange((String) null, false, false);
      int int0 = 8843;
      coveragePanel0.getToolTipText(8843);
      coveragePanel0.getSelected();
      CoveragePanel.HeatMapLn coveragePanel_HeatMapLn0 = coveragePanel0.new HeatMapLn(8843, 8843, "");
      coveragePanel_HeatMapLn0.toString();
      CoveragePanel.isRedraw();
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
