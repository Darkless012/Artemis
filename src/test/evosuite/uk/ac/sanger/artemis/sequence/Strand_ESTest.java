/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 04 15:48:20 GMT 2018
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.Clipboard;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.NoSuchElementException;
import javax.swing.JLayeredPane;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.biojava.bio.seq.homol.SimilarityPairFeature;
import org.biojava.bio.symbol.RelabeledAlignment;
import org.biojava.bio.symbol.SymbolList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureFromVectorPredicate;
import uk.ac.sanger.artemis.FeaturePredicate;
import uk.ac.sanger.artemis.FeatureSegment;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.components.SelectionViewer;
import uk.ac.sanger.artemis.io.BioJavaSequence;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GFFStreamFeature;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.LineGroup;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.PartialSequence;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.io.StreamSequence;
import uk.ac.sanger.artemis.plot.AGWindowAlgorithm;
import uk.ac.sanger.artemis.sequence.AminoAcidSequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.MarkerChangeEvent;
import uk.ac.sanger.artemis.sequence.MarkerInternal;
import uk.ac.sanger.artemis.sequence.MarkerRange;
import uk.ac.sanger.artemis.sequence.Strand;
import uk.ac.sanger.artemis.util.LinePushBackReader;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Strand_ESTest extends Strand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimilarityPairFeature.EmptyPairwiseAlignment similarityPairFeature_EmptyPairwiseAlignment0 = (SimilarityPairFeature.EmptyPairwiseAlignment)SimilarityPairFeature.EMPTY_PAIRWISE;
      RelabeledAlignment relabeledAlignment0 = new RelabeledAlignment(similarityPairFeature_EmptyPairwiseAlignment0);
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence(relabeledAlignment0);
      Bases bases0 = new Bases(bioJavaSequence0);
      Strand strand0 = new Strand(bases0, 43);
      int int0 = Strand.FORWARD;
      // Undeclared exception!
      try { 
        strand0.getTCount();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There is no parser for the empty alphabet. Attempted to retrieve token
         //
         verifyException("org.biojava.bio.symbol.EmptyAlphabet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'F';
      charArray0[2] = 'w';
      charArray0[3] = '*';
      charArray0[4] = 't';
      charArray0[5] = '+';
      Short short0 = new Short((short)50);
      Integer integer0 = new Integer(712);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 712, 1885, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      strand0.makeMarkerFromRawPosition(1);
      // Undeclared exception!
      try { 
        strand0.getStrandBases();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1884
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("{CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 5);
      Marker marker0 = strand0.makeMarker(1);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      genbankStreamSequence0.forceReset();
      Strand.addBases(marker0, "{CkSd|");
      Range range0 = new Range(0);
      StringVector stringVector0 = StringVector.getStrings("{CkSd|");
      strand0.getStopOrStartCodons(range0, stringVector0);
      Strand.getOpenReadingFrameRanges(markerRange0, 5, 2, 5);
      strand0.getGCount();
      Strand.getCodonAtMarker(marker0);
      strand0.getSpacedTranslation(range0, false);
      int int0 = Strand.FORWARD;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Marker marker1 = strand0.makeMarker(4);
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker1, false);
      bases0.getAverageAGPercent();
      Strand.getOpenReadingFrameRanges(markerRange1, 25, 2, (-2304));
      strand0.getTranslation(range0, false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      // Undeclared exception!
      try { 
        strand0.getGCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter("#kx]gm/'VaMzzDY", true);
      genbankStreamSequence0.writeToStream(mockFileWriter0);
      strand0.getTCount();
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarker(7);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      // Undeclared exception!
      try { 
        Strand.getORFAroundMarker(marker0, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected OutOfRangeException
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("GC percentage of non-ambiguous bases: ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getTCount();
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.addBases(marker0, "GC percentage of non-ambiguous bases: ");
      strand0.getRawPosition(131129);
      Strand.getORFAroundMarker(marker0, false);
      Range range0 = new Range((-186), 0);
      strand0.getStrandBases();
      Strand.getCodonAtMarker(marker0);
      strand0.getCCount();
      System.setCurrentTimeMillis(2);
      MarkerRange markerRange0 = Strand.getORFAroundMarker(marker0, true);
      Strand.getOpenReadingFrameRanges(markerRange0, 2, (-400), 41);
      try { 
        strand0.makeMarkerFromRawPosition((-809));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -809
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("YPZNWrYt");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = new Strand(bases0, 2);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 1);
      Integer integer0 = new Integer(5);
      strand0.makeMarkerFromRawPosition(2);
      Range range0 = markerRange0.getRange();
      StringVector stringVector0 = StringVector.getStrings("YPZNWrYt", "YPZNWrYt");
      strand0.getMatchingCodons(range0, stringVector0);
      strand0.getCCount();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "uk.ac.sanger.artemis.sequence.Strand";
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("uk.ac.sanger.artemis.sequence.Strand");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = new Strand(bases0, 1);
      boolean boolean0 = true;
      strand0.makeMarkerRangeFromRawPositions(1, 5);
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      genbankStreamSequence0.forceReset();
      // Undeclared exception!
      try { 
        Strand.addBases(marker0, "uk.ac.sanger.artemis.sequence.Strand");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimilarityPairFeature.EmptyPairwiseAlignment similarityPairFeature_EmptyPairwiseAlignment0 = (SimilarityPairFeature.EmptyPairwiseAlignment)SimilarityPairFeature.EMPTY_PAIRWISE;
      RelabeledAlignment relabeledAlignment0 = new RelabeledAlignment(similarityPairFeature_EmptyPairwiseAlignment0);
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence(relabeledAlignment0);
      Bases bases0 = new Bases(bioJavaSequence0);
      Strand strand0 = new Strand(bases0, 43);
      // Undeclared exception!
      try { 
        strand0.getCCount();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There is no parser for the empty alphabet. Attempted to retrieve token
         //
         verifyException("org.biojava.bio.symbol.EmptyAlphabet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("GC percentage of non-ambiguous bases: ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = new Strand(bases0, 5);
      strand0.getTCount();
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.addBases(marker0, "GC percentage of non-ambiguous bases: ");
      int int0 = Strand.REVERSE;
      Strand.getORFAroundMarker(marker0, true);
      Range range0 = new Range((-5), 38);
      strand0.getStrandBases();
      Strand.getCodonAtMarker(marker0);
      Strand.addBases(marker0, "uk.ac.sanger.artemis.util.PushBackException");
      strand0.getCCount();
      System.setCurrentTimeMillis(2);
      Strand.getORFAroundMarker(marker0, true);
      strand0.getSubSequence(range0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("GC percentage of non-ambiguous bases: ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getTCount();
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.addBases(marker0, "GC percentage of non-ambiguous bases: ");
      strand0.getRawPosition(131129);
      boolean boolean0 = false;
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Strand.getCodonAtMarker(marker0);
      strand0.getCCount();
      System.setCurrentTimeMillis(2);
      Strand.getOpenReadingFrameRanges(markerRange0, 2, 131129, 39);
      try { 
        strand0.makeMarkerFromRawPosition((-809));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -809
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("{CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      genbankStreamSequence0.charAt(2);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 5);
      int int0 = Strand.REVERSE;
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      genbankStreamSequence0.forceReset();
      Strand.addBases(marker0, "{CkSd|");
      Range range0 = new Range(0);
      StringVector stringVector0 = StringVector.getStrings("{CkSd|");
      strand0.getStopOrStartCodons(range0, stringVector0);
      strand0.getRawPosition(131129);
      Strand.getOpenReadingFrameRanges(markerRange0, 5, 2, 5);
      strand0.getGCount();
      Strand.getCodonAtMarker(marker0);
      // Undeclared exception!
      try { 
        strand0.getSpacedTranslation(range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("{CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MockFileWriter mockFileWriter0 = new MockFileWriter("{CkSd|");
      byte[] byteArray0 = new byte[2];
      genbankStreamSequence0.charAt(2);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 5);
      int int0 = Strand.REVERSE;
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.getORFAroundMarker(marker0, true);
      genbankStreamSequence0.forceReset();
      Strand.addBases(marker0, "{CkSd|");
      Range range0 = new Range(0, 131129);
      StringVector stringVector0 = StringVector.getStrings("{CkSd|");
      strand0.getStopOrStartCodons(range0, stringVector0);
      strand0.getRawPosition(131129);
      Strand.getOpenReadingFrameRanges(markerRange0, 5, 2, (-1431));
      strand0.getGCount();
      Strand.getCodonAtMarker(marker0);
      // Undeclared exception!
      strand0.getSpacedTranslation(range0, true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(".(,\"zweS,mDQ\"_u^>", "");
      Bases bases0 = new Bases(fastaStreamSequence0);
      fastaStreamSequence0.setFromChar(bases0.letter_index);
      Strand strand0 = new Strand(bases0, 2231);
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.getBases();
      Range range0 = new Range(0, 183);
      strand0.getTranslation(range0, true);
      try { 
        strand0.makeMarkerRangeFromPositions(120, 116);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 116
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = '9';
      charArray0[2] = '3';
      charArray0[3] = '7';
      Short short0 = new Short((short)110);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_RTL;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-414), (-414), short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarker((short)110);
      Marker marker1 = Marker.getRawLowest(marker0, marker0);
      // Undeclared exception!
      try { 
        Strand.getORFAroundMarker(marker1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("GC percentage of non-ambiguous bases: ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getTCount();
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.addBases(marker0, "GC percentage of non-ambiguous bases: ");
      strand0.getRawPosition(131129);
      boolean boolean0 = false;
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Strand.getCodonAtMarker(marker0);
      System.setCurrentTimeMillis(2);
      Strand.getOpenReadingFrameRanges(markerRange0, 2, 131129, 39);
      try { 
        strand0.makeMarkerFromRawPosition((-805));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -805
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      strand0.getSequenceLength();
      strand0.makeMarkerFromRawPosition(1);
      Range range0 = new Range(0);
      // Undeclared exception!
      try { 
        strand0.getTranslation(range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      genbankStreamSequence0.copy();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getSequenceLength();
      strand0.makeMarkerFromRawPosition(1);
      Range range0 = new Range((-5));
      // Undeclared exception!
      try { 
        strand0.getTranslation(range0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short)3836);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1056), (-1056), short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      Strand strand1 = aGWindowAlgorithm0.getStrand();
      Range range0 = new Range(1);
      // Undeclared exception!
      try { 
        strand1.getRawSubSequence(range0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter("#kx]gm/'VaMzzDY", true);
      genbankStreamSequence0.writeToStream(mockFileWriter0);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      strand0.makeMarkerRangeFromPositions(2, 2);
      strand0.getTCount();
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarker(5);
      Strand.getORFAroundMarker(marker0, false);
      // Undeclared exception!
      try { 
        Strand.addBases(marker0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = 'q';
      charArray0[2] = 'y';
      charArray0[3] = '[';
      charArray0[4] = 'V';
      charArray0[5] = 'd';
      charArray0[6] = '~';
      Short short0 = new Short((short)128);
      Integer integer0 = new Integer((short)128);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1929, 320, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions((short)128, 1);
      // Undeclared exception!
      try { 
        Strand.markerRangeBases(markerRange0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -319
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("YPZNWrYt");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 1);
      strand0.getTCount();
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'N';
      charArray0[2] = '`';
      charArray0[3] = 'i';
      charArray0[4] = 'A';
      charArray0[5] = 'W';
      rawStreamSequence0.setFromChar(charArray0);
      strand0.getGCount();
      strand0.getCCount();
      strand0.getStrandBases();
      // Undeclared exception!
      try { 
        Strand.deleteRange(markerRange0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(2, 2);
      strand0.getTCount();
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker0, false);
      Strand.addBases(marker0, "_>CkSd|");
      Strand.markerRangeBases(markerRange1);
      strand0.getRawPosition(131129);
      Strand.getOpenReadingFrameRanges(markerRange0, 5, 0, (-1431));
      strand0.getGCount();
      StringVector.getStrings("_>CkSd|", "nnn", false);
      strand0.isForwardStrand();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Range range0 = new Range(28);
      // Undeclared exception!
      try { 
        strand0.getSpacedTranslation(range0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, (FeaturePredicate) null, "");
      filteredEntryGroup0.getBases();
      Strand strand0 = new Strand((Bases) null, 5);
      // Undeclared exception!
      try { 
        strand0.makeMarkerRangeFromRawPositions((-5), (-2769));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featurePredicate0, "b\"Bqm1*`ECZx");
      Bases bases1 = filteredEntryGroup0.getBases();
      Strand strand0 = new Strand(bases1, 0);
      // Undeclared exception!
      try { 
        strand0.getTCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(linePushBackReader0);
      stringReader0.ready();
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      int int0 = (-4870);
      CharBuffer charBuffer0 = mock(CharBuffer.class, new ViolatedAssumptionAnswer());
      linePushBackReader0.read(charBuffer0);
      try { 
        strand0.makeMarker(2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 2
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Clipboard clipboard0 = mock(Clipboard.class, new ViolatedAssumptionAnswer());
      Selection selection0 = new Selection(clipboard0);
      selection0.getHighestBaseOfSelection();
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        Strand.markerRangeBases(markerRange0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Clipboard clipboard0 = mock(Clipboard.class, new ViolatedAssumptionAnswer());
      Selection selection0 = new Selection(clipboard0);
      selection0.clear();
      selection0.getMarkerRange();
      // Undeclared exception!
      try { 
        Strand.deleteRange((MarkerRange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ")nQRo}{<`?";
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(")nQRo}{<`?");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Clipboard clipboard0 = mock(Clipboard.class, new ViolatedAssumptionAnswer());
      Selection selection0 = new Selection(clipboard0);
      selection0.getSelectionRange();
      // Undeclared exception!
      try { 
        strand0.getRawSubSequenceC((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      Selection selection0 = new Selection((Clipboard) null);
      selection0.getSelectionRange();
      // Undeclared exception!
      try { 
        strand0.getRawSubSequence((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Clipboard clipboard0 = mock(Clipboard.class, new ViolatedAssumptionAnswer());
      Selection selection0 = new Selection(clipboard0);
      selection0.getMarkerRange();
      // Undeclared exception!
      try { 
        Strand.getOpenReadingFrameRanges((MarkerRange) null, 2697, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Range range0 = new Range((-1217), 3);
      Range range1 = new Range((-2900));
      range0.truncate(range1);
      range1.change((-5), 5);
      range0.truncate(range1);
      String string0 = strand0.getSubSequence(range0);
      strand0.getBases();
      strand0.getRawPosition(1083);
      StringVector stringVector0 = StringVector.getStrings(string0, string0, true);
      // Undeclared exception!
      try { 
        strand0.getMatchingCodons((Range) null, stringVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Bases bases0 = null;
      Strand strand0 = new Strand((Bases) null, 2524);
      strand0.getBases();
      SimpleEntryGroup simpleEntryGroup0 = null;
      try {
        simpleEntryGroup0 = new SimpleEntryGroup((Bases) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.SimpleEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("CFP)faY+qF3-WT;~8,");
      StreamSequence streamSequence0 = emblStreamSequence0.copy();
      Bases bases0 = new Bases(streamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      strand0.isForwardStrand();
      Range range0 = new Range((-427), 8883);
      StringVector stringVector0 = SelectionViewer.getBaseSummary("CFP)faY+qF3-WT;~8,");
      // Undeclared exception!
      try { 
        strand0.getMatchingCodons(range0, stringVector0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      String string0 = "I=:$\"WeS1<FrlqG#(";
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featurePredicate0, "I=:$\"WeS1<FrlqG#(");
      filteredEntryGroup0.getBases();
      Strand strand0 = new Strand((Bases) null, 2);
      // Undeclared exception!
      try { 
        strand0.isForwardStrand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      FeaturePredicate featurePredicate0 = mock(FeaturePredicate.class, new ViolatedAssumptionAnswer());
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featurePredicate0, "n=>kT?oP:;\"|");
      Bases bases1 = filteredEntryGroup0.getBases();
      Strand strand0 = bases1.getReverseStrand();
      // Undeclared exception!
      try { 
        strand0.getStrandBases();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("3x");
      StreamSequence streamSequence0 = genbankStreamSequence0.copy();
      Bases bases0 = new Bases(streamSequence0);
      Strand strand0 = new Strand(bases0, 4692);
      strand0.getSequenceLength();
      strand0.getSequenceLength();
      Marker marker0 = null;
      // Undeclared exception!
      try { 
        Strand.getCodonAtMarker((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("internal error - unexpected OutOfRangeException");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(linePushBackReader0);
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Clipboard clipboard0 = mock(Clipboard.class, new ViolatedAssumptionAnswer());
      Selection selection0 = new Selection(clipboard0);
      selection0.getSelectionRange();
      // Undeclared exception!
      try { 
        strand0.getSubSequence((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = new Strand(bases0, 0);
      // Undeclared exception!
      try { 
        strand0.getCCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, (-2307));
      int int0 = (-3409);
      // Undeclared exception!
      try { 
        strand0.makeMarker((-3409));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, (-2307));
      int int0 = (-3401);
      // Undeclared exception!
      try { 
        strand0.makeMarkerFromRawPosition((-1473));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FeatureVector featureVector0 = new FeatureVector();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FeatureFromVectorPredicate featureFromVectorPredicate0 = new FeatureFromVectorPredicate(featureVector0);
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureFromVectorPredicate0, "I~LO3cITB");
      filteredEntryGroup0.getBases();
      Strand strand0 = new Strand((Bases) null, 2);
      Range range0 = null;
      simpleEntryGroup0.isReadOnly();
      // Undeclared exception!
      try { 
        strand0.getSpacedTranslation((Range) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = 'j';
      charArray0[2] = '#';
      charArray0[3] = 'j';
      charArray0[4] = '^';
      charArray0[5] = '^';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      short short0 = (short) (-429);
      Short short1 = new Short((short) (-429));
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "");
      filteredEntryGroup0.getBases();
      Strand strand0 = new Strand((Bases) null, 1434);
      // Undeclared exception!
      try { 
        strand0.getDirection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("There is no CV term set for this qualifier.");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      EmblStreamSequence emblStreamSequence1 = new EmblStreamSequence(emblStreamSequence0);
      Bases bases0 = new Bases(emblStreamSequence1);
      Strand strand0 = bases0.getReverseStrand();
      stringReader0.markSupported();
      Range range0 = new Range(0);
      strand0.getRawSubSequenceC(range0);
      strand0.getStrandBases();
      strand0.getTranslation(range0, false);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getStrandBases();
      strand0.getDirection();
      Bases.reverseComplement("");
      strand0.getTCount();
      strand0.getDirection();
      Range range0 = null;
      try {
        range0 = new Range(1864, 30);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // start: 1864 > end: 30
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("|&");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = new Strand(bases0, 8);
      strand0.getDirection();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      Short short0 = new Short((short)8);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_TTB;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1), (-1), short0, integer0);
      Integer.compareUnsigned((short)8, 2796);
      Bases bases0 = new Bases(partialSequence0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Strand strand0 = new Strand(bases0, 5);
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.setScalingFlag(true);
      Strand strand1 = aGWindowAlgorithm0.getStrand();
      strand1.getSequenceLength();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MockFileWriter mockFileWriter0 = new MockFileWriter("#kx]gm/'VaMzzDY");
      strand0.getACount();
      genbankStreamSequence0.writeToStream(mockFileWriter0);
      bases0.addBases(8933, 2550, "");
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 5);
      int int0 = Strand.FORWARD;
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.getORFAroundMarker(marker0, false);
      genbankStreamSequence0.forceReset();
      marker0.moveBy(2);
      int int1 = Strand.FORWARD;
      // Undeclared exception!
      try { 
        Strand.getOpenReadingFrameRanges(markerRange0, 5, 1, (-1422));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected OutOfRangeException
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("7GWS3P#Z/u}Z");
      StreamSequence streamSequence0 = genbankStreamSequence0.copy();
      Bases bases0 = new Bases(streamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.makeMarkerFromRawPosition(1);
      genbankStreamSequence0.forceReset();
      Range range0 = new Range((-5));
      strand0.getSubSequence(range0);
      range0.toString();
      // Undeclared exception!
      try { 
        strand0.getRawSubSequenceC(range0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = 'j';
      charArray0[2] = '#';
      charArray0[3] = 'j';
      charArray0[4] = '^';
      charArray0[5] = '^';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "");
      filteredEntryGroup0.getBases();
      Strand strand0 = new Strand((Bases) null, 1434);
      int int0 = new Integer((-523));
      Range range0 = null;
      // Undeclared exception!
      try { 
        strand0.getSequenceLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      // Undeclared exception!
      try { 
        strand0.getACount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '1';
      charArray0[2] = 'E';
      charArray0[3] = '`';
      charArray0[4] = ',';
      charArray0[5] = 'L';
      charArray0[6] = 'F';
      charArray0[7] = ']';
      charArray0[8] = 'U';
      Short short0 = new Short((short) (-1405));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1919, 1919, short0, (Integer) null);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      Bases bases1 = aGWindowAlgorithm0.getBases();
      Strand strand1 = bases1.getForwardStrand();
      strand1.getACount();
      Range range0 = new Range(110);
      // Undeclared exception!
      try { 
        strand0.getRawSubSequence(range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1809
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MockFileWriter mockFileWriter0 = new MockFileWriter("_>CkSd|");
      genbankStreamSequence0.writeToStream(mockFileWriter0);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(2, 2);
      strand0.getTCount();
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.addBases(marker0, "_>CkSd|");
      markerRange0.isForwardMarker();
      Strand.markerRangeBases(markerRange0);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      strand0.getRawPosition(131118);
      // Undeclared exception!
      try { 
        Strand.deleteRange(markerRange0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MockFileWriter mockFileWriter0 = new MockFileWriter("_>CkSd|");
      strand0.getACount();
      genbankStreamSequence0.writeToStream(mockFileWriter0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("_>CkSd|");
      FileSystemHandling.createFolder(evoSuiteFile0);
      bases0.addBases(8933, 2557, "");
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.getORFAroundMarker(marker0, false);
      genbankStreamSequence0.forceReset();
      Range range0 = new Range((-364), 50331648);
      // Undeclared exception!
      strand0.getRawSubSequenceC(range0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = '0';
      charArray0[2] = '7';
      charArray0[3] = 'C';
      charArray0[4] = '{';
      charArray0[5] = 'p';
      charArray0[6] = 'L';
      charArray0[7] = 's';
      Short short0 = new Short((short) (-1139));
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_INITIAL;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 886, 886, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      bases0.getCCount();
      Strand strand0 = bases0.getReverseStrand();
      strand0.makeMarker(2);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(1891, 0);
      Range range0 = markerRange0.getRawRange();
      // Undeclared exception!
      try { 
        strand0.getSubSequence(range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -885
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("uk.ac.sanger.artemis.sequence.Strand");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = new Strand(bases0, 1);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 5);
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.addBases(marker0, "uk.ac.sanger.artemis.sequence.Strand");
      Range range0 = new Range(0);
      StringVector stringVector0 = StringVector.getStrings("uk.ac.sanger.artemis.sequence.Strand");
      strand0.getStopOrStartCodons(range0, stringVector0);
      Strand.getOpenReadingFrameRanges(markerRange0, 5, 2, 5);
      strand0.getGCount();
      Strand.getCodonAtMarker(marker0);
      strand0.getSpacedTranslation(range0, true);
      strand0.getCCount();
      Marker marker1 = strand0.makeMarker(4);
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker1, true);
      strand0.makeMarkerRangeFromPositions(25, 5);
      strand0.getACount();
      strand0.getStrandBases();
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        Strand.getOpenReadingFrameRanges(markerRange1, 25, 2, (-2304));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected OutOfRangeException
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("p's*");
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(fastaStreamSequence0);
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      try { 
        strand0.makeMarkerRangeFromRawPositions(0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 5
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence((SymbolList) null);
      Bases bases0 = new Bases(bioJavaSequence0);
      Strand strand0 = bases0.getReverseStrand();
      // Undeclared exception!
      try { 
        strand0.getRawPosition(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.BioJavaSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      int int0 = 2;
      // Undeclared exception!
      try { 
        strand0.makeMarkerRangeFromPositions(2, 284);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("YZNWrYt");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 1);
      int int0 = Strand.FORWARD;
      Strand.getOpenReadingFrameRanges(markerRange0, 8786, 1, 0);
      strand0.getStrandBases();
      strand0.getACount();
      Range range0 = markerRange0.getRawRange();
      strand0.getRawSubSequenceC(range0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSdy|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MockFileWriter mockFileWriter0 = new MockFileWriter("_>CkSdy|");
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(2, 2);
      Integer integer0 = new Integer(1);
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarker(2);
      Strand.addBases(marker0, "_>CkSdy|");
      LineGroup.writeStartOfGFFEntry(mockFileWriter0);
      Strand.markerRangeBases(markerRange0);
      strand0.getRawPosition(0);
      Strand.deleteRange(markerRange0);
      Strand.getOpenReadingFrameRanges(markerRange0, 2, (int) integer0, (-400));
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker0, false);
      strand0.getTCount();
      strand0.getStrandBases();
      // Undeclared exception!
      try { 
        Strand.getOpenReadingFrameRanges(markerRange1, (int) integer0, 0, 1500);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 1500 > end: 15
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("internal error - unexpected OutOfRangeException");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getACount();
      int int0 = Strand.REVERSE;
      strand0.getGCount();
      strand0.getACount();
      Range range0 = new Range(2, 131129);
      // Undeclared exception!
      strand0.getSubSequence(range0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("{CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 5);
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      genbankStreamSequence0.forceReset();
      Strand.addBases(marker0, "{CkSd|");
      Range range0 = new Range(0);
      StringVector stringVector0 = StringVector.getStrings("{CkSd|");
      strand0.getStopOrStartCodons(range0, stringVector0);
      strand0.getRawPosition(2);
      Strand.getOpenReadingFrameRanges(markerRange0, 5, 2, 5);
      strand0.getGCount();
      Strand.getCodonAtMarker(marker0);
      AminoAcidSequence aminoAcidSequence0 = strand0.getSpacedTranslation(range0, true);
      strand0.getCCount();
      genbankStreamSequence0.setFromChar(aminoAcidSequence0.codon_translation_array);
      Marker marker1 = strand0.makeMarker(4);
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker1, true);
      // Undeclared exception!
      try { 
        Strand.getOpenReadingFrameRanges(markerRange1, 25, 2, (-2304));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("{CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MockFileWriter mockFileWriter0 = new MockFileWriter("{CkSd|");
      byte[] byteArray0 = new byte[2];
      genbankStreamSequence0.charAt(2);
      strand0.makeMarkerRangeFromRawPositions(1, 5);
      int int0 = Strand.REVERSE;
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      genbankStreamSequence0.forceReset();
      Strand.addBases(marker0, "{CkSd|");
      Range range0 = new Range(0, 131129);
      StringVector stringVector0 = StringVector.getStrings("{CkSd|");
      strand0.getStopOrStartCodons(range0, stringVector0);
      strand0.getRawPosition(131129);
      strand0.getGCount();
      Strand.getCodonAtMarker(marker0);
      LineGroup.writeStartOfGFFEntry(mockFileWriter0);
      strand0.getTCount();
      // Undeclared exception!
      strand0.getTranslation(range0, false);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'H';
      Short short0 = new Short((short) (-1003));
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1135), 177, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.makeMarker((short) (-1003));
      // Undeclared exception!
      try { 
        strand0.getStrandBases();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wZgvr5glq9M;{");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = new Strand(bases0, 1);
      strand0.getACount();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = new Strand(bases0, 2);
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      Bases bases1 = aGWindowAlgorithm0.getBases();
      Strand strand1 = bases1.getReverseStrand();
      // Undeclared exception!
      try { 
        strand1.getStrandBases();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      FeatureVector featureVector0 = new FeatureVector();
      StringVector.getStrings("");
      MarkerRange markerRange0 = new MarkerRange(strand0, 1, 1);
      Strand.getOpenReadingFrameRanges(markerRange0, 2, 906, 2);
      strand0.getStrandBases();
      strand0.getGCount();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSdy|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MockFileWriter mockFileWriter0 = new MockFileWriter("_>CkSdy|");
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(2, 2);
      Integer integer0 = new Integer(1);
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarker(2);
      Strand.addBases(marker0, "_>CkSdy|");
      LineGroup.writeStartOfGFFEntry(mockFileWriter0);
      Strand.markerRangeBases(markerRange0);
      strand0.getRawPosition(0);
      Strand.deleteRange(markerRange0);
      Strand.getOpenReadingFrameRanges(markerRange0, 2, (int) integer0, (-400));
      try { 
        strand0.makeMarkerRangeFromRawPositions((-5), 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -5
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("getResidueFeaturesByOrganismCommonName");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Range range0 = new Range(2);
      Bases bases1 = bases0.truncate(range0);
      Strand strand0 = new Strand(bases1, 5);
      try { 
        strand0.makeMarkerRangeFromRawPositions(2, 8826);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -8824
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("7GWS3P#Z/u}Z");
      StreamSequence streamSequence0 = genbankStreamSequence0.copy();
      Bases bases0 = new Bases(streamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Range range0 = new Range((-5), 1);
      range0.toString();
      range0.toString();
      strand0.getRawSubSequenceC(range0);
      strand0.getStrandBases();
      strand0.getSpacedTranslation(range0, true);
      strand0.getTranslation(range0, true);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short) (-31));
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-2633), 0, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.makeMarkerFromRawPosition((-1579));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("7GWS3P#Z/u}Z");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Range range0 = new Range((-5), 1);
      strand0.getRawSubSequenceC(range0);
      StringVector stringVector0 = StringVector.getStrings("7GWS3P#Z/u}Z");
      strand0.getMatchingCodons(range0, stringVector0);
      strand0.getStopOrStartCodons(range0, stringVector0);
      // Undeclared exception!
      try { 
        Strand.getORFAroundMarker((Marker) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'F';
      charArray0[2] = 'w';
      charArray0[3] = '*';
      charArray0[4] = 't';
      charArray0[5] = '+';
      Short short0 = new Short((short)50);
      Integer integer0 = new Integer(712);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 712, 1885, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      // Undeclared exception!
      try { 
        Strand.getCodonAtMarker(marker0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1884
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("7GWS3P#Z/u}Z");
      StreamSequence streamSequence0 = genbankStreamSequence0.copy();
      Bases bases0 = new Bases(streamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Range range0 = new Range(1);
      strand0.getRawSubSequenceC(range0);
      strand0.getCCount();
      strand0.getStrandBases();
      strand0.getSpacedTranslation(range0, true);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, 2);
      Range range0 = new Range(7);
      StringVector stringVector0 = new StringVector();
      // Undeclared exception!
      try { 
        strand0.getStopOrStartCodons(range0, stringVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSdy|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MockFileWriter mockFileWriter0 = new MockFileWriter("_>CkSdy|");
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(2, 2);
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.addBases(marker0, "_>CkSdy|");
      Strand.markerRangeBases(markerRange0);
      strand0.getRawPosition(0);
      Strand.deleteRange(markerRange0);
      Strand.getOpenReadingFrameRanges(markerRange0, 2, 1, (-400));
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker0, false);
      Range range0 = new Range((-186), 0);
      strand0.getRawSubSequence(range0);
      strand0.getTCount();
      strand0.getStrandBases();
      // Undeclared exception!
      try { 
        Strand.getOpenReadingFrameRanges(markerRange1, 0, 0, 1500);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 1500 > end: 15
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "Z";
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("Z");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Range range0 = new Range(2);
      // Undeclared exception!
      try { 
        strand0.getRawSubSequenceC(range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("index must be within (1 .. ");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = new Strand(bases0, 1);
      strand0.getGCount();
      strand0.getSequenceLength();
      Range range0 = new Range(12298);
      // Undeclared exception!
      strand0.getRawSubSequence(range0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("4n:<~*zziR3g4z");
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(rawStreamSequence0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      rawStreamSequence0.forceReset();
      Marker marker0 = new Marker(strand0, 5);
      Strand.addBases(marker0, "$]0");
      MarkerRange markerRange0 = Strand.getORFAroundMarker(marker0, true);
      Strand.markerRangeBases(markerRange0);
      Strand.getORFAroundMarker(marker0, false);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("GC percentage of non-ambiguous bases: ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getTCount();
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Integer integer0 = new Integer(131117);
      strand0.getCCount();
      System.setCurrentTimeMillis(2);
      MarkerRange markerRange0 = Strand.getORFAroundMarker(marker0, true);
      // Undeclared exception!
      try { 
        Strand.getOpenReadingFrameRanges(markerRange0, 2, (-400), 41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 41 > end: 38
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("internal error - unexpected exception: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getStrandBases();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("7GWS3P#Z/u}Z");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Range range0 = new Range(0);
      strand0.getRawSubSequenceC(range0);
      StringVector stringVector0 = StringVector.getStrings("7GWS3P#Z/u}Z");
      strand0.getMatchingCodons(range0, stringVector0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("{CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 5);
      Marker marker0 = strand0.makeMarker(1);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      genbankStreamSequence0.forceReset();
      Strand.addBases(marker0, "{CkSd|");
      Range range0 = new Range(0);
      StringVector stringVector0 = StringVector.getStrings("{CkSd|");
      strand0.getStopOrStartCodons(range0, stringVector0);
      Strand.getOpenReadingFrameRanges(markerRange0, 5, 2, 5);
      strand0.getGCount();
      Strand.getCodonAtMarker(marker0);
      strand0.getSpacedTranslation(range0, false);
      int int0 = Strand.FORWARD;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Marker marker1 = strand0.makeMarker(4);
      AminoAcidSequence.getOneLetterCode("&AtO,kN*n=`8KS3~&");
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker1, false);
      bases0.getAverageAGPercent();
      Strand.getOpenReadingFrameRanges(markerRange1, 25, 2, (-2304));
      strand0.getTranslation(range0, false);
      strand0.getRawSubSequence(range0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("GC percentage of non-ambiguous bases: ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getTCount();
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.addBases(marker0, "GC percentage of non-ambiguous bases: ");
      Integer integer0 = new Integer(131129);
      boolean boolean0 = false;
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Strand.getCodonAtMarker(marker0);
      strand0.getCCount();
      System.setCurrentTimeMillis(2);
      Strand.getOpenReadingFrameRanges(markerRange0, 2, (int) integer0, 39);
      try { 
        strand0.makeMarkerFromRawPosition((-809));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -809
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNotNull(genbankStreamSequence0);
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotNull(bases0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Strand strand0 = bases0.getForwardStrand();
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertNotNull(strand0);
      
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertNotNull(aGWindowAlgorithm0);
      
      Bases bases1 = aGWindowAlgorithm0.getBases();
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertNotNull(bases1);
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      
      Strand strand1 = bases1.getReverseStrand();
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals(2, strand1.getDirection());
      assertFalse(strand1.isForwardStrand());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertFalse(strand1.equals((Object)strand0));
      assertNotNull(strand1);
      assertSame(bases0, bases1);
      assertNotSame(strand0, strand1);
      assertSame(bases1, bases0);
      assertNotSame(strand1, strand0);
      
      int int0 = strand1.getACount();
      assertEquals(0, int0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals(2, strand1.getDirection());
      assertFalse(strand1.isForwardStrand());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertFalse(strand0.equals((Object)strand1));
      assertFalse(strand1.equals((Object)strand0));
      assertSame(bases0, bases1);
      assertNotSame(strand0, strand1);
      assertSame(bases1, bases0);
      assertNotSame(strand1, strand0);
      
      Range range0 = new Range(1);
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getStart());
      assertNotNull(range0);
      
      Float float0 = aGWindowAlgorithm0.getAverage();
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertFalse(strand0.equals((Object)strand1));
      assertNotNull(float0);
      assertSame(bases0, bases1);
      assertNotSame(strand0, strand1);
      
      char[] charArray0 = strand1.getRawSubSequenceC(range0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals(2, strand1.getDirection());
      assertFalse(strand1.isForwardStrand());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertFalse(strand0.equals((Object)strand1));
      assertFalse(strand1.equals((Object)strand0));
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertSame(bases0, bases1);
      assertNotSame(strand0, strand1);
      assertSame(bases1, bases0);
      assertNotSame(strand1, strand0);
      
      try { 
        strand0.makeMarkerRangeFromRawPositions((-37), (-5));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -37
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSd|");
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(7, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(7, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNotNull(genbankStreamSequence0);
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(7, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(7, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertNotNull(bases0);
      
      Strand strand0 = bases0.getForwardStrand();
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(7, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(7, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertNotNull(strand0);
      
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(2, 2);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(7, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(7, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertNotNull(markerRange0);
      
      int int0 = strand0.getSequenceLength();
      assertEquals(7, int0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(7, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(7, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(7, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(7, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(1, marker0.getPosition());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertNotNull(marker0);
      
      Strand.addBases(marker0, "_>CkSd|");
      assertEquals(13, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(14, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(8, marker0.getPosition());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      
      String string0 = Strand.markerRangeBases(markerRange0);
      assertEquals("n", string0);
      assertEquals(13, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(14, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertNotNull(string0);
      
      int int1 = Strand.REVERSE;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      MarkerRange[] markerRangeArray0 = Strand.getOpenReadingFrameRanges(markerRange0, 5, 2, 0);
      assertEquals(13, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(14, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertNotNull(markerRangeArray0);
      assertEquals(0, markerRangeArray0.length);
      
      Range range0 = null;
      StringVector stringVector0 = new StringVector();
      assertTrue(stringVector0.isEmpty());
      assertEquals(0, stringVector0.size());
      assertEquals("[]", stringVector0.toString());
      assertEquals(10, stringVector0.capacity());
      assertNotNull(stringVector0);
      
      // Undeclared exception!
      try { 
        strand0.getStopOrStartCodons((Range) null, stringVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#");
      assertNotNull(stringReader0);
      
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      assertEquals(0, linePushBackReader0.getLineNumber());
      assertNotNull(linePushBackReader0);
      
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      assertEquals(1, linePushBackReader0.getLineNumber());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals("#", emblStreamSequence0.getHeader());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(0, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getOtherCount());
      assertNotNull(emblStreamSequence0);
      
      Bases bases0 = new Bases(emblStreamSequence0);
      assertEquals(1, linePushBackReader0.getLineNumber());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals("#", emblStreamSequence0.getHeader());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(0, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getOtherCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotNull(bases0);
      
      int int0 = bases0.getACount();
      assertEquals(0, int0);
      assertEquals(1, linePushBackReader0.getLineNumber());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals("#", emblStreamSequence0.getHeader());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(0, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getOtherCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Strand strand0 = bases0.getReverseStrand();
      assertEquals(1, linePushBackReader0.getLineNumber());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals("#", emblStreamSequence0.getHeader());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(0, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getOtherCount());
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertNotNull(strand0);
      
      Range range0 = new Range(28);
      assertEquals(1, range0.getCount());
      assertEquals(28, range0.getStart());
      assertEquals(28, range0.getEnd());
      assertNotNull(range0);
      
      String string0 = strand0.getStrandBases();
      assertEquals("", string0);
      assertEquals(1, linePushBackReader0.getLineNumber());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals("#", emblStreamSequence0.getHeader());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(0, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getOtherCount());
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        strand0.getSpacedTranslation(range0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("ir}mO>}ot");
      assertEquals(8, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(9, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertNotNull(genbankStreamSequence0);
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertEquals(8, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(9, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertNotNull(bases0);
      
      Strand strand0 = bases0.getForwardStrand();
      assertEquals(8, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(9, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertNotNull(strand0);
      
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getCCount());
      assertEquals(1, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(5, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(2, 2);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getCCount());
      assertEquals(1, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(5, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertNotNull(markerRange0);
      
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getCCount());
      assertEquals(1, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(5, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(1, marker0.getPosition());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertNotNull(marker0);
      
      Strand strand1 = markerRange0.getStrand();
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getCCount());
      assertEquals(1, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(5, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(1, strand1.getDirection());
      assertTrue(strand1.isForwardStrand());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertNotNull(strand1);
      assertSame(strand0, strand1);
      assertSame(strand1, strand0);
      
      int int0 = strand0.getRawPosition(0);
      assertEquals(0, int0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getCCount());
      assertEquals(1, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(5, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertSame(strand0, strand1);
      
      Strand.deleteRange(markerRange0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(4, genbankStreamSequence0.length());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertSame(strand0, strand1);
      
      MarkerRange[] markerRangeArray0 = Strand.getOpenReadingFrameRanges(markerRange0, 2, 1, (-5));
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(4, genbankStreamSequence0.length());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertNotNull(markerRangeArray0);
      assertEquals(0, markerRangeArray0.length);
      assertSame(strand0, strand1);
      
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker0, false);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(4, genbankStreamSequence0.length());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(1, marker0.getPosition());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertNull(markerRange1);
      assertSame(strand0, strand1);
      
      int int1 = strand0.getTCount();
      assertEquals(1, int1);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(4, genbankStreamSequence0.length());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertFalse(int1 == int0);
      assertSame(strand0, strand1);
      
      int int2 = strand0.getACount();
      assertEquals(1, int2);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(1, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(4, genbankStreamSequence0.length());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strand0, strand1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("_>CkSd|");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      strand0.getTCount();
      strand0.getSequenceLength();
      Marker marker0 = strand0.makeMarker(5);
      Strand.getORFAroundMarker(marker0, false);
      Strand.addBases(marker0, "kx]gm/'VaMzzY");
      strand0.getGCount();
      byte[] byteArray0 = new byte[0];
      Strand.addBases(marker0, "kx]gm/'VaMzzY");
      Strand.getORFAroundMarker(marker0, true);
      Selection selection0 = new Selection((Clipboard) null);
      selection0.getSelectionRange();
      // Undeclared exception!
      try { 
        strand0.getTranslation((Range) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("GC percentage f nn-ambiguous bases: ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Integer integer0 = new Integer(1);
      Marker marker0 = strand0.makeMarkerFromRawPosition(1);
      Strand.addBases(marker0, "GC percentage f nn-ambiguous bases: ");
      int int0 = Strand.FORWARD;
      Strand.getORFAroundMarker(marker0, false);
      Range range0 = new Range((-186), 0);
      strand0.getStrandBases();
      Strand.getCodonAtMarker(marker0);
      strand0.getCCount();
      System.setCurrentTimeMillis(2);
      MarkerRange markerRange0 = Strand.getORFAroundMarker(marker0, true);
      Strand.getOpenReadingFrameRanges(markerRange0, 2, (-400), (int) integer0);
      try { 
        strand0.makeMarkerFromRawPosition((-811));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -811
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("YPZNWrYt");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = new Strand(bases0, 2);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 1);
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      assertEquals(7, marker0.getPosition());
      
      Range range0 = markerRange0.getRange();
      StringVector stringVector0 = StringVector.getStrings("YPZNWrYt", "YPZNWrYt");
      strand0.getMatchingCodons(range0, stringVector0);
      assertEquals(8, range0.getStart());
      
      strand0.getCCount();
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("]:");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      FeatureVector featureVector0 = new FeatureVector();
      StringVector.getStrings("");
      MarkerRange markerRange0 = new MarkerRange(strand0, 1, 1);
      // Undeclared exception!
      try { 
        Strand.getOpenReadingFrameRanges(markerRange0, 2, 921, 2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 3 > end: 2
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }
}
