/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 14:16:15 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureChangeEvent;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.Qualifier;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FeatureChangeEvent_ESTest extends FeatureChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemts.FeatureChangeEIent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = Key.CDS;
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, feature0, key0, (Location) null, qualifierVector0, 0);
      int int0 = featureChangeEvent0.getType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = new Key("");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(mockJapaneseDate0, feature0, key0, (Location) null, qualifierVector0, 5);
      int int0 = featureChangeEvent0.getType();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      qualifierVector0.add((Qualifier) null);
      Key key0 = Key.CDS;
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, feature0, key0, (Location) null, qualifierVector0, (-5));
      featureChangeEvent0.getOldQualifiers();
      assertEquals((-5), featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = Key.CDS;
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, feature0, key0, (Location) null, qualifierVector0, (-5));
      featureChangeEvent0.getOldKey();
      assertEquals((-5), featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Key key0 = new Key("S2>t:GBTc13mia+-nS");
      QualifierVector qualifierVector0 = new QualifierVector();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FeatureChangeEvent featureChangeEvent0 = null;
      try {
        featureChangeEvent0 = new FeatureChangeEvent(mockMinguoDate0, (Feature) null, key0, (Location) null, qualifierVector0, 1961);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FeatureChangeEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      Key key0 = new Key("f");
      FeatureChangeEvent featureChangeEvent0 = null;
      try {
        featureChangeEvent0 = new FeatureChangeEvent((Object) null, (Feature) null, key0, (Location) null, qualifierVector0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = new Key("");
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, feature0, key0, (Location) null, qualifierVector0, 0);
      featureChangeEvent0.getOldKey();
      assertEquals(0, featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = new Key("");
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, feature0, key0, (Location) null, qualifierVector0, 0);
      featureChangeEvent0.getNewKey();
      assertEquals(0, featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = Key.CDS;
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, feature0, key0, (Location) null, qualifierVector0, (-5));
      featureChangeEvent0.getNewLocation();
      assertEquals((-5), featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = Key.CDS;
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, feature0, key0, (Location) null, qualifierVector0, (-5));
      featureChangeEvent0.getOldQualifiers();
      assertEquals((-5), featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = new Key("");
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, feature0, key0, (Location) null, qualifierVector0, 0);
      featureChangeEvent0.getFeature();
      assertEquals(0, featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = new Key("");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(mockJapaneseDate0, feature0, key0, (Location) null, qualifierVector0, 5);
      featureChangeEvent0.getNewQualifiers();
      assertEquals(5, featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = Key.CDS;
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, feature0, key0, (Location) null, qualifierVector0, (-5));
      featureChangeEvent0.getOldLocation();
      assertEquals((-5), featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = Key.CDS;
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, feature0, key0, (Location) null, qualifierVector0, (-5));
      boolean boolean0 = featureChangeEvent0.featureHasChanged();
      assertTrue(boolean0);
      assertEquals((-5), featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.FeatureChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Key key0 = Key.CDS;
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, feature0, key0, (Location) null, qualifierVector0, (-5));
      featureChangeEvent0.getType();
  }
}
