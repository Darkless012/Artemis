/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 14:13:18 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.Writer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.EntryChangeEvent;
import uk.ac.sanger.artemis.EntryGroup;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureKeyQualifierPredicate;
import uk.ac.sanger.artemis.FeatureSegment;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.OptionChangeEvent;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.io.BlastStreamFeature;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.Qualifier;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.MarkerChangeEvent;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;
import uk.ac.sanger.artemis.sequence.Strand;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Feature_ESTest extends Feature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      String string0 = feature0.getWriteRange();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(string0);
      assertEquals("1:6 forward", string0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      int int0 = feature0.getResidueCount(5);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertEquals(0, int0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry1 = feature0.getEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry1);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertSame(entry1, entry0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertFalse(entry1.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      int int0 = feature0.getCodonCount(2, 0, 1);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertEquals(0, int0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.writeAminoAcidsOfFeature((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.removeSegment((FeatureSegment) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.moveTo((Entry) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.hasValidEMBLKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getStrand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      // Undeclared exception!
      try { 
        feature0.getResidueCount((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getRawLastBase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getPercentGC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getMaxRawRange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getLastBaseMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getLastBase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getFirstBaseMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getFirstBase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getDownstreamBases(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Feature.getAllQualifierNames((FeatureVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(key0, (Location) null, (QualifierVector) null);
      assertNotNull(blastStreamFeature0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertEquals("CDS", key0.toString());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.copyTo((Entry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Feature feature0 = null;
      try {
        feature0 = new Feature((uk.ac.sanger.artemis.io.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("r");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(1, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(1, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = simpleEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(1, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = entry0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getOtherCount());
      assertEquals(1, fastaStreamSequence0.length());
      assertEquals(1, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Strand strand0 = feature0.getStrand();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(strand0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertEquals(6, strand0.getSequenceLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      String string0 = feature0.getValueOfQualifier("CDS");
      assertNull(string0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      StringVector stringVector0 = feature0.getValuesOfQualifier("");
      assertNull(stringVector0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Marker marker0 = feature0.getLastBaseMarker();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(marker0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Marker.LISTENER_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Marker marker0 = feature0.getFirstBaseMarker();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(marker0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      
      Strand strand0 = feature0.getStrand();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(strand0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertEquals(6, strand0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(marker0, strand0, 0);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(markerChangeEvent0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertEquals(6, strand0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      
      feature0.markerChanged(markerChangeEvent0);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertEquals(6, strand0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.length());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      int int0 = feature0.getRawLastBase();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertEquals(6, int0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      int int0 = feature0.getRawFirstBase();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertEquals(1, int0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      int int0 = feature0.getFirstBase();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertEquals(1, int0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getPositionalBaseCount((-830), 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getTranslation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      String string0 = feature0.getBases();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(string0);
      assertEquals("nnnnnn", string0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getBases();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      String string0 = feature0.getProductString();
      assertNull(string0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      String string0 = feature0.getSystematicName();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(string0);
      assertEquals("misc_feature", string0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      String string0 = feature0.getIDString();
      assertNotNull(string0);
      assertEquals("CDS", string0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(" -");
      assertNotNull(genbankStreamSequence0);
      assertEquals(2, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(2, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(2, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertNotNull(featureVector0);
      assertEquals(2, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(2, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertNotNull(filteredEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(2, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(2, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertEquals(2, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(2, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(2, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertNotNull(feature0);
      assertEquals(2, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(2, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(2, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      boolean boolean0 = feature0.hasValidStartCodon(false);
      assertTrue(boolean0);
      assertEquals(2, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(2, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(2, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      int int0 = feature0.getCodonStart();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertEquals(1, int0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      boolean boolean0 = feature0.isCDS();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertFalse(boolean0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      boolean boolean0 = feature0.isForwardFeature();
      assertTrue(boolean0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getWriteRange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("label");
      assertNotNull(mockPrintStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      assertNotNull(outputStreamWriter0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      feature0.writeNative(outputStreamWriter0);
      assertFalse(feature0.isReadOnly());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      Qualifier qualifier0 = feature0.getQualifierByName((String) null);
      assertNull(qualifier0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Location location0 = feature0.getLocation();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(location0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      Entry entry0 = feature0.getEntry();
      assertNull(entry0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      filteredEntryGroup0.createEntry();
      Feature feature0 = filteredEntryGroup0.createFeature();
      feature0.getKey();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      filteredEntryGroup0.createEntry();
      Feature feature0 = filteredEntryGroup0.createFeature();
      feature0.getTranslationBases();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      String string0 = feature0.toString();
      assertNotNull(string0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      
      feature0.addFeatureChangeListener(simpleEntryGroup0);
      assertFalse(feature0.isReadOnly());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      Key key0 = Key.CDS;
      assertNotNull(key0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "", "", false, false);
      assertNotNull(featureKeyQualifierPredicate0);
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(3, key0.length());
      assertEquals("CDS", key0.getKeyString());
      assertEquals("CDS", key0.toString());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      
      Entry entry0 = filteredEntryGroup0.createEntry("partial 3' ");
      FeatureVector featureVector0 = entry0.checkForOverlappingCDSs();
      Feature.getAllQualifierNames(featureVector0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature1 = feature0.copyTo(entry0);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(feature1);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNotSame(feature0, feature1);
      assertNotSame(feature1, feature0);
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertFalse(feature1.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.duplicate(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = new Range(1);
      assertNotNull(range0);
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getStart());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(0, entryGroup0.size());
      assertEquals(1, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(0, entryGroup0.size());
      assertEquals(1, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(1, entryGroup0.size());
      assertEquals(1, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(1, entryGroup0.size());
      assertEquals(1, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      try { 
        feature0.getPositionInSequence((-5));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -5
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getPositionInSequence(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      double double0 = feature0.getPercentGC();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getBaseCount(634);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getResidueCount(180);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getCodonCount(46, 2147483645, (-1002));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.getAACount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      int int0 = feature0.getBaseCount();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertEquals(6, int0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.fixStopCodon();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      boolean boolean0 = feature0.hasValidStartCodon(true);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertFalse(boolean0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.findOrReplaceText((String) null, true, true, true, (StringVector) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      boolean boolean0 = feature0.findOrReplaceText("exon", false, true, false, (StringVector) null, "");
      assertFalse(boolean0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      feature0.removeQualifierByName("4'Yj6#V");
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      Qualifier qualifier0 = new Qualifier((String) null);
      assertNotNull(qualifier0);
      assertNull(qualifier0.getName());
      
      // Undeclared exception!
      try { 
        feature0.addQualifierValues(qualifier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      feature0.setEntry(entry0);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      int int0 = feature0.getScore();
      assertEquals((-1), int0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.hasValidStartCodon(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("TimeZone");
      assertNotNull(genbankStreamSequence0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(8, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(8, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(8, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(8, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(8, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(8, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(8, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(8, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertNotNull(featureVector0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(8, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(8, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(8, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, simpleEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertNotNull(filteredEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(8, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(8, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(8, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(8, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(8, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertNotNull(entry0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(8, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(8, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(8, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(8, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertNotNull(feature0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(8, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(8, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(8, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(8, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      boolean boolean0 = feature0.isProteinFeature();
      assertFalse(boolean0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(8, genbankStreamSequence0.getOtherCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(8, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(8, bases0.getLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(8, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(8, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      boolean boolean0 = feature0.isProteinFeature();
      assertTrue(boolean0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      String string0 = feature0.getUpstreamBases(2);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, (-2));
      assertNotNull(sequenceChangeEvent0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals((-2), sequenceChangeEvent0.getType());
      assertEquals(0, sequenceChangeEvent0.getPosition());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
      
      feature0.sequenceChanged(sequenceChangeEvent0);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertNull(sequenceChangeEvent0.getSubSequence());
      assertEquals((-2), sequenceChangeEvent0.getType());
      assertEquals(0, sequenceChangeEvent0.getPosition());
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(3, SequenceChangeEvent.REVERSE_COMPLEMENT);
      assertEquals(1, SequenceChangeEvent.DELETION);
      assertEquals(5, SequenceChangeEvent.CONTIG_REORDER);
      assertEquals(2, SequenceChangeEvent.INSERTION);
      assertEquals(4, SequenceChangeEvent.CONTIG_REVERSE_COMPLEMENT);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(" ~psW,9{eMZ?#");
      assertNotNull(emblStreamSequence0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(emblStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(13, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(13, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(13, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = simpleEntryGroup0.createEntry(" ~psW,9{eMZ?#");
      assertNotNull(entry0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(13, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(13, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range((-1069), 1);
      assertNotNull(range0);
      assertEquals(1, range0.getEnd());
      assertEquals((-1069), range0.getStart());
      assertEquals(1071, range0.getCount());
      
      FeatureVector featureVector0 = entry0.getFeaturesInRange(range0);
      assertNotNull(featureVector0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(13, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(13, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, range0.getEnd());
      assertEquals((-1069), range0.getStart());
      assertEquals(1071, range0.getCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "product");
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(13, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(13, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, range0.getEnd());
      assertEquals((-1069), range0.getStart());
      assertEquals(1071, range0.getCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("product", filteredEntryGroup0.getFilterName());
      assertEquals(13, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertNotNull(feature0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(13, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(13, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, range0.getEnd());
      assertEquals((-1069), range0.getStart());
      assertEquals(1071, range0.getCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("product", filteredEntryGroup0.getFilterName());
      assertEquals(13, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range1 = feature0.getMaxRawRange();
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(13, emblStreamSequence0.length());
      assertEquals(0, emblStreamSequence0.getTCount());
      assertEquals(13, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(13, simpleEntryGroup0.getSequenceLength());
      assertEquals(1, simpleEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, range0.getEnd());
      assertEquals((-1069), range0.getStart());
      assertEquals(1071, range0.getCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals("product", filteredEntryGroup0.getFilterName());
      assertEquals(13, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(13, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(13, range1.getEnd());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      boolean boolean0 = feature0.isReadOnly();
      assertFalse(boolean0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      feature0.resetColour();
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      assertNotNull(blastStreamFeature0);
      
      Feature feature0 = new Feature(blastStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      // Undeclared exception!
      try { 
        feature0.markerChanged((MarkerChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      String string0 = feature0.getDownstreamBases(2);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      feature0.writeAminoAcidsOfFeature(mockPrintWriter0);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      feature0.moveTo(entry0, false);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(6, range0.getCount());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(1, filteredEntryGroup0.size());
      assertFalse(entry0.isReadOnly());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      boolean boolean0 = feature0.hasValidStartCodon();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertTrue(boolean0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      
      Marker marker0 = feature0.getFirstCodingBaseMarker();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(marker0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
      
      int int0 = feature0.getFeaturePositionFromMarker(marker0);
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertEquals(0, int0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(6, range0.getCount());
      assertEquals(5, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(0, entryGroup0.refCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals(0, Marker.LISTENER_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      assertNotNull(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Range range0 = new Range(0, 5);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entryGroup0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertNotNull(featureVector0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(filteredEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(0, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(0, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Entry entry0 = filteredEntryGroup0.createEntry();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(entry0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(entry0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      Feature feature0 = filteredEntryGroup0.createFeature();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertNotNull(feature0);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      double double0 = feature0.get12CorrelationScore();
      assertFalse(simpleEntryGroup0.equals((Object)entryGroup0));
      assertFalse(entryGroup0.equals((Object)simpleEntryGroup0));
      assertEquals(0.5, double0, 0.01);
      assertNotSame(simpleEntryGroup0, entryGroup0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
      assertEquals(0, genbankStreamSequence0.length());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(0, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(0, genbankStreamSequence0.getOtherCount());
      assertEquals(0, genbankStreamSequence0.getTCount());
      assertEquals(0, bases0.getLength());
      assertEquals(0, simpleEntryGroup0.getSequenceLength());
      assertEquals(0, simpleEntryGroup0.refCount());
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, range0.getStart());
      assertEquals(5, range0.getEnd());
      assertEquals(6, range0.getCount());
      assertEquals(6, entryGroup0.getSequenceLength());
      assertEquals(1, entryGroup0.size());
      assertEquals(0, entryGroup0.refCount());
      assertEquals("aJ$ihh/1|\"DH{1#<J.4", filteredEntryGroup0.getFilterName());
      assertEquals(0, filteredEntryGroup0.refCount());
      assertEquals(1, filteredEntryGroup0.size());
      assertEquals(6, filteredEntryGroup0.getSequenceLength());
      assertFalse(feature0.isReadOnly());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      assertNotNull(emblStreamFeature0);
      
      Feature feature0 = new Feature(emblStreamFeature0);
      assertNotNull(feature0);
      assertFalse(feature0.isReadOnly());
      
      Reader reader0 = feature0.toReader();
      assertNotNull(reader0);
      assertFalse(feature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Range range0 = new Range(0, 5);
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "");
      filteredEntryGroup0.createEntry();
      Feature feature0 = filteredEntryGroup0.createFeature();
      OptionChangeEvent optionChangeEvent0 = new OptionChangeEvent(entryGroup0, "");
      feature0.optionChanged(optionChangeEvent0);
      assertEquals("", optionChangeEvent0.getOptionName());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Range range0 = new Range(0, 5);
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      filteredEntryGroup0.createEntry();
      Feature feature0 = filteredEntryGroup0.createFeature();
      String string0 = feature0.getNote();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Range range0 = new Range(0, 5);
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      filteredEntryGroup0.createEntry();
      Feature feature0 = filteredEntryGroup0.createFeature();
      boolean boolean0 = feature0.trimStart(false, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Range range0 = new Range(0, 5);
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(entryGroup0, featureVector0, "aJ$ihh/1|\"DH{1#<J.4");
      Entry entry0 = filteredEntryGroup0.createEntry();
      Feature feature0 = filteredEntryGroup0.createFeature();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, 5);
      feature0.entryChanged(entryChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(genbankStreamFeature0);
      Feature feature0 = new Feature(blastStreamFeature0);
      // Undeclared exception!
      try { 
        feature0.removeFromEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }
}
