/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:52:22 GMT 2017
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.AlignMatch;
import uk.ac.sanger.artemis.BlastM8ComparisonData;
import uk.ac.sanger.artemis.MSPcrunchComparisonData;
import uk.ac.sanger.artemis.MegaBlastComparisonData;
import uk.ac.sanger.artemis.SSAHAComparisonData;
import uk.ac.sanger.artemis.SimpleComparisonData;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleComparisonData_ESTest extends SimpleComparisonData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AlignMatch alignMatch0 = SimpleComparisonData.makeAlignMatch((-1325), (-1325), 0, 0, 0, (-1325));
      assertEquals(0, alignMatch0.getScore());
      assertFalse(alignMatch0.isRevMatch());
      assertEquals(0, alignMatch0.getLength());
      assertEquals((-1325), alignMatch0.getPercentID());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MegaBlastComparisonData megaBlastComparisonData0 = new MegaBlastComparisonData();
      AlignMatch[] alignMatchArray0 = new AlignMatch[1];
      Range range0 = new Range((-1125));
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 0, (-1125));
      alignMatchArray0[0] = alignMatch0;
      megaBlastComparisonData0.setMatches(alignMatchArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AlignMatch alignMatch0 = SimpleComparisonData.makeAlignMatch(2360, 0, 2360, (-388), 2360, (-82));
      assertEquals((-82), alignMatch0.getPercentID());
      assertFalse(alignMatch0.isRevMatch());
      assertEquals(2360, alignMatch0.getLength());
      assertEquals(2360, alignMatch0.getScore());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AlignMatch alignMatch0 = SimpleComparisonData.makeAlignMatch(3073, 52, (-478), 1896, 126, (-3));
      assertTrue(alignMatch0.isRevMatch());
      assertEquals(3021, alignMatch0.getLength());
      assertEquals((-3), alignMatch0.getPercentID());
      assertEquals(126, alignMatch0.getScore());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlignMatch alignMatch0 = SimpleComparisonData.makeAlignMatch((-38), (-38), (-38), 178, 1675, 0);
      assertEquals(0, alignMatch0.getPercentID());
      assertEquals(0, alignMatch0.getLength());
      assertEquals(1675, alignMatch0.getScore());
      assertFalse(alignMatch0.isRevMatch());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MSPcrunchComparisonData mSPcrunchComparisonData0 = new MSPcrunchComparisonData();
      SimpleComparisonData simpleComparisonData0 = mSPcrunchComparisonData0.getNewSimpleComparisonData();
      assertNotSame(mSPcrunchComparisonData0, simpleComparisonData0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MSPcrunchComparisonData mSPcrunchComparisonData0 = new MSPcrunchComparisonData();
      AlignMatch[] alignMatchArray0 = new AlignMatch[0];
      mSPcrunchComparisonData0.setMatches(alignMatchArray0);
      AlignMatch[] alignMatchArray1 = mSPcrunchComparisonData0.getMatches();
      assertSame(alignMatchArray1, alignMatchArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlastM8ComparisonData blastM8ComparisonData0 = new BlastM8ComparisonData();
      try { 
        blastM8ComparisonData0.makeMatchFromString("l!e6jdt!oL$");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // while reading blast -m 8 data: not enough fields in this line: l!e6jdt!oL$
         //
         verifyException("uk.ac.sanger.artemis.BlastM8ComparisonData", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MSPcrunchComparisonData mSPcrunchComparisonData0 = new MSPcrunchComparisonData();
      // Undeclared exception!
      try { 
        mSPcrunchComparisonData0.makeMatchFromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlastM8ComparisonData blastM8ComparisonData0 = new BlastM8ComparisonData();
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("hydrophobicity");
      Bases bases0 = new Bases(emblStreamSequence0);
      // Undeclared exception!
      try { 
        blastM8ComparisonData0.flipMatchesIfNeeded(bases0, bases0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.SimpleComparisonData", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SSAHAComparisonData sSAHAComparisonData0 = new SSAHAComparisonData();
      // Undeclared exception!
      try { 
        sSAHAComparisonData0.getMinimumScore();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.SimpleComparisonData", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MegaBlastComparisonData megaBlastComparisonData0 = new MegaBlastComparisonData();
      // Undeclared exception!
      try { 
        megaBlastComparisonData0.getMaximumScore();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.SimpleComparisonData", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AlignMatch alignMatch0 = SimpleComparisonData.makeAlignMatch((-512), (-512), 54, 0, 2219, 3946);
      assertTrue(alignMatch0.isRevMatch());
      assertEquals(2219, alignMatch0.getScore());
      assertEquals(0, alignMatch0.getLength());
      assertEquals(3946, alignMatch0.getPercentID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AlignMatch alignMatch0 = SimpleComparisonData.makeAlignMatch((-1452), 1660, (-1452), 1660, 0, (-1452));
      assertEquals((-1452), alignMatch0.getPercentID());
      assertEquals(3112, alignMatch0.getLength());
      assertFalse(alignMatch0.isRevMatch());
      assertEquals(0, alignMatch0.getScore());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AlignMatch alignMatch0 = SimpleComparisonData.makeAlignMatch(0, (-38), 0, (-38), (-38), (-38));
      BlastM8ComparisonData blastM8ComparisonData0 = new BlastM8ComparisonData();
      AlignMatch[] alignMatchArray0 = new AlignMatch[9];
      alignMatchArray0[0] = alignMatch0;
      alignMatchArray0[1] = alignMatch0;
      // Undeclared exception!
      try { 
        blastM8ComparisonData0.setMatches(alignMatchArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.SimpleComparisonData", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 327);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(charArrayReader0);
      MSPcrunchComparisonData mSPcrunchComparisonData0 = null;
      try {
        mSPcrunchComparisonData0 = new MSPcrunchComparisonData(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // while reading MSPcrunch data: not enough fields in this line: 3\u0000\u0000
         //
         verifyException("uk.ac.sanger.artemis.MSPcrunchComparisonData", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 327);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(charArrayReader0);
      MSPcrunchComparisonData mSPcrunchComparisonData0 = new MSPcrunchComparisonData(linePushBackReader0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MSPcrunchComparisonData mSPcrunchComparisonData0 = new MSPcrunchComparisonData();
      AlignMatch[] alignMatchArray0 = mSPcrunchComparisonData0.getMatches();
      assertNull(alignMatchArray0);
  }
}
