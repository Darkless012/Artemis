/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 03:40:38 GMT 2017
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureChangeEvent;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FeatureChangeEvent_ESTest extends FeatureChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Key key0 = Key.CDS;
      QualifierVector qualifierVector0 = new QualifierVector();
      FeatureChangeEvent featureChangeEvent0 = null;
      try {
        featureChangeEvent0 = new FeatureChangeEvent(qualifierVector0, (Feature) null, key0, (Location) null, qualifierVector0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FeatureChangeEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("AC");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Key key0 = Key.CDS;
      Range range0 = new Range(1);
      Location location0 = new Location(range0);
      Feature feature0 = entry0.createFeature(key0, location0);
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(mockJapaneseDate0, feature0, key0, location0, (QualifierVector) null, 118);
      featureChangeEvent0.getOldQualifiers();
      assertEquals(118, featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("AC");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Key key0 = Key.CDS;
      Range range0 = new Range(1);
      Location location0 = new Location(range0);
      Feature feature0 = entry0.createFeature(key0, location0);
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(mockJapaneseDate0, feature0, key0, location0, (QualifierVector) null, 118);
      featureChangeEvent0.getNewQualifiers();
      assertEquals(118, featureChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("AC");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Key key0 = Key.CDS;
      Range range0 = new Range(1);
      Location location0 = new Location(range0);
      Feature feature0 = entry0.createFeature(key0, location0);
      FeatureChangeEvent featureChangeEvent0 = new FeatureChangeEvent(mockJapaneseDate0, feature0, key0, location0, (QualifierVector) null, 118);
      featureChangeEvent0.featureHasChanged();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Key key0 = Key.CDS;
      QualifierVector qualifierVector0 = new QualifierVector();
      FeatureChangeEvent featureChangeEvent0 = null;
      try {
        featureChangeEvent0 = new FeatureChangeEvent((Object) null, (Feature) null, key0, (Location) null, qualifierVector0, 1815);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }
}
