/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 00:29:29 GMT 2017
 */

package uk.ac.sanger.artemis.chado;

import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.AWTKeyStroke;
import java.sql.Timestamp;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.chado.ChadoTransaction;
import uk.ac.sanger.artemis.io.DatabaseStreamFeature;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.GFFStreamFeature;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RangeVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChadoTransaction_ESTest extends ChadoTransaction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Key key0 = Key.CDS;
      Range range0 = new Range(0, 0);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, false);
      QualifierVector qualifierVector0 = new QualifierVector();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(key0, location0, qualifierVector0);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(0, (Object) null, (Timestamp) null, gFFStreamFeature0, (String) null, "f_@+GV.l");
      int int0 = chadoTransaction0.getType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChadoTransaction chadoTransaction0 = new ChadoTransaction((-2240), (Object) null, (Timestamp) null, (GFFStreamFeature) null, "TV>M]O", "TV>M]O");
      int int0 = chadoTransaction0.getType();
      assertEquals((-2240), int0);
      assertEquals("TV>M]O", chadoTransaction0.getFeatureKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(1280, mockJapaneseDate0, (Timestamp) null, (GFFStreamFeature) null, "UPDATE", "UPDATE");
      chadoTransaction0.setOldUniquename("UPDATE");
      String string0 = chadoTransaction0.getOldUniquename();
      assertEquals("UPDATE", chadoTransaction0.getFeatureKey());
      assertNotNull(string0);
      assertEquals(1280, chadoTransaction0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Key key0 = Key.CDS;
      RangeVector rangeVector0 = new RangeVector();
      Range range0 = new Range((-739), (-739));
      rangeVector0.add(range0);
      Location location0 = new Location(rangeVector0, false);
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(key0, location0, (QualifierVector) null);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(3, mockThaiBuddhistDate0, (Timestamp) null, gFFStreamFeature0, "", "");
      chadoTransaction0.old_uniquename = "";
      chadoTransaction0.getOldUniquename();
      assertEquals("", chadoTransaction0.getFeatureKey());
      assertEquals("DELETE", chadoTransaction0.getTypeAsString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(308, (Object) null, (Timestamp) null, (GFFStreamFeature) null, "Can't build symbol from list ", "");
      chadoTransaction0.getLastModified();
      assertEquals(308, chadoTransaction0.getType());
      assertEquals("Can't build symbol from list ", chadoTransaction0.getFeatureKey());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Timestamp timestamp0 = new Timestamp(0);
      timestamp0.setNanos(1570);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(0, integer0, timestamp0, (GFFStreamFeature) null, "FX%3;g", "FX%3;g");
      chadoTransaction0.getLastModified();
      assertEquals(0, chadoTransaction0.getType());
      assertEquals("FX%3;g", chadoTransaction0.getFeatureKey());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(763, 2841, false);
      Key key0 = Key.CDS;
      Range range0 = new Range(763);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(key0, location0, qualifierVector0);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(763, aWTKeyStroke0, (Timestamp) null, databaseStreamFeature0, (String) null, "exon");
      chadoTransaction0.getGff_feature();
      assertEquals(763, chadoTransaction0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(308, (Object) null, (Timestamp) null, (GFFStreamFeature) null, "Can't build symbol from list ", "");
      chadoTransaction0.getFeatureObject();
      assertEquals(308, chadoTransaction0.getType());
      assertEquals("Can't build symbol from list ", chadoTransaction0.getFeatureKey());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(763, 2841, false);
      Key key0 = Key.CDS;
      Range range0 = new Range(763);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(key0, location0, qualifierVector0);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(763, aWTKeyStroke0, (Timestamp) null, databaseStreamFeature0, (String) null, "exon");
      String string0 = chadoTransaction0.getFeatureKey();
      assertEquals(763, chadoTransaction0.getType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(1, (Object) null, (Timestamp) null, (GFFStreamFeature) null, "Xev5FXS'O.e<HQ$", "98/~'`NKZzm");
      String string0 = chadoTransaction0.getFeatureKey();
      assertEquals("Xev5FXS'O.e<HQ$", string0);
      assertNotNull(string0);
      assertEquals(1, chadoTransaction0.getType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Timestamp timestamp0 = new Timestamp(0);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(0, integer0, timestamp0, (GFFStreamFeature) null, "FX%3;g", "FX%3;g");
      ChadoTransaction chadoTransaction1 = chadoTransaction0.copy();
      assertEquals(0, chadoTransaction1.getType());
      assertNotSame(chadoTransaction1, chadoTransaction0);
      assertEquals("FX%3;g", chadoTransaction1.getFeatureKey());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1718);
      Timestamp timestamp0 = new Timestamp(0L);
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction((-1716), integer0, timestamp0, gFFStreamFeature0, "", "");
      ChadoTransaction chadoTransaction1 = chadoTransaction0.copy();
      assertEquals("", chadoTransaction1.getFeatureKey());
      assertEquals((-1716), chadoTransaction0.getType());
      assertNotSame(chadoTransaction1, chadoTransaction0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Key key0 = Key.CDS;
      RangeVector rangeVector0 = new RangeVector();
      Range range0 = new Range((-739), (-739));
      rangeVector0.add(range0);
      Location location0 = new Location(rangeVector0, false);
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(key0, location0, (QualifierVector) null);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(3, mockThaiBuddhistDate0, (Timestamp) null, gFFStreamFeature0, (String) null, "");
      String string0 = chadoTransaction0.getTypeAsString();
      assertEquals("DELETE", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Timestamp timestamp0 = new Timestamp(0);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(0, integer0, timestamp0, (GFFStreamFeature) null, "FX%3;g", "FX%3;g");
      String string0 = chadoTransaction0.getTypeAsString();
      assertEquals("FX%3;g", chadoTransaction0.getFeatureKey());
      assertEquals("", string0);
      assertEquals(0, chadoTransaction0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(1, (Object) null, (Timestamp) null, (GFFStreamFeature) null, "Xev5FXS'O.e<HQ$", "98/~'`NKZzm");
      int int0 = chadoTransaction0.getType();
      assertEquals(1, int0);
      assertEquals("Xev5FXS'O.e<HQ$", chadoTransaction0.getFeatureKey());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Timestamp timestamp0 = new Timestamp(0);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(0, integer0, timestamp0, (GFFStreamFeature) null, "FX%3;g", "FX%3;g");
      chadoTransaction0.getLastModified();
      assertEquals(0, chadoTransaction0.getType());
      assertEquals("FX%3;g", chadoTransaction0.getFeatureKey());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Timestamp timestamp0 = new Timestamp(0);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(0, integer0, timestamp0, (GFFStreamFeature) null, "FX%3;g", "FX%3;g");
      chadoTransaction0.getGff_feature();
      assertEquals("FX%3;g", chadoTransaction0.getFeatureKey());
      assertEquals(0, chadoTransaction0.getType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1718);
      Timestamp timestamp0 = new Timestamp(0L);
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction((-1716), integer0, timestamp0, gFFStreamFeature0, "", "");
      String string0 = chadoTransaction0.getFeatureKey();
      assertEquals("", string0);
      assertEquals((-1716), chadoTransaction0.getType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(1718);
      Timestamp timestamp0 = new Timestamp(0L);
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0, true);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction((-1716), integer0, timestamp0, gFFStreamFeature0, "", "");
      chadoTransaction0.getFeatureObject();
      assertEquals((-1716), chadoTransaction0.getType());
      assertEquals("", chadoTransaction0.getFeatureKey());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      ChadoTransaction chadoTransaction0 = new ChadoTransaction((-1), mockThaiBuddhistDate0, (Timestamp) null, (GFFStreamFeature) null, "J]b", "J]b");
      chadoTransaction0.getUniquename();
      assertEquals("J]b", chadoTransaction0.getFeatureKey());
      assertEquals((-1), chadoTransaction0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(308, (Object) null, (Timestamp) null, (GFFStreamFeature) null, "Can't build symbol from list ", "");
      chadoTransaction0.setUniquename("");
      String string0 = chadoTransaction0.getUniquename();
      assertEquals(308, chadoTransaction0.getType());
      assertNotNull(string0);
      assertEquals("Can't build symbol from list ", chadoTransaction0.getFeatureKey());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Key key0 = Key.CDS;
      Range range0 = new Range(3, 3);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(key0, location0, qualifierVector0);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(3, (Object) null, (Timestamp) null, gFFStreamFeature0, ",1ocJ", ",1ocJ");
      String string0 = chadoTransaction0.getUniquename();
      assertEquals(",1ocJ", chadoTransaction0.getFeatureKey());
      assertNotNull(string0);
      assertEquals(3, chadoTransaction0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Key key0 = Key.CDS;
      RangeVector rangeVector0 = new RangeVector();
      Range range0 = new Range((-739), (-739));
      rangeVector0.add(range0);
      Location location0 = new Location(rangeVector0, false);
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(key0, location0, (QualifierVector) null);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(3, mockThaiBuddhistDate0, (Timestamp) null, gFFStreamFeature0, "", "");
      String string0 = chadoTransaction0.getLogComment();
      assertEquals("[DELETE]  KEY=", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(308, (Object) null, (Timestamp) null, (GFFStreamFeature) null, "Can't build symbol from list ", "");
      ChadoTransaction chadoTransaction1 = chadoTransaction0.copy();
      assertEquals(308, chadoTransaction1.getType());
      
      chadoTransaction1.type = 2;
      String string0 = chadoTransaction1.getLogComment();
      assertEquals("[INSERT]  KEY=Can't build symbol from list ", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(1280, mockJapaneseDate0, (Timestamp) null, (GFFStreamFeature) null, "UPDATE", "UPDATE");
      String string0 = chadoTransaction0.getLogComment();
      assertEquals(1280, chadoTransaction0.getType());
      assertEquals("[] UPDATE KEY=UPDATE", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(763, 2841, false);
      Key key0 = Key.CDS;
      Range range0 = new Range(763);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(key0, location0, qualifierVector0);
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(763, aWTKeyStroke0, (Timestamp) null, databaseStreamFeature0, (String) null, "exon");
      chadoTransaction0.getLogComment();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(308, (Object) null, (Timestamp) null, (GFFStreamFeature) null, "Can't build symbol from list ", "");
      chadoTransaction0.setUniquename("");
      ChadoTransaction chadoTransaction1 = chadoTransaction0.copy();
      assertEquals(308, chadoTransaction0.getType());
      assertNotSame(chadoTransaction1, chadoTransaction0);
      assertEquals("Can't build symbol from list ", chadoTransaction1.getFeatureKey());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ChadoTransaction chadoTransaction0 = new ChadoTransaction(1280, mockJapaneseDate0, (Timestamp) null, (GFFStreamFeature) null, "UPDATE", "UPDATE");
      chadoTransaction0.getOldUniquename();
      assertEquals("UPDATE", chadoTransaction0.getFeatureKey());
      assertEquals(1280, chadoTransaction0.getType());
  }
}
