/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 03:28:10 GMT 2017
 */

package uk.ac.sanger.artemis.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Graphics;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextPane;
import javax.swing.JToolTip;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.editor.MultiLineToolTipUI;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiLineToolTipUI_ESTest extends MultiLineToolTipUI_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiLineToolTipUI.setDisplayAcceleratorKey(false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JMenu jMenu0 = new JMenu((Action) null);
      multiLineToolTipUI0.installUI(jMenu0);
      assertTrue(jMenu0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getDocument();
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      multiLineToolTipUI0.getPreferredSize(jToolTip0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      multiLineToolTipUI0.getMinimumSize(jToolTip0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.uninstallUI((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.LookAndFeel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.paint(debugGraphics0, (JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      DebugGraphics debugGraphics0 = new DebugGraphics();
      FlowLayout flowLayout0 = new FlowLayout();
      JPanel jPanel0 = new JPanel(flowLayout0);
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.paint(debugGraphics0, jPanel0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JPanel cannot be cast to javax.swing.JToolTip
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.installUI((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.LookAndFeel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getPreferredSize((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JCheckBox jCheckBox0 = new JCheckBox("ToolTip.font");
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getPreferredSize(jCheckBox0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JCheckBox cannot be cast to javax.swing.JToolTip
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getMinimumSize((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      BorderLayout borderLayout0 = new BorderLayout();
      JPanel jPanel0 = new JPanel(borderLayout0);
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getMinimumSize(jPanel0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JPanel cannot be cast to javax.swing.JToolTip
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getMaximumSize((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JColorChooser jColorChooser0 = new JColorChooser();
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getMaximumSize(jColorChooser0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JColorChooser cannot be cast to javax.swing.JToolTip
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      MultiLineToolTipUI multiLineToolTipUI0 = (MultiLineToolTipUI)MultiLineToolTipUI.createUI(jPasswordField0);
      // Undeclared exception!
      try { 
        multiLineToolTipUI0.getAcceleratorString((JToolTip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.MultiLineToolTipUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      String string0 = multiLineToolTipUI0.getAcceleratorString(jToolTip0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiLineToolTipUI.setDisplayAcceleratorKey(true);
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      multiLineToolTipUI0.getPreferredSize(jToolTip0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      JToolTip jToolTip1 = jToolTip0.createToolTip();
      String string0 = multiLineToolTipUI0.getAcceleratorString(jToolTip1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      multiLineToolTipUI0.paint((Graphics) null, jToolTip0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      multiLineToolTipUI0.getMaximumSize(jToolTip0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiLineToolTipUI multiLineToolTipUI0 = MultiLineToolTipUI.SINGLETON;
      JToolTip jToolTip0 = new JToolTip();
      multiLineToolTipUI0.uninstallUI(jToolTip0);
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiLineToolTipUI.initialize();
  }
}
