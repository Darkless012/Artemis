/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 03:26:22 GMT 2017
 */

package uk.ac.sanger.artemis.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import javax.swing.DebugGraphics;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.svggen.SVGGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMImplementation;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.editor.EvidenceViewer;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvidenceViewer_ESTest extends EvidenceViewer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(">5");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      FeatureVector featureVector0 = new FeatureVector();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, (JDesktopPane) null);
      // Undeclared exception!
      try { 
        evidenceViewer0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(">5");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      FeatureVector featureVector0 = new FeatureVector();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, (JDesktopPane) null);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("", "Y}H;iG}DE+u4v|&k", "kEy{?`/.rl:H0LDD[N");
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(genericDocument0);
      DebugGraphics debugGraphics0 = new DebugGraphics(sVGGraphics2D0);
      // Undeclared exception!
      try { 
        evidenceViewer0.paintComponent(debugGraphics0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.DebugGraphics cannot be cast to java.awt.Graphics2D
         //
         verifyException("uk.ac.sanger.artemis.editor.EvidenceViewer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      EvidenceViewer evidenceViewer0 = null;
      try {
        evidenceViewer0 = new EvidenceViewer((Feature) null, featureVector0, jDesktopPane0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.EvidenceViewer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(">5");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      FeatureVector featureVector0 = new FeatureVector();
      JInternalFrame jInternalFrame0 = new JInternalFrame(">5");
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, (JDesktopPane) null);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MouseEvent mouseEvent0 = new MouseEvent(jInternalFrame0, 1, 1, 5, 1, 5, (-5), (-318), 1278, true, 1);
      evidenceViewer_MouseClickListener0.mouseClicked(mouseEvent0);
      assertFalse(mouseEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(">5");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      FeatureVector featureVector0 = new FeatureVector();
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, (JDesktopPane) null);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType(">5", "Y}H;iG}DE+u4v|&k", "kEy{?`/.rl:H0LDD[N");
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(genericDocument0);
      evidenceViewer0.paintComponent(sVGGraphics2D0);
      assertEquals(3, SVGGraphics2D.DEFAULT_MAX_GC_OVERRIDES);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(">5");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      FeatureVector featureVector0 = new FeatureVector();
      JInternalFrame jInternalFrame0 = new JInternalFrame(">5");
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, (JDesktopPane) null);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jInternalFrame0, 5, 5, 629, (-1), 292552704, 334, 5, 292552704, false, menuElementArray0, menuSelectionManager0);
      evidenceViewer_MouseClickListener0.mouseReleased(menuDragMouseEvent0);
      assertFalse(menuDragMouseEvent0.isControlDown());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(">5");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      FeatureVector featureVector0 = new FeatureVector();
      JInternalFrame jInternalFrame0 = new JInternalFrame(">5");
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, (JDesktopPane) null);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jInternalFrame0, 5, 5, 629, (-1), 292552704, 334, 5, 292552704, false, menuElementArray0, menuSelectionManager0);
      evidenceViewer_MouseClickListener0.mouseExited(menuDragMouseEvent0);
      assertEquals(5, menuDragMouseEvent0.getYOnScreen());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(">5");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      FeatureVector featureVector0 = new FeatureVector();
      JInternalFrame jInternalFrame0 = new JInternalFrame(">5");
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, (JDesktopPane) null);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jInternalFrame0, 5, 5, 629, (-1), 292552704, 334, 5, 292552704, false, menuElementArray0, menuSelectionManager0);
      evidenceViewer_MouseClickListener0.mousePressed(menuDragMouseEvent0);
      assertEquals(0, menuDragMouseEvent0.getButton());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(">5");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      FeatureVector featureVector0 = new FeatureVector();
      JInternalFrame jInternalFrame0 = new JInternalFrame(">5");
      EvidenceViewer evidenceViewer0 = new EvidenceViewer(feature0, featureVector0, (JDesktopPane) null);
      EvidenceViewer.MouseClickListener evidenceViewer_MouseClickListener0 = evidenceViewer0.new MouseClickListener();
      MouseEvent mouseEvent0 = new MouseEvent(jInternalFrame0, (-957), (-957), 2, 1, 191, 5, true);
      evidenceViewer_MouseClickListener0.mouseEntered(mouseEvent0);
  }
}
