/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 03:28:20 GMT 2017
 */

package uk.ac.sanger.artemis.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.editor.HitInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HitInfo_ESTest extends HitInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("X-1,WW&:U788w;", "X-1,WW&:U788w;");
      hitInfo0.setFastaHitInfo("ht{=. kxNg!u|1.%");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("!", "O]7q)QvdF-Hr@F");
      hitInfo0.setUngapped("$ZAz");
      String string0 = hitInfo0.getUngapped();
      assertEquals("$ZAz", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      hitInfo0.setUngapped("");
      String string0 = hitInfo0.getUngapped();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(" BI<#K^8h4%8I8%6f>;", " BI<#K^8h4%8I8%6f>;");
      hitInfo0.setSubjectRange(" BI<#K^8h4%8I8%6f>;");
      String string0 = hitInfo0.getSubjectRange();
      assertEquals(" BI<#K^8h4%8I8%6f>;", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("5<se#\"lU=/t3b7TLo,", "5<se#\"lU=/t3b7TLo,");
      hitInfo0.setSubjectRange("");
      String string0 = hitInfo0.getSubjectRange();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("cn !5IJx", "cn !5IJx");
      hitInfo0.setStartPosition(3242);
      int int0 = hitInfo0.getStartPosition();
      assertEquals(3242, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(" ", " ");
      hitInfo0.setStartPosition((-275));
      int int0 = hitInfo0.getStartPosition();
      assertEquals((-275), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("y=!", "y=!");
      hitInfo0.setScore("y=!");
      String string0 = hitInfo0.getScore();
      assertEquals("y=!", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("wg]Dq`  /v[G", "");
      hitInfo0.setScore("");
      String string0 = hitInfo0.getScore();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "RY#StK;>&bFME");
      hitInfo0.setQueryRange("RY#StK;>&bFME");
      String string0 = hitInfo0.getQueryRange();
      assertEquals("RY#StK;>&bFME", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(",z", "");
      hitInfo0.setQueryRange("");
      String string0 = hitInfo0.getQueryRange();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      hitInfo0.setQueryPosition(765, 3265);
      Vector vector0 = hitInfo0.getQueryPosition();
      assertEquals("[765, 3265]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("_", "");
      hitInfo0.setOverlap("luwW;%TwtX&Z|fO!");
      String string0 = hitInfo0.getOverlap();
      assertEquals("luwW;%TwtX&Z|fO!", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", " m<7;U!<nkJ{d");
      hitInfo0.setOverlap("");
      String string0 = hitInfo0.getOverlap();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      hitInfo0.setOrganism("2ip8*X}(K8o_:=Oq-{");
      String string0 = hitInfo0.getOrganism();
      assertEquals("2ip8*X}(K8o_:=Oq-{", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      hitInfo0.setOrganism("");
      String string0 = hitInfo0.getOrganism();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("FxSv:E3", "");
      hitInfo0.setLength("0n~92/ A:");
      String string0 = hitInfo0.getLength();
      assertEquals("0n~92/ A:", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("|", "|");
      hitInfo0.setLength("");
      String string0 = hitInfo0.getLength();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      hitInfo0.setIdentity("'p");
      String string0 = hitInfo0.getIdentity();
      assertEquals("'p", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      hitInfo0.setIdentity("");
      String string0 = hitInfo0.getIdentity();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "TsH ");
      hitInfo0.setFastaHitInfo("H*]rW8,u<6~9 h");
      String string0 = hitInfo0.getID();
      assertEquals("H*]rW8,u<6~9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(" ", " ");
      hitInfo0.setBLASTPInfo(" ");
      String string0 = hitInfo0.getID();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      String string0 = hitInfo0.getHeader();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("$I~2c$FPA<g", "$I~2c$FPA<g");
      hitInfo0.setGoAssociation("", "t2OQ");
      String string0 = hitInfo0.getGoAssociation("");
      assertEquals("t2OQ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("d2r,B*98nO8g", ";Fs,J");
      hitInfo0.setGeneName("\"FV7y");
      String string0 = hitInfo0.getGeneName();
      assertEquals("\"FV7y", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      hitInfo0.setGeneName("");
      String string0 = hitInfo0.getGeneName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("S#6&Sgi/'a\"C`", "S#6&Sgi/'a\"C`");
      hitInfo0.setGO("S#6&Sgi/'a\"C`");
      Vector vector0 = hitInfo0.getGO();
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("AI)OpFJn?y.", "AI)OpFJn?y.");
      hitInfo0.setEndPosition(1484);
      int int0 = hitInfo0.getEndPosition();
      assertEquals(1484, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(".", "");
      hitInfo0.setEndPosition((-924));
      int int0 = hitInfo0.getEndPosition();
      assertEquals((-924), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", " `jXL%>IDIK");
      hitInfo0.setEValue(" `jXL%>IDIK");
      String string0 = hitInfo0.getEValue();
      assertEquals(" `jXL%>IDIK", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "RY#StK;>&bFME");
      hitInfo0.setEValue("");
      String string0 = hitInfo0.getEValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("_", "");
      hitInfo0.setEMBL(">Khk*QTp4+OWv;;:I");
      String string0 = hitInfo0.getEMBL();
      assertEquals(">Khk*QTp4+OWv;;:I", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("f{<v84[ef%:<igV))", "f{<v84[ef%:<igV))");
      hitInfo0.setEMBL("");
      String string0 = hitInfo0.getEMBL();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(" ", " ");
      hitInfo0.setEC_number(" ");
      String string0 = hitInfo0.getEC_number();
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      hitInfo0.setEC_number("");
      String string0 = hitInfo0.getEC_number();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(" BI<#K^8h4%8I8%6f>;", " BI<#K^8h4%8I8%6f>;");
      hitInfo0.appendDescription("UniProt");
      String string0 = hitInfo0.getDescription();
      assertEquals("UniProt", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(" ", " ");
      hitInfo0.appendDescription("");
      String string0 = hitInfo0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("H=+i< 3|'&l7n wt~t:", "H=+i< 3|'&l7n wt~t:");
      hitInfo0.setBLASTPInfo("H=+i< 3|'&l7n wt~t:");
      String string0 = hitInfo0.getAcc();
      assertEquals("3|'&l7n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      // Undeclared exception!
      try { 
        hitInfo0.setGoAssociation((String) null, ":");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      // Undeclared exception!
      try { 
        hitInfo0.setGO((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.HitInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("!", "O]7q)QvdF-Hr@F");
      // Undeclared exception!
      try { 
        hitInfo0.setFastaHitInfo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.HitInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      // Undeclared exception!
      try { 
        hitInfo0.setEValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "RY#StK;>&bFME");
      // Undeclared exception!
      try { 
        hitInfo0.setEMBL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("i@;B;egWjXNFz4v=4bv", "i@;B;egWjXNFz4v=4bv");
      // Undeclared exception!
      try { 
        hitInfo0.setBLASTPInfo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.HitInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("M;+~U><e\"te=y", "RS");
      hitInfo0.setGoAssociation("RS", "");
      // Undeclared exception!
      try { 
        hitInfo0.getGoAssociation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      // Undeclared exception!
      try { 
        hitInfo0.appendDescription((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HitInfo hitInfo0 = null;
      try {
        hitInfo0 = new HitInfo(";", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("|", "|");
      hitInfo0.setGoAssociation("", "eeM'aXH{KbK");
      String string0 = hitInfo0.getGoAssociation("q@nw8bC(+");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      hitInfo0.setGoAssociation("", "");
      String string0 = hitInfo0.getGoAssociation("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("H*]rW8,u<6~9 h", "H*]rW8,u<6~9 h");
      String string0 = hitInfo0.getGoAssociation("H*]rW8,u<6~9 h");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(" ", " ");
      hitInfo0.setGoAssociation("", "KR=eL|' [ioI^)");
      hitInfo0.setGoAssociation("4Q`h", "nAO';s");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("5<se#\"lU=/t3b7TLo,", "5<se#\"lU=/t3b7TLo,");
      hitInfo0.setGO("blastp ^Ak S");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("M;+~U><e\"te=y", "RS");
      hitInfo0.setEValue("eM'aXH{KbK");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("X-1,WW&:U788w;", "X-1,WW&:U788w;");
      hitInfo0.setEMBL("X-1,WW&:U788w;");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("M;+~U><e\"te=y", "RS");
      hitInfo0.appendDescription("(EC ");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("H=+i< |'&l7n w~t:", "H=+i< |'&l7n w~t:");
      hitInfo0.appendDescription("Lj:>quBjvuA}");
      hitInfo0.appendDescription("6NKc'vAA '7zg,,");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("H=+i< |'&l7n w~t:", "H=+i< |'&l7n w~t:");
      hitInfo0.setDescription("");
      hitInfo0.appendDescription("Lj:>quBjvuA}");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      hitInfo0.setOrganism("");
      hitInfo0.setOrganism((String) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("f:O,.@Id", "f:O,.@Id");
      hitInfo0.setOrganism("f:O,.@Id");
      hitInfo0.setOrganism("f:O,.@Id");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("j\"A_I,8[mqau}<Jb:q", "j\"A_I,8[mqau}<Jb:q");
      hitInfo0.setFastaHitInfo("sv.w; ]=gn7yuT$i0w?:lT ");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("(", "(");
      hitInfo0.setFastaHitInfo("ogTDuq.'@@Gs 3,N");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("H=+i< |'&l7n w~t:", "H=+i< |'&l7n w~t:");
      hitInfo0.setBLASTPInfo("H=+i< |'&l7n w~t:");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("X-1,WW&:U788w;", "X-1,WW&:U788w;");
      hitInfo0.setBLASTPInfo("ht{=. kxNg!u|1.%");
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(" BI<#K^8h4%8I8%6f>;", " BI<#K^8h4%8I8%6f>;");
      hitInfo0.setBLASTPInfo("[RWR{=. ?&?) /3");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("f:O,.@Id", "f:O,.@Id");
      hitInfo0.setBLASTPInfo("j\"A_I,8[mqau}<Jb:q sv.w; ]=gn7yuT$i0w?:lT ");
      String string0 = hitInfo0.getDB();
      assertEquals("j\"A_I,8[mqau}<Jb", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(";", "blastp");
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("'.2,G|s{2a[Ib1,`[", "fasta");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("f:O,.@Id", "f:O,.@Id");
      String string0 = hitInfo0.getLength();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", " `jXL%>IDIK");
      String string0 = hitInfo0.getEValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("5<se#\"lU=/t3b7TLo,", "5<se#\"lU=/t3b7TLo,");
      String string0 = hitInfo0.getSubjectRange();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("(", "(");
      String string0 = hitInfo0.getScore();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      String string0 = hitInfo0.getOrganism();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      String string0 = hitInfo0.getEMBL();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "TsH ");
      Vector vector0 = hitInfo0.getQueryPosition();
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("f:O,.@Id", "f:O,.@Id");
      String string0 = hitInfo0.getDB();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("FxSv:E3", "");
      String string0 = hitInfo0.getIdentity();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("f:O,.@Id", "f:O,.@Id");
      String string0 = hitInfo0.getGeneName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      Vector vector0 = hitInfo0.getGO();
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "TsH ");
      String string0 = hitInfo0.getID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("FxSv:E3", "");
      String string0 = hitInfo0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      int int0 = hitInfo0.getEndPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("f:O,.@Id", "f:O,.@Id");
      String string0 = hitInfo0.getQueryRange();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo(" ", " ");
      int int0 = hitInfo0.getStartPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("", "");
      String string0 = hitInfo0.getEC_number();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("H=+i< |'&l7n w~t:", "H=+i< |'&l7n w~t:");
      String string0 = hitInfo0.getAcc();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("f:O,.@Id", "f:O,.@Id");
      String string0 = hitInfo0.getUngapped();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("H=+i< |'&l7n w~t:", "H=+i< |'&l7n w~t:");
      String string0 = hitInfo0.getHeader();
      assertEquals("H=+i< |'&l7n w~t:", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HitInfo hitInfo0 = new HitInfo("5<se#\"lU=/t3b7TLo,", "5<se#\"lU=/t3b7TLo,");
      String string0 = hitInfo0.getOverlap();
      assertNull(string0);
  }
}
