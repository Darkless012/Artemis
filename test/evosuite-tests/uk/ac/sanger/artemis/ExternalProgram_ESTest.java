/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 03:36:52 GMT 2017
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.awt.datatransfer.Clipboard;
import java.io.File;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.ExternalProgram;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.Logger;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.components.LogViewer;
import uk.ac.sanger.artemis.components.filetree.RemoteFileNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExternalProgram_ESTest extends ExternalProgram_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("", "", 0);
      MockFile mockFile0 = new MockFile("");
      externalProgram0.makeDirectory(mockFile0);
      assertEquals(0, externalProgram0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("", "", 0);
      MockFile mockFile0 = new MockFile("$nl]F{elFdl");
      externalProgram0.setFileNumber(mockFile0, 0, (RemoteFileNode) null);
      assertEquals(0, externalProgram0.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("Bh'|`_IRXTeu=2@9CU", "Bh'|`_IRXTeu=2@9CU", 46);
      MockFile mockFile0 = new MockFile("gRH$TVQJS%ZW$]", "Bh'|`_IRXTeu=2@9CU");
      externalProgram0.setFileNumber(mockFile0, 46, (RemoteFileNode) null);
      assertEquals(46, externalProgram0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("BySource(", "b|4m-", 0);
      int int0 = externalProgram0.getType();
      assertEquals(0, int0);
      assertEquals("b|4m-", externalProgram0.getProgramOptions());
      assertEquals("BySource(", externalProgram0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("\"AsLTr< %)+", "3aTD,MWc", (-11));
      int int0 = externalProgram0.getType();
      assertEquals("3aTD,MWc", externalProgram0.getProgramOptions());
      assertEquals((-11), int0);
      assertEquals("\"AsLTr< %)+", externalProgram0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram((String) null, "Jm^fPUCuV<pO4c]", 65536);
      String string0 = externalProgram0.getName();
      assertNull(string0);
      assertEquals(65536, externalProgram0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("BySource(", "b|4m-", 0);
      String string0 = externalProgram0.getName();
      assertEquals("BySource(", string0);
      assertEquals("b|4m-", externalProgram0.getProgramOptions());
      assertEquals(0, externalProgram0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        ExternalProgram.startProgram((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram((String) null, "Jm^fPUCuV<pO4c]", 65536);
      MockFile mockFile0 = new MockFile((String) null, "Jm^fPUCuV<pO4c]");
      // Undeclared exception!
      try { 
        externalProgram0.setFileNumber(mockFile0, 4462L, (RemoteFileNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("", "!:", 0);
      // Undeclared exception!
      try { 
        externalProgram0.makeDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ExternalProgram", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("Rg` KM8r", (String) null, 547);
      // Undeclared exception!
      try { 
        externalProgram0.getProgramOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("", "", 0);
      externalProgram0.getName();
      assertEquals(0, externalProgram0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("", "\".", 5225);
      int int0 = externalProgram0.getType();
      assertEquals(5225, int0);
      assertEquals("", externalProgram0.getName());
      assertEquals("\".", externalProgram0.getProgramOptions());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("=zucOH[H{z7f*>", "=zucOH[H{z7f*>", 0);
      String string0 = externalProgram0.getProgramOptions();
      assertEquals("=zucOH[H{z7f*>", string0);
      assertEquals(0, externalProgram0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("", "", (-2137));
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(false, false);
      try { 
        externalProgram0.setFileNumber(mockFile0, (-580L), (RemoteFileNode) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to: /
         //
         verifyException("uk.ac.sanger.artemis.ExternalProgram", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("=zucOH[H{z7f*>", "=zucOH[H{z7f*>", 0);
      MockFile mockFile0 = new MockFile("=zucOH[H{z7f*>", "");
      File file0 = MockFile.createTempFile(" cannot have ", " cannot have ", (File) mockFile0);
      try { 
        externalProgram0.makeDirectory(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         
         verifyException("uk.ac.sanger.artemis.ExternalProgram", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("Nvnhom(8_", "GA", 46);
      MockFile mockFile0 = new MockFile("GA", "Nvnhom(8_");
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(false);
      // Undeclared exception!
      try { 
        externalProgram0.setFileNumber(mockFile0, 46, remoteFileNode0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("", "", (-2137));
      MockFile mockFile0 = new MockFile("", "");
      externalProgram0.setFileNumber(mockFile0, (-580L), (RemoteFileNode) null);
      assertEquals((-2137), externalProgram0.getType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[4];
      try { 
        ExternalProgram.startProgram("", stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[2];
      try { 
        ExternalProgram.startProgram("gRH$TVQJS%ZW$]", stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        ExternalProgram.startProgram("IOhb\"<WV", (String[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        ExternalProgram.startProgram("", (String[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("] to be rolled on top of every hour.", "] to be rolled on top of every hour.", 2);
      Clipboard clipboard0 = new Clipboard("Zbf1T *Uom");
      Selection selection0 = new Selection(clipboard0);
      FeatureVector featureVector0 = selection0.getSelectedFeatures();
      featureVector0.insertElementAfter((Feature) null, (Feature) null);
      // Undeclared exception!
      try { 
        externalProgram0.run(featureVector0, (Logger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ExternalProgram", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("] to be rolled on top of every hour.", "] to be rolled on top of every hour.", 2);
      Clipboard clipboard0 = new Clipboard("Zbf1T *Uom");
      Selection selection0 = new Selection(clipboard0);
      FeatureVector featureVector0 = selection0.getSelectedFeatures();
      // Undeclared exception!
      try { 
        externalProgram0.run(featureVector0, (Logger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ExternalProgram", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("PtOz@&8@wz34@^", "", 1);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FeatureVector featureVector0 = simpleEntryGroup0.getAllFeatures();
      LogViewer logViewer0 = new LogViewer();
      // Undeclared exception!
      try { 
        externalProgram0.run(featureVector0, logViewer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ExternalProgram", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("", "", 43);
      FeatureVector featureVector0 = new FeatureVector();
      LogViewer logViewer0 = new LogViewer();
      // Undeclared exception!
      try { 
        externalProgram0.run(featureVector0, logViewer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unknown program type
         //
         verifyException("uk.ac.sanger.artemis.ExternalProgram", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("=zucOH[H{z7f*>", "=zucOH[H{z7f*>", 0);
      Clipboard clipboard0 = new Clipboard("hydrophilicity");
      Selection selection0 = new Selection(clipboard0);
      FeatureVector featureVector0 = selection0.getAllFeatures();
      LogViewer logViewer0 = new LogViewer();
      // Undeclared exception!
      try { 
        externalProgram0.run(featureVector0, logViewer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.ExternalProgram", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExternalProgram externalProgram0 = new ExternalProgram("=zucOH[H{z7f*>", "=zucOH[H{z7f*>", 0);
      assertEquals("=zucOH[H{z7f*>", externalProgram0.getProgramOptions());
      
      externalProgram0.setProgramOptions("-");
      String string0 = externalProgram0.getProgramOptions();
      assertEquals("", string0);
  }
}
