/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:52:20 GMT 2017
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.MarkerRange;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SequenceChangeEvent_ESTest extends SequenceChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-3959));
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(1275, 1275, range0);
      int int0 = sequenceChangeEvent0.getType();
      assertEquals(1275, sequenceChangeEvent0.getPosition());
      assertEquals(1275, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("Dk iU=\"74");
      Bases bases0 = new Bases(emblStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, (-1377), (Range) null, 1);
      int int0 = sequenceChangeEvent0.getType();
      assertEquals((-1377), int0);
      assertEquals(1, sequenceChangeEvent0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 5, (Range) null, 0);
      sequenceChangeEvent0.getSubSequence();
      assertEquals(0, sequenceChangeEvent0.getLength());
      assertEquals(5, sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("^RB0M#", "^RB0M#");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, (-5), 524, "");
      sequenceChangeEvent0.getSubSequence();
      assertEquals(524, sequenceChangeEvent0.getPosition());
      assertEquals((-5), sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("^RB0M#", "^RB0M#");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, (-5), 524, "");
      sequenceChangeEvent0.getRange();
      assertEquals((-5), sequenceChangeEvent0.getType());
      assertEquals(524, sequenceChangeEvent0.getPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(0, 0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(77, 310, range0);
      sequenceChangeEvent0.getRange();
      assertEquals(310, sequenceChangeEvent0.getPosition());
      assertEquals(77, sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-3959));
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(1275, 1275, range0);
      sequenceChangeEvent0.getRange();
      assertEquals(1275, sequenceChangeEvent0.getType());
      assertEquals(1275, sequenceChangeEvent0.getPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.sequence.SequenceChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = new Strand(bases0, (-5));
      Marker marker0 = new Marker(strand0, 1);
      MarkerRange markerRange0 = Strand.getORFAroundMarker(marker0, true);
      Range range0 = markerRange0.getRange();
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 0, range0, 1286);
      int int0 = sequenceChangeEvent0.getPosition();
      assertEquals(1286, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(".");
      Bases bases0 = new Bases(rawStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 5, 2, "  \n--- Cause: ");
      int int0 = sequenceChangeEvent0.getPosition();
      assertEquals(5, sequenceChangeEvent0.getType());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-3959));
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(1275, 1275, range0);
      int int0 = sequenceChangeEvent0.getLength();
      assertEquals(1275, sequenceChangeEvent0.getPosition());
      assertEquals(1275, sequenceChangeEvent0.getType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.sequence.SequenceChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = new Strand(bases0, (-5));
      Marker marker0 = new Marker(strand0, 1);
      MarkerRange markerRange0 = Strand.getORFAroundMarker(marker0, true);
      Range range0 = markerRange0.getRange();
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 0, range0, 1286);
      int int0 = sequenceChangeEvent0.getLength();
      assertEquals(0, sequenceChangeEvent0.getType());
      assertEquals(1286, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(126, 800);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(800, 126, range0);
      // Undeclared exception!
      try { 
        sequenceChangeEvent0.getBases();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.io.Range cannot be cast to uk.ac.sanger.artemis.sequence.Bases
         //
         verifyException("uk.ac.sanger.artemis.sequence.SequenceChangeEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SequenceChangeEvent sequenceChangeEvent0 = null;
      try {
        sequenceChangeEvent0 = new SequenceChangeEvent((Bases) null, (-259), (Range) null, (-259));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SequenceChangeEvent sequenceChangeEvent0 = null;
      try {
        sequenceChangeEvent0 = new SequenceChangeEvent((Bases) null, 733, (-327), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SequenceChangeEvent sequenceChangeEvent0 = null;
      try {
        sequenceChangeEvent0 = new SequenceChangeEvent((Bases) null, 1850);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SequenceChangeEvent sequenceChangeEvent0 = null;
      try {
        sequenceChangeEvent0 = new SequenceChangeEvent(36, 0, (Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.sequence.SequenceChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 5);
      assertEquals(0, sequenceChangeEvent0.getPosition());
      assertEquals(5, sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("XPmnn!s9snrv.Jgm");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 1, 2);
      Range range0 = markerRange0.getRange();
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, (-2393), range0, (-3806));
      int int0 = sequenceChangeEvent0.getLength();
      assertEquals((-3806), int0);
      assertEquals((-2393), sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(127, 2626);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent((-1703), (-300), range0);
      int int0 = sequenceChangeEvent0.getPosition();
      assertEquals((-1703), sequenceChangeEvent0.getType());
      assertEquals((-300), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("uk.ac.sanger.artemis.sequence.SequenceChangeEvent");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = new Strand(bases0, (-5));
      Marker marker0 = new Marker(strand0, 1);
      MarkerRange markerRange0 = Strand.getORFAroundMarker(marker0, true);
      Range range0 = markerRange0.getRange();
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 0, range0, 1286);
      sequenceChangeEvent0.getBases();
      assertEquals(1286, sequenceChangeEvent0.getLength());
      assertEquals(0, sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(127, 2626);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent((-1703), (-300), range0);
      sequenceChangeEvent0.getRange();
      assertEquals((-1703), sequenceChangeEvent0.getType());
      assertEquals((-300), sequenceChangeEvent0.getPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(".");
      Bases bases0 = new Bases(rawStreamSequence0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 5, 2, "  \n--- Cause: ");
      sequenceChangeEvent0.getSubSequence();
      assertEquals(2, sequenceChangeEvent0.getPosition());
      assertEquals(5, sequenceChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("", "uk.ac.sanger.artemis.sequence.SequenceChangeEvent");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Range range0 = new Range(1731);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 0, range0, 100);
      int int0 = sequenceChangeEvent0.getType();
      assertEquals(0, int0);
      assertEquals(100, sequenceChangeEvent0.getLength());
  }
}
