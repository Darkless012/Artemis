/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:49:27 GMT 2017
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.PartialSequence;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.MarkerRange;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MarkerRange_ESTest extends MarkerRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawEnd();
      MarkerRange markerRange1 = new MarkerRange(marker0);
      MarkerRange markerRange2 = markerRange0.extendRange(markerRange1);
      assertNotSame(markerRange1, markerRange2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawStart();
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker0, false);
      MarkerRange markerRange2 = markerRange1.extendRange(markerRange0);
      boolean boolean0 = markerRange2.overlaps(markerRange1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawStart();
      MarkerRange markerRange1 = new MarkerRange(marker0);
      Marker marker1 = markerRange1.getRawEnd();
      assertEquals(0, Marker.LISTENER_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawStart();
      MarkerRange markerRange1 = new MarkerRange(marker0);
      Marker marker1 = markerRange1.getRawStart();
      assertSame(marker0, marker1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      int int0 = markerRange0.getCount();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      boolean boolean0 = markerRange0.isForwardMarker();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Strand strand1 = markerRange0.getStrand();
      assertEquals(2, Strand.REVERSE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Strand strand1 = markerRange0.getStrand();
      assertEquals(1, Strand.FORWARD);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getStart();
      assertEquals(0, Marker.LISTENER_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Range range0 = markerRange0.getRange();
      assertEquals(2, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      Marker marker0 = markerRange0.getEnd();
      assertNull(marker0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      // Undeclared exception!
      try { 
        markerRange0.overlaps((MarkerRange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        markerRange0.isForwardMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        markerRange0.getRawStart();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        markerRange0.getRawRange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        markerRange0.getRawEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("internal error - strands do not match", "~? 0jJh@DU");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 2);
      // Undeclared exception!
      try { 
        markerRange0.extendRange((MarkerRange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        markerRange0.createLocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short)1);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1), (-1), short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = new Strand(bases0, (short)1);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      // Undeclared exception!
      try { 
        markerRange0.createLocation();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: location out of range: -2..-1
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        markerRange0.combineRanges((MarkerRange) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = new Strand(bases0, 2);
      MarkerRange markerRange0 = null;
      try {
        markerRange0 = new MarkerRange(strand0, 1, (-3152));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // position: -3152
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawStart();
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker0, true);
      boolean boolean0 = markerRange0.contains(markerRange1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      boolean boolean0 = markerRange0.contains(markerRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawStart();
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker0, false);
      boolean boolean0 = markerRange1.contains(markerRange0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ", "Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawStart();
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker0, true);
      MarkerRange markerRange2 = markerRange0.combineRanges(markerRange1, true);
      assertNotSame(markerRange0, markerRange2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawStart();
      MarkerRange markerRange1 = new MarkerRange(marker0);
      MarkerRange markerRange2 = markerRange0.combineRanges(markerRange1, true);
      assertNotSame(markerRange1, markerRange2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      MarkerRange markerRange1 = markerRange0.combineRanges(markerRange0, true);
      assertNotSame(markerRange1, markerRange0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawStart();
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker0, false);
      MarkerRange markerRange2 = markerRange1.combineRanges(markerRange0, false);
      assertNotSame(markerRange1, markerRange2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ", "Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(2, 1);
      Strand strand1 = new Strand(bases0, (-19));
      MarkerRange markerRange1 = new MarkerRange(strand1, 5, 1);
      // Undeclared exception!
      try { 
        markerRange1.combineRanges(markerRange0, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - strands do not match
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MarkerRange markerRange0 = null;
      try {
        markerRange0 = new MarkerRange((Strand) null, (-1149), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      Marker marker0 = markerRange0.getStart();
      assertNull(marker0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        markerRange0.getStrand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ", "Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(2, 1);
      Marker marker0 = markerRange0.getEnd();
      assertEquals(0, Marker.LISTENER_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Location location0 = markerRange0.createLocation();
      assertNotNull(location0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("internal error - strands do not match", "~? 0jJh@DU");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 2);
      Location location0 = markerRange0.createLocation();
      assertNotNull(location0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      MarkerRange markerRange1 = markerRange0.combineRanges(markerRange0, false);
      assertNotSame(markerRange1, markerRange0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      Strand strand1 = bases0.getForwardStrand();
      MarkerRange markerRange0 = new MarkerRange(strand1, 2, 1);
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      Boolean boolean0 = new Boolean("Files already exist: ");
      MarkerRange markerRange1 = Strand.getORFAroundMarker(marker0, (boolean) boolean0);
      // Undeclared exception!
      try { 
        markerRange0.extendRange(markerRange1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - strands do not match
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawStart();
      Marker marker1 = marker0.moveBy(1);
      MarkerRange markerRange1 = new MarkerRange(marker1);
      boolean boolean0 = markerRange1.overlaps(markerRange0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ", "Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(2, 1);
      MarkerRange markerRange1 = new MarkerRange(strand0, 5, 1);
      boolean boolean0 = markerRange1.overlaps(markerRange0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      boolean boolean0 = markerRange0.overlaps(markerRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Range range0 = markerRange0.getRawRange();
      assertEquals(2, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Range range0 = markerRange0.getRawRange();
      assertEquals(2, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawEnd();
      MarkerRange markerRange1 = new MarkerRange(marker0);
      boolean boolean0 = markerRange0.overlaps(markerRange1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawEnd();
      assertEquals(0, Marker.LISTENER_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      Marker marker0 = markerRange0.getRawStart();
      MarkerRange markerRange1 = new MarkerRange(marker0);
      boolean boolean0 = markerRange0.overlaps(markerRange1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Files already exist: ");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      MarkerRange markerRange0 = new MarkerRange(strand0, 2, 1);
      boolean boolean0 = markerRange0.isForwardMarker();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        markerRange0.getCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        markerRange0.getRange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }
}
