/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:52:50 GMT 2017
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import javax.swing.JLayeredPane;
import org.biojava.bio.seq.homol.SimilarityPairFeature;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.io.BioJavaSequence;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.PartialSequence;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.sequence.AminoAcidSequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.MarkerRange;
import uk.ac.sanger.artemis.sequence.Strand;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Strand_ESTest extends Strand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimilarityPairFeature.EmptyPairwiseAlignment similarityPairFeature_EmptyPairwiseAlignment0 = (SimilarityPairFeature.EmptyPairwiseAlignment)SimilarityPairFeature.EMPTY_PAIRWISE;
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence(similarityPairFeature_EmptyPairwiseAlignment0);
      Bases bases0 = new Bases(bioJavaSequence0);
      Strand strand0 = bases0.getForwardStrand();
      try { 
        strand0.makeMarkerRangeFromRawPositions(56, 123);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 56
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("i4-", "gB8,7bNt$UCG=&");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Range range0 = new Range(2, 120);
      AminoAcidSequence aminoAcidSequence0 = strand0.getTranslation(range0, false);
      assertEquals(2, strand0.getDirection());
      assertEquals(".......................................", aminoAcidSequence0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("uk.ac.sanger.artemis.sequence.Strand");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      int int0 = strand0.getTCount();
      assertEquals(4, int0);
      assertEquals(2, strand0.getDirection());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      int int0 = strand0.getSequenceLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = new Strand(bases0, 56);
      int int0 = strand0.getRawPosition(1);
      assertEquals(2, strand0.getDirection());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      int int0 = strand0.getRawPosition(56);
      assertEquals((-55), int0);
      assertEquals(2, strand0.getDirection());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, (-3322));
      Bases bases0 = strand0.getBases();
      assertNull(bases0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getACount();
      assertTrue(strand0.isForwardStrand());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strand.markerRangeBases((MarkerRange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      try { 
        strand0.makeMarkerRangeFromRawPositions(4681, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -4673
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = new Strand(bases0, 1);
      // Undeclared exception!
      try { 
        strand0.makeMarkerRangeFromRawPositions((-5), (-5));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("$Z1{");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = new Strand(bases0, 2420);
      try { 
        strand0.makeMarkerRangeFromPositions((-5), 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -5
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, (-283));
      // Undeclared exception!
      try { 
        strand0.makeMarkerRangeFromPositions(53, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 75);
      try { 
        strand0.makeMarkerFromRawPosition(2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: -1
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      // Undeclared exception!
      try { 
        strand0.makeMarkerFromRawPosition(56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("ALTERNATIVE_YEAST_NUCLEAR", "ALTERNATIVE_YEAST_NUCLEAR");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      try { 
        strand0.makeMarker(55);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 55
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      // Undeclared exception!
      try { 
        strand0.makeMarker(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, 2);
      // Undeclared exception!
      try { 
        strand0.isForwardStrand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, 0);
      // Undeclared exception!
      try { 
        strand0.getTranslation((Range) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Range range0 = new Range(1658);
      // Undeclared exception!
      try { 
        strand0.getTranslation(range0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, 500);
      // Undeclared exception!
      try { 
        strand0.getTCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, 0);
      // Undeclared exception!
      try { 
        strand0.getSubSequence((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((-237));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 206, (-1630), short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = new Strand(bases0, 5);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(1, 206);
      Range range0 = markerRange0.getRange();
      // Undeclared exception!
      try { 
        strand0.getSubSequence(range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1631
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, (-2055));
      // Undeclared exception!
      try { 
        strand0.getStrandBases();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, 1);
      Range range0 = new Range((-3193));
      // Undeclared exception!
      try { 
        strand0.getStopOrStartCodons(range0, (StringVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, 2458);
      // Undeclared exception!
      try { 
        strand0.getSequenceLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("R:!");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      // Undeclared exception!
      try { 
        strand0.getRawSubSequenceC((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("3)");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      // Undeclared exception!
      try { 
        strand0.getRawSubSequence((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, 0);
      // Undeclared exception!
      try { 
        strand0.getRawPosition(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strand.getOpenReadingFrameRanges((MarkerRange) null, (-851), 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strand.getORFAroundMarker((Marker) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Problems connecting...", " n[$y^:<}@Amt");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 5);
      Range range0 = new Range(2);
      // Undeclared exception!
      try { 
        strand0.getMatchingCodons(range0, (StringVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, 0);
      // Undeclared exception!
      try { 
        strand0.getDirection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strand.getCodonAtMarker((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimilarityPairFeature.EmptyPairwiseAlignment similarityPairFeature_EmptyPairwiseAlignment0 = (SimilarityPairFeature.EmptyPairwiseAlignment)SimilarityPairFeature.EMPTY_PAIRWISE;
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence(similarityPairFeature_EmptyPairwiseAlignment0);
      Bases bases0 = new Bases(bioJavaSequence0);
      Strand strand0 = bases0.getForwardStrand();
      // Undeclared exception!
      try { 
        strand0.getCCount();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There is no parser for the empty alphabet. Attempted to retrieve token
         //
         verifyException("org.biojava.bio.symbol.EmptyAlphabet", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Strand strand0 = new Strand((Bases) null, 1042);
      // Undeclared exception!
      try { 
        strand0.getCCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MarkerRange markerRange0 = new MarkerRange((Marker) null);
      // Undeclared exception!
      try { 
        Strand.deleteRange(markerRange0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strand.addBases((Marker) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      boolean boolean0 = strand0.isForwardStrand();
      assertEquals(2, strand0.getDirection());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("iA(}W9.I", "iA(}W9.I");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "org.biojava.bio.seq.FeatureFilter$And");
      Entry entry0 = filteredEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      Strand strand0 = feature0.getStrand();
      strand0.getDirection();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      int int0 = strand0.getDirection();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Problems connecting...", " n[$y^:<}@Amt");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 5);
      Range range0 = new Range((-5));
      strand0.getSubSequence(range0);
      assertEquals(2, strand0.getDirection());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("sOgSu_Wk?yM I", "sOgSu_Wk?yM I");
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(fastaStreamSequence0);
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      int int0 = strand0.getSequenceLength();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Bases bases1 = strand0.getBases();
      assertSame(bases0, bases1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarker(2);
      assertEquals(2, marker0.getPosition());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getCCount();
      assertTrue(strand0.isForwardStrand());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Problems connecting...", " n[$y^:<}@Amt");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 5);
      int int0 = strand0.getCCount();
      assertEquals(2, strand0.getDirection());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getGCount();
      assertTrue(strand0.isForwardStrand());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = new Strand(bases0, 0);
      // Undeclared exception!
      try { 
        strand0.getGCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      strand0.getTCount();
      assertTrue(strand0.isForwardStrand());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      // Undeclared exception!
      try { 
        strand0.getACount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Problems connecting...", " n[$y^:<}@Amt");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 5);
      int int0 = strand0.getACount();
      assertEquals(2, strand0.getDirection());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("sOgSu_Wk?yM I", "sOgSu_Wk?yM I");
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(fastaStreamSequence0);
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromRawPositions(1, 1);
      String string0 = Strand.markerRangeBases(markerRange0);
      assertEquals("s", string0);
      assertTrue(strand0.isForwardStrand());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(3);
      MarkerRange markerRange0 = Strand.getORFAroundMarker(marker0, false);
      assertEquals(3, marker0.getPosition());
      assertNotNull(markerRange0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(3);
      MarkerRange markerRange0 = Strand.getORFAroundMarker(marker0, false);
      Strand.getOpenReadingFrameRanges(markerRange0, 0, 0, 3);
      assertEquals(5, marker0.getPosition());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      boolean boolean0 = strand0.isForwardStrand();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      String string0 = strand0.getStrandBases();
      assertEquals("rnnnnnn", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      String string0 = strand0.getStrandBases();
      assertEquals("nnnnnny", string0);
      assertEquals(2, strand0.getDirection());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Range range0 = new Range(1658);
      // Undeclared exception!
      try { 
        strand0.getRawSubSequenceC(range0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Range range0 = new Range(1658);
      String[] stringArray0 = new String[3];
      StringVector stringVector0 = new StringVector(stringArray0);
      strand0.getStopOrStartCodons(range0, stringVector0);
      assertEquals(2, strand0.getDirection());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short)125);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1253, 120, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = new Strand(bases0, 2);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(1, (short)125);
      // Undeclared exception!
      try { 
        Strand.getOpenReadingFrameRanges(markerRange0, 0, 0, (-908));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -119
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Problems connecting...", " n[$y^:<}@Amt");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 5);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(2, 1);
      Strand.deleteRange(markerRange0);
      assertEquals(20, fastaStreamSequence0.length());
      assertEquals(16, fastaStreamSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      int int0 = strand0.getRawPosition(0);
      assertEquals(2, strand0.getDirection());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Range range0 = new Range(1658);
      String[] stringArray0 = new String[3];
      StringVector stringVector0 = new StringVector(stringArray0);
      strand0.getMatchingCodons(range0, stringVector0);
      assertEquals(2, strand0.getDirection());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(3);
      String string0 = Strand.getCodonAtMarker(marker0);
      assertEquals("nny", string0);
      assertEquals(2, strand0.getDirection());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((-237));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 206, (-1630), short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = new Strand(bases0, 5);
      MarkerRange markerRange0 = strand0.makeMarkerRangeFromPositions(1, 206);
      // Undeclared exception!
      try { 
        Strand.markerRangeBases(markerRange0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1631
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("r8/ o= ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Range range0 = new Range(1658);
      String string0 = strand0.getRawSubSequence(range0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("r@1TY:", "`G");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, (-5));
      Range range0 = new Range(987);
      // Undeclared exception!
      try { 
        strand0.getSpacedTranslation(range0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Problems connecting...", " n[$y^:<}@Amt");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = new Strand(bases0, 5);
      Range range0 = new Range(2);
      strand0.getTranslation(range0, true);
      assertEquals(2, strand0.getDirection());
  }
}
