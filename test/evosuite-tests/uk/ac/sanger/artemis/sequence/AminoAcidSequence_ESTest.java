/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:42:25 GMT 2017
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.color.ColorSpace;
import java.awt.datatransfer.Clipboard;
import java.io.File;
import javax.accessibility.AccessibleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.io.Entry;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankDocumentEntry;
import uk.ac.sanger.artemis.io.IndexFastaStream;
import uk.ac.sanger.artemis.io.MSPcrunchEntryInformation;
import uk.ac.sanger.artemis.io.PublicDBDocumentEntry;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.AGWindowAlgorithm;
import uk.ac.sanger.artemis.sequence.AminoAcidSequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.MarkerRange;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AminoAcidSequence_ESTest extends AminoAcidSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("true");
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(4, aminoAcidSequence0.length());
      assertEquals("true", aminoAcidSequence0.toString());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(0, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("", aminoAcidSequence1.toString());
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('y');
      assertNotNull(string0);
      assertEquals("Tyr", string0);
      
      int int0 = AminoAcidSequence.getSymbolIndex('u');
      assertEquals(24, int0);
      
      char char0 = AminoAcidSequence.getSymbolFromIndex(7);
      assertEquals('g', char0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('g');
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation('g');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Gly", string1);
      
      int int2 = aminoAcidSequence0.length();
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, int2);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(4, aminoAcidSequence0.length());
      assertEquals("true", aminoAcidSequence0.toString());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      String string2 = aminoAcidSequence0.toString();
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotNull(string2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("true", string2);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(4, aminoAcidSequence0.length());
      assertEquals("true", aminoAcidSequence0.toString());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation((-1467));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1467
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("true");
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, aminoAcidSequence0.length());
      assertEquals("true", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("true", false);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(".", aminoAcidSequence1.toString());
      assertEquals(1, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('y');
      assertNotNull(string0);
      assertEquals("Tyr", string0);
      
      int int0 = AminoAcidSequence.getSymbolIndex('K');
      assertEquals(11, int0);
      
      AminoAcidSequence.setGeneCode();
      char char0 = AminoAcidSequence.getSymbolFromIndex(7);
      assertEquals('g', char0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('g');
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      int int2 = aminoAcidSequence0.length();
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
      assertEquals(4, aminoAcidSequence0.length());
      assertEquals("true", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      String string1 = aminoAcidSequence0.toString();
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotNull(string1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("true", string1);
      assertEquals(4, aminoAcidSequence0.length());
      assertEquals("true", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      String string2 = aminoAcidSequence2.toString();
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(string2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("VrQ", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(".", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence1 = new AminoAcidSequence("VrQ");
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals("VrQ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(3, aminoAcidSequence1.length());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      int int0 = AminoAcidSequence.getSymbolIndex('Y');
      assertEquals(18, int0);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('N');
      assertNotNull(string0);
      assertEquals("Asn", string0);
      
      float float0 = aminoAcidSequence1.getMolecularWeight();
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(401.48F, float0, 0.01F);
      assertEquals("VrQ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(3, aminoAcidSequence1.length());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('7', ':', '`');
      assertEquals('.', char0);
      
      AminoAcidSequence.setGeneCode();
      int int0 = AminoAcidSequence.getAminoAcidType('7');
      assertEquals(7, int0);
      
      char char1 = AminoAcidSequence.getOneLetterCode("r>oa");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("r>oa");
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(4, aminoAcidSequence0.length());
      assertEquals("r>oa", aminoAcidSequence0.toString());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      
      char char2 = AminoAcidSequence.getOneLetterCode("j*@");
      assertFalse(char2 == char0);
      assertTrue(char2 == char1);
      assertEquals('\uFFFF', char2);
      
      char char3 = AminoAcidSequence.getOneLetterCode("FzY,:GU;`[");
      assertFalse(char3 == char0);
      assertTrue(char3 == char2);
      assertTrue(char3 == char1);
      assertEquals('\uFFFF', char3);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('Y');
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex(':');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: :
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('V');
      assertEquals(3, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char char0 = AminoAcidSequence.getSymbolFromIndex(3);
      assertEquals('d', char0);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(3);
      assertNotNull(string0);
      assertEquals("Asp", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      charArray0[1] = 'V';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'d', 'V'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertArrayEquals(new char[] {'d', 'V'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      assertNotNull(mSPcrunchEntryInformation0);
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
      
      GenbankDocumentEntry genbankDocumentEntry0 = new GenbankDocumentEntry(mSPcrunchEntryInformation0);
      assertNotNull(genbankDocumentEntry0);
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
      assertFalse(genbankDocumentEntry0.isReadOnly());
      assertTrue(PublicDBDocumentEntry.IGNORE_OBSOLETE_FEATURES);
      
      GenbankDocumentEntry genbankDocumentEntry1 = new GenbankDocumentEntry(mSPcrunchEntryInformation0, genbankDocumentEntry0, true);
      assertNotNull(genbankDocumentEntry1);
      assertFalse(genbankDocumentEntry1.equals((Object)genbankDocumentEntry0));
      assertFalse(mSPcrunchEntryInformation0.useEMBLFormat());
      assertFalse(genbankDocumentEntry0.isReadOnly());
      assertFalse(genbankDocumentEntry1.isReadOnly());
      assertTrue(PublicDBDocumentEntry.IGNORE_OBSOLETE_FEATURES);
      assertTrue(PublicDBDocumentEntry.IGNORE_OBSOLETE_FEATURES);
      
      IndexFastaStream indexFastaStream0 = null;
      try {
        indexFastaStream0 = new IndexFastaStream(genbankDocumentEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.IndexFastaStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("|M[K(PO?8<f:", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals("xxxx", aminoAcidSequence0.toString());
      assertEquals(4, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals("xxxx", aminoAcidSequence0.toString());
      assertEquals(4, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(63, aminoAcidSequence1.length());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('2');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: 2
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Ee;fs");
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(5, aminoAcidSequence0.length());
      assertEquals("Ee;fs", aminoAcidSequence0.toString());
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(5, aminoAcidSequence0.length());
      assertEquals("Ee;fs", aminoAcidSequence0.toString());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence1.toString());
      assertEquals(63, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("Ee;fs", false);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertEquals(1, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(".", aminoAcidSequence2.toString());
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('`');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: `
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('x');
      assertEquals(7, int0);
      
      char char0 = File.separatorChar;
      assertEquals('/', char0);
      
      boolean boolean0 = AminoAcidSequence.isStopCodon('x');
      assertFalse(boolean0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('/');
      assertTrue(int1 == int0);
      assertEquals(7, int1);
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('E');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex(']');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: ]
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('<');
      assertFalse(boolean0);
      
      char char0 = AminoAcidSequence.getCodonTranslation("(q8c*}");
      assertEquals('.', char0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("@}20WaQv8'm#{y.", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(15, aminoAcidSequence0.length());
      assertEquals(".  .  .  .  .  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('<');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: <
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      boolean boolean0 = AminoAcidSequence.isLegalCodon('t');
      assertTrue(boolean0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('J');
      assertEquals(7, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 'J';
      charArray0[3] = 't';
      charArray0[4] = 'J';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals("x", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertArrayEquals(new char[] {'t', 'J', '\u0000', 't', 'J'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals("x", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertArrayEquals(new char[] {'t', 'J', '\u0000', 't', 'J'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence1.codon_translation_array, false);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals("x", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence2.toString());
      assertEquals(63, aminoAcidSequence2.length());
      assertArrayEquals(new char[] {'t', 'J', '\u0000', 't', 'J'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence.setGeneCode();
      int int1 = AminoAcidSequence.getSymbolIndex('r');
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      char char0 = AminoAcidSequence.getOneLetterCode("Monospaced");
      assertEquals('\uFFFF', char0);
      
      String string0 = AccessibleContext.ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED;
      assertNotNull(string0);
      assertEquals("accessibleTableColumnDescriptionChanged", string0);
      
      int int2 = aminoAcidSequence0.length();
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertEquals(1, int2);
      assertEquals("x", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertArrayEquals(new char[] {'t', 'J', '\u0000', 't', 'J'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      int int3 = ColorSpace.TYPE_8CLR;
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(18, int3);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertEquals("x", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(1, aminoAcidSequence3.length());
      assertArrayEquals(new char[] {'t', 'J', '\u0000', 't', 'J'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      int int4 = AminoAcidSequence.getAminoAcidType('R');
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals(1, int4);
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence3.codon_translation_array, false);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertEquals("x", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(1, aminoAcidSequence3.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence4.toString());
      assertEquals(63, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertArrayEquals(new char[] {'t', 'J', '\u0000', 't', 'J'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      char char1 = AminoAcidSequence.getOneLetterCode("Can't access template fields");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      String string1 = aminoAcidSequence3.toString();
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotNull(string1);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("x", string1);
      assertEquals("x", aminoAcidSequence3.toString());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(1, aminoAcidSequence3.length());
      assertArrayEquals(new char[] {'t', 'J', '\u0000', 't', 'J'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      boolean boolean1 = aminoAcidSequence0.checkForMatch(aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence4);
      assertTrue(boolean1 == boolean0);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence4));
      assertTrue(boolean1);
      assertEquals("x", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence2.toString());
      assertEquals(63, aminoAcidSequence2.length());
      assertArrayEquals(new char[] {'t', 'J', '\u0000', 't', 'J'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("");
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      char[] charArray0 = new char[3];
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('K');
      assertNotNull(string0);
      assertEquals("Lys", string0);
      
      charArray0[0] = 'j';
      charArray0[1] = '';
      charArray0[2] = 'j';
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(".", aminoAcidSequence1.toString());
      assertEquals(1, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertArrayEquals(new char[] {'j', '', 'j'}, charArray0);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('j');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: j
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('U');
      assertFalse(boolean0);
      
      char char0 = AminoAcidSequence.getCodonTranslation("Thr");
      assertEquals('.', char0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = '.';
      charArray0[5] = '.';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(6, aminoAcidSequence0.length());
      assertEquals(".  .  ", aminoAcidSequence0.toString());
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U', '.', '.'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '&';
      charArray0[2] = '\'';
      charArray0[3] = '%';
      charArray0[4] = '\"';
      charArray0[5] = ')';
      charArray0[6] = '&';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("xx", aminoAcidSequence0.toString());
      assertEquals(2, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'', '&', '\'', '%', '\"', ')', '&'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("(!m5q%4KC", true);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('N');
      assertNotNull(string0);
      assertEquals("Asn", string0);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('J');
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("uk.ac.sanger.artemis.FeatureChangeEvent", false);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals(".............", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(13, aminoAcidSequence2.length());
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      char char0 = AminoAcidSequence.getOneLetterCode("(");
      assertEquals('\uFFFF', char0);
      
      boolean boolean1 = aminoAcidSequence1.containsStopCodon();
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("xxx", aminoAcidSequence1.toString());
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      IndexFastaStream indexFastaStream0 = null;
      try {
        indexFastaStream0 = new IndexFastaStream((Entry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.IndexFastaStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('A', 'u', 'A');
      assertEquals('.', char0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      float float0 = aminoAcidSequence1.getMolecularWeight();
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("Cz27TuWpD", true);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertEquals(9, aminoAcidSequence2.length());
      assertEquals("x  x  x  ", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('(');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: (
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      int int0 = AminoAcidSequence.getSymbolIndex('+');
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char char0 = AminoAcidSequence.getOneLetterCode(")uyhi*p6)!na");
      assertEquals('\uFFFF', char0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\uFFFF';
      charArray0[1] = '\uFFFF';
      charArray0[2] = '\uFFFF';
      charArray0[3] = '\uFFFF';
      charArray0[4] = '\uFFFF';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x", aminoAcidSequence0.toString());
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(")uyhi*p6)!na", true);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals("xxxx", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(4, aminoAcidSequence1.length());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals("x", aminoAcidSequence2.toString());
      assertEquals(1, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF'}, charArray0);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertEquals(1, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("x", aminoAcidSequence3.toString());
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      String string0 = aminoAcidSequence0.toString();
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotNull(string0);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertEquals("x", string0);
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x", aminoAcidSequence0.toString());
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation(aminoAcidSequence1.codon_translation_array, true);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertEquals("xxxx", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(4, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence4.toString());
      assertEquals(21, aminoAcidSequence4.length());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      boolean boolean0 = aminoAcidSequence4.checkForMatch(aminoAcidSequence0);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(boolean0);
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x", aminoAcidSequence0.toString());
      assertEquals("xxxx", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(4, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence4.toString());
      assertEquals(21, aminoAcidSequence4.length());
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF'}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("*Ghn+3q.8:O");
      assertNotNull(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(11, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(11, fastaStreamSequence0.length());
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertNotNull(bases0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(11, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(11, fastaStreamSequence0.length());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Strand strand0 = new Strand(bases0, 250);
      assertNotNull(strand0);
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(11, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(11, fastaStreamSequence0.length());
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      assertNotNull(aGWindowAlgorithm0);
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(11, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(11, fastaStreamSequence0.length());
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      Bases bases1 = aGWindowAlgorithm0.getBases();
      assertSame(bases1, bases0);
      assertSame(bases0, bases1);
      assertNotNull(bases1);
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(11, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(11, fastaStreamSequence0.length());
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      MarkerRange markerRange0 = aminoAcidSequence3.findMatch(bases1, (Marker) null, true, false, false);
      assertSame(bases1, bases0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertSame(bases0, bases1);
      assertNull(markerRange0);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(1, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("x", aminoAcidSequence3.toString());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(11, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(11, fastaStreamSequence0.length());
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF'}, charArray0);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("%?~E-", true);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(63, aminoAcidSequence1.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence1.toString());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence1.codon_translation_array, true);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(63, aminoAcidSequence1.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(63, aminoAcidSequence2.length());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence2.toString());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation("%?~E-", false);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertEquals(3, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(".  ", aminoAcidSequence3.toString());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertEquals(63, aminoAcidSequence4.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getTranslation(aminoAcidSequence1.codon_translation_array, true);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence5);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(63, aminoAcidSequence1.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence1.toString());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence5.toString());
      assertFalse(aminoAcidSequence5.containsStopCodon());
      assertEquals(21, aminoAcidSequence5.length());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      char char0 = aminoAcidSequence0.elementAt(0);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertEquals('x', char0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("x  ", aminoAcidSequence0.toString());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence1.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('D');
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("internal error - unknown location node type: ", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(".  .  .  .  .  .  .  .  .  h  .  .  .  .  .  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(45, aminoAcidSequence0.length());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      
      String string0 = aminoAcidSequence0.toString();
      assertNotNull(string0);
      assertEquals(".  .  .  .  .  .  .  .  .  h  .  .  .  .  .  ", string0);
      assertEquals(".  .  .  .  .  .  .  .  .  h  .  .  .  .  .  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(45, aminoAcidSequence0.length());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon(';');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(1732);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1732
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('Z');
      assertFalse(boolean0);
      
      int int0 = AminoAcidSequence.getSymbolIndex('X');
      assertEquals(23, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('Z');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        AminoAcidSequence.getTranslation((char[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation("---");
      assertEquals('.', char0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolFromIndex((-678));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -678
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = '@';
      charArray0[2] = 'U';
      charArray0[3] = '';
      charArray0[4] = '#';
      charArray0[5] = 't';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      assertEquals("xx", aminoAcidSequence0.toString());
      assertArrayEquals(new char[] {'F', '@', 'U', '', '#', 't'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      boolean boolean0 = aminoAcidSequence0.containsStopCodon();
      assertFalse(boolean0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      assertEquals("xx", aminoAcidSequence0.toString());
      assertArrayEquals(new char[] {'F', '@', 'U', '', '#', 't'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      String string0 = aminoAcidSequence0.toString();
      assertNotNull(string0);
      assertEquals("xx", string0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      assertEquals("xx", aminoAcidSequence0.toString());
      assertArrayEquals(new char[] {'F', '@', 'U', '', '#', 't'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      char char0 = AminoAcidSequence.getOneLetterCode("xx");
      assertEquals('\uFFFF', char0);
      
      String string1 = AminoAcidSequence.getThreeLetterAbbreviation(2);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Asn", string1);
      
      char char1 = AminoAcidSequence.getCodonTranslation('t', 'n', '\uFFFF');
      assertFalse(char1 == char0);
      assertEquals('.', char1);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(2, aminoAcidSequence1.length());
      assertEquals("xx", aminoAcidSequence1.toString());
      assertArrayEquals(new char[] {'F', '@', 'U', '', '#', 't'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("xx", true);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertEquals("", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(0, aminoAcidSequence2.length());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      float float0 = aminoAcidSequence2.getMolecularWeight();
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(0, aminoAcidSequence2.length());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        AminoAcidSequence.getOneLetterCode("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('5');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '4';
      charArray0[6] = '5';
      charArray0[7] = '5';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals("..", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'P', '5', '5', '5', '5', '4', '5', '5'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '4';
      charArray1[1] = '4';
      charArray1[2] = 'P';
      charArray1[3] = 'P';
      charArray1[4] = 'g';
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray1, false);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(charArray1, charArray0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(".", aminoAcidSequence1.toString());
      assertArrayEquals(new char[] {'4', '4', 'P', 'P', 'g'}, charArray1);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      String string0 = aminoAcidSequence0.toString();
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotNull(string0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertEquals("..", string0);
      assertEquals("..", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'P', '5', '5', '5', '5', '4', '5', '5'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      String string1 = aminoAcidSequence0.toString();
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotNull(string1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertEquals("..", string1);
      assertEquals("..", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'P', '5', '5', '5', '5', '4', '5', '5'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[0];
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('$');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: $
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = 'd';
      charArray0[2] = 'l';
      charArray0[3] = '5';
      charArray0[4] = 'B';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'G', 'd', 'l', '5', 'B'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      char char0 = AminoAcidSequence.getOneLetterCode("There is/are ");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("fCMi&wOkOVFb[@-aE5)", false);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(18, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(".  .  .  .  .  .  ", aminoAcidSequence1.toString());
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("fCMi&wOkOVFb[@-aE5)", false);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(".  .  .  .  .  .  ", aminoAcidSequence2.toString());
      assertEquals(18, aminoAcidSequence2.length());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation("Ile", false);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertEquals(1, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(".", aminoAcidSequence3.toString());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('l');
      assertNotNull(string0);
      assertEquals("Leu", string0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('E');
      assertEquals(2, int0);
      
      boolean boolean0 = aminoAcidSequence3.checkForMatch(aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertTrue(boolean0);
      assertEquals(18, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(".  .  .  .  .  .  ", aminoAcidSequence1.toString());
      assertEquals(1, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(".", aminoAcidSequence3.toString());
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('\"');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: \"
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('D');
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolFromIndex(112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 112
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = AminoAcidSequence.getSymbolIndex('a');
      assertEquals(0, int0);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('4');
      assertFalse(boolean0);
      
      AminoAcidSequence.setGeneCode();
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'E';
      charArray0[3] = 'a';
      charArray0[4] = '4';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals(".  ", aminoAcidSequence0.toString());
      assertArrayEquals(new char[] {'a', 'a', 'E', 'a', '4'}, charArray0);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('W');
      assertEquals(3, int0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("?o", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(":kx8U>B<hbI2Iiz}0", false);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(".  .  .  .  .  .  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(18, aminoAcidSequence1.length());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = 'W';
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals(6, aminoAcidSequence2.length());
      assertEquals("x  x  ", aminoAcidSequence2.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertArrayEquals(new char[] {'W', 'W', 'W', 'W', 'W', 'W', 'W'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      boolean boolean0 = AminoAcidSequence.isStopCodon('W');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('4');
      assertFalse(boolean0);
      
      char char0 = AminoAcidSequence.getCodonTranslation("(q8c*}");
      assertEquals('.', char0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("@}20WaQv8'm#{y.", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(15, aminoAcidSequence0.length());
      assertEquals(".  .  .  .  .  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('4');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: 4
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('`');
      assertFalse(boolean0);
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('3');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolFromIndex(78);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 78
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('z', 'A', 'A');
      assertEquals('.', char0);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('8');
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("<8/,");
      assertNotNull(aminoAcidSequence0);
      assertEquals(4, aminoAcidSequence0.length());
      assertEquals("<8/,", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("<8/,", false);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(".  ", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: <
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("Leu", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(".", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      int int0 = AminoAcidSequence.getSymbolIndex('d');
      assertEquals(3, int0);
      
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(".", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(47);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("");
      assertNotNull(aminoAcidSequence0);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      int int0 = AminoAcidSequence.getSymbolIndex('n');
      assertEquals(2, int0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('n');
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("6rLRoG({zbZFr4wj!1A", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals("x  x  x  x  x  x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(18, aminoAcidSequence0.length());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      String string0 = aminoAcidSequence0.toString();
      assertNotNull(string0);
      assertEquals("x  x  x  x  x  x  ", string0);
      assertEquals("x  x  x  x  x  x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(18, aminoAcidSequence0.length());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      int int0 = AminoAcidSequence.getAminoAcidType('3');
      assertEquals(7, int0);
      
      char char0 = AminoAcidSequence.getOneLetterCode("x  x  x  x  x  x  ");
      assertEquals('\uFFFF', char0);
      
      char char1 = AminoAcidSequence.getOneLetterCode("6rLRoG({zbZFr4wj!1A");
      assertTrue(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      int int1 = AminoAcidSequence.getAminoAcidType('!');
      assertTrue(int1 == int0);
      assertEquals(7, int1);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals("x  x  x  x  x  x  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(18, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('$');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Kt]%F3j1P^DE|<Y");
      assertNotNull(aminoAcidSequence0);
      assertEquals("Kt]%F3j1P^DE|<Y", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(15, aminoAcidSequence0.length());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      int int0 = AminoAcidSequence.getSymbolIndex('l');
      assertEquals(10, int0);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals("Kt]%F3j1P^DE|<Y", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(15, aminoAcidSequence0.length());
      assertEquals(21, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence1.toString());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("Kt]%F3j1P^DE|<Y", true);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals("xxxxx", aminoAcidSequence2.toString());
      assertEquals(5, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      char char0 = AminoAcidSequence.getCodonTranslation('|', '|', '8');
      assertEquals('.', char0);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation("'5b", true);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("x  ", aminoAcidSequence3.toString());
      assertEquals(3, aminoAcidSequence3.length());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '^';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = '.';
      charArray0[5] = '|';
      charArray0[6] = 'L';
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertEquals(2, aminoAcidSequence4.length());
      assertEquals("..", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertArrayEquals(new char[] {'|', '^', 'l', 'l', '.', '|', 'L'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getTranslation("", true);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertNotNull(aminoAcidSequence5);
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.containsStopCodon());
      assertEquals(0, aminoAcidSequence5.length());
      assertEquals("", aminoAcidSequence5.toString());
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char char0 = AminoAcidSequence.getSymbolFromIndex(0);
      assertEquals('a', char0);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('a');
      assertTrue(boolean0);
      
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      Strand strand0 = new Strand(bases0, 2056);
      assertNotNull(strand0);
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      assertNotNull(aGWindowAlgorithm0);
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      
      Bases bases1 = aGWindowAlgorithm0.getBases();
      assertSame(bases0, bases1);
      assertSame(bases1, bases0);
      assertNotNull(bases1);
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertEquals(1.4E-45F, aGWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("ag_content", aGWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aGWindowAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
      assertTrue(aGWindowAlgorithm0.scalingFlag());
      assertFalse(aGWindowAlgorithm0.isUserMaxMin());
      assertEquals(1, aGWindowAlgorithm0.getValueCount());
      assertEquals("AG Content (%)", aGWindowAlgorithm0.getAlgorithmName());
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      Clipboard clipboard0 = new Clipboard("Unimplemneted method");
      assertNotNull(clipboard0);
      assertEquals("Unimplemneted method", clipboard0.getName());
      
      Selection selection0 = new Selection(clipboard0);
      assertNotNull(selection0);
      assertEquals("Unimplemneted method", clipboard0.getName());
      
      Range range0 = selection0.getSelectionRange();
      assertNull(range0);
      assertEquals("Unimplemneted method", clipboard0.getName());
      
      // Undeclared exception!
      try { 
        bases1.getSpacedTranslation((Range) null, 2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('N');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'k';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'N';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  ", aminoAcidSequence0.toString());
      assertEquals(6, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'N', 'k', 'N', 'N', 'N', 'N', 'N', 'N'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      int int0 = AminoAcidSequence.getSymbolIndex('F');
      assertEquals(13, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('`');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSpacedTranslation((char[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation("^!]YY.");
      assertEquals('.', char0);
      
      char char1 = AminoAcidSequence.getCodonTranslation('P', 'P', '.');
      assertTrue(char1 == char0);
      assertEquals('.', char1);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("^!]YY.");
      assertNotNull(aminoAcidSequence0);
      assertEquals("^!]YY.", aminoAcidSequence0.toString());
      assertEquals(6, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: ^
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      boolean boolean0 = AminoAcidSequence.isLegalCodon('L');
      assertTrue(boolean0);
      
      char char0 = AminoAcidSequence.getOneLetterCode(")uyhi*P6)!na");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(")uyhi*P6)!na", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(12, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  x  ", aminoAcidSequence0.toString());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(12, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  x  ", aminoAcidSequence0.toString());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertEquals(21, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(0, aminoAcidSequence2.length());
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertEquals(12, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  x  ", aminoAcidSequence0.toString());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence3.toString());
      assertEquals(63, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertEquals(12, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  x  ", aminoAcidSequence0.toString());
      assertEquals(63, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence4.toString());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt((-2838));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('g');
      assertTrue(boolean0);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('S');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(0);
      assertNotNull(string0);
      assertEquals("Ala", string0);
      
      int int0 = AminoAcidSequence.getSymbolIndex('g');
      assertEquals(7, int0);
      
      boolean boolean2 = AminoAcidSequence.isStopCodon('g');
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = AminoAcidSequence.getSymbolIndex('S');
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      boolean boolean3 = AminoAcidSequence.isLegalCodon('g');
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Ala");
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("Ala", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("", false);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      int int2 = aminoAcidSequence1.length();
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(0, aminoAcidSequence1.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(0);
      assertNotNull(string0);
      assertEquals("Ala", string0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("Ala", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(".  ", aminoAcidSequence0.toString());
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      char char0 = AminoAcidSequence.getOneLetterCode("Ala");
      assertEquals('a', char0);
      
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        aminoAcidSequence0.findMatch((Bases) null, (Marker) null, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('t', 't', '5');
      assertEquals('.', char0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = 't';
      charArray0[3] = '.';
      charArray0[4] = 't';
      charArray0[5] = '5';
      charArray0[6] = 't';
      charArray0[7] = '5';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(6, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  .  ", aminoAcidSequence0.toString());
      assertArrayEquals(new char[] {'5', '5', 't', '.', 't', '5', 't', '5'}, charArray0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("lwA@&q", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(2, aminoAcidSequence0.length());
      assertEquals("..", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      int int0 = AminoAcidSequence.getSymbolIndex('t');
      assertEquals(16, int0);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.checkForMatch((AminoAcidSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('=');
      assertFalse(boolean0);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('g');
      assertNotNull(string0);
      assertEquals("Gly", string0);
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('=');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = AminoAcidSequence.getSymbolIndex('H');
      assertEquals(8, int0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('=');
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      assertNotNull(simpleEntryGroup0);
      assertEquals(0, simpleEntryGroup0.size());
      assertEquals(0, simpleEntryGroup0.refCount());
      
      Range range0 = null;
      try {
        range0 = new Range(20, 8);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // start: 20 > end: 8
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType(';');
      assertEquals(7, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = 'u';
      charArray0[3] = ';';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x", aminoAcidSequence0.toString());
      assertEquals(1, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {';', ';', 'u', ';'}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      int int0 = AminoAcidSequence.getAminoAcidType('\'');
      assertEquals(7, int0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("");
      assertNotNull(aminoAcidSequence0);
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("@<R]i!^42;wM", true);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(4, aminoAcidSequence1.length());
      assertEquals("xxxx", aminoAcidSequence1.toString());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("", false);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence2.codon_translation_array, true);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence3.toString());
      assertEquals(21, aminoAcidSequence3.length());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      char char0 = AminoAcidSequence.getOneLetterCode("Fjt@v2");
      assertEquals('\uFFFF', char0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('B');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: b
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('C');
      assertTrue(boolean0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('C');
      assertEquals(4, int0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("");
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation("", true);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("", true);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      float float0 = aminoAcidSequence2.getMolecularWeight();
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(2001);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2001
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('X');
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Pro");
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals("Pro", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: o
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("Ala", false);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals(".  ", aminoAcidSequence0.toString());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      int int0 = aminoAcidSequence0.length();
      assertEquals(3, int0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(3, aminoAcidSequence0.length());
      assertEquals(".  ", aminoAcidSequence0.toString());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('4');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: 4
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      boolean boolean0 = AminoAcidSequence.isLegalCodon('t');
      assertTrue(boolean0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('J');
      assertEquals(7, int0);
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence.setGeneCode();
      int int1 = AminoAcidSequence.getSymbolIndex('r');
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('J');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("Ocr", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(1, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x", aminoAcidSequence0.toString());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('!');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: !
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('0');
      assertEquals(7, int0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("        ");
      assertNotNull(aminoAcidSequence0);
      assertEquals("        ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(8, aminoAcidSequence0.length());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals("        ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(8, aminoAcidSequence0.length());
      assertEquals(63, aminoAcidSequence1.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals(0, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("", aminoAcidSequence2.toString());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertEquals("", aminoAcidSequence3.toString());
      assertEquals(0, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getOneLetterCode("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('g');
      assertTrue(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("EJ2Z4*yvGSNL4t.L", true);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("x  x  x  x  x  ", aminoAcidSequence0.toString());
      assertEquals(15, aminoAcidSequence0.length());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('Y');
      assertFalse(boolean0);
      
      int int0 = AminoAcidSequence.getAminoAcidType('Y');
      assertEquals(3, int0);
      
      int int1 = AminoAcidSequence.getSymbolIndex('Y');
      assertFalse(int1 == int0);
      assertEquals(18, int1);
      
      int int2 = AminoAcidSequence.getSymbolIndex('m');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(12, int2);
      
      char char0 = AminoAcidSequence.getCodonTranslation('3', '3', 'w');
      assertEquals('.', char0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("");
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence.setGeneCode();
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('w');
      assertNotNull(string0);
      assertEquals("Trp", string0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('3');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: 3
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = AminoAcidSequence.getSymbolIndex('Y');
      assertEquals(18, int0);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('N');
      assertNotNull(string0);
      assertEquals("Asn", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("Fzy,:gu;`[", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(".  .  .  ", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(9, aminoAcidSequence0.length());
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence1.codon_translation_array, true);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence2.toString());
      assertEquals(63, aminoAcidSequence2.length());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      
      AminoAcidSequence.setGeneCode();
      boolean boolean0 = AminoAcidSequence.isStopCodon('#');
      assertTrue(boolean0);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence2.codon_translation_array, false);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence3, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence3);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence3.equals((Object)aminoAcidSequence0));
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence2.toString());
      assertEquals(63, aminoAcidSequence2.length());
      assertEquals(21, aminoAcidSequence3.length());
      assertFalse(aminoAcidSequence3.containsStopCodon());
      assertEquals("............f.......g", aminoAcidSequence3.toString());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      AminoAcidSequence aminoAcidSequence4 = AminoAcidSequence.getTranslation("", true);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotNull(aminoAcidSequence4);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertEquals("", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(0, aminoAcidSequence4.length());
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      
      AminoAcidSequence aminoAcidSequence5 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence1.codon_translation_array, false);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence5, aminoAcidSequence4);
      assertNotNull(aminoAcidSequence5);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence5.equals((Object)aminoAcidSequence4));
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence5.containsStopCodon());
      assertEquals(63, aminoAcidSequence5.length());
      assertEquals(".  .  .  .  .  .  .  .  .  .  .  .  f  .  .  .  .  .  .  .  g  ", aminoAcidSequence5.toString());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      
      AminoAcidSequence aminoAcidSequence6 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence4.codon_translation_array, true);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence6);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence4, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence6, aminoAcidSequence2);
      assertNotNull(aminoAcidSequence6);
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence4.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence6.equals((Object)aminoAcidSequence2));
      assertEquals("", aminoAcidSequence4.toString());
      assertFalse(aminoAcidSequence4.containsStopCodon());
      assertEquals(0, aminoAcidSequence4.length());
      assertFalse(aminoAcidSequence6.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence6.toString());
      assertEquals(63, aminoAcidSequence6.length());
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      char char0 = AminoAcidSequence.getCodonTranslation("");
      assertEquals('.', char0);
      
      AminoAcidSequence.setGeneCode();
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(0);
      assertNotNull(string0);
      assertEquals("Ala", string0);
      
      boolean boolean1 = aminoAcidSequence1.checkForMatch(aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence6);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence6);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence4);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence3);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence5);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence6);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence4);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence6));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence6));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence4));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence3));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence5));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence6));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence4));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(21, aminoAcidSequence1.length());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence2.toString());
      assertEquals(63, aminoAcidSequence2.length());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolFromIndex((-2029));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2029
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('O');
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        AminoAcidSequence.getOneLetterCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('G', 'G', 'D');
      assertEquals('.', char0);
      
      AminoAcidSequence.setGeneCode();
      boolean boolean0 = AminoAcidSequence.isStopCodon('D');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('&');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: &
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('H');
      assertTrue(boolean0);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('(');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = '(';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = '(';
      charArray0[6] = '(';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("..", aminoAcidSequence0.toString());
      assertEquals(2, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'H', '(', 'H', 'H', 'H', '(', '('}, charArray0);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(2, aminoAcidSequence1.length());
      assertEquals("xx", aminoAcidSequence1.toString());
      assertArrayEquals(new char[] {'H', '(', 'H', 'H', 'H', '(', '('}, charArray0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation("bM*", true);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals(3, aminoAcidSequence2.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("x  ", aminoAcidSequence2.toString());
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('(');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("kh\b{6;$4pY", false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(9, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(".  .  .  ", aminoAcidSequence0.toString());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol:  
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('X');
      assertFalse(boolean0);
      
      int int0 = AminoAcidSequence.getSymbolIndex('X');
      assertEquals(23, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('X');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('L');
      assertEquals(3, int0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("fnv}t&}cIgP+c)");
      assertNotNull(aminoAcidSequence0);
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals("fnv}t&}cIgP+c)", aminoAcidSequence0.toString());
      assertEquals(14, aminoAcidSequence0.length());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      String string0 = aminoAcidSequence0.toString();
      assertNotNull(string0);
      assertEquals("fnv}t&}cIgP+c)", string0);
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals("fnv}t&}cIgP+c)", aminoAcidSequence0.toString());
      assertEquals(14, aminoAcidSequence0.length());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals("fnv}t&}cIgP+c)", aminoAcidSequence0.toString());
      assertEquals(14, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(63, aminoAcidSequence1.length());
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence1.toString());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      boolean boolean0 = AminoAcidSequence.isStopCodon('L');
      assertFalse(boolean0);
      
      char char0 = AminoAcidSequence.getOneLetterCode("fnv}t&}cIgP+c)");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, false);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals("fnv}t&}cIgP+c)", aminoAcidSequence0.toString());
      assertEquals(14, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(21, aminoAcidSequence2.length());
      assertEquals("............f.......g", aminoAcidSequence2.toString());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      
      float float0 = aminoAcidSequence2.getMolecularWeight();
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence2));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertEquals((-120.03998F), float0, 0.01F);
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals("fnv}t&}cIgP+c)", aminoAcidSequence0.toString());
      assertEquals(14, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals(21, aminoAcidSequence2.length());
      assertEquals("............f.......g", aminoAcidSequence2.toString());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('&');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('Y');
      assertFalse(boolean0);
      
      int int0 = AminoAcidSequence.getSymbolIndex('V');
      assertEquals(19, int0);
      
      int int1 = AminoAcidSequence.getAminoAcidType('Y');
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('V');
      assertNotNull(string0);
      assertEquals("Val", string0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(1501);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1501
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = AminoAcidSequence.getSymbolIndex('E');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = AminoAcidSequence.getSymbolIndex('q');
      assertEquals(5, int0);
      
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("GrT?r*0:|");
      assertNotNull(aminoAcidSequence0);
      assertEquals("GrT?r*0:|", aminoAcidSequence0.toString());
      assertEquals(9, aminoAcidSequence0.length());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      String string0 = aminoAcidSequence0.toString();
      assertNotNull(string0);
      assertEquals("GrT?r*0:|", string0);
      assertEquals("GrT?r*0:|", aminoAcidSequence0.toString());
      assertEquals(9, aminoAcidSequence0.length());
      assertTrue(aminoAcidSequence0.containsStopCodon());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      
      char char0 = AminoAcidSequence.getOneLetterCode("Leu");
      assertEquals('l', char0);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.getMolecularWeight();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: ?
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('T');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'T', 'T'}, charArray0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(1493);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1493
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('V');
      assertTrue(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("                ", true);
      assertNotNull(aminoAcidSequence0);
      assertEquals("xxxxx", aminoAcidSequence0.toString());
      assertEquals(5, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation("", true);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      
      char char0 = AminoAcidSequence.getCodonTranslation(';', ';', 'U');
      assertEquals('.', char0);
      
      boolean boolean1 = aminoAcidSequence1.containsStopCodon();
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(0, aminoAcidSequence1.length());
      assertEquals("", aminoAcidSequence1.toString());
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('V', 'R', '?');
      assertEquals('.', char0);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('\'');
      assertFalse(boolean0);
      
      char char1 = AminoAcidSequence.getOneLetterCode("XCNs");
      assertFalse(char1 == char0);
      assertEquals('\uFFFF', char1);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('R');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'C';
      charArray0[2] = 'R';
      charArray0[3] = '\uFFFF';
      charArray0[4] = '\uFFFF';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      assertNotNull(aminoAcidSequence0);
      assertEquals("x", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(1, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'.', 'C', 'R', '\uFFFF', '\uFFFF'}, charArray0);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isLegalCodon('C');
      assertTrue(boolean0);
      
      boolean boolean1 = AminoAcidSequence.isStopCodon('T');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = AminoAcidSequence.isLegalCodon('e');
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = AminoAcidSequence.isLegalCodon('e');
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Strand strand0 = new Strand((Bases) null, (-2119));
      assertNotNull(strand0);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      
      AGWindowAlgorithm aGWindowAlgorithm0 = null;
      try {
        aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Strand", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'k', 'k'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('k');
      assertTrue(boolean0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'k';
      charArray1[1] = 'k';
      charArray1[2] = 'k';
      charArray1[3] = 'k';
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(charArray1, false);
      assertNotSame(charArray1, charArray0);
      assertNotSame(aminoAcidSequence1, aminoAcidSequence0);
      assertNotNull(aminoAcidSequence1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(aminoAcidSequence1.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence1.containsStopCodon());
      assertEquals(".  ", aminoAcidSequence1.toString());
      assertEquals(3, aminoAcidSequence1.length());
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k'}, charArray1);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      
      int int0 = aminoAcidSequence0.length();
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertEquals(0, int0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertArrayEquals(new char[] {'k', 'k'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('H');
      assertNotNull(string0);
      assertEquals("His", string0);
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertNotSame(charArray0, charArray1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence1);
      assertNotSame(aminoAcidSequence0, aminoAcidSequence2);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence0);
      assertNotSame(aminoAcidSequence2, aminoAcidSequence1);
      assertNotNull(aminoAcidSequence2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(aminoAcidSequence0.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence0));
      assertFalse(aminoAcidSequence2.equals((Object)aminoAcidSequence1));
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("", aminoAcidSequence0.toString());
      assertEquals(0, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence2.containsStopCodon());
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence2.toString());
      assertEquals(21, aminoAcidSequence2.length());
      assertArrayEquals(new char[] {'k', 'k'}, charArray0);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt((-1119));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('9');
      assertEquals(7, int0);
      
      boolean boolean0 = AminoAcidSequence.isStopCodon('9');
      assertFalse(boolean0);
      
      char char0 = AminoAcidSequence.getSymbolFromIndex(7);
      assertEquals('g', char0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'f';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertArrayEquals(new char[] {'9', 'f'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      AminoAcidSequence.setGeneCode();
      float float0 = aminoAcidSequence0.getMolecularWeight();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertArrayEquals(new char[] {'9', 'f'}, charArray0);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('v');
      assertNotNull(string0);
      assertEquals("Val", string0);
      
      AminoAcidSequence.setGeneCode();
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('_');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation(0);
      assertNotNull(string0);
      assertEquals("Ala", string0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('-');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: -
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Fzy,:u;`[");
      assertFalse(boolean0);
      
      boolean boolean1 = AminoAcidSequence.isLegalCodon('d');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      AminoAcidSequence.setGeneCode();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation(1626);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1626
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation("B4QpCw");
      assertEquals('.', char0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('x');
      assertEquals(7, int0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolFromIndex((-1064));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1064
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('v');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getTranslation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('I', 'I', 'J');
      assertEquals('.', char0);
      
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("---");
      assertNotNull(aminoAcidSequence0);
      assertEquals(3, aminoAcidSequence0.length());
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals("---", aminoAcidSequence0.toString());
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      
      int int0 = AminoAcidSequence.getSymbolIndex('I');
      assertEquals(9, int0);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('.');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        AminoAcidSequence.getCodonTranslation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence(" AND cvterm.name=");
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(17, aminoAcidSequence0.length());
      assertEquals(" AND cvterm.name=", aminoAcidSequence0.toString());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      
      int int0 = AminoAcidSequence.getSymbolIndex('I');
      assertEquals(9, int0);
      
      String string0 = aminoAcidSequence0.toString();
      assertNotNull(string0);
      assertEquals(" AND cvterm.name=", string0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(17, aminoAcidSequence0.length());
      assertEquals(" AND cvterm.name=", aminoAcidSequence0.toString());
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation(charArray0, false);
      assertNotNull(aminoAcidSequence0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
      
      boolean boolean0 = aminoAcidSequence0.containsStopCodon();
      assertFalse(boolean0);
      assertFalse(aminoAcidSequence0.containsStopCodon());
      assertEquals(0, aminoAcidSequence0.length());
      assertEquals("", aminoAcidSequence0.toString());
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertEquals(2, AminoAcidSequence.NEGATIVELY_CHARGED_AA);
      assertEquals(5, AminoAcidSequence.STOP_AA);
      assertEquals(25, AminoAcidSequence.symbol_count);
      assertEquals(7, AminoAcidSequence.ILLEGAL_AA);
      assertEquals(4, AminoAcidSequence.SPECIAL_AA);
      assertEquals(0, AminoAcidSequence.POLAR_UNCHARGED_AA);
      assertEquals(6, AminoAcidSequence.UNKNOWN_AA);
      assertEquals(3, AminoAcidSequence.HYDROPHOBIC_AA);
      assertEquals(1, AminoAcidSequence.POSITIVELY_CHARGED_AA);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      AminoAcidSequence.isStopCodon('o');
      AminoAcidSequence.isStopCodon('j');
      AminoAcidSequence.getCodonTranslation('j', '~', '0');
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getSpacedTranslation("", false);
      AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, false);
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('0');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: 0
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = AminoAcidSequence.getAminoAcidType('i');
      assertEquals(7, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation(charArray0, true);
      AminoAcidSequence aminoAcidSequence1 = new AminoAcidSequence("jG=");
      boolean boolean0 = aminoAcidSequence0.checkForMatch(aminoAcidSequence1);
      assertEquals(1, aminoAcidSequence0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      AminoAcidSequence.getSpacedTranslation("", true);
      // Undeclared exception!
      try { 
        AminoAcidSequence.getOneLetterCode("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("");
      AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      AminoAcidSequence.getSpacedTranslation("\"N&.:BMf3Hlf3R;W-W", true);
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSpacedTranslation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      // Undeclared exception!
      try { 
        AminoAcidSequence.getThreeLetterAbbreviation('J');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - illegal one letter amino acid code
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("h7dV");
      AminoAcidSequence.getOneLetterCode("h7dV");
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      AminoAcidSequence.getTranslation("Cys", true);
      AminoAcidSequence.getTranslation(aminoAcidSequence1.codon_translation_array, true);
      AminoAcidSequence.getTranslation("", false);
      AminoAcidSequence.getSpacedTranslation("", true);
      AminoAcidSequence.getSpacedTranslation(aminoAcidSequence1.codon_translation_array, true);
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex(';');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: ;
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("Ee;fs");
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence0.codon_translation_array, true);
      assertEquals("x  x  x  x  x  x  x  x  x  x  x  x  f  x  x  x  x  x  x  x  g  ", aminoAcidSequence1.toString());
      assertFalse(aminoAcidSequence1.containsStopCodon());
      
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation("Ee;fs", true);
      int int0 = AminoAcidSequence.getSymbolIndex('m');
      assertEquals(12, int0);
      
      AminoAcidSequence aminoAcidSequence3 = AminoAcidSequence.getTranslation(aminoAcidSequence2.codon_translation_array, true);
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence3.toString());
      assertEquals("x", aminoAcidSequence2.toString());
      
      char char0 = AminoAcidSequence.getOneLetterCode("06X!R-Y=?DlIo3<(");
      assertEquals('\uFFFF', char0);
      
      AminoAcidSequence.getThreeLetterAbbreviation('Y');
      aminoAcidSequence0.length();
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence.getThreeLetterAbbreviation('Y');
      AminoAcidSequence.isStopCodon('W');
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('W');
      assertEquals("Trp", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      char char0 = AminoAcidSequence.getCodonTranslation('7', '\'', '`');
      assertEquals('.', char0);
      
      AminoAcidSequence.setGeneCode();
      int int0 = AminoAcidSequence.getAminoAcidType('7');
      assertEquals(7, int0);
      
      AminoAcidSequence.getOneLetterCode("{PW<i[fxp,fK");
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("{PW<i[fxp,fK");
      AminoAcidSequence.getOneLetterCode("j*@");
      char char1 = AminoAcidSequence.getOneLetterCode("FzY,:U;`[");
      assertEquals('\uFFFF', char1);
      
      boolean boolean0 = AminoAcidSequence.isLegalCodon('Y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      char char0 = '%';
      AminoAcidSequence.getAminoAcidType('%');
      AminoAcidSequence.isStopCodon('%');
      AminoAcidSequence.getAminoAcidType('H');
      char char1 = 'E';
      AminoAcidSequence.isStopCodon('E');
      char char2 = ']';
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex(']');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: ]
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      boolean boolean0 = AminoAcidSequence.isStopCodon('4');
      assertFalse(boolean0);
      
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("_[=KE-7We51y8a27tK", false);
      assertEquals("......", aminoAcidSequence0.toString());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String string0 = "Leu";
      AminoAcidSequence.getTranslation("Leu", false);
      AminoAcidSequence.getSpacedTranslation("Leu", false);
      // Undeclared exception!
      try { 
        AminoAcidSequence.getSymbolIndex('_');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error - illegal one letter codon symbol: _
         //
         verifyException("uk.ac.sanger.artemis.sequence.AminoAcidSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("");
      char[] charArray0 = new char[3];
      AminoAcidSequence.getThreeLetterAbbreviation('K');
      charArray0[0] = 'j';
      charArray0[1] = '';
      charArray0[2] = 'H';
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(charArray0, false);
      AminoAcidSequence.getSymbolIndex('H');
      aminoAcidSequence1.getMolecularWeight();
      aminoAcidSequence0.containsStopCodon();
      AminoAcidSequence.getSpacedTranslation("", false);
      AminoAcidSequence.getCodonTranslation('$', '[', 'H');
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getSpacedTranslation(aminoAcidSequence1.codon_translation_array, false);
      AminoAcidSequence.isLegalCodon('[');
      AminoAcidSequence.setGeneCode();
      AminoAcidSequence.getSpacedTranslation("Lys", true);
      AminoAcidSequence.getTranslation("pD_P=O/l", false);
      AminoAcidSequence.getTranslation("Lys", false);
      aminoAcidSequence0.containsStopCodon();
      aminoAcidSequence2.containsStopCodon();
      // Undeclared exception!
      try { 
        aminoAcidSequence0.elementAt(734);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      AminoAcidSequence aminoAcidSequence0 = AminoAcidSequence.getTranslation("yHG/R:wSk", false);
      AminoAcidSequence.getTranslation("yHG/R:wSk", false);
      AminoAcidSequence aminoAcidSequence1 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      AminoAcidSequence.getTranslation(aminoAcidSequence1.codon_translation_array, true);
      AminoAcidSequence aminoAcidSequence2 = AminoAcidSequence.getTranslation(aminoAcidSequence0.codon_translation_array, true);
      float float0 = aminoAcidSequence2.getMolecularWeight();
      assertEquals((-120.03998F), float0, 0.01F);
      
      boolean boolean0 = aminoAcidSequence0.checkForMatch(aminoAcidSequence2);
      assertEquals("...", aminoAcidSequence0.toString());
      assertTrue(boolean0);
      assertEquals("xxxxxxxxxxxxfxxxxxxxg", aminoAcidSequence2.toString());
      
      AminoAcidSequence.isLegalCodon(',');
      AminoAcidSequence.getCodonTranslation("");
      AminoAcidSequence.getSpacedTranslation("", false);
      String string0 = AminoAcidSequence.getThreeLetterAbbreviation('s');
      assertEquals("Ser", string0);
  }
}
