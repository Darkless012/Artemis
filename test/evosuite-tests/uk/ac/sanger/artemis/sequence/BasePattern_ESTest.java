/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:40:12 GMT 2017
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.sequence.BasePattern;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.MarkerRangeVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasePattern_ESTest extends BasePattern_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasePattern basePattern0 = new BasePattern("N");
      boolean boolean0 = basePattern0.matches("Oz~A{LXqf");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasePattern.patternType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = BasePattern.patternType("dZ7%yT5+'+gHFA]}");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = BasePattern.patternType("org.postgresql.fastpath.Fastpath");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = BasePattern.patternType("b&W|j\"");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = BasePattern.patternType("internal error - unexpected exception: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = BasePattern.patternType("nrh");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = BasePattern.patternType("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern("y*x6*Y");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // illegal characters in pattern
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern("tDX7Zy");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // illegal characters in pattern
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern("W1^");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // illegal characters in pattern
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = BasePattern.patternType("vJP");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = BasePattern.patternType("uk.ac.sanger.artemis.sequence.BasePattern");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern("SCoK?Mlm6|hlV}K/]");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // illegal characters in pattern
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern("qp_Y~=W-j5|/WNSj(B");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // illegal characters in pattern
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = BasePattern.patternType("pnVS%a4h<z+:)D");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern("L4");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // illegal characters in pattern
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern("ktJX9RY-MnwFE-");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // illegal characters in pattern
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern("rMi");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // illegal characters in pattern
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasePattern basePattern0 = new BasePattern("hg");
      // Undeclared exception!
      try { 
        basePattern0.findMatch((Bases) null, (Marker) null, 0, false, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = BasePattern.patternType("f`R =TN2");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern("Ew%K8(Y");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // illegal characters in pattern
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = BasePattern.patternType("cc*/zYV3");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern("AnnotationType: ");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // illegal characters in pattern
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasePattern basePattern0 = new BasePattern("NRh");
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("nrh");
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(emblStreamSequence0);
      Bases bases0 = new Bases(rawStreamSequence0);
      MarkerRangeVector markerRangeVector0 = basePattern0.findMatches(bases0, (Marker) null, 6);
      assertEquals(0, markerRangeVector0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasePattern basePattern0 = new BasePattern("N");
      boolean boolean0 = basePattern0.matches("u");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasePattern basePattern0 = new BasePattern("NRh");
      boolean boolean0 = basePattern0.matches("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasePattern basePattern0 = null;
      try {
        basePattern0 = new BasePattern("");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // pattern too short
         //
         verifyException("uk.ac.sanger.artemis.sequence.BasePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasePattern basePattern0 = new BasePattern("NRh");
      String string0 = basePattern0.toString();
      assertEquals("nrh", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasePattern basePattern0 = new BasePattern("NRh");
      boolean boolean0 = basePattern0.matches("nrh");
      assertFalse(boolean0);
  }
}
