/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:46:32 GMT 2017
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JLayeredPane;
import org.biojava.bio.symbol.IntegerAlphabet;
import org.biojava.bio.symbol.SimpleSymbolList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.ActionController;
import uk.ac.sanger.artemis.EntryGroup;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.SimpleGotoEventSource;
import uk.ac.sanger.artemis.io.BioJavaSequence;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.PartialSequence;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.MarkerRange;
import uk.ac.sanger.artemis.sequence.Strand;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Bases_ESTest extends Bases_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = Bases.reverseComplement(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("part_of");
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(7, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(5, genbankStreamSequence0.getOtherCount());
      assertNotNull(genbankStreamSequence0);
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(7, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(5, genbankStreamSequence0.getOtherCount());
      assertNotNull(bases0);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      int int0 = bases0.getTCount();
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertEquals(7, genbankStreamSequence0.length());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(5, genbankStreamSequence0.getOtherCount());
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("Can't remove transition as its weight is not zero or NaN: ", "Can't remove transition as its weight is not zero or NaN: ");
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(58, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(6, fastaStreamSequence0.getTCount());
      assertEquals(47, fastaStreamSequence0.getOtherCount());
      assertNotNull(fastaStreamSequence0);
      
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(fastaStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(58, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(6, fastaStreamSequence0.getTCount());
      assertEquals(47, fastaStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(58, genbankStreamSequence0.length());
      assertEquals(4, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(47, genbankStreamSequence0.getOtherCount());
      assertEquals(6, genbankStreamSequence0.getTCount());
      assertNotNull(genbankStreamSequence0);
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(58, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(6, fastaStreamSequence0.getTCount());
      assertEquals(47, fastaStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(58, genbankStreamSequence0.length());
      assertEquals(4, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(47, genbankStreamSequence0.getOtherCount());
      assertEquals(6, genbankStreamSequence0.getTCount());
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      GenbankStreamSequence genbankStreamSequence1 = (GenbankStreamSequence)bases0.getSequence();
      assertSame(genbankStreamSequence0, genbankStreamSequence1);
      assertSame(genbankStreamSequence1, genbankStreamSequence0);
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(1, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(58, fastaStreamSequence0.length());
      assertEquals(4, fastaStreamSequence0.getACount());
      assertEquals(6, fastaStreamSequence0.getTCount());
      assertEquals(47, fastaStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getGCount());
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(58, genbankStreamSequence0.length());
      assertEquals(4, genbankStreamSequence0.getACount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(47, genbankStreamSequence0.getOtherCount());
      assertEquals(6, genbankStreamSequence0.getTCount());
      assertEquals(2, genbankStreamSequence1.getFormatType());
      assertEquals(6, genbankStreamSequence1.getTCount());
      assertEquals(4, genbankStreamSequence1.getACount());
      assertEquals(1, genbankStreamSequence1.getGCount());
      assertEquals(0, genbankStreamSequence1.getCCount());
      assertEquals(58, genbankStreamSequence1.length());
      assertNull(genbankStreamSequence1.getHeader());
      assertEquals(47, genbankStreamSequence1.getOtherCount());
      assertNotNull(genbankStreamSequence1);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("timelastmodified=", "timelastmodified=");
      assertEquals(17, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(2, fastaStreamSequence0.getTCount());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertNotNull(fastaStreamSequence0);
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertEquals(17, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(2, fastaStreamSequence0.getTCount());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      
      float float0 = bases0.getAverageAGPercent();
      assertEquals(17, fastaStreamSequence0.length());
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(2, fastaStreamSequence0.getTCount());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5.882353F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = Bases.complement(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 87, 1123, short0, integer0);
      assertEquals(0, partialSequence0.getOtherCount());
      assertEquals(87, partialSequence0.length());
      assertEquals(0, partialSequence0.getTCount());
      assertEquals((short)0, (short)partialSequence0.getStrand());
      assertEquals(0, partialSequence0.getGCount());
      assertEquals(0, partialSequence0.getACount());
      assertEquals(200, (int)partialSequence0.getPhase());
      assertEquals(0, partialSequence0.getCCount());
      assertFalse(partialSequence0.isComplement());
      assertNotNull(partialSequence0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Bases bases0 = new Bases(partialSequence0);
      assertEquals(0, partialSequence0.getOtherCount());
      assertEquals(87, partialSequence0.length());
      assertEquals(0, partialSequence0.getTCount());
      assertEquals((short)0, (short)partialSequence0.getStrand());
      assertEquals(0, partialSequence0.getGCount());
      assertEquals(0, partialSequence0.getACount());
      assertEquals(200, (int)partialSequence0.getPhase());
      assertEquals(0, partialSequence0.getCCount());
      assertFalse(partialSequence0.isComplement());
      assertNotNull(bases0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      // Undeclared exception!
      try { 
        bases0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1122
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bases.reverseComplement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      // Undeclared exception!
      try { 
        bases0.getCCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      
      // Undeclared exception!
      try { 
        bases0.getBaseAt((-1548));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bases.complement((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bases.complement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char char0 = Bases.complement('m');
      assertEquals('k', char0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char char0 = Bases.complement('h');
      assertEquals('d', char0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char char0 = Bases.complement('j');
      assertEquals('@', char0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char char0 = Bases.complement('M');
      assertEquals('k', char0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char char0 = Bases.complement('7');
      assertEquals('@', char0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char char0 = Bases.complement('`');
      assertEquals('@', char0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("part_of");
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(5, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(7, genbankStreamSequence0.length());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertNotNull(genbankStreamSequence0);
      
      Bases bases0 = new Bases(genbankStreamSequence0);
      assertEquals(2, genbankStreamSequence0.getFormatType());
      assertEquals(5, genbankStreamSequence0.getOtherCount());
      assertEquals(1, genbankStreamSequence0.getACount());
      assertEquals(0, genbankStreamSequence0.getGCount());
      assertNull(genbankStreamSequence0.getHeader());
      assertEquals(0, genbankStreamSequence0.getCCount());
      assertEquals(7, genbankStreamSequence0.length());
      assertEquals(1, genbankStreamSequence0.getTCount());
      assertNotNull(bases0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      
      Range range0 = new Range(0);
      assertEquals(0, range0.getEnd());
      assertEquals(0, range0.getStart());
      assertEquals(1, range0.getCount());
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        bases0.getSubSequenceC(range0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntegerAlphabet integerAlphabet0 = IntegerAlphabet.getInstance();
      assertEquals("INTEGER", integerAlphabet0.getName());
      assertNotNull(integerAlphabet0);
      
      SimpleSymbolList simpleSymbolList0 = new SimpleSymbolList(integerAlphabet0);
      assertEquals("INTEGER", integerAlphabet0.getName());
      assertEquals(0, simpleSymbolList0.length());
      assertNotNull(simpleSymbolList0);
      
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence(simpleSymbolList0);
      assertEquals("INTEGER", integerAlphabet0.getName());
      assertEquals(0, simpleSymbolList0.length());
      assertNotNull(bioJavaSequence0);
      
      Bases bases0 = new Bases(bioJavaSequence0);
      assertEquals("INTEGER", integerAlphabet0.getName());
      assertEquals(0, simpleSymbolList0.length());
      assertNotNull(bases0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      
      int int0 = bases0.getComplementPosition(65);
      assertEquals("INTEGER", integerAlphabet0.getName());
      assertEquals(0, simpleSymbolList0.length());
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals((-64), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      
      // Undeclared exception!
      try { 
        bases0.getLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      assertNotNull(bases0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      
      Sequence sequence0 = bases0.getSequence();
      assertNull(sequence0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = Bases.isLegalBase('$');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = Bases.isLegalBase('t');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = Bases.isLegalBase('G');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = Bases.isLegalBase('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      char[] charArray1 = Bases.complement(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = Bases.reverseComplement("internal error - unexpected exception: ");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char char0 = Bases.complement('f');
      assertEquals('@', char0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '^';
      char[] charArray1 = Bases.complement(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '^', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'@', '@', '@', '@', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      char[] charArray1 = Bases.complement(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'r', '@', '@', '@', '@', '@', '@', '@', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[5] = 'Q';
      char[] charArray1 = Bases.reverseComplement(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'Q', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'@', '@', '@', '@', '@', '@', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = Bases.complement("org.biojava.bio.seq.io.SwissprotProcessor$Factory");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = Bases.complement("NOv;");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = Bases.complement("[M");
      assertNotNull(string0);
      assertEquals("@k", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char char0 = Bases.complement('L');
      assertEquals('@', char0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = Bases.complement("tJz_hbw[");
      assertNotNull(string0);
      assertEquals("a@@@dvw@", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[6] = 'I';
      char[] charArray1 = Bases.reverseComplement(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'I'}, charArray0);
      assertArrayEquals(new char[] {'@', '@', '@', '@', '@', '@', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = 'H';
      char[] charArray1 = Bases.complement(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'H', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'@', '@', '@', 'd', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = Bases.reverseComplement("/~CK'9ehEG9");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = Bases.reverseComplement("jerD*OxR\")8FX` !");
      assertNotNull(string0);
      assertEquals("@@@x@@@@yx@@hy@@", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = Bases.reverseComplement("d*}BZ");
      assertNotNull(string0);
      assertEquals("@v@@h", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = Bases.complement("K_AF6zXz]5");
      assertNotNull(string0);
      assertEquals("m@t@@@x@@@", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = Bases.complement("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = Bases.reverseComplement("1pV;,i`%Cw,");
      assertNotNull(string0);
      assertEquals("@wg@@@@@b@@", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("XHO.Pjl&[k7I_");
      Bases bases0 = new Bases(emblStreamSequence0);
      bases0.reverseComplement();
      assertEquals(13, emblStreamSequence0.getOtherCount());
      assertEquals(13, emblStreamSequence0.length());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short)762);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 2903, (-208), short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      ActionController actionController0 = new ActionController();
      bases0.removeSequenceChangeListener(actionController0);
      assertEquals(5, Bases.MAX_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("part_of");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Range range0 = new Range(1);
      char[] charArray0 = bases0.getSubSequenceC(range0, 1192);
      assertArrayEquals(new char[] {'n'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("\"szqJG/S-#C3i[", "\"szqJG/S-#C3i[");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Range range0 = new Range(5);
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertEquals(0, entryGroup0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("", "RDBp5,H{");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Range range0 = new Range(115);
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertNotSame(entryGroup0, simpleEntryGroup0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short)762);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 2903, (-208), short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Range range0 = new Range((short)762);
      // Undeclared exception!
      try { 
        bases0.truncate(range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 970
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("H1U20TNECB43P-", "&09pA@\"nF=}Q*,i");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Range range0 = new Range((-5), 116);
      EntryGroup entryGroup0 = simpleEntryGroup0.truncate(range0);
      assertEquals(0, entryGroup0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("uk.ac.sanger.artemis.sequence.Bases", "uk.ac.sanger.artemis.sequence.Bases");
      Bases bases0 = new Bases(fastaStreamSequence0);
      // Undeclared exception!
      try { 
        bases0.getSubSequence((Range) null, 506);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^;%/~]8y333\naS2#");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Range range0 = new Range(0);
      // Undeclared exception!
      try { 
        bases0.getMatchingCodons(range0, 0, (StringVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[7];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-386), (-386), short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      MarkerRange markerRange0 = simpleGotoEventSource0.gotoBase(2228);
      Range range0 = markerRange0.getRawRange();
      // Undeclared exception!
      try { 
        bases0.getStopCodons(range0, (-1074));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("timelastmodified=", "timelastmodified=");
      Bases bases0 = new Bases(fastaStreamSequence0);
      int int0 = bases0.getRawPosition(5, 257);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = Bases.getIndexOfBase('E');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Range range0 = new Range(2);
      // Undeclared exception!
      try { 
        bases0.truncate(range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      assertEquals(1, Strand.FORWARD);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IntegerAlphabet integerAlphabet0 = IntegerAlphabet.getInstance();
      SimpleSymbolList simpleSymbolList0 = new SimpleSymbolList(integerAlphabet0);
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence(simpleSymbolList0);
      Bases bases0 = new Bases(bioJavaSequence0);
      // Undeclared exception!
      try { 
        bases0.getAverageGCPercent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.biojava.bio.symbol.IntegerAlphabet cannot be cast to org.biojava.bio.symbol.FiniteAlphabet
         //
         verifyException("org.biojava.bio.seq.io.SymbolListCharSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      bases0.clearCodonCache();
      assertEquals(2, Bases.REVERSE);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      // Undeclared exception!
      try { 
        bases0.getAverageAGPercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      assertEquals(2, Strand.REVERSE);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("2XwVI2\u0007G");
      Bases bases0 = new Bases(rawStreamSequence0);
      String string0 = bases0.toString();
      assertEquals("nnwnnnnn", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(emblStreamSequence0);
      Bases bases0 = new Bases(genbankStreamSequence0);
      int int0 = bases0.getCCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      // Undeclared exception!
      try { 
        bases0.reverseComplement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("~_l<U|YOX`");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Range range0 = new Range(0);
      // Undeclared exception!
      try { 
        bases0.deleteRange(range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("rP8PHk)[P6");
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(emblStreamSequence0);
      Bases bases0 = new Bases(rawStreamSequence0);
      int int0 = bases0.getTCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      // Undeclared exception!
      try { 
        bases0.getGCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[8];
      Short short0 = new Short((short) (-149));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-625), (-625), short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      // Undeclared exception!
      try { 
        bases0.getTranslation((Range) null, (-599), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      Bases bases0 = new Bases(emblStreamSequence0);
      Range range0 = new Range((-965));
      // Undeclared exception!
      try { 
        bases0.getSpacedTranslation(range0, 0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.StreamSequence", e);
      }
  }
}
