/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:45:16 GMT 2017
 */

package uk.ac.sanger.artemis.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.PartialSequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.MarkerChangeEvent;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Marker_ESTest extends Marker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      Marker marker1 = strand0.makeMarkerFromRawPosition((-4934));
      Marker marker2 = Marker.getRawLowest(marker1, marker0);
      assertEquals(6735, marker2.getPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      Marker marker1 = marker0.moveBy(1);
      boolean boolean0 = marker0.equals(marker1);
      assertFalse(boolean0);
      assertEquals(1800, marker1.getPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = new Marker(strand0, 0);
      Marker marker1 = marker0.moveBy(0);
      assertEquals(0, marker1.getPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      Marker marker1 = marker0.moveBy((-4934));
      assertEquals((-3135), marker1.getPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition((-4934));
      int int0 = marker0.getRawPosition();
      assertEquals((-4934), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarker(0);
      Marker marker1 = Marker.getRawLowest(marker0, marker0);
      assertEquals(0, marker1.getPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[13];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarker((short) (-182));
      Marker marker1 = Marker.getRawLowest(marker0, marker0);
      assertEquals((-182), marker1.getPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Marker.getRawLowest((Marker) null, (Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      // Undeclared exception!
      try { 
        marker0.equals((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("8R!lEGX^HQziu8s[C");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = new Strand(bases0, 0);
      Marker marker0 = null;
      try {
        marker0 = new Marker(strand0, 1383);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // position: 1383
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Marker marker0 = null;
      try {
        marker0 = new Marker((Strand) null, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      marker0.addMarkerChangeListener(feature0);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(marker0, strand0, 256);
      // Undeclared exception!
      try { 
        marker0.fireEvent(markerChangeEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      int int0 = marker0.getRawPosition();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      int int0 = marker0.getPosition();
      assertEquals(1799, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      marker0.getStrand();
      assertEquals(1799, marker0.getPosition());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(marker0, strand0, 256);
      marker0.fireEvent(markerChangeEvent0);
      assertEquals(1799, marker0.getPosition());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      Marker marker1 = marker0.moveBy((-25));
      Marker marker2 = Marker.getRawLowest(marker1, marker0);
      assertEquals(1799, marker2.getPosition());
      assertEquals(1774, marker1.getPosition());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      marker0.removeMarkerChangeListener(feature0);
      assertEquals(1799, marker0.getPosition());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      marker0.addMarkerChangeListener(feature0);
      marker0.addMarkerChangeListener(feature0);
      assertEquals(1799, marker0.getPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      boolean boolean0 = marker0.equals(marker0);
      assertTrue(boolean0);
      assertEquals(1799, marker0.getPosition());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      Marker marker1 = strand0.makeMarkerFromRawPosition((-4934));
      boolean boolean0 = marker1.equals(marker0);
      assertFalse(boolean0);
      assertEquals(6735, marker1.getPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      Marker marker1 = marker0.moveBy(0);
      boolean boolean0 = marker0.equals(marker1);
      assertEquals(1799, marker1.getPosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1759, 1759, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      marker0.finalize();
      assertEquals(1758, marker0.getPosition());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      marker0.setPosition((-1422));
      int int0 = marker0.getPosition();
      assertEquals((-1422), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      Short short0 = new Short((short) (-182));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1800, 1800, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      Marker marker0 = strand0.makeMarkerFromRawPosition(2);
      marker0.setRawPosition(1048576);
      assertEquals((-1046775), marker0.getPosition());
  }
}
