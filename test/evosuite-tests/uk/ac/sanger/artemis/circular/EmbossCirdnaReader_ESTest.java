/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 00:45:44 GMT 2017
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.circular.EmbossCirdnaReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbossCirdnaReader_ESTest extends EmbossCirdnaReader_ESTest_scaffolding {
	
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmbossCirdnaReader embossCirdnaReader0 = null;
      try {
        embossCirdnaReader0 = new EmbossCirdnaReader();
        fail("Expecting exception: SecurityException");
      
      } catch(SecurityException e) {
         //
         // Permission Denied
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      embossCirdnaReader0.start = 0;
      embossCirdnaReader0.start = 6;
      int int0 = embossCirdnaReader0.getStart();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=x", "");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      embossCirdnaReader0.start = (-1465);
      int int0 = embossCirdnaReader0.getStart();
      assertEquals((-1465), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B$+6I^.HaNLczu");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      embossCirdnaReader0.end = 846;
      int int0 = embossCirdnaReader0.getEnd();
      assertEquals(846, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^Aq");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      embossCirdnaReader0.end = 4308;
      embossCirdnaReader0.end = 0;
      embossCirdnaReader0.end = (-33);
      int int0 = embossCirdnaReader0.getEnd();
      assertEquals((-33), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(CURRENT_DIR + "/5");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "start 5");
      MockFile mockFile0 = new MockFile("5");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "start 5");
      // Undeclared exception!
      try { 
        embossCirdnaReader0.readFile();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5start\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(CURRENT_DIR + "/5");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "start 5");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "start 5");
      MockFile mockFile0 = new MockFile("5");
      EmbossCirdnaReader embossCirdnaReader0 = null;
      try {
        embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5start\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmbossCirdnaReader embossCirdnaReader0 = null;
      try {
        embossCirdnaReader0 = new EmbossCirdnaReader((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(CURRENT_DIR + "/5");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "group");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "5");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "5");
      Vector vector0 = embossCirdnaReader0.readFile();
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(CURRENT_DIR + "/5");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "5");
      Vector vector0 = embossCirdnaReader0.readFile();
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      boolean boolean0 = embossCirdnaReader0.isReading();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^Aq");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      int int0 = embossCirdnaReader0.getStart();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^Aq");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      Vector vector0 = embossCirdnaReader0.getBlock();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^Aq");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      Vector vector0 = embossCirdnaReader0.getRestrictionEnzyme();
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^Aq");
      EmbossCirdnaReader embossCirdnaReader0 = new EmbossCirdnaReader(mockFile0);
      int int0 = embossCirdnaReader0.getEnd();
      assertEquals(0, int0);
  }
}
