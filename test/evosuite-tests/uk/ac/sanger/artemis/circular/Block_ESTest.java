/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 00:39:13 GMT 2017
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.datatransfer.DataFlavor;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.StyleContext;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.DefaultImageHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGraphics2D;
import org.emboss.jemboss.JembossParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.DocumentType;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.FeatureKeyQualifierPredicate;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.circular.Block;
import uk.ac.sanger.artemis.circular.DNADraw;
import uk.ac.sanger.artemis.circular.Track;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Block_ESTest extends Block_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = Color.RED;
      Bases bases0 = new Bases((Sequence) null);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Track track0 = new Track(2795, entry0);
      Object[][] objectArray0 = new Object[7][3];
      Object[] objectArray1 = new Object[4];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      Vector vector0 = defaultTableModel0.getDataVector();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block(" bases of selection:\n", 2795, 2795, color0, 2795, track0, dNADraw0);
      Point[] pointArray0 = block0.getLinePoints((-130));
      assertEquals(2795, block0.getBend());
      assertNotNull(pointArray0);
      assertEquals(2795, block0.getBstart());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JTable jTable0 = new JTable();
      Color color0 = jTable0.getSelectionBackground();
      Track track0 = new Track(1436.835, (Entry) null);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPrivateServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block("7", 65, 65, color0, 65, track0, dNADraw0);
      Track track1 = new Track(999.0, "7", false, false, (Entry) null);
      block0.setTrack(track1);
      block0.getTrack();
      assertEquals(65.0F, block0.getStrokeSize(), 0.01F);
      assertEquals(65, block0.getBstart());
      assertFalse(block0.isDrawLabel());
      assertEquals(65, block0.getBend());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JTable jTable0 = new JTable();
      Color color0 = jTable0.getSelectionBackground();
      Track track0 = new Track(1436.835, (Entry) null);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPrivateServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block("/", 65, 65, color0, 65, track0, dNADraw0);
      Track track1 = new Track(999.0, "/", false, true, (Entry) null);
      block0.setTrack(track1);
      block0.getTrack();
      assertEquals(65, block0.getBend());
      assertEquals(65, block0.getBstart());
      assertFalse(block0.isDrawLabel());
      assertEquals(65.0F, block0.getStrokeSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("", "AW{", "AW{");
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(genericDocument0, imageHandlerBase64Encoder0, defaultExtensionHandler0, false);
      Color color0 = sVGGraphics2D0.getColor();
      Track track0 = new Track(4115.6682936, "", false, false, (Entry) null);
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("", 0, 0, color0, 0, track0, dNADraw0);
      block0.getStrokeSize();
      assertFalse(block0.isDrawLabel());
      assertEquals(0, block0.getBend());
      assertEquals(0, block0.getBstart());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Color color0 = Color.PINK;
      Block block0 = new Block("Tail", (-1735), 495, color0, (-1735), (Track) null);
      float float0 = block0.getStrokeSize();
      assertEquals((-1735.0F), float0, 0.01F);
      assertFalse(block0.isDrawLabel());
      assertEquals(495, block0.getBend());
      assertEquals((-1735), block0.getBstart());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("");
      Track track0 = new Track((-756), "repeatCount", "F[KG+?Bk;,k4r", true, true, false, entry0);
      Block block0 = new Block("F[KG+?Bk;,k4r", (-756), (-756), (Color) null, 773.2036F, track0);
      block0.getColour();
      assertEquals((-756), block0.getBstart());
      assertEquals(773.2036F, block0.getStrokeSize(), 0.01F);
      assertFalse(block0.isDrawLabel());
      assertEquals((-756), block0.getBend());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Color color0 = Color.black;
      Track track0 = new Track((-92), (Entry) null);
      Block block0 = new Block("9:;ph$", (-92), (-92), color0, (-92), track0);
      Color color1 = block0.getColour();
      assertFalse(block0.isDrawLabel());
      assertEquals((-92.0F), block0.getStrokeSize(), 0.01F);
      assertEquals((-92), block0.getBend());
      assertNotNull(color1);
      assertEquals((-92), block0.getBstart());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("", "AW{", "AW{");
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(genericDocument0, imageHandlerBase64Encoder0, defaultExtensionHandler0, false);
      Color color0 = sVGGraphics2D0.getColor();
      Track track0 = new Track(4115.6682936, "", false, false, (Entry) null);
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("", 0, 0, color0, 0, track0, dNADraw0);
      int int0 = block0.getBstart();
      assertEquals(0, block0.getBend());
      assertFalse(block0.isDrawLabel());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = Color.getHSBColor(1683.0F, (-2334), (-3741.1968F));
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("", (-2334), 0, color0, 0, (Track) null, dNADraw0);
      int int0 = block0.getBend();
      assertEquals((-2334), block0.getBstart());
      assertEquals(0, int0);
      assertFalse(block0.isDrawLabel());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      Track track0 = new Track((-0.05), "wP*", true, true, (Entry) null);
      Block block0 = new Block(" Line width", 3834, 579, systemColor0, 0.0F, track0);
      // Undeclared exception!
      try { 
        block0.isOverMe(579, 579);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Block", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = Color.getHSBColor(1683.0F, (-2334), (-3741.1968F));
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("", (-2334), 0, color0, 0, (Track) null, dNADraw0);
      // Undeclared exception!
      try { 
        block0.getTransferData((DataFlavor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Block", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Color color0 = Color.getHSBColor(1683.0F, (-2348), (-3741.1968F));
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("", (-2348), 0, color0, 0, (Track) null, dNADraw0);
      // Undeclared exception!
      try { 
        block0.getLinePoints(1691);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Block", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getSelectedTextColor();
      Block block0 = new Block((String) null, (-1298), (-1298), color0, (-1298), (Track) null);
      // Undeclared exception!
      try { 
        block0.drawLinear((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Block", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("y[~P<e{ cRH4", (-4259), (-4259), (Color) null, (-4259), (Track) null, dNADraw0);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("", "y[~P<e{ cRH4", "8+X S`4=y_5 1veUGv");
      GenericDOMImplementation genericDOMImplementation0 = new GenericDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, genericDOMImplementation0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(genericDocument0);
      // Undeclared exception!
      try { 
        block0.drawCircular(sVGGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Block", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Color color0 = Color.CYAN;
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("zs{o`");
      Track track0 = new Track(2.0F, "", "zs{o`", false, true, false, entry0);
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("zs{o`", 100, 100, color0, 2.0F, track0, dNADraw0);
      block0.getAngEnd();
      assertEquals(100, block0.getBstart());
      assertFalse(block0.isDrawLabel());
      assertEquals(2.0F, block0.getStrokeSize(), 0.01F);
      assertEquals(100, block0.getBend());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Track track0 = new Track(65489, "`ak$-JiZH", false, false, (Entry) null);
      Block block0 = new Block("kYr(uIo64WAr=", 65489, 65489, (Color) null, (-2200.6052F), track0);
      block0.getAngStart();
      assertEquals((-2200.6052F), block0.getStrokeSize(), 0.01F);
      assertEquals(65489, block0.getBend());
      assertEquals(65489, block0.getBstart());
      assertFalse(block0.isDrawLabel());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Color color0 = Color.CYAN;
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("zs{o`");
      Track track0 = new Track(2.0F, "", "zs{o`", false, true, false, entry0);
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("zs{o`", 100, 100, color0, 2.0F, track0, dNADraw0);
      Color color1 = block0.getColour();
      assertEquals(100, block0.getBstart());
      assertEquals(100, block0.getBend());
      assertEquals(2.0F, block0.getStrokeSize(), 0.01F);
      assertFalse(block0.isDrawLabel());
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JTable jTable0 = new JTable();
      Color color0 = jTable0.getSelectionBackground();
      Track track0 = new Track(1436.835, (Entry) null);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPrivateServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block("/", 65, 65, color0, 65, track0, dNADraw0);
      boolean boolean0 = block0.isDataFlavorSupported(block0.BLOCK);
      assertEquals(65.0F, block0.getStrokeSize(), 0.01F);
      assertEquals(65, block0.getBstart());
      assertTrue(boolean0);
      assertEquals(65, block0.getBend());
      assertFalse(block0.isDrawLabel());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Color color0 = Color.orange;
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("");
      Track track0 = new Track((-1012.237642764), "", "", true, false, true, entry0);
      Block block0 = new Block("", (-370), (-370), color0, (-3129.7F), track0, (DNADraw) null);
      DataFlavor dataFlavor0 = DataFlavor.stringFlavor;
      boolean boolean0 = block0.isDataFlavorSupported(dataFlavor0);
      assertFalse(boolean0);
      assertEquals((-3129.7F), block0.getStrokeSize(), 0.01F);
      assertFalse(block0.isDrawLabel());
      assertEquals((-370), block0.getBstart());
      assertEquals((-370), block0.getBend());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry();
      Track track0 = new Track(916.1688F, entry0);
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("(p?1Ho*rz", 2135622374, 2135622374, systemColor0, 916.1688F, track0, dNADraw0);
      block0.isOverMe(65, 0);
      assertEquals(2135622374, block0.getBend());
      assertEquals(2135622374, block0.getBstart());
      assertFalse(block0.isDrawLabel());
      assertEquals(916.1688F, block0.getStrokeSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("");
      Track track0 = new Track((-983), "", true, true, entry0);
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("", (-983), (-983), (Color) null, (-983), track0, dNADraw0);
      block0.isOverMe(0, 0);
      assertEquals((-983.0F), block0.getStrokeSize(), 0.01F);
      assertEquals((-983), block0.getBstart());
      assertFalse(block0.isDrawLabel());
      assertEquals((-983), block0.getBend());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GapContent gapContent0 = new GapContent(1);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getSelectedTextColor();
      Track track0 = new Track(1, "", "", false, false, true, (Entry) null);
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("-fbgL", 1, 1, color0, 255.16F, track0, dNADraw0);
      // Undeclared exception!
      try { 
        block0.draw((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Block", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Color color0 = Color.BLUE;
      Track track0 = new Track(0, "Mg3<BxBu|6GP", false, false, (Entry) null);
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("%yw<}$", 0, 0, color0, 0, track0, dNADraw0);
      // Undeclared exception!
      try { 
        block0.showProperties((JFrame) null, dNADraw0, (JButton) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Block", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JTable jTable0 = new JTable();
      Color color0 = jTable0.getSelectionBackground();
      Track track0 = new Track(1436.835, (Entry) null);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPrivateServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block("/", 65, 65, color0, 65, track0, dNADraw0);
      block0.getFeature();
      assertEquals(65, block0.getBend());
      assertFalse(block0.isDrawLabel());
      assertEquals(65, block0.getBstart());
      assertEquals(65.0F, block0.getStrokeSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GapContent gapContent0 = new GapContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getCaretColor();
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "");
      Entry entry0 = filteredEntryGroup0.createEntry();
      Track track0 = new Track(0.0, "h@0Px;#lS?|x", "None", true, false, false, entry0);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPublicServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, (Vector) null, (Vector) null);
      Block block0 = new Block("None", (-4526), 252, color0, 0.5F, track0, dNADraw0);
      assertEquals(0.5F, block0.getStrokeSize(), 0.01F);
      
      block0.setStrokeSize(0.0F);
      assertEquals((-4526), block0.getBstart());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Color color0 = Color.CYAN;
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("zs{o`");
      Track track0 = new Track(2.0F, "", "zs{o`", false, true, false, entry0);
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("zs{o`", 100, 100, color0, 2.0F, track0, dNADraw0);
      block0.isArrowHead();
      assertEquals(100, block0.getBstart());
      assertFalse(block0.isDrawLabel());
      assertEquals(2.0F, block0.getStrokeSize(), 0.01F);
      assertEquals(100, block0.getBend());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JTable jTable0 = new JTable();
      Color color0 = jTable0.getSelectionBackground();
      Track track0 = new Track(1436.835, (Entry) null);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPrivateServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block("/", 65, 65, color0, 65, track0, dNADraw0);
      boolean boolean0 = block0.isDrawLabel();
      assertEquals(65, block0.getBend());
      assertFalse(boolean0);
      assertEquals(65.0F, block0.getStrokeSize(), 0.01F);
      assertEquals(65, block0.getBstart());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Color color0 = new Color(0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Key key0 = new Key("");
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "");
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "600");
      Entry entry0 = filteredEntryGroup0.createEntry((String) null);
      Track track0 = new Track(1246.92118849, ")BmZyP&[a,U", false, false, entry0);
      Block block0 = new Block(")BmZyP&[a,U", 0, (-2889), color0, 2.28F, track0);
      block0.setDrawLabel(false);
      assertEquals((-2889), block0.getBend());
      assertFalse(block0.isDrawLabel());
      assertEquals(0, block0.getBstart());
      assertEquals(2.28F, block0.getStrokeSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JTable jTable0 = new JTable();
      Color color0 = jTable0.getSelectionBackground();
      Track track0 = new Track(1436.835, (Entry) null);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPrivateServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block("/", 65, 65, color0, 65, track0, dNADraw0);
      block0.setArrowHead(true);
      assertTrue(block0.isArrowHead());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      Track track0 = new Track((-0.05), "wP*", true, true, (Entry) null);
      Block block0 = new Block(" Line width", 3834, 579, systemColor0, 0.0F, track0);
      block0.getTransferDataFlavors();
      assertEquals(3834, block0.getBstart());
      assertFalse(block0.isDrawLabel());
      assertEquals(579, block0.getBend());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JTable jTable0 = new JTable();
      Color color0 = jTable0.getSelectionBackground();
      Track track0 = new Track(1436.835, (Entry) null);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPrivateServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block("/", 65, 65, color0, 65, track0, dNADraw0);
      int int0 = block0.getBend();
      assertFalse(block0.isDrawLabel());
      assertEquals(65, block0.getBstart());
      assertEquals(65, int0);
      assertEquals(65.0F, block0.getStrokeSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Key key0 = Key.CDS;
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "", "", true, false);
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "");
      Entry entry0 = filteredEntryGroup0.createEntry();
      Track track0 = new Track((-4363.803), "", false, true, entry0);
      Vector<Container> vector0 = new Vector<Container>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block("", 1176, (-712), color0, 1176, track0, dNADraw0);
      block0.setFeature((uk.ac.sanger.artemis.Feature) null);
      assertEquals((-712), block0.getBend());
      assertFalse(block0.isDrawLabel());
      assertEquals(1176.0F, block0.getStrokeSize(), 0.01F);
      assertEquals(1176, block0.getBstart());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Color color0 = new Color(30);
      Track track0 = new Track(820.0, "p@C$ZAMWu:5", false, false, (Entry) null);
      Block block0 = new Block("p@C$ZAMWu:5", 105, 105, color0, 105, track0);
      block0.setLabel("p@C$ZAMWu:5");
      assertEquals(105, block0.getBend());
      assertEquals(105.0F, block0.getStrokeSize(), 0.01F);
      assertEquals(105, block0.getBstart());
      assertFalse(block0.isDrawLabel());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GapContent gapContent0 = new GapContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getCaretColor();
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "");
      Entry entry0 = filteredEntryGroup0.createEntry();
      Track track0 = new Track(0.0, "h@0Px;#lS?|x", "None", true, false, false, entry0);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPublicServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, (Vector) null, (Vector) null);
      Block block0 = new Block("None", (-4526), 252, color0, 0.5F, track0, dNADraw0);
      block0.getLabel();
      assertEquals(0.5F, block0.getStrokeSize(), 0.01F);
      assertEquals((-4526), block0.getBstart());
      assertEquals(252, block0.getBend());
      assertFalse(block0.isDrawLabel());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Color color0 = Color.PINK;
      Block block0 = new Block("Tail", (-1735), 495, color0, (-1735), (Track) null);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      Color color1 = jSpinner_NumberEditor0.getForeground();
      block0.setColour(color1);
      assertEquals((-1735), block0.getBstart());
      assertEquals((-1735.0F), block0.getStrokeSize(), 0.01F);
      assertFalse(block0.isDrawLabel());
      assertEquals(495, block0.getBend());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      Track track0 = new Track((-1.0), "Show Label", false, false, (Entry) null);
      Block block0 = new Block("Show Label", 360, 360, systemColor0, 360, track0);
      float float0 = block0.getStrokeSize();
      assertEquals(360.0F, float0, 0.01F);
      assertEquals(360, block0.getBend());
      assertEquals(360, block0.getBstart());
      assertFalse(block0.isDrawLabel());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GapContent gapContent0 = new GapContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getCaretColor();
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "");
      Entry entry0 = filteredEntryGroup0.createEntry();
      Track track0 = new Track(0.0, "h@0Px;#lS?|x", "None", true, false, false, entry0);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPublicServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, (Vector) null, (Vector) null);
      Block block0 = new Block("None", (-4526), 252, color0, 0.5F, track0, dNADraw0);
      int int0 = block0.getBstart();
      assertFalse(block0.isDrawLabel());
      assertEquals(252, block0.getBend());
      assertEquals((-4526), int0);
      assertEquals(0.5F, block0.getStrokeSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GenericDocument genericDocument0 = new GenericDocument((DocumentType) null, (DOMImplementation) null);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(genericDocument0, defaultImageHandler0, defaultExtensionHandler0, false);
      GraphicContext graphicContext0 = sVGGraphics2D0.getGraphicContext();
      Color color0 = graphicContext0.getColor();
      Track track0 = new Track((short)32, "", "ISO-8859-1", false, true, true, (Entry) null);
      Block block0 = new Block("", 132, 132, color0, 132, track0);
      block0.setBend((-1076));
      assertEquals((-1076), block0.getBend());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Track track0 = new Track(0.0, (Entry) null);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPublicServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block("", 0, 0, (Color) null, 2071.3892F, track0, dNADraw0);
      block0.setAngEnd(0.0);
      assertEquals(2071.3892F, block0.getStrokeSize(), 0.01F);
      assertEquals(0, block0.getBend());
      assertFalse(block0.isDrawLabel());
      assertEquals(0, block0.getBstart());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Color color0 = Color.getHSBColor(1683.0F, (-2334), (-3741.1968F));
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("", (-2334), 0, color0, 0, (Track) null, dNADraw0);
      block0.setAngStart(10.0);
      assertEquals(10.0, block0.getAngStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Color color0 = new Color(0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Key key0 = new Key("");
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "");
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "600");
      Entry entry0 = filteredEntryGroup0.createEntry((String) null);
      Track track0 = new Track(1246.92118849, ")BmZyP&[a,U", false, false, entry0);
      Block block0 = new Block(")BmZyP&[a,U", 0, (-2889), color0, 2.28F, track0);
      block0.isArrowTail();
      assertFalse(block0.isDrawLabel());
      assertEquals(2.28F, block0.getStrokeSize(), 0.01F);
      assertEquals(0, block0.getBstart());
      assertEquals((-2889), block0.getBend());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Color color0 = new Color(0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Key key0 = new Key("");
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "");
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "600");
      Entry entry0 = filteredEntryGroup0.createEntry((String) null);
      Track track0 = new Track(1246.92118849, ")BmZyP&[a,U", false, false, entry0);
      Block block0 = new Block(")BmZyP&[a,U", 0, (-2889), color0, 2.28F, track0);
      double double0 = block0.getMidAngle();
      assertEquals(2.28F, block0.getStrokeSize(), 0.01F);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, block0.getBstart());
      assertEquals((-2889), block0.getBend());
      assertFalse(block0.isDrawLabel());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("");
      Track track0 = new Track((-983), "", true, true, entry0);
      DNADraw dNADraw0 = new DNADraw();
      Block block0 = new Block("", (-983), (-983), (Color) null, (-983), track0, dNADraw0);
      block0.setArrowTail(true);
      assertTrue(block0.isArrowTail());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("wbt`7");
      Bases bases0 = new Bases(rawStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Track track0 = new Track(2581.81646496, "wbt`7", false, false, entry0);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPublicServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block("wbt`7", (-80), 0, systemColor0, 0, track0, dNADraw0);
      block0.setBstart(0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JTable jTable0 = new JTable();
      Color color0 = jTable0.getSelectionBackground();
      Track track0 = new Track(1436.835, (Entry) null);
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPrivateServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Block block0 = new Block("/", 65, 65, color0, 65, track0, dNADraw0);
      block0.getTrack();
      assertEquals(65, block0.getBend());
      assertEquals(65, block0.getBstart());
      assertFalse(block0.isDrawLabel());
      assertEquals(65.0F, block0.getStrokeSize(), 0.01F);
  }
}
