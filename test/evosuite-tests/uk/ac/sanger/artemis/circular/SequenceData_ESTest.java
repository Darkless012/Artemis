/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 10:59:32 GMT 2018
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.circular.SequenceData;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SequenceData_ESTest extends SequenceData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SequenceData sequenceData0 = new SequenceData();
      SequenceData.flavors = null;
      DataFlavor[] dataFlavorArray0 = sequenceData0.getTransferDataFlavors();
      assertNull(dataFlavorArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SequenceData sequenceData0 = new SequenceData();
      DataFlavor[] dataFlavorArray0 = new DataFlavor[0];
      SequenceData.flavors = dataFlavorArray0;
      DataFlavor[] dataFlavorArray1 = sequenceData0.getTransferDataFlavors();
      assertSame(dataFlavorArray1, dataFlavorArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SequenceData sequenceData0 = new SequenceData((String) null, (String) null, (String) null, (Boolean) null, (Boolean) null, (Boolean) null);
      String string0 = sequenceData0.getSequenceName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      SequenceData sequenceData0 = new SequenceData("", "r7$(E%f", (String) null, boolean0, (Boolean) null, boolean0);
      String string0 = sequenceData0.getSequenceName();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      SequenceData sequenceData0 = new SequenceData("", "r7$(E%f", (String) null, boolean0, (Boolean) null, boolean0);
      // Undeclared exception!
      try { 
        sequenceData0.getTransferData((DataFlavor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.SequenceData", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SequenceData sequenceData0 = new SequenceData();
      SequenceData sequenceData1 = (SequenceData)sequenceData0.getTransferData(sequenceData0.SEQUENCEDATA);
      assertEquals("", sequenceData1.getSequenceName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SequenceData sequenceData0 = new SequenceData();
      boolean boolean0 = sequenceData0.isDataFlavorSupported(sequenceData0.SEQUENCEDATA);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SequenceData sequenceData0 = new SequenceData("ZQ@|1}0Kv0", "ZQ@|1}0Kv0", "ZQ@|1}0Kv0", boolean0, boolean0, boolean0);
      // Undeclared exception!
      try { 
        sequenceData0.isDataFlavorSupported((DataFlavor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.SequenceData", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SequenceData sequenceData0 = new SequenceData();
      DataFlavor[] dataFlavorArray0 = sequenceData0.getTransferDataFlavors();
      assertNotNull(dataFlavorArray0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      SequenceData sequenceData0 = new SequenceData("G^0", "s,.x'hF ?@0", "~_\"V?}*{;t@", boolean0, boolean0, boolean0);
      String string0 = sequenceData0.getSequenceName();
      assertEquals("G^0", string0);
      assertNotNull(string0);
  }
}
