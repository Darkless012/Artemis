/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 01:00:02 GMT 2017
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Vector;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import org.emboss.jemboss.JembossParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.FeatureKeyPredicate;
import uk.ac.sanger.artemis.FeaturePredicate;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.circular.DNADraw;
import uk.ac.sanger.artemis.circular.GCSkewGraph;
import uk.ac.sanger.artemis.circular.Track;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Track_ESTest extends Track_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Track track0 = new Track(0.7573894622892867, "<CHIJmLK2bud", "<CHIJmLK2bud", true, false, false, (Entry) null);
      boolean boolean0 = track0.isShowReverse();
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertTrue(track0.isNotQualifier());
      assertFalse(track0.isAny());
      assertFalse(boolean0);
      assertFalse(track0.isShowForward());
      assertEquals(0.7573894622892867, track0.getPosition(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Track track0 = new Track(2469.1, "V>ba0`([e_->oQ", true, true, (Entry) null);
      boolean boolean0 = track0.isShowForward();
      assertTrue(track0.isShowReverse());
      assertEquals(2469.1, track0.getPosition(), 0.01);
      assertTrue(boolean0);
      assertFalse(track0.isAny());
      assertTrue(track0.isNotQualifier());
      assertEquals(10.0F, track0.getSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Track track0 = new Track((-3597.062528468816), "~", "~", true, false, false, (Entry) null);
      boolean boolean0 = track0.isNotQualifier();
      assertTrue(boolean0);
      assertEquals((-3597.062528468816), track0.getPosition(), 0.01);
      assertFalse(track0.isShowForward());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isAny());
      assertFalse(track0.isShowReverse());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("48R}L>++]$;t");
      Track track0 = new Track(0L, entry0);
      boolean boolean0 = track0.isAny();
      assertFalse(boolean0);
      assertFalse(track0.isNotQualifier());
      assertTrue(track0.isShowForward());
      assertTrue(track0.isShowReverse());
      assertEquals(10.0F, track0.getSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Track track0 = new Track(0.0, (Entry) null);
      track0.getQualifier();
      assertFalse(track0.isNotQualifier());
      assertTrue(track0.isShowForward());
      assertTrue(track0.isShowReverse());
      assertFalse(track0.isAny());
      assertEquals(10.0F, track0.getSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Key key0 = Key.CDS;
      FeatureKeyPredicate featureKeyPredicate0 = new FeatureKeyPredicate(key0);
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyPredicate0, "/`-vXc`a");
      Entry entry0 = filteredEntryGroup0.createEntry("Q!");
      Track track0 = new Track((-2127.1834581), "", "/`-vXc`a", true, true, true, entry0);
      String string0 = track0.getQualifier();
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertTrue(track0.isNotQualifier());
      assertEquals((-2127.1834581), track0.getPosition(), 0.01);
      assertFalse(track0.isAny());
      assertEquals("/`-vXc`a", string0);
      assertTrue(track0.isShowForward());
      assertTrue(track0.isShowReverse());
      assertEquals("", track0.getKeyStr());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Track track0 = new Track(0.0, (Entry) null);
      track0.getPosition();
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isAny());
      assertTrue(track0.isShowForward());
      assertTrue(track0.isShowReverse());
      assertFalse(track0.isNotQualifier());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entry entry0 = Entry.newEntry((Bases) null);
      Track track0 = new Track(701.543177, entry0);
      double double0 = track0.getPosition();
      assertTrue(track0.isShowReverse());
      assertFalse(track0.isNotQualifier());
      assertTrue(track0.isShowForward());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertEquals(701.543177, double0, 0.01);
      assertFalse(track0.isAny());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry();
      Track track0 = new Track(165.0, entry0);
      track0.getKeyStr();
      assertTrue(track0.isShowReverse());
      assertTrue(track0.isShowForward());
      assertFalse(track0.isNotQualifier());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isAny());
      assertEquals(165.0, track0.getPosition(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry();
      Track track0 = new Track(27.7, "v46Mw^cbY3", (String) null, false, false, false, entry0);
      String string0 = track0.getKeyStr();
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isAny());
      assertFalse(track0.isShowReverse());
      assertNotNull(string0);
      assertEquals(27.7, track0.getPosition(), 0.01);
      assertFalse(track0.isShowForward());
      assertFalse(track0.isNotQualifier());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Track track0 = new Track((-3597.062528468816), "~", "~", true, false, false, (Entry) null);
      track0.getFeaturePredicate();
      assertEquals((-3597.062528468816), track0.getPosition(), 0.01);
      assertFalse(track0.isShowForward());
      assertFalse(track0.isAny());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isShowReverse());
      assertTrue(track0.isNotQualifier());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("");
      Track track0 = new Track(0.0, entry0);
      track0.getEntry();
      assertFalse(track0.isAny());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertTrue(track0.isShowReverse());
      assertFalse(track0.isNotQualifier());
      assertTrue(track0.isShowForward());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPublicServers();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      // Undeclared exception!
      try { 
        Track.writeHeader((Writer) null, dNADraw0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Track", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Track track0 = new Track((-878.610437784), (Entry) null);
      // Undeclared exception!
      try { 
        track0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Track", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Track track0 = new Track((-662.0573889631734), "deleteFeatureById", false, true, (Entry) null);
      // Undeclared exception!
      try { 
        track0.setPropertiesFromTemplate("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Track track0 = new Track(0.25, (Entry) null);
      // Undeclared exception!
      try { 
        track0.setPropertiesFromTemplate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Track", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "vhC$q!3(c");
      Entry entry0 = filteredEntryGroup0.createEntry("vhC$q!3(c");
      Track track0 = new Track((-1055.875947169423), entry0);
      boolean boolean0 = track0.isNotQualifier();
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertTrue(track0.isShowForward());
      assertFalse(track0.isAny());
      assertEquals((-1055.875947169423), track0.getPosition(), 0.01);
      assertFalse(boolean0);
      assertTrue(track0.isShowReverse());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      Vector<GCSkewGraph> vector0 = new Vector<GCSkewGraph>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Track.writeHeader(charArrayWriter0, dNADraw0);
      assertEquals(652, charArrayWriter0.size());
      assertEquals("## DNA Plot :: track template (created: 14/02/2014 20:21:21)\n# line attributes: start=0 end=4000 line_size=5 circular=true\n# tick marks: major=500 minor=100\n# Columns are:\n# POS  - track position\n# SIZE - track size\n# FWD  - show forward strand features\n# REV  - show reverse strand features\n# NOT  - use NOT\n# ANY  - show any features\n# KEY  - show features of this key\n# QUAL - show features with this qualifier\n# VAL  - show features with this qualifier value(s)\n# COL  - colour for this track e.g. 255:0:0 (R:G:B) or NULL\n# NAME - file entry name or null\n# DIR  - root directory for this file\n#\n#POS\tSIZE\tFWD\tREV\tNOT \tANY\tKEY\tQUAL\tVAL\tCOL\tNAME\tDIR\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("");
      Track track0 = new Track(0.0, entry0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        track0.write(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Track track0 = new Track(1520.80423, "", "", true, false, true, (Entry) null);
      StringWriter stringWriter0 = new StringWriter();
      track0.write(stringWriter0);
      assertEquals("1520.80423\t10.0\tfalse\ttrue\ttrue\tfalse\t\t\tnull\tnull\tnull\n", stringWriter0.toString());
      assertEquals(10.0F, track0.getSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Track track0 = new Track(1520.8042340812653, "", "", true, false, true, (Entry) null);
      // Undeclared exception!
      try { 
        track0.isOnTrack((uk.ac.sanger.artemis.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FeatureKeyQualifierPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry((String) null);
      Track track0 = new Track(0L, entry0);
      // Undeclared exception!
      try { 
        track0.isOnTrack((uk.ac.sanger.artemis.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Track track0 = new Track(0.0, (Entry) null);
      boolean boolean0 = track0.isOnTrack((uk.ac.sanger.artemis.Feature) null);
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertTrue(track0.isShowReverse());
      assertFalse(boolean0);
      assertFalse(track0.isNotQualifier());
      assertTrue(track0.isShowForward());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Track track0 = new Track((-662.0573889631734), "deleteFeatureById", false, true, (Entry) null);
      boolean boolean0 = track0.isShowReverse();
      assertEquals((-662.0573889631734), track0.getPosition(), 0.01);
      assertTrue(boolean0);
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertTrue(track0.isNotQualifier());
      assertFalse(track0.isAny());
      assertFalse(track0.isShowForward());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Track track0 = new Track(2550.8158, "V#{~", true, true, (Entry) null);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Color color0 = defaultStyledDocument0.getForeground(styleContext_NamedStyle0);
      track0.setColour(color0);
      track0.getColour();
      assertTrue(track0.isShowReverse());
      assertTrue(track0.isShowForward());
      assertEquals(2550.8158, track0.getPosition(), 0.01);
      assertFalse(track0.isAny());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertTrue(track0.isNotQualifier());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Track track0 = new Track(0.0, (Entry) null);
      float float0 = track0.getSize();
      assertFalse(track0.isNotQualifier());
      assertTrue(track0.isShowForward());
      assertTrue(track0.isShowReverse());
      assertFalse(track0.isAny());
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Track track0 = new Track((-662.0573889631734), "deleteFeatureById", false, true, (Entry) null);
      assertFalse(track0.isShowForward());
      
      track0.setShowForward(true);
      assertTrue(track0.isShowForward());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Track track0 = new Track(1520.80423, "", "", true, false, true, (Entry) null);
      track0.setKeyStr("");
      assertFalse(track0.isAny());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isShowForward());
      assertTrue(track0.isShowReverse());
      assertEquals(1520.80423, track0.getPosition(), 0.01);
      assertTrue(track0.isNotQualifier());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Track track0 = new Track(2469.1, "V>ba0`([e_->oQ", true, true, (Entry) null);
      track0.setQualifierValue("V>ba0`([e_->oQ");
      assertTrue(track0.isShowReverse());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isAny());
      assertTrue(track0.isNotQualifier());
      assertEquals(2469.1, track0.getPosition(), 0.01);
      assertTrue(track0.isShowForward());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Track track0 = new Track(0.9, (String) null, (String) null, true, true, false, (Entry) null);
      assertFalse(track0.isShowReverse());
      
      track0.setShowReverse(true);
      assertTrue(track0.isShowReverse());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Track track0 = new Track(2550.8158, "V#{~", true, true, (Entry) null);
      track0.getColour();
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertTrue(track0.isShowForward());
      assertEquals(2550.8158, track0.getPosition(), 0.01);
      assertTrue(track0.isShowReverse());
      assertFalse(track0.isAny());
      assertTrue(track0.isNotQualifier());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Track track0 = new Track(1520.80423, "", "", true, false, true, (Entry) null);
      track0.getQualifierValue();
      assertEquals(1520.80423, track0.getPosition(), 0.01);
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isAny());
      assertTrue(track0.isNotQualifier());
      assertFalse(track0.isShowForward());
      assertTrue(track0.isShowReverse());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Entry entry0 = Entry.newEntry((Bases) null);
      Track track0 = new Track(0.9, entry0);
      track0.setQualifier("");
      assertFalse(track0.isNotQualifier());
      assertTrue(track0.isShowForward());
      assertTrue(track0.isShowReverse());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isAny());
      assertEquals(0.9, track0.getPosition(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Entry entry0 = Entry.newEntry((Bases) null);
      Track track0 = new Track(0.9, entry0);
      track0.getFeaturePredicate();
      assertFalse(track0.isNotQualifier());
      assertTrue(track0.isShowForward());
      assertTrue(track0.isShowReverse());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isAny());
      assertEquals(0.9, track0.getPosition(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Track track0 = new Track(0.0, (Entry) null);
      track0.setSize(1898.47F);
      assertEquals(1898.47F, track0.getSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Key key0 = Key.CDS;
      FeatureKeyPredicate featureKeyPredicate0 = new FeatureKeyPredicate(key0);
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyPredicate0, "/`-vXc`a");
      Entry entry0 = filteredEntryGroup0.createEntry("Q!");
      Track track0 = new Track((-2127.1834581), "", "/`-vXc`a", true, true, true, entry0);
      String string0 = track0.getKeyStr();
      assertTrue(track0.isShowReverse());
      assertTrue(track0.isShowForward());
      assertEquals("/`-vXc`a", track0.getQualifier());
      assertEquals((-2127.1834581), track0.getPosition(), 0.01);
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertTrue(track0.isNotQualifier());
      assertFalse(track0.isAny());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Key key0 = Key.CDS;
      FeatureKeyPredicate featureKeyPredicate0 = new FeatureKeyPredicate(key0);
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyPredicate0, "/`-vXc`a");
      Entry entry0 = filteredEntryGroup0.createEntry("Q!");
      Track track0 = new Track((-2127.1834581), "", "/`-vXc`a", true, true, true, entry0);
      track0.setPosition(2333.281552399577);
      assertEquals(2333.281552399577, track0.getPosition(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Track track0 = new Track((-3145.891478971908), "~Ak],L(xORTQIL0", "", true, true, true, entry0);
      double double0 = track0.getPosition();
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertTrue(track0.isNotQualifier());
      assertFalse(track0.isAny());
      assertEquals((-3145.891478971908), double0, 0.01);
      assertTrue(track0.isShowReverse());
      assertEquals("", track0.getQualifier());
      assertEquals("~Ak],L(xORTQIL0", track0.getKeyStr());
      assertTrue(track0.isShowForward());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Track track0 = new Track(0.0, (Entry) null);
      track0.setFeaturePredicate((FeaturePredicate) null);
      assertFalse(track0.isNotQualifier());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isAny());
      assertTrue(track0.isShowReverse());
      assertTrue(track0.isShowForward());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Track track0 = new Track(0.9, (String) null, (String) null, true, true, false, (Entry) null);
      boolean boolean0 = track0.isAny();
      assertTrue(boolean0);
      assertTrue(track0.isShowForward());
      assertEquals(0.9, track0.getPosition(), 0.01);
      assertFalse(track0.isShowReverse());
      assertTrue(track0.isNotQualifier());
      assertEquals(10.0F, track0.getSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry();
      Track track0 = new Track(27.7, "v46Mw^cbY3", (String) null, false, false, false, entry0);
      track0.setEntry(entry0);
      assertFalse(track0.isShowReverse());
      assertEquals(27.7, track0.getPosition(), 0.01);
      assertFalse(track0.isAny());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isShowForward());
      assertFalse(track0.isNotQualifier());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Track track0 = new Track(1.0, "s+", false, false, (Entry) null);
      assertTrue(track0.isNotQualifier());
      
      track0.setNotQualifier(false);
      assertFalse(track0.isNotQualifier());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Track track0 = new Track(2550.8158, "V#{~", true, true, (Entry) null);
      track0.getEntry();
      assertFalse(track0.isAny());
      assertTrue(track0.isNotQualifier());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertTrue(track0.isShowForward());
      assertEquals(2550.8158, track0.getPosition(), 0.01);
      assertTrue(track0.isShowReverse());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Track track0 = new Track(1520.80423, "", "", true, false, true, (Entry) null);
      track0.getQualifier();
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertFalse(track0.isAny());
      assertTrue(track0.isNotQualifier());
      assertFalse(track0.isShowForward());
      assertEquals(1520.80423, track0.getPosition(), 0.01);
      assertTrue(track0.isShowReverse());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry();
      Track track0 = new Track(27.7, "v46Mw^cbY3", (String) null, false, false, false, entry0);
      track0.isShowForward();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Track track0 = new Track((-3597.062528468816), "~", "~", true, false, false, (Entry) null);
      track0.setAny(false);
      assertFalse(track0.isShowReverse());
      assertEquals(10.0F, track0.getSize(), 0.01F);
      assertEquals((-3597.062528468816), track0.getPosition(), 0.01);
      assertFalse(track0.isAny());
      assertTrue(track0.isNotQualifier());
      assertFalse(track0.isShowForward());
  }
}
