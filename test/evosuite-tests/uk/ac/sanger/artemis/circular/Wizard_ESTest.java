/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 01:03:18 GMT 2017
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.FeaturePredicate;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.circular.DNADraw;
import uk.ac.sanger.artemis.circular.Track;
import uk.ac.sanger.artemis.circular.Wizard;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wizard_ESTest extends Wizard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Track[] trackArray0 = Wizard.getTracks();
      assertNotNull(trackArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("E^q?.8YCAB7!7)0I");
      Bases bases0 = new Bases(rawStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry("{X(aZ1k`bl<R");
      Track track0 = Wizard.addTrack(entry0);
      assertEquals(0.7, track0.getPosition(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      Entry.newEntry((Bases) null);
      // Undeclared exception!
      Wizard.readEntry(dNADraw0, (Bases) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wizard.getReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      simpleEntryGroup0.createEntry();
      DNADraw dNADraw0 = new DNADraw();
      // Undeclared exception!
      Wizard.getDNADrawFromFile(dNADraw0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wizard.deleteTrack(1431);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("uk.ac.sanger.artemis.circular.Wizard", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferedReader bufferedReader0 = Wizard.getReader(".gz");
      assertNull(bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferedReader bufferedReader0 = Wizard.getReader("");
      assertNull(bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Wizard.deleteTrack(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      Wizard wizard0 = null;
      try {
        wizard0 = new Wizard(dNADraw0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Wizard wizard0 = null;
      try {
        wizard0 = new Wizard((DNADraw) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("E^q?.8YCAB7!7)0I");
      Bases bases0 = new Bases(rawStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, "E^q?.8YCAB7!7)0I");
      Entry entry0 = simpleEntryGroup0.createEntry("{X(aZ1k`bl<R");
      Entry entry1 = entry0.truncate(bases0, (Range) null);
      filteredEntryGroup0.createFeature();
      DNADraw dNADraw1 = Wizard.getDNADrawFromArtemisEntry(dNADraw0, filteredEntryGroup0, entry1);
      assertSame(dNADraw1, dNADraw0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, (FeaturePredicate) null, "uk.ac.sanger.artemis.circular.GCGraph");
      Entry entry0 = simpleEntryGroup0.createEntry();
      // Undeclared exception!
      try { 
        Wizard.getDNADrawFromArtemisEntry((DNADraw) null, filteredEntryGroup0, entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.Wizard", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Wizard wizard0 = null;
      try {
        wizard0 = new Wizard("");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
