/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 00:40:54 GMT 2017
 */

package uk.ac.sanger.artemis.circular.digest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.circular.digest.CutSite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CutSite_ESTest extends CutSite_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CutSite cutSite0 = new CutSite(".", "9", "9", ".", ".", ".");
      assertFalse(cutSite0.isHighlighted());
      
      cutSite0.setHighlighted(true);
      boolean boolean0 = cutSite0.isHighlighted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CutSite cutSite0 = new CutSite("9", "9", "9", "9", "9", "2K(9*wPVO^IG.");
      int int0 = cutSite0.getThreePrimeRev();
      assertEquals("9", cutSite0.getEnzymeName());
      assertFalse(cutSite0.isForward());
      assertFalse(cutSite0.isHighlighted());
      assertEquals(9, int0);
      assertEquals(9, cutSite0.getFivePrimeRev());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CutSite cutSite0 = new CutSite(".", "9", "9", ".", ".", ".");
      int int0 = cutSite0.getThreePrime();
      assertFalse(cutSite0.isHighlighted());
      assertEquals(9, int0);
      assertFalse(cutSite0.isForward());
      assertEquals(".", cutSite0.getEnzymeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CutSite cutSite0 = new CutSite("1", "1", "1", "1", "1", "1");
      int int0 = cutSite0.getFivePrimeRev();
      assertEquals(1, int0);
      assertEquals(1, cutSite0.getThreePrimeRev());
      assertFalse(cutSite0.isHighlighted());
      assertFalse(cutSite0.isForward());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CutSite cutSite0 = new CutSite("1", "1", "1", "1", "1", "1");
      int int0 = cutSite0.getFivePrime();
      assertFalse(cutSite0.isHighlighted());
      assertEquals(1, int0);
      assertEquals(1, cutSite0.getFivePrimeRev());
      assertFalse(cutSite0.isForward());
      assertEquals(1, cutSite0.getThreePrimeRev());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CutSite cutSite0 = null;
      try {
        cutSite0 = new CutSite("?YR>3", "?YR>3", "?YR>3", "?YR>3", "?YR>3", "?YR>3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"?YR>3\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CutSite cutSite0 = null;
      try {
        cutSite0 = new CutSite(".", "9", "9", ".", ".", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CutSite cutSite0 = new CutSite("0", "0", "0", "0", "0", "0");
      int int0 = cutSite0.getThreePrime();
      assertFalse(cutSite0.isForward());
      assertEquals(0, int0);
      assertFalse(cutSite0.isHighlighted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CutSite cutSite0 = new CutSite(".", "9", "9", ".", ".", ".");
      int int0 = cutSite0.getThreePrimeRev();
      assertEquals(0, int0);
      assertFalse(cutSite0.isForward());
      assertEquals(".", cutSite0.getEnzymeName());
      assertFalse(cutSite0.isHighlighted());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CutSite cutSite0 = new CutSite("0", "0", "0", "0", "0", "0");
      boolean boolean0 = cutSite0.isForward();
      assertFalse(boolean0);
      assertFalse(cutSite0.isHighlighted());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CutSite cutSite0 = new CutSite("0", "0", "0", "0", "0", "0");
      int int0 = cutSite0.getFivePrimeRev();
      assertEquals(0, int0);
      assertFalse(cutSite0.isForward());
      assertFalse(cutSite0.isHighlighted());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CutSite cutSite0 = new CutSite("0", "0", "0", "0", "0", "0");
      boolean boolean0 = cutSite0.isHighlighted();
      assertFalse(cutSite0.isForward());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CutSite cutSite0 = new CutSite("0", "0", "0", "0", "0", "0");
      cutSite0.getEnzymeName();
      assertFalse(cutSite0.isHighlighted());
      assertFalse(cutSite0.isForward());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CutSite cutSite0 = new CutSite("0", "0", "0", "0", "0", "0");
      int int0 = cutSite0.getFivePrime();
      assertFalse(cutSite0.isHighlighted());
      assertFalse(cutSite0.isForward());
      assertEquals(0, int0);
  }
}
