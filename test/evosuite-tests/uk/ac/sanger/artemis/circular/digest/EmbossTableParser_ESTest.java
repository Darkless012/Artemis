/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 00:43:06 GMT 2017
 */

package uk.ac.sanger.artemis.circular.digest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PushbackReader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.MalformedInputException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.circular.digest.CutSite;
import uk.ac.sanger.artemis.circular.digest.EmbossTableParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbossTableParser_ESTest extends EmbossTableParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EmbossTableParser embossTableParser0 = new EmbossTableParser();
      StringReader stringReader0 = new StringReader("#+");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 1050);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0, 1050);
      embossTableParser0.list = null;
      List<CutSite> list0 = embossTableParser0.parse(bufferedReader0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EmbossTableParser embossTableParser0 = new EmbossTableParser();
      StringReader stringReader0 = new StringReader("#+");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 1050);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0, 1050);
      LinkedList<CutSite> linkedList0 = new LinkedList<CutSite>();
      embossTableParser0.list = (List<CutSite>) linkedList0;
      linkedList0.add((CutSite) null);
      List<CutSite> list0 = embossTableParser0.parse(bufferedReader0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EmbossTableParser embossTableParser0 = new EmbossTableParser();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, 1760);
      try { 
        embossTableParser0.parse(lineNumberReader0);
        fail("Expecting exception: MalformedInputException");
      
      } catch(MalformedInputException e) {
         //
         // Input length = 1
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EmbossTableParser embossTableParser0 = new EmbossTableParser();
      // Undeclared exception!
      try { 
        embossTableParser0.parse((BufferedReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.EmbossTableParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EmbossTableParser embossTableParser0 = new EmbossTableParser();
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 5);
      try { 
        embossTableParser0.parse(bufferedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EmbossTableParser embossTableParser0 = new EmbossTableParser();
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      List<CutSite> list0 = embossTableParser0.parse(bufferedReader0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EmbossTableParser embossTableParser0 = new EmbossTableParser();
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      List<CutSite> list0 = embossTableParser0.parse(bufferedReader0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EmbossTableParser embossTableParser0 = new EmbossTableParser();
      int int0 = embossTableParser0.getLength();
      assertEquals(0, int0);
  }
}
