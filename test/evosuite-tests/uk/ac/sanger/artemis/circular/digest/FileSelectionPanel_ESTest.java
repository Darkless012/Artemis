/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 00:43:17 GMT 2017
 */

package uk.ac.sanger.artemis.circular.digest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.circular.digest.FileSelectionPanel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileSelectionPanel_ESTest extends FileSelectionPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MockFile mockFile0 = new MockFile("", "");
      linkedList0.add((File) mockFile0);
      linkedList0.add((File) mockFile0);
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel(" EMBOSS location: ", linkedList0, linkedList0, true);
      List<File> list0 = fileSelectionPanel0.getSequenceFiles();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      Vector<File> vector0 = new Vector<File>();
      MockFile mockFile0 = new MockFile((String) null, "*01q~ge1OX");
      linkedList0.offerLast(mockFile0);
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel((String) null, linkedList0, vector0, false);
      assertFalse(fileSelectionPanel0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("UDnBw5H}f8K", arrayList0, arrayList0, true);
      boolean boolean0 = fileSelectionPanel0.isMethylation();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("(<!MXjX>N0)n=m>=nd", (List<File>) null, (List<File>) null, true);
      List<File> list0 = fileSelectionPanel0.getRestrictOutputs();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      MockFile mockFile0 = new MockFile(" EMBOSS location: ", " EMBOSS location: ");
      arrayList0.add((File) mockFile0);
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel(" EMBOSS location: ", arrayList0, arrayList0, true);
      List<File> list0 = fileSelectionPanel0.getRestrictOutputs();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MockFile mockFile0 = new MockFile("", "");
      linkedList0.add((File) mockFile0);
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel(" EMBOSS location: ", linkedList0, linkedList0, true);
      JTextField jTextField0 = fileSelectionPanel0.getEmbossRootField();
      assertNull(jTextField0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>();
      vector0.add((File) null);
      FileSelectionPanel fileSelectionPanel0 = null;
      try {
        fileSelectionPanel0 = new FileSelectionPanel("", vector0, vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.FileSelectionPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel(" EMBOSS location: ", arrayList0, arrayList0, true);
      List<File> list0 = fileSelectionPanel0.getSequenceFiles();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("k) ", (List<File>) null, (List<File>) null, false);
      FileSelectionPanel.SelectionRow fileSelectionPanel_SelectionRow0 = fileSelectionPanel0.new SelectionRow();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      Vector<File> vector0 = new Vector<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel((String) null, linkedList0, vector0, false);
      boolean boolean0 = fileSelectionPanel0.isMethylation();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel(" EMBOSS location: ", linkedList0, linkedList0, true);
      JTextField jTextField0 = fileSelectionPanel0.getEmbossRootField();
      assertFalse(jTextField0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      Vector<File> vector0 = new Vector<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel((String) null, linkedList0, vector0, false);
      String string0 = fileSelectionPanel0.getEnzymes();
      assertEquals("xbai", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("}0%1L4lTS:apP", stack0, stack0, false);
      StyledEditorKit.ItalicAction styledEditorKit_ItalicAction0 = new StyledEditorKit.ItalicAction();
      // Undeclared exception!
      try { 
        fileSelectionPanel0.showJFrame((JFrame) null, styledEditorKit_ItalicAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.FileSelectionPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel(" EMBOSS location: ", arrayList0, arrayList0, true);
      List<File> list0 = fileSelectionPanel0.getRestrictOutputs();
      assertEquals(0, list0.size());
  }
}
