/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 10:44:58 GMT 2018
 */

package uk.ac.sanger.artemis.circular.digest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.circular.digest.FileSelectionPanel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileSelectionPanel_ESTest extends FileSelectionPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>();
      MockFile mockFile0 = new MockFile("", "");
      vector0.add((File) mockFile0);
      vector0.add((File) mockFile0);
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("", vector0, (List<File>) null, true);
      List<File> list0 = fileSelectionPanel0.getSequenceFiles();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("", (List<File>) null, (List<File>) null, true);
      FileSelectionPanel.SelectionRow fileSelectionPanel_SelectionRow0 = fileSelectionPanel0.new SelectionRow();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("=F),sW8x*-%m~kb^Stj", vector0, vector0, false);
      boolean boolean0 = fileSelectionPanel0.isMethylation();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      MockFile mockFile0 = new MockFile("\";>D:jxS!3:", "\";>D:jxS!3:");
      stack0.add((File) mockFile0);
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("\";>D:jxS!3:", stack0, stack0, true);
      List<File> list0 = fileSelectionPanel0.getRestrictOutputs();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      stack0.add((File) null);
      FileSelectionPanel fileSelectionPanel0 = null;
      try {
        fileSelectionPanel0 = new FileSelectionPanel("G+ZBO!\"Qe`4s", stack0, stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.FileSelectionPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("", vector0, (List<File>) null, true);
      List<File> list0 = fileSelectionPanel0.getSequenceFiles();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("", (List<File>) null, (List<File>) null, false);
      List<File> list0 = fileSelectionPanel0.getRestrictOutputs();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      MockFile mockFile0 = new MockFile("\";>D:jxS!3:", "\";>D:jxS!3:");
      stack0.add((File) mockFile0);
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("\";>D:jxS!3:", stack0, stack0, true);
      JTextField jTextField0 = fileSelectionPanel0.getEmbossRootField();
      assertNull(jTextField0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel((String) null, stack0, stack0, true);
      assertFalse(fileSelectionPanel0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("#k4?r,ZfZuEXwdL", vector0, vector0, true);
      boolean boolean0 = fileSelectionPanel0.isMethylation();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("\";>D:jxS!3:", stack0, stack0, true);
      JTextField jTextField0 = fileSelectionPanel0.getEmbossRootField();
      assertFalse(jTextField0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("\";>D:jxS!3:", stack0, stack0, true);
      String string0 = fileSelectionPanel0.getEnzymes();
      assertEquals("\";>D:jxS!3:", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("\";>D:jxS!3:", stack0, stack0, true);
      List<File> list0 = fileSelectionPanel0.getRestrictOutputs();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>();
      FileSelectionPanel fileSelectionPanel0 = new FileSelectionPanel("", vector0, (List<File>) null, true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor((JTree) null, defaultTreeCellRenderer0);
      // Undeclared exception!
      try { 
        fileSelectionPanel0.showJFrame((JFrame) null, defaultTreeCellEditor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.FileSelectionPanel", e);
      }
  }
}
