/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 00:54:33 GMT 2017
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Label;
import java.net.URL;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.table.DefaultTableModel;
import org.emboss.jemboss.JembossParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.circular.MemoryComboBox;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MemoryComboBox_ESTest extends MemoryComboBox_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>();
      vector0.add((DefaultTableModel) null);
      vector0.add((DefaultTableModel) null);
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      URL uRL0 = memoryComboBox0.getURLAt(1);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<Label> vector0 = new Vector<Label>();
      vector0.add((Label) null);
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      int int0 = memoryComboBox0.getIndexOf((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<MockThaiBuddhistDate> vector0 = new Vector<MockThaiBuddhistDate>();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      vector0.add(mockThaiBuddhistDate0);
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      memoryComboBox0.addURL(vector0);
      int int0 = memoryComboBox0.getIndexOf(vector0);
      assertEquals(2, vector0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.modeVector();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      // Undeclared exception!
      try { 
        memoryComboBox0.isItem((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.MemoryComboBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPublicServers();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      memoryComboBox0.addURL(vector0);
      // Undeclared exception!
      try { 
        memoryComboBox0.getURLAt(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to java.net.URL
         //
         verifyException("uk.ac.sanger.artemis.circular.MemoryComboBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MemoryComboBox memoryComboBox0 = null;
      try {
        memoryComboBox0 = new MemoryComboBox((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DefaultComboBoxModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<MockThaiBuddhistDate> vector0 = new Vector<MockThaiBuddhistDate>();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      vector0.add(mockThaiBuddhistDate0);
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      boolean boolean0 = memoryComboBox0.isItem(mockThaiBuddhistDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.modeVector();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      boolean boolean0 = memoryComboBox0.isItem(vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(298, 1828);
      Vector vector0 = defaultTableModel0.getDataVector();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      boolean boolean0 = memoryComboBox0.isForwardPage();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPublicServers();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      boolean boolean0 = memoryComboBox0.isForwardPage();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(298, 1828);
      Vector vector0 = defaultTableModel0.getDataVector();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      boolean boolean0 = memoryComboBox0.isBackPage();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPublicServers();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      boolean boolean0 = memoryComboBox0.isBackPage();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.modeVector();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      memoryComboBox0.addURL(jembossParams0);
      memoryComboBox0.setLastIndex(jembossParams0);
      assertEquals(3, vector0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.getPublicServers();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      ImageIcon imageIcon0 = new ImageIcon("");
      JMenuItem jMenuItem0 = new JMenuItem(imageIcon0);
      memoryComboBox0.setLastIndex(jMenuItem0);
      assertFalse(memoryComboBox0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(298, 1828);
      Vector vector0 = defaultTableModel0.getDataVector();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      memoryComboBox0.addURL(vector0);
      boolean boolean0 = memoryComboBox0.isBackPage();
      assertTrue(boolean0);
      assertEquals(298, vector0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      // Undeclared exception!
      try { 
        memoryComboBox0.getURLAt(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JembossParams jembossParams0 = new JembossParams();
      Vector vector0 = jembossParams0.modeVector();
      MemoryComboBox memoryComboBox0 = new MemoryComboBox(vector0);
      int int0 = memoryComboBox0.getIndexOf("jemboss.debug");
      assertEquals((-1), int0);
  }
}
