/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 11:18:31 GMT 2018
 */

package uk.ac.sanger.artemis.components.alignment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import htsjdk.samtools.SAMSequenceDictionary;
import htsjdk.samtools.reference.ReferenceSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.components.alignment.BamView;
import uk.ac.sanger.artemis.components.alignment.CRAMReferenceSequenceFile;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRAMReferenceSequenceFile_ESTest extends CRAMReferenceSequenceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("4O1rFYpRMn'@u>\"e4");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry("");
      CRAMReferenceSequenceFile cRAMReferenceSequenceFile0 = new CRAMReferenceSequenceFile(entry0, (BamView) null);
      // Undeclared exception!
      try { 
        cRAMReferenceSequenceFile0.getSequence("4O1rFYpRMn'@u>\"e4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CRAMReferenceSequenceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CRAMReferenceSequenceFile cRAMReferenceSequenceFile0 = new CRAMReferenceSequenceFile((Entry) null, (BamView) null);
      // Undeclared exception!
      try { 
        cRAMReferenceSequenceFile0.getSubsequenceAt("", (-128L), 4294967295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.CRAMReferenceSequenceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("");
      CRAMReferenceSequenceFile cRAMReferenceSequenceFile0 = new CRAMReferenceSequenceFile(entry0, (BamView) null);
      cRAMReferenceSequenceFile0.reset();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CRAMReferenceSequenceFile cRAMReferenceSequenceFile0 = new CRAMReferenceSequenceFile((Entry) null, (BamView) null);
      boolean boolean0 = cRAMReferenceSequenceFile0.isIndexed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CRAMReferenceSequenceFile cRAMReferenceSequenceFile0 = new CRAMReferenceSequenceFile((Entry) null, (BamView) null);
      SAMSequenceDictionary sAMSequenceDictionary0 = cRAMReferenceSequenceFile0.getSequenceDictionary();
      assertNull(sAMSequenceDictionary0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CRAMReferenceSequenceFile cRAMReferenceSequenceFile0 = new CRAMReferenceSequenceFile((Entry) null, (BamView) null);
      ReferenceSequence referenceSequence0 = cRAMReferenceSequenceFile0.nextSequence();
      assertNull(referenceSequence0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CRAMReferenceSequenceFile cRAMReferenceSequenceFile0 = new CRAMReferenceSequenceFile((Entry) null, (BamView) null);
      boolean boolean0 = cRAMReferenceSequenceFile0.isReferenceIndexed();
      assertFalse(boolean0);
  }
}
