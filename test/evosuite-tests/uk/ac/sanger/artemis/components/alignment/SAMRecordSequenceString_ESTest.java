/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 11:31:11 GMT 2018
 */

package uk.ac.sanger.artemis.components.alignment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.alignment.SAMRecordSequenceString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAMRecordSequenceString_ESTest extends SAMRecordSequenceString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAMRecordSequenceString sAMRecordSequenceString0 = new SAMRecordSequenceString("");
      int int0 = sAMRecordSequenceString0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAMRecordSequenceString sAMRecordSequenceString0 = new SAMRecordSequenceString("g,2cp");
      sAMRecordSequenceString0.length();
      //  // Unstable assertion: assertTrue(sAMRecordSequenceString0.isSecondaryAlignment());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAMRecordSequenceString sAMRecordSequenceString0 = new SAMRecordSequenceString("");
      boolean boolean0 = sAMRecordSequenceString0.isSecondaryAlignment();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAMRecordSequenceString sAMRecordSequenceString0 = new SAMRecordSequenceString((String) null);
      String string0 = sAMRecordSequenceString0.getSequence();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAMRecordSequenceString sAMRecordSequenceString0 = new SAMRecordSequenceString("&UU; ]{v<W6oZX");
      sAMRecordSequenceString0.getSequence();
      assertFalse(sAMRecordSequenceString0.isSecondaryAlignment());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAMRecordSequenceString sAMRecordSequenceString0 = new SAMRecordSequenceString("");
      // Undeclared exception!
      try { 
        sAMRecordSequenceString0.charAt('*');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAMRecordSequenceString sAMRecordSequenceString0 = new SAMRecordSequenceString("Q5*X");
      boolean boolean0 = sAMRecordSequenceString0.isSecondaryAlignment();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAMRecordSequenceString sAMRecordSequenceString0 = new SAMRecordSequenceString("");
      // Undeclared exception!
      try { 
        sAMRecordSequenceString0.substring('*', 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAMRecordSequenceString sAMRecordSequenceString0 = new SAMRecordSequenceString((String) null);
      // Undeclared exception!
      try { 
        sAMRecordSequenceString0.length();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.SAMRecordSequenceString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAMRecordSequenceString sAMRecordSequenceString0 = new SAMRecordSequenceString("");
      String string0 = sAMRecordSequenceString0.getSequence();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAMRecordSequenceString sAMRecordSequenceString0 = new SAMRecordSequenceString("\"0enR>VD)i");
      char char0 = sAMRecordSequenceString0.charAt(1);
      //  // Unstable assertion: assertEquals('=', char0);
  }
}
