/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 02:25:55 GMT 2017
 */

package uk.ac.sanger.artemis.components.genebuilder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.Clipboard;
import java.awt.event.MouseEvent;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.svggen.ExtensionHandler;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.components.genebuilder.ProteinMapPanel;
import uk.ac.sanger.artemis.io.ChadoCanonicalGene;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.Feature;
import uk.ac.sanger.artemis.io.GFFStreamFeature;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.Qualifier;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProteinMapPanel_ESTest extends ProteinMapPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      Clipboard clipboard0 = new Clipboard("/=zC]");
      Selection selection0 = new Selection(clipboard0);
      ProteinMapPanel proteinMapPanel0 = new ProteinMapPanel((Feature) null, chadoCanonicalGene0, selection0);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("polypeptide_domain", "polypeptide_domain", "/=zC]");
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(genericDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
      // Undeclared exception!
      try { 
        proteinMapPanel0.drawDomain((Feature) null, sVGGraphics2D0, (short)2, (short)1, (-2469), (-502));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ProteinMapPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProteinMapPanel.isProteinMapElement((Qualifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ProteinMapPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      Clipboard clipboard0 = new Clipboard("<%ZJ");
      Selection selection0 = new Selection(clipboard0);
      ProteinMapPanel proteinMapPanel0 = new ProteinMapPanel((Feature) null, chadoCanonicalGene0, selection0);
      // Undeclared exception!
      try { 
        proteinMapPanel0.getToolTipText((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ProteinMapPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(genbankStreamFeature0);
      // Undeclared exception!
      try { 
        ProteinMapPanel.getProteinsWithProteinMapElement(gFFStreamFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ProteinMapPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProteinMapPanel.getProteinMapQualifiers((uk.ac.sanger.artemis.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ProteinMapPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      ProteinMapPanel proteinMapPanel0 = new ProteinMapPanel((Feature) null, (ChadoCanonicalGene) null, selection0);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("", "", "signal_peptide");
      GenericDOMImplementation genericDOMImplementation0 = new GenericDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, genericDOMImplementation0);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(genericDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
      // Undeclared exception!
      try { 
        proteinMapPanel0.drawPrediction((Feature) null, sVGGraphics2D0, (short)32, 3289, 660, 3289, proteinMapPanel0.TMHMM);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ProteinMapPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Qualifier qualifier0 = new Qualifier("Yph_fJQEjJg$V`s", (StringVector) null);
      boolean boolean0 = ProteinMapPanel.isProteinMapElement(qualifier0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      Clipboard clipboard0 = new Clipboard("6{p=TDFQe");
      Selection selection0 = new Selection(clipboard0);
      ProteinMapPanel proteinMapPanel0 = new ProteinMapPanel(emblStreamFeature0, chadoCanonicalGene0, selection0);
      MouseEvent mouseEvent0 = new MouseEvent(proteinMapPanel0, 1075, 1539L, 1075, 1075, (-856), (-856), false);
      String string0 = proteinMapPanel0.getToolTipText(mouseEvent0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      ProteinMapPanel proteinMapPanel0 = new ProteinMapPanel(genbankStreamFeature0, chadoCanonicalGene0, selection0);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("", "", "polypeptide_domain");
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(genericDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
      proteinMapPanel0.drawPrediction(genbankStreamFeature0, sVGGraphics2D0, (short)4, (short)8, 0, 0, proteinMapPanel0.TMHMM);
      assertEquals(3, SVGGraphics2D.DEFAULT_MAX_GC_OVERRIDES);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      Clipboard clipboard0 = new Clipboard("org.biojava.bio.symbol.IntegerAlphabet$SubIntegerAlphabet");
      Selection selection0 = new Selection(clipboard0);
      ProteinMapPanel proteinMapPanel0 = new ProteinMapPanel((Feature) null, chadoCanonicalGene0, selection0);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType((String) null, (String) null, "K{");
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(genericDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
      // Undeclared exception!
      try { 
        proteinMapPanel0.paintComponent(sVGGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ProteinMapPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      Clipboard clipboard0 = new Clipboard("m8");
      Selection selection0 = new Selection(clipboard0);
      ProteinMapPanel proteinMapPanel0 = new ProteinMapPanel(emblStreamFeature0, chadoCanonicalGene0, selection0);
      GenericDOMImplementation genericDOMImplementation0 = new GenericDOMImplementation();
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("m8", (String) null, (String) null);
      Document document0 = genericDOMImplementation0.createDocument((String) null, "transmembrane", genericDocumentType0);
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder("", "m8");
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(document0);
      ExtensionHandler extensionHandler0 = sVGGeneratorContext0.getExtensionHandler();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(document0, imageHandlerPNGEncoder0, extensionHandler0, true);
      Qualifier qualifier0 = new Qualifier("ISO-8859-1", (StringVector) null);
      // Undeclared exception!
      try { 
        proteinMapPanel0.drawGPIArrow(sVGGraphics2D0, qualifier0, (-2536), (short)8, (short)2, (-1100));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.io.Qualifier cannot be cast to uk.ac.sanger.artemis.io.QualifierLazyLoading
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ProteinMapPanel", e);
      }
  }
}
