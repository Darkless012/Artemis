/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 02:21:57 GMT 2017
 */

package uk.ac.sanger.artemis.components.genebuilder.ortholog;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JFormattedTextField;
import javax.swing.JPasswordField;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.DefaultStyledDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.genebuilder.ortholog.AbstractMatchTable;
import uk.ac.sanger.artemis.components.genebuilder.ortholog.SimilarityTable;
import uk.ac.sanger.artemis.io.Qualifier;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.util.DatabaseDocument;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractMatchTable_ESTest extends AbstractMatchTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "chars read so far: ";
      stringArray0[1] = "Can't pack with alphabet ";
      StringVector stringVector0 = new StringVector(stringArray0);
      Qualifier qualifier0 = new Qualifier("chars read so far: ", stringVector0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JPasswordField jPasswordField0 = new JPasswordField(defaultStyledDocument0, "Can't pack with alphabet ", 49);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("Can't pack with alphabet ", jPasswordField0, "Can't pack with alphabet ", "");
      SimilarityTable similarityTable0 = new SimilarityTable(qualifier0, databaseDocument0);
      AbstractMatchTable.TableTransferHandler abstractMatchTable_TableTransferHandler0 = similarityTable0.new TableTransferHandler();
      // Undeclared exception!
      try { 
        abstractMatchTable_TableTransferHandler0.importString(jPasswordField0, (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JPasswordField cannot be cast to javax.swing.JTable
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ortholog.AbstractMatchTable$TableTransferHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = AbstractMatchTable.getField("getLazyFeatureExactNoFeatureCvTermRank", "getLazyFeatureExactNoFeatureCvTermRank");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractMatchTable.getField("9*skCzL661b`", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ortholog.AbstractMatchTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = AbstractMatchTable.getField("", "cluster");
      assertEquals("cluster", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Qualifier qualifier0 = new Qualifier((String) null, "v#");
      JPasswordField jPasswordField0 = new JPasswordField((String) null);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "+5&{VGZXelRq", (String) null);
      SimilarityTable similarityTable0 = new SimilarityTable(qualifier0, databaseDocument0);
      QualifierVector qualifierVector0 = new QualifierVector();
      // Undeclared exception!
      try { 
        similarityTable0.updateQualifier(qualifierVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.genebuilder.ortholog.SimilarityTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Qualifier qualifier0 = new Qualifier("R@8/r", "R@8/r");
      SimilarityTable similarityTable0 = new SimilarityTable(qualifier0, (DatabaseDocument) null);
      DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory((JFormattedTextField.AbstractFormatter) null);
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) defaultFormatterFactory0);
      AbstractMatchTable.CellEditing abstractMatchTable_CellEditing0 = similarityTable0.new CellEditing(jFormattedTextField0);
      boolean boolean0 = abstractMatchTable_CellEditing0.stopCellEditing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Qualifier qualifier0 = new Qualifier(", '", ", '");
      JPasswordField jPasswordField0 = new JPasswordField(1584);
      DatabaseDocument databaseDocument0 = new DatabaseDocument(", '", jPasswordField0, "rR", ", '");
      SimilarityTable similarityTable0 = new SimilarityTable(qualifier0, databaseDocument0);
      // Undeclared exception!
      try { 
        similarityTable0.openArtemis(databaseDocument0, 1584);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1584 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }
}
