/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 01:35:13 GMT 2017
 */

package uk.ac.sanger.artemis.components.database;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.util.LinkedHashSet;
import javax.swing.JPasswordField;
import javax.swing.text.DefaultStyledDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gmod.schema.organism.Organism;
import org.gmod.schema.organism.OrganismProp;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.database.DatabaseTreeNode;
import uk.ac.sanger.artemis.j2ssh.SshLogin;
import uk.ac.sanger.artemis.util.ByteBuffer;
import uk.ac.sanger.artemis.util.DatabaseDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatabaseTreeNode_ESTest extends DatabaseTreeNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("_");
      DataFlavor dataFlavor0 = DataFlavor.stringFlavor;
      boolean boolean0 = databaseTreeNode0.isDataFlavorSupported(dataFlavor0);
      assertTrue(boolean0);
      assertFalse(databaseTreeNode0.isExplored());
      assertTrue(databaseTreeNode0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("uk.ac.sanger.artemis.components.database.DatabaseTreeNode");
      boolean boolean0 = databaseTreeNode0.isLeaf();
      assertFalse(databaseTreeNode0.isExplored());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("L'Th0G-f+--lVB");
      // Undeclared exception!
      try { 
        databaseTreeNode0.isDataFlavorSupported((DataFlavor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JPasswordField jPasswordField0 = new JPasswordField(defaultStyledDocument0, "embossData", 1306);
      ByteBuffer byteBuffer0 = new ByteBuffer();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("8.5v{cj.S", jPasswordField0, "", "", byteBuffer0, "");
      DatabaseTreeNode databaseTreeNode0 = null;
      try {
        databaseTreeNode0 = new DatabaseTreeNode("SubIntegerAlphabet is one-dimensional: ", true, (Organism) null, "/m[IE8wdlFSrNgr+&P", databaseDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("{4f");
      databaseTreeNode0.getOrganism();
      assertFalse(databaseTreeNode0.isExplored());
      assertTrue(databaseTreeNode0.getAllowsChildren());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("");
      databaseTreeNode0.getFeatureType();
      assertFalse(databaseTreeNode0.isExplored());
      assertFalse(databaseTreeNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("L'Th0G-f+--lVB");
      databaseTreeNode0.getFeatureId();
      assertFalse(databaseTreeNode0.isExplored());
      assertTrue(databaseTreeNode0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("{4f");
      databaseTreeNode0.getUserName();
      assertFalse(databaseTreeNode0.isExplored());
      assertFalse(databaseTreeNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("I thought that I had checked that the translation table was compatible with my source, but apparently something has messed up.");
      DataFlavor dataFlavor0 = DataFlavor.getTextPlainUnicodeFlavor();
      try { 
        databaseTreeNode0.getTransferData(dataFlavor0);
        fail("Expecting exception: UnsupportedFlavorException");
      
      } catch(UnsupportedFlavorException e) {
         //
         // Plain Text
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Organism organism0 = new Organism();
      JPasswordField jPasswordField0 = new JPasswordField("Alphabet changed underneath me", 0);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("Alphabet changed underneath me", jPasswordField0, "artemis.environment", "artemis.environment");
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("^+D&)'", false, organism0, "^+D&)'", databaseDocument0);
      DataFlavor dataFlavor0 = DataFlavor.stringFlavor;
      Object object0 = databaseTreeNode0.getTransferData(dataFlavor0);
      assertFalse(databaseTreeNode0.isExplored());
      assertEquals("null.null", databaseTreeNode0.getOrganismCommonName());
      assertFalse(databaseTreeNode0.isLeaf());
      assertEquals("null.null:featureId=null", object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("");
      // Undeclared exception!
      try { 
        databaseTreeNode0.explore();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("_");
      boolean boolean0 = databaseTreeNode0.isDirectory();
      assertFalse(databaseTreeNode0.isExplored());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("");
      boolean boolean0 = databaseTreeNode0.getAllowsChildren();
      assertTrue(boolean0);
      assertFalse(databaseTreeNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<OrganismProp> linkedHashSet0 = new LinkedHashSet<OrganismProp>();
      OrganismProp organismProp0 = new OrganismProp();
      linkedHashSet0.add(organismProp0);
      // Undeclared exception!
      try { 
        DatabaseTreeNode.setOrganismProps(linkedHashSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.database.DatabaseTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("I thought that I had checked that the translation table was compatible with my source, but apparently something has messed up.");
      DatabaseTreeNode databaseTreeNode1 = (DatabaseTreeNode)databaseTreeNode0.getTransferData(databaseTreeNode0.DATABASETREENODE);
      assertFalse(databaseTreeNode0.isExplored());
      assertTrue(databaseTreeNode0.isDirectory());
      assertFalse(databaseTreeNode1.isLeaf());
      assertFalse(databaseTreeNode1.isExplored());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("");
      databaseTreeNode0.getOrganismCommonName();
      assertFalse(databaseTreeNode0.isExplored());
      assertFalse(databaseTreeNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("_");
      boolean boolean0 = databaseTreeNode0.isExplored();
      assertFalse(databaseTreeNode0.isLeaf());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("I thought that I had checked that the translation table was compatible with my source, but apparently something has messed up.");
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "", "rkdqnehstpycgamwlvfi");
      databaseTreeNode0.setDbDoc(databaseDocument0);
      assertFalse(databaseTreeNode0.isExplored());
      assertFalse(databaseTreeNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Organism organism0 = new Organism();
      JPasswordField jPasswordField0 = new JPasswordField("Alphabet changed underneath me", 0);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("Alphabet changed underneath me", jPasswordField0, "artemis.environment", "artemis.environment");
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("^+D&)'", false, organism0, "^+D&)'", databaseDocument0);
      DatabaseTreeNode databaseTreeNode1 = (DatabaseTreeNode)databaseTreeNode0.getTransferData(databaseTreeNode0.DATABASETREENODE);
      assertEquals("null.null", databaseTreeNode1.getOrganismCommonName());
      assertTrue(databaseTreeNode1.isDirectory());
      assertFalse(databaseTreeNode0.isLeaf());
      assertFalse(databaseTreeNode1.isExplored());
      assertFalse(databaseTreeNode0.isExplored());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DatabaseTreeNode databaseTreeNode0 = new DatabaseTreeNode("");
      databaseTreeNode0.getTransferDataFlavors();
      assertFalse(databaseTreeNode0.isExplored());
      assertFalse(databaseTreeNode0.isLeaf());
  }
}
