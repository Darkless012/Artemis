/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 03:08:25 GMT 2017
 */

package uk.ac.sanger.artemis.components.variant;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.IllegalComponentStateException;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import javax.swing.DebugGraphics;
import javax.swing.JCheckBox;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMImplementation;
import uk.ac.sanger.artemis.components.alignment.LineAttributes;
import uk.ac.sanger.artemis.components.variant.GraphPanel;
import uk.ac.sanger.artemis.components.variant.VCFview;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GraphPanel_ESTest extends GraphPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineAttributes[] lineAttributesArray0 = GraphPanel.getLineAttributes(0);
      assertNotNull(lineAttributesArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("Save", "Save", "Save");
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(genericDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
      // Undeclared exception!
      try { 
        graphPanel0.paintComponent(sVGGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.variant.GraphPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType(":", ":", "ks,y<jVr");
      GenericDOMImplementation genericDOMImplementation0 = new GenericDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, genericDOMImplementation0);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(genericDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
      DebugGraphics debugGraphics0 = new DebugGraphics(sVGGraphics2D0);
      // Undeclared exception!
      try { 
        graphPanel0.paintComponent(debugGraphics0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.DebugGraphics cannot be cast to java.awt.Graphics2D
         //
         verifyException("uk.ac.sanger.artemis.components.variant.GraphPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      GraphPanel.getLineAttributes(61446);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        GraphPanel.getLineAttributes((-551));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.alignment.LineAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      GraphPanel.PopupListener graphPanel_PopupListener0 = graphPanel0.new PopupListener();
      JCheckBox jCheckBox0 = new JCheckBox();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jCheckBox0, 2, 122L, (-534), 2, (-534), 2, (-2403), 0, true, (MenuElement[]) null, menuSelectionManager0);
      // Undeclared exception!
      try { 
        graphPanel_PopupListener0.mousePressed(menuDragMouseEvent0);
        fail("Expecting exception: IllegalComponentStateException");
      
      } catch(IllegalComponentStateException e) {
         //
         // component must be showing on the screen to determine its location
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineAttributes[] lineAttributesArray0 = GraphPanel.getLineAttributes(56);
      LineAttributes[] lineAttributesArray1 = GraphPanel.getLineAttributes(0);
      assertSame(lineAttributesArray1, lineAttributesArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineAttributes[] lineAttributesArray0 = GraphPanel.getLineAttributes(56);
      LineAttributes[] lineAttributesArray1 = GraphPanel.getLineAttributes(481);
      assertNotSame(lineAttributesArray1, lineAttributesArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      GraphPanel.PopupListener graphPanel_PopupListener0 = graphPanel0.new PopupListener();
      MenuElement[] menuElementArray0 = new MenuElement[4];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(graphPanel0, 1625, 1110, (-2620), 0, (-2620), 3, 3906, 3, false, menuElementArray0, menuSelectionManager0);
      graphPanel_PopupListener0.mouseReleased(menuDragMouseEvent0);
      assertEquals((-2620), menuDragMouseEvent0.getY());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      GraphPanel.PopupListener graphPanel_PopupListener0 = graphPanel0.new PopupListener();
      MouseEvent mouseEvent0 = new MouseEvent(graphPanel0, (-1022), (-1022), (-1022), 3, (-270), 3467, true);
      graphPanel_PopupListener0.mouseClicked(mouseEvent0);
      assertTrue(mouseEvent0.isControlDown());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      GraphPanel.PopupListener graphPanel_PopupListener0 = graphPanel0.new PopupListener();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(graphPanel0, 300, 4195L, 300, 300, 300, (-2567), false, 669, (-2567), (-951));
      graphPanel_PopupListener0.mousePressed(mouseWheelEvent0);
      assertEquals(669, mouseWheelEvent0.getScrollType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GraphPanel graphPanel0 = new GraphPanel((VCFview) null);
      graphPanel0.setType(1840);
      assertFalse(graphPanel0.isFocusTraversalPolicyProvider());
  }
}
