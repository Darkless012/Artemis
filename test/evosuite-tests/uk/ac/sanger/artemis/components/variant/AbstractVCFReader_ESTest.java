/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 03:05:26 GMT 2017
 */

package uk.ac.sanger.artemis.components.variant;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sshtools.j2ssh.io.ByteArrayReader;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.Hashtable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.variant.AbstractVCFReader;
import uk.ac.sanger.artemis.components.variant.TabixReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractVCFReader_ESTest extends AbstractVCFReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayReader byteArrayReader0 = new ByteArrayReader(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayReader0, 1233);
      pushbackInputStream0.unread(2966);
      long long0 = AbstractVCFReader.readLong(pushbackInputStream0);
      assertEquals(150L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 2457);
      int int0 = AbstractVCFReader.readInt(byteArrayInputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      float float0 = AbstractVCFReader.readFloat(byteArrayInputStream0);
      assertEquals(3.53E-43F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractVCFReader.readLong((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.variant.AbstractVCFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractVCFReader.readInt((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.variant.AbstractVCFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractVCFReader.readFloat((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.variant.AbstractVCFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        AbstractVCFReader.readFloat(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractVCFReader.getLineHash("z_.DOO?Q}omLkX}G", "|,NV#3#z=S<?I~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractVCFReader.getLineHash((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hashtable<String, String> hashtable0 = AbstractVCFReader.getLineHash(" tep", "|,NV#3#z=S<?I~");
      assertEquals(2, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hashtable<String, String> hashtable0 = AbstractVCFReader.getLineHash(" steN=", "SR9t]vOX|q\"zl");
      assertEquals(1, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayReader byteArrayReader0 = new ByteArrayReader(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayReader0, 1233);
      AbstractVCFReader.readLong(pushbackInputStream0);
      assertEquals(1, byteArrayReader0.available());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-36), 2457);
      // Undeclared exception!
      try { 
        AbstractVCFReader.readInt(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TabixReader tabixReader0 = null;
      try {
        tabixReader0 = new TabixReader("_2^Us9?[_BD/&S");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayReader byteArrayReader0 = new ByteArrayReader(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayReader0, 1233);
      AbstractVCFReader.readFloat(pushbackInputStream0);
      assertEquals(5, byteArrayReader0.available());
  }
}
