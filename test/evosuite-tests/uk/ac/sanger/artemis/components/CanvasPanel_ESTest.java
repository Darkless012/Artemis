/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 01:30:15 GMT 2017
 */

package uk.ac.sanger.artemis.components;

import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.datatransfer.Clipboard;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.FeatureKeyQualifierPredicate;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.components.SelectionInfoDisplay;
import uk.ac.sanger.artemis.io.Key;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CanvasPanel_ESTest extends CanvasPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Clipboard clipboard0 = new Clipboard(" does not cut upstream of the recognition site");
      Selection selection0 = new Selection(clipboard0);
      SelectionInfoDisplay selectionInfoDisplay0 = new SelectionInfoDisplay(simpleEntryGroup0, selection0);
      int int0 = selectionInfoDisplay0.getFontMaxAscent();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Key key0 = new Key("B*hsKz}6>Jyjf");
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "B*hsKz}6>Jyjf");
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "B*hsKz}6>Jyjf");
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      SelectionInfoDisplay selectionInfoDisplay0 = new SelectionInfoDisplay(filteredEntryGroup0, selection0);
      int int0 = selectionInfoDisplay0.getFontDescent();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Key key0 = new Key("B*hsKz}6>Jyjf");
      FeatureKeyQualifierPredicate featureKeyQualifierPredicate0 = new FeatureKeyQualifierPredicate(key0, "B*hsKz}6>Jyjf");
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureKeyQualifierPredicate0, "B*hsKz}6>Jyjf");
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      SelectionInfoDisplay selectionInfoDisplay0 = new SelectionInfoDisplay(filteredEntryGroup0, selection0);
      int int0 = selectionInfoDisplay0.getFontWidth();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Clipboard clipboard0 = new Clipboard(" does not cut upstream of the recognition site");
      Selection selection0 = new Selection(clipboard0);
      SelectionInfoDisplay selectionInfoDisplay0 = new SelectionInfoDisplay(simpleEntryGroup0, selection0);
      int int0 = selectionInfoDisplay0.getFontAscent();
      assertEquals(12, int0);
  }
}
