/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 02:40:40 GMT 2017
 */

package uk.ac.sanger.artemis.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.SystemColor;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.svggen.SVGGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.components.FeaturePlot;
import uk.ac.sanger.artemis.components.Plot;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.plot.CoilFeatureAlgorithm;
import uk.ac.sanger.artemis.plot.HydrophilicityAlgorithm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Plot_ESTest extends Plot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      Feature feature0 = new Feature(genbankStreamFeature0);
      assertNotNull(feature0);
      
      HydrophilicityAlgorithm hydrophilicityAlgorithm0 = new HydrophilicityAlgorithm(feature0);
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertNotNull(hydrophilicityAlgorithm0);
      
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophilicityAlgorithm0);
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertFalse(featurePlot0.isFocusTraversalPolicySet());
      assertTrue(featurePlot0.getFocusTraversalKeysEnabled());
      assertFalse(featurePlot0.getIgnoreRepaint());
      assertFalse(featurePlot0.isFocusTraversalPolicyProvider());
      assertFalse(featurePlot0.isFocusCycleRoot());
      assertNotNull(featurePlot0);
      
      featurePlot0.showAveragesForRange();
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertFalse(featurePlot0.isFocusTraversalPolicySet());
      assertTrue(featurePlot0.getFocusTraversalKeysEnabled());
      assertFalse(featurePlot0.getIgnoreRepaint());
      assertFalse(featurePlot0.isFocusTraversalPolicyProvider());
      assertFalse(featurePlot0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      Feature feature0 = new Feature(genbankStreamFeature0);
      assertNotNull(feature0);
      
      HydrophilicityAlgorithm hydrophilicityAlgorithm0 = new HydrophilicityAlgorithm(feature0);
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertNotNull(hydrophilicityAlgorithm0);
      
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophilicityAlgorithm0);
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertFalse(featurePlot0.isFocusTraversalPolicyProvider());
      assertFalse(featurePlot0.isFocusCycleRoot());
      assertFalse(featurePlot0.getIgnoreRepaint());
      assertTrue(featurePlot0.getFocusTraversalKeysEnabled());
      assertFalse(featurePlot0.isFocusTraversalPolicySet());
      assertNotNull(featurePlot0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)8;
      float float0 = featurePlot0.getYCoordinate((short)32, 500, 4096, floatArray0, (short)8);
      assertEquals(8.0F, float0, 0.01F);
      assertArrayEquals(new float[] {8.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertFalse(featurePlot0.isFocusTraversalPolicyProvider());
      assertFalse(featurePlot0.isFocusCycleRoot());
      assertFalse(featurePlot0.getIgnoreRepaint());
      assertTrue(featurePlot0.getFocusTraversalKeysEnabled());
      assertFalse(featurePlot0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      Feature feature0 = new Feature(genbankStreamFeature0);
      assertNotNull(feature0);
      
      HydrophilicityAlgorithm hydrophilicityAlgorithm0 = new HydrophilicityAlgorithm(feature0);
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertNotNull(hydrophilicityAlgorithm0);
      
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophilicityAlgorithm0);
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertFalse(featurePlot0.getIgnoreRepaint());
      assertFalse(featurePlot0.isFocusTraversalPolicyProvider());
      assertFalse(featurePlot0.isFocusCycleRoot());
      assertFalse(featurePlot0.isFocusTraversalPolicySet());
      assertTrue(featurePlot0.getFocusTraversalKeysEnabled());
      assertNotNull(featurePlot0);
      
      int int0 = featurePlot0.getScaleHeight();
      assertEquals(17, int0);
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertFalse(featurePlot0.getIgnoreRepaint());
      assertFalse(featurePlot0.isFocusTraversalPolicyProvider());
      assertFalse(featurePlot0.isFocusCycleRoot());
      assertFalse(featurePlot0.isFocusTraversalPolicySet());
      assertTrue(featurePlot0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Color color0 = Color.getHSBColor(2.0F, 0.0F, 2.0F);
      assertEquals(255, color0.getRed());
      assertEquals((-2), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(254, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      // Undeclared exception!
      try { 
        Plot.makeColours(color0, (-1380));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      assertNotNull(genbankStreamFeature0);
      
      Feature feature0 = new Feature(genbankStreamFeature0);
      assertNotNull(feature0);
      
      HydrophilicityAlgorithm hydrophilicityAlgorithm0 = new HydrophilicityAlgorithm(feature0);
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertNotNull(hydrophilicityAlgorithm0);
      
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophilicityAlgorithm0);
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertFalse(featurePlot0.isFocusTraversalPolicySet());
      assertTrue(featurePlot0.getFocusTraversalKeysEnabled());
      assertFalse(featurePlot0.getIgnoreRepaint());
      assertFalse(featurePlot0.isFocusTraversalPolicyProvider());
      assertFalse(featurePlot0.isFocusCycleRoot());
      assertNotNull(featurePlot0);
      
      float[] floatArray0 = new float[5];
      float float0 = featurePlot0.getYCoordinate((short)32, 500, 4096, floatArray0, (short)8);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertEquals(1, hydrophilicityAlgorithm0.getValueCount());
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertFalse(featurePlot0.isFocusTraversalPolicySet());
      assertTrue(featurePlot0.getFocusTraversalKeysEnabled());
      assertFalse(featurePlot0.getIgnoreRepaint());
      assertFalse(featurePlot0.isFocusTraversalPolicyProvider());
      assertFalse(featurePlot0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.infoText;
      Color[] colorArray0 = Plot.makeColours(systemColor0, 774);
      assertNotNull(colorArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.windowText;
      Color[] colorArray0 = Plot.makeColours(systemColor0, 0);
      assertNotNull(colorArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      HydrophilicityAlgorithm hydrophilicityAlgorithm0 = new HydrophilicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophilicityAlgorithm0);
      int int0 = featurePlot0.getCrossHairPosition();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      FeaturePlot featurePlot0 = null;
      try {
        featurePlot0 = new FeaturePlot(coilFeatureAlgorithm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.FeaturePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Feature feature0 = new Feature(genbankStreamFeature0);
      HydrophilicityAlgorithm hydrophilicityAlgorithm0 = new HydrophilicityAlgorithm(feature0);
      FeaturePlot featurePlot0 = new FeaturePlot(hydrophilicityAlgorithm0);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("", "", "q#Y`0 M@GY");
      GenericDOMImplementation genericDOMImplementation0 = new GenericDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, genericDOMImplementation0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(genericDocument0);
      featurePlot0.drawMinMax(sVGGraphics2D0, 0.0F, 68.04106F);
  }
}
