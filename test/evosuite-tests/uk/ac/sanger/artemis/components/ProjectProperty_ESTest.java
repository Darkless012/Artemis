/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 13:00:46 GMT 2018
 */

package uk.ac.sanger.artemis.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.File;
import java.util.HashMap;
import java.util.Properties;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.ProjectProperty;
import uk.ac.sanger.artemis.components.Splash;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProjectProperty_ESTest extends ProjectProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|CCy V5[%fK", "");
      Properties properties0 = new Properties();
      HashMap<String, HashMap<String, String>> hashMap0 = ProjectProperty.getProjectMap(properties0);
      ProjectProperty.writeProperties(mockFile0, hashMap0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      HashMap<String, HashMap<String, String>> hashMap0 = new HashMap<String, HashMap<String, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("", hashMap1);
      ProjectProperty.writeProperties(mockFile0, hashMap0);
      assertTrue(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, HashMap<String, String>> hashMap0 = new HashMap<String, HashMap<String, String>>(249);
      // Undeclared exception!
      try { 
        ProjectProperty.writeProperties((File) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.ProjectProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProjectProperty.getProjectMap((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.ProjectProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ProjectProperty projectProperty0 = null;
      try {
        projectProperty0 = new ProjectProperty((Splash) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ProjectProperty projectProperty0 = null;
      try {
        projectProperty0 = new ProjectProperty();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      File file0 = MockFile.createTempFile("INSERT failed ", "INSERT failed ");
      HashMap<String, HashMap<String, String>> hashMap0 = new HashMap<String, HashMap<String, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("INSERT failed ", "INSERT failed ");
      hashMap0.put("INSERT failed ", hashMap1);
      ProjectProperty.writeProperties(file0, hashMap0);
      assertEquals(54L, file0.length());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put("class org.biojava.bio.seq.io.SequenceBuilderBaseERROR_FEATURES_PROPERTY", "class org.biojava.bio.seq.io.SequenceBuilderBaseERROR_FEATURES_PROPERTY");
      HashMap<String, HashMap<String, String>> hashMap0 = ProjectProperty.getProjectMap(properties0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Properties properties0 = new Properties();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      properties0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        ProjectProperty.getProjectMap(properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("uk.ac.sanger.artemis.components.ProjectProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ProjectProperty.writeProperties();
  }
}
