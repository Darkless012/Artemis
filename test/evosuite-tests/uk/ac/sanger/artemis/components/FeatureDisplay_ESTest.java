/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 01:48:34 GMT 2017
 */

package uk.ac.sanger.artemis.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.awt.datatransfer.Clipboard;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.EntryGroup;
import uk.ac.sanger.artemis.FeaturePatternPredicate;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.SimpleGotoEventSource;
import uk.ac.sanger.artemis.components.BasePlotGroup;
import uk.ac.sanger.artemis.components.FeatureDisplay;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.sequence.AminoAcidSequence;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FeatureDisplay_ESTest extends FeatureDisplay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("l", "");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Clipboard clipboard0 = new Clipboard("l");
      Selection selection0 = new Selection(clipboard0);
      BasePlotGroup basePlotGroup0 = mock(BasePlotGroup.class, new ViolatedAssumptionAnswer());
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      FeatureDisplay featureDisplay0 = null;
      try {
        featureDisplay0 = new FeatureDisplay(simpleEntryGroup0, selection0, simpleGotoEventSource0, basePlotGroup0, 5);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DragSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Clipboard clipboard0 = new Clipboard("darkred");
      Selection selection0 = new Selection(clipboard0);
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      FeatureDisplay featureDisplay0 = null;
      try {
        featureDisplay0 = new FeatureDisplay(simpleEntryGroup0, selection0, simpleGotoEventSource0, (BasePlotGroup) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.SimpleEntryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector<String> vector0 = FeatureDisplay.getAllPossibleContigKeys();
      assertEquals("[fasta_record, contig, insertion_gap, gap, scaffold, source]", vector0.toString());
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector<String> vector0 = FeatureDisplay.getContigKeys();
      assertEquals("[fasta_record, contig, insertion_gap]", vector0.toString());
      assertNotNull(vector0);
      assertEquals(3, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("l", "");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Range range0 = new Range(0, 5);
      Bases bases1 = bases0.truncate(range0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases1);
      Clipboard clipboard0 = new Clipboard("'{6`n$c");
      Selection selection0 = new Selection(clipboard0);
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      BasePlotGroup basePlotGroup0 = mock(BasePlotGroup.class, new ViolatedAssumptionAnswer());
      FeatureDisplay featureDisplay0 = null;
      try {
        featureDisplay0 = new FeatureDisplay(simpleEntryGroup0, selection0, simpleGotoEventSource0, basePlotGroup0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DragSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("A6gIQ");
      Selection selection0 = new Selection(clipboard0);
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource((EntryGroup) null);
      FeatureDisplay featureDisplay0 = null;
      try {
        featureDisplay0 = new FeatureDisplay((EntryGroup) null, selection0, simpleGotoEventSource0, (BasePlotGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.FeatureDisplay", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("");
      Bases bases0 = new Bases(rawStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      AminoAcidSequence aminoAcidSequence0 = new AminoAcidSequence("|F&-EgYZ");
      FeaturePatternPredicate featurePatternPredicate0 = new FeaturePatternPredicate(aminoAcidSequence0);
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featurePatternPredicate0, "M]`|6$`<CvXRwM>Ct");
      Clipboard clipboard0 = new Clipboard("M]`|6$`<CvXRwM>Ct");
      Selection selection0 = new Selection(clipboard0);
      SimpleGotoEventSource simpleGotoEventSource0 = new SimpleGotoEventSource(simpleEntryGroup0);
      FeatureDisplay featureDisplay0 = null;
      try {
        featureDisplay0 = new FeatureDisplay(filteredEntryGroup0, selection0, simpleGotoEventSource0, (BasePlotGroup) null, 0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DragSource", e);
      }
  }
}
