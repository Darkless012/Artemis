/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 02:00:46 GMT 2017
 */

package uk.ac.sanger.artemis.components.filetree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.ObjectOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.filetree.TransferableFileNodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransferableFileNodeList_ESTest extends TransferableFileNodeList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransferableFileNodeList transferableFileNodeList0 = new TransferableFileNodeList(0);
      DataFlavor dataFlavor0 = DataFlavor.javaFileListFlavor;
      boolean boolean0 = transferableFileNodeList0.isDataFlavorSupported(dataFlavor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransferableFileNodeList transferableFileNodeList0 = new TransferableFileNodeList(1);
      TransferableFileNodeList.remoteFlavors = null;
      DataFlavor[] dataFlavorArray0 = transferableFileNodeList0.getTransferDataFlavors();
      assertNull(dataFlavorArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransferableFileNodeList transferableFileNodeList0 = new TransferableFileNodeList(2285);
      DataFlavor[] dataFlavorArray0 = new DataFlavor[0];
      TransferableFileNodeList.remoteFlavors = dataFlavorArray0;
      DataFlavor[] dataFlavorArray1 = transferableFileNodeList0.getTransferDataFlavors();
      assertSame(dataFlavorArray1, dataFlavorArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransferableFileNodeList transferableFileNodeList0 = new TransferableFileNodeList(1);
      // Undeclared exception!
      try { 
        transferableFileNodeList0.isDataFlavorSupported((DataFlavor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.TransferableFileNodeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransferableFileNodeList transferableFileNodeList0 = new TransferableFileNodeList(0);
      // Undeclared exception!
      try { 
        transferableFileNodeList0.getTransferData((DataFlavor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.TransferableFileNodeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransferableFileNodeList transferableFileNodeList0 = null;
      try {
        transferableFileNodeList0 = new TransferableFileNodeList((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransferableFileNodeList transferableFileNodeList0 = new TransferableFileNodeList(0);
      TransferableFileNodeList transferableFileNodeList1 = (TransferableFileNodeList)transferableFileNodeList0.getTransferData(transferableFileNodeList0.TRANSFERABLEFILENODELIST);
      assertEquals(0, transferableFileNodeList1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransferableFileNodeList transferableFileNodeList0 = new TransferableFileNodeList(1);
      DataFlavor dataFlavor0 = DataFlavor.fragmentHtmlFlavor;
      try { 
        transferableFileNodeList0.getTransferData(dataFlavor0);
        fail("Expecting exception: UnsupportedFlavorException");
      
      } catch(UnsupportedFlavorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.TransferableFileNodeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransferableFileNodeList transferableFileNodeList0 = new TransferableFileNodeList(2285);
      DataFlavor[] dataFlavorArray0 = transferableFileNodeList0.getTransferDataFlavors();
      assertNotNull(dataFlavorArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransferableFileNodeList transferableFileNodeList0 = new TransferableFileNodeList(0);
      boolean boolean0 = transferableFileNodeList0.isDataFlavorSupported(transferableFileNodeList0.TRANSFERABLEFILENODELIST);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransferableFileNodeList transferableFileNodeList0 = new TransferableFileNodeList(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Wg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      objectOutputStream0.writeObject(transferableFileNodeList0);
      assertEquals(0, transferableFileNodeList0.capacity());
  }
}
