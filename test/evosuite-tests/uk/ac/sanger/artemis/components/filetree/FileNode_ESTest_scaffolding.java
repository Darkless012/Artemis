/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Jan 12 12:09:59 GMT 2018
 */

package uk.ac.sanger.artemis.components.filetree;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class FileNode_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "uk.ac.sanger.artemis.components.filetree.FileNode"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "GB"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.timezone", "Europe/London"); 
    java.lang.System.setProperty("sun.jnu.encoding", "UTF-8"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(FileNode_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.commons.io.filefilter.IOFileFilter",
      "org.apache.commons.io.LineIterator",
      "htsjdk.variant.variantcontext.Allele",
      "uk.ac.sanger.artemis.components.filetree.FileNode",
      "org.apache.commons.io.filefilter.MagicNumberFileFilter",
      "htsjdk.variant.vcf.VCFHeader",
      "htsjdk.tribble.util.ParsingUtils",
      "htsjdk.samtools.util.Log$LogLevel",
      "htsjdk.tribble.TribbleException",
      "htsjdk.variant.vcf.VCFCompoundHeaderLine",
      "htsjdk.samtools.util.StringUtil",
      "htsjdk.samtools.util.RuntimeScriptException",
      "org.apache.commons.io.filefilter.EmptyFileFilter",
      "htsjdk.tribble.util.URLHelper",
      "org.apache.commons.io.filefilter.NotFileFilter",
      "org.apache.commons.io.filefilter.TrueFileFilter",
      "org.apache.commons.io.filefilter.AgeFileFilter",
      "htsjdk.variant.vcf.VCFSimpleHeaderLine",
      "htsjdk.samtools.SAMException",
      "htsjdk.samtools.util.BinaryCodec",
      "org.apache.commons.io.filefilter.AbstractFileFilter",
      "org.apache.commons.io.filefilter.ConditionalFileFilter",
      "org.apache.commons.io.filefilter.FileFileFilter",
      "htsjdk.variant.variantcontext.VariantContextComparator",
      "htsjdk.samtools.filter.AbstractJavascriptFilter",
      "org.apache.commons.io.filefilter.DirectoryFileFilter",
      "org.apache.commons.io.filefilter.HiddenFileFilter",
      "htsjdk.variant.vcf.VCFIDHeaderLine",
      "uk.ac.sanger.artemis.io.UI",
      "org.apache.commons.io.filefilter.SuffixFileFilter",
      "org.apache.commons.io.FileExistsException",
      "org.apache.commons.io.filefilter.FalseFileFilter",
      "htsjdk.variant.vcf.VCFInfoHeaderLine",
      "org.apache.commons.io.filefilter.CanReadFileFilter",
      "org.apache.commons.io.FilenameUtils",
      "htsjdk.tribble.util.RemoteURLHelper",
      "htsjdk.variant.vcf.VCFHeaderLine",
      "htsjdk.samtools.util.RuntimeEOFException",
      "htsjdk.samtools.AbstractSAMHeaderRecord",
      "org.apache.commons.io.filefilter.DelegateFileFilter",
      "org.apache.commons.io.IOCase",
      "org.apache.commons.io.filefilter.AndFileFilter",
      "htsjdk.tribble.TribbleException$InvalidHeader",
      "org.apache.commons.io.filefilter.SizeFileFilter",
      "htsjdk.samtools.seekablestream.SeekablePathStream",
      "org.apache.commons.io.filefilter.OrFileFilter",
      "htsjdk.samtools.util.RuntimeIOException",
      "org.apache.commons.io.filefilter.NameFileFilter",
      "htsjdk.tribble.TribbleException$InternalCodecException",
      "org.apache.commons.io.filefilter.RegexFileFilter",
      "htsjdk.variant.vcf.VCFFilterHeaderLine",
      "htsjdk.variant.vcf.VCFContigHeaderLine",
      "htsjdk.samtools.SAMSequenceDictionary",
      "org.apache.commons.io.FileUtils",
      "org.apache.commons.io.filefilter.PrefixFileFilter",
      "htsjdk.samtools.seekablestream.SeekableStream",
      "uk.ac.sanger.artemis.io.UI$UIMode",
      "htsjdk.samtools.util.Log",
      "org.apache.commons.io.output.NullOutputStream",
      "org.apache.commons.io.filefilter.WildcardFileFilter",
      "htsjdk.variant.vcf.VCFFormatHeaderLine",
      "htsjdk.samtools.SAMSequenceRecord",
      "org.apache.commons.io.filefilter.CanWriteFileFilter"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(FileNode_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "uk.ac.sanger.artemis.components.filetree.FileNode",
      "org.apache.commons.io.filefilter.NotFileFilter",
      "org.apache.commons.io.filefilter.HiddenFileFilter",
      "org.apache.commons.io.filefilter.AgeFileFilter",
      "org.apache.commons.io.FilenameUtils",
      "org.apache.commons.io.IOCase",
      "org.apache.commons.io.filefilter.SuffixFileFilter",
      "org.apache.commons.io.filefilter.FileFileFilter",
      "org.apache.commons.io.filefilter.OrFileFilter",
      "org.apache.commons.io.filefilter.AndFileFilter",
      "org.apache.commons.io.filefilter.NameFileFilter",
      "org.apache.commons.io.filefilter.CanWriteFileFilter",
      "org.apache.commons.io.filefilter.EmptyFileFilter",
      "org.apache.commons.io.filefilter.FalseFileFilter",
      "org.apache.commons.io.filefilter.WildcardFileFilter",
      "org.apache.commons.io.filefilter.MagicNumberFileFilter",
      "org.apache.commons.io.filefilter.TrueFileFilter",
      "org.apache.commons.io.filefilter.SizeFileFilter",
      "org.apache.commons.io.filefilter.PrefixFileFilter",
      "htsjdk.samtools.AbstractSAMHeaderRecord",
      "htsjdk.samtools.SAMSequenceRecord",
      "org.apache.commons.io.FileUtils",
      "org.apache.commons.io.filefilter.RegexFileFilter",
      "htsjdk.variant.vcf.VCFHeader",
      "htsjdk.samtools.util.StringUtil",
      "htsjdk.variant.variantcontext.Allele",
      "org.apache.commons.io.filefilter.DelegateFileFilter",
      "org.apache.commons.io.filefilter.CanReadFileFilter",
      "htsjdk.tribble.util.ParsingUtils",
      "htsjdk.samtools.filter.AbstractJavascriptFilter",
      "org.apache.commons.io.filefilter.DirectoryFileFilter"
    );
  }
}
