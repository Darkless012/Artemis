/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 01:54:06 GMT 2017
 */

package uk.ac.sanger.artemis.components.filetree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.MouseWheelEvent;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.event.EventListenerList;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.filetree.AbstractCellEditor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCellEditor_ESTest extends AbstractCellEditor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      JTable jTable0 = new JTable(defaultTableModel0);
      abstractCellEditor0.addCellEditorListener(jTable0);
      abstractCellEditor0.addCellEditorListener(jTable0);
      abstractCellEditor0.fireEditingCanceled();
      assertTrue(abstractCellEditor0.stopCellEditing());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      JTable jTable0 = new JTable();
      abstractCellEditor0.addCellEditorListener(jTable0);
      abstractCellEditor0.addCellEditorListener(jTable0);
      abstractCellEditor0.fireEditingStopped();
      assertTrue(abstractCellEditor0.stopCellEditing());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      abstractCellEditor0.listenerList = null;
      Object[][] objectArray0 = new Object[0][9];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) abstractCellEditor0;
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      // Undeclared exception!
      try { 
        abstractCellEditor0.removeCellEditorListener(jTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.AbstractCellEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      abstractCellEditor0.listenerList = null;
      // Undeclared exception!
      try { 
        abstractCellEditor0.fireEditingStopped();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.AbstractCellEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      abstractCellEditor0.listenerList = null;
      // Undeclared exception!
      try { 
        abstractCellEditor0.fireEditingCanceled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.AbstractCellEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      JTable jTable0 = new JTable(1272, 1272);
      abstractCellEditor0.listenerList = null;
      // Undeclared exception!
      try { 
        abstractCellEditor0.addCellEditorListener(jTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.AbstractCellEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      EventListenerList eventListenerList0 = new EventListenerList();
      abstractCellEditor0.listenerList = eventListenerList0;
      Class<JTable> class0 = JTable.class;
      JTable jTable0 = new JTable();
      eventListenerList0.add(class0, jTable0);
      abstractCellEditor0.fireEditingCanceled();
      assertTrue(abstractCellEditor0.stopCellEditing());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      EventListenerList eventListenerList0 = new EventListenerList();
      abstractCellEditor0.listenerList = eventListenerList0;
      Class<JTable> class0 = JTable.class;
      JTable jTable0 = new JTable();
      eventListenerList0.add(class0, jTable0);
      abstractCellEditor0.fireEditingStopped();
      assertTrue(abstractCellEditor0.stopCellEditing());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      JTable jTable0 = new JTable();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jTable0, 0, 0, 0, (-1), 1, 1, 0, (-1964), true, (-2886), 1469, (-1964), 1);
      boolean boolean0 = abstractCellEditor0.isCellEditable(mouseWheelEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      Object object0 = abstractCellEditor0.getCellEditorValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      boolean boolean0 = abstractCellEditor0.stopCellEditing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      JLabel jLabel0 = new JLabel();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jLabel0, 4, (-549L), 70, 70, 4, 4, true, 3997, 3997, 936);
      boolean boolean0 = abstractCellEditor0.shouldSelectCell(mouseWheelEvent0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      Object[][] objectArray0 = new Object[0][9];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) abstractCellEditor0;
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      abstractCellEditor0.removeCellEditorListener(jTable0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor();
      abstractCellEditor0.cancelCellEditing();
      assertTrue(abstractCellEditor0.stopCellEditing());
  }
}
