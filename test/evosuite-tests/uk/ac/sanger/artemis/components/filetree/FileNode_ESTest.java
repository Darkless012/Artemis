/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 01:56:33 GMT 2017
 */

package uk.ac.sanger.artemis.components.filetree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.io.File;
import java.io.FileFilter;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.filetree.FileNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileNode_ESTest extends FileNode_ESTest_scaffolding {

	
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileNode fileNode0 = new FileNode(mockFile0);
      String string0 = fileNode0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, ">'Z{7qc");
      FileNode fileNode0 = new FileNode(mockFile0);
      boolean boolean0 = fileNode0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "v_*.u0yIS?fn3");
      FileNode fileNode0 = new FileNode(mockFile0);
      boolean boolean0 = fileNode0.isDirectory();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileNode fileNode0 = new FileNode(mockFile0);
      FileNode.flavors = null;
      DataFlavor[] dataFlavorArray0 = fileNode0.getTransferDataFlavors();
      assertNull(dataFlavorArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B");
      FileNode fileNode0 = new FileNode(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(CURRENT_DIR + "/B");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "B");
      File file0 = fileNode0.getFile();
      assertFalse(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=Y}$x8'<W\"+kL4B):");
      MockFile mockFile1 = new MockFile(mockFile0, "=Y}$x8'<W\"+kL4B):");
      FileNode fileNode0 = new FileNode(mockFile1);
      File file0 = fileNode0.getFile();
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B");
      FileNode fileNode0 = new FileNode(mockFile0);
      boolean boolean0 = fileNode0.getAllowsChildren();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("eMCLW?{f\"@q", "eMCLW?{f\"@q");
      FileNode fileNode0 = new FileNode(mockFile0);
      fileNode0.setUserObject(fileNode0);
      // Undeclared exception!
      try { 
        fileNode0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.components.filetree.FileNode cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.FileNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("RjUDQwT,");
      FileNode fileNode0 = new FileNode(mockFile0);
      // Undeclared exception!
      try { 
        fileNode0.isDataFlavorSupported((DataFlavor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.FileNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileNode fileNode0 = new FileNode(mockFile0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      fileNode0.setUserObject(pipedInputStream0);
      // Undeclared exception!
      try { 
        fileNode0.getChildren((FileFilter) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.PipedInputStream cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.FileNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileNode fileNode0 = null;
      try {
        fileNode0 = new FileNode((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.FileNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileNode fileNode0 = new FileNode(mockFile0);
      File file0 = fileNode0.getFile();
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileNode fileNode0 = new FileNode(mockFile0);
      boolean boolean0 = fileNode0.isDirectory();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileNode fileNode0 = new FileNode(mockFile0);
      // Undeclared exception!
      try { 
        fileNode0.getTransferData((DataFlavor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.filetree.FileNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileNode fileNode0 = new FileNode(mockFile0);
      FileNode fileNode1 = (FileNode)fileNode0.getTransferData(fileNode0.FILENODE);
      assertTrue(fileNode1.getAllowsChildren());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B");
      FileNode fileNode0 = new FileNode(mockFile0);
      DataFlavor dataFlavor0 = DataFlavor.stringFlavor;
      Object object0 = fileNode0.getTransferData(dataFlavor0);
      assertEquals(CURRENT_DIR + "/B", object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=Y}$x8'<W\"+kL4B):");
      FileNode fileNode0 = new FileNode(mockFile0);
      DataFlavor dataFlavor0 = new DataFlavor();
      boolean boolean0 = fileNode0.isDataFlavorSupported(dataFlavor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B");
      FileNode fileNode0 = new FileNode(mockFile0);
      DataFlavor dataFlavor0 = DataFlavor.stringFlavor;
      boolean boolean0 = fileNode0.isDataFlavorSupported(dataFlavor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileNode fileNode0 = new FileNode(mockFile0);
      boolean boolean0 = fileNode0.isDataFlavorSupported(fileNode0.FILENODE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileNode fileNode0 = new FileNode(mockFile0);
      Object[] objectArray0 = fileNode0.getChildren((FileFilter) null);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B");
      FileNode fileNode0 = new FileNode(mockFile0);
      fileNode0.setDirectory(true);
      FileFilter fileFilter0 = mock(FileFilter.class, new ViolatedAssumptionAnswer());
      fileNode0.getChildren(fileFilter0);
      assertTrue(fileNode0.getAllowsChildren());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("eMCLW?{f\"@q", "eMCLW?{f\"@q");
      FileNode fileNode0 = new FileNode(mockFile0);
      FileFilter fileFilter0 = mock(FileFilter.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = fileNode0.getChildren(fileFilter0);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=Y}$x8'<W\"+kL4B):");
      MockFile mockFile1 = new MockFile(mockFile0, "=Y}$x8'<W\"+kL4B):");
      FileNode fileNode0 = new FileNode(mockFile1);
      String string0 = fileNode0.toString();
      assertEquals("=Y}$x8'<W\"+kL4B):", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileNode fileNode0 = new FileNode(mockFile0);
      String string0 = fileNode0.toString();
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileNode fileNode0 = new FileNode(mockFile0);
      boolean boolean0 = fileNode0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileNode fileNode0 = new FileNode(mockFile0);
      DataFlavor[] dataFlavorArray0 = fileNode0.getTransferDataFlavors();
      assertNotNull(dataFlavorArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileNode fileNode0 = new FileNode(mockFile0);
      boolean boolean0 = fileNode0.getAllowsChildren();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B");
      FileNode fileNode0 = new FileNode(mockFile0);
      fileNode0.reset();
      assertTrue(fileNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileNode fileNode0 = new FileNode(mockFile0);
      FileFilter fileFilter0 = mock(FileFilter.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = fileNode0.getChildren(fileFilter0);
      FileFilter fileFilter1 = mock(FileFilter.class, new ViolatedAssumptionAnswer());
      Object[] objectArray1 = fileNode0.getChildren(fileFilter1);
      assertSame(objectArray1, objectArray0);
  }
}
