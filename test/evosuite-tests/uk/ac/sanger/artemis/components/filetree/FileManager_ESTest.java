/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 01:56:33 GMT 2017
 */

package uk.ac.sanger.artemis.components.filetree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.FileFilter;
import javax.swing.JFrame;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.filetree.FileManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileManager_ESTest extends FileManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileFilter fileFilter0 = FileManager.getArtemisFilter();
      assertNotNull(fileFilter0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileFilter fileFilter0 = FileManager.getSequenceFilter();
      assertNotNull(fileFilter0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileFilter fileFilter0 = FileManager.getFeatureFilter();
      FileManager fileManager0 = null;
      try {
        fileManager0 = new FileManager((JFrame) null, fileFilter0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileManager fileManager0 = null;
      try {
        fileManager0 = new FileManager((JFrame) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
