/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 02:47:24 GMT 2017
 */

package uk.ac.sanger.artemis.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.RunBlastAtNCBI;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RunBlastAtNCBI_ESTest extends RunBlastAtNCBI_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = RunBlastAtNCBI.constructRequest("Human Repeats", "Human Repeats", "Human Repeats", "Human Repeats", "Human Repeats", "Human Repeats", "Human Repeats", "Tb+S[%;Xle1\"a|vt1U0", "Tb+S[%;Xle1\"a|vt1U0");
      assertEquals("CMD=Put&QUERY=Human+Repeats&DATABASE=Human+Repeats&HITLIST_SIZE=Human+Repeats&FILTER=Human+Repeats&EXPECT=Human+Repeats&FORMAT_TYPE=HTML&PROGRAM=Human+Repeats&CLIENT=web&SERVICE=Human+Repeats&GAPCOSTS=Tb%2BS%5B%25%3BXle1%22a%7Cvt1U0+Tb%2BS%5B%25%3BXle1%22a%7Cvt1U0", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = RunBlastAtNCBI.constructRequest("]8^AAg^", "1Kf0", "1Kf0", "1Kf0", "1Kf0", "", "]8^AAg^", "1Kf0", "1Kf0");
      assertEquals("CMD=Put&QUERY=1Kf0&DATABASE=1Kf0&HITLIST_SIZE=1Kf0&FILTER=1Kf0&EXPECT=&FORMAT_TYPE=HTML&PROGRAM=%5D8%5EAAg%5E&CLIENT=web&SERVICE=%5D8%5EAAg%5E&GAPCOSTS=1Kf0+1Kf0", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RunBlastAtNCBI runBlastAtNCBI0 = new RunBlastAtNCBI("1Kf0");
      runBlastAtNCBI0.run();
      assertFalse(runBlastAtNCBI0.isInterrupted());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        RunBlastAtNCBI.setData((String) null, "e`2qt7:1n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = RunBlastAtNCBI.constructRequest("megablast", "megablast", "megablast", "megablast", "megablast", "megablast", "megablast", "megablast", (String) null);
      assertEquals("CMD=Put&QUERY=megablast&DATABASE=megablast&HITLIST_SIZE=megablast&FILTER=megablast&EXPECT=megablast&FORMAT_TYPE=HTML&PROGRAM=megablast&CLIENT=web&SERVICE=megablast&MEGABLAST=yes", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        RunBlastAtNCBI.constructRequest("8`?}Bc+fG_DZ", "8`?}Bc+fG_DZ", "", "500", (String) null, "N{>PT\"qT_+Qorrt", (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        RunBlastAtNCBI.setData("blastn", "]8^AAg^");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        RunBlastAtNCBI.setData("]8^AA^", "hp]Y4");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = RunBlastAtNCBI.constructRequest("", "I%:C", "", "", "2RC[z)V", "I%:C", "I%:C", "I%:C", "");
      assertEquals("CMD=Put&QUERY=I%25%3AC&DATABASE=&HITLIST_SIZE=&FILTER=2RC%5Bz%29V&EXPECT=I%25%3AC&FORMAT_TYPE=HTML&PROGRAM=&CLIENT=web&SERVICE=I%25%3AC&GAPCOSTS=I%25%3AC+", string0);
  }
}
