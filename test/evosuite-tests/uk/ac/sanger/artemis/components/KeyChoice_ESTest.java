/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 02:30:07 GMT 2017
 */

package uk.ac.sanger.artemis.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.ItemListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.KeyChoice;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.EntryInformation;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.SimpleEntryInformation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyChoice_ESTest extends KeyChoice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("");
      KeyChoice keyChoice0 = new KeyChoice(simpleEntryInformation0, key0);
      keyChoice0.setKey(key0);
      keyChoice0.setKey(key0);
      assertTrue(keyChoice0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      KeyChoice keyChoice0 = new KeyChoice(simpleEntryInformation0);
      // Undeclared exception!
      try { 
        keyChoice0.setKey((Key) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.KeyChoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = new Key((String) null);
      KeyChoice keyChoice0 = null;
      try {
        keyChoice0 = new KeyChoice(blastEntryInformation0, key0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KeyChoice keyChoice0 = null;
      try {
        keyChoice0 = new KeyChoice((EntryInformation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.components.KeyChoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      Key key0 = Key.CDS;
      blastEntryInformation0.addKey(key0);
      KeyChoice keyChoice0 = new KeyChoice(blastEntryInformation0);
      assertFalse(keyChoice0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = new Key("");
      KeyChoice keyChoice0 = new KeyChoice(simpleEntryInformation0, key0);
      keyChoice0.setKey(key0);
      Key key1 = keyChoice0.getSelectedItem();
      assertEquals("", key1.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = Key.CDS;
      KeyChoice keyChoice0 = new KeyChoice(simpleEntryInformation0, key0);
      Key key1 = keyChoice0.getSelectedItem();
      assertNotSame(key0, key1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      Key key0 = Key.CDS;
      KeyChoice keyChoice0 = new KeyChoice(simpleEntryInformation0, key0);
      keyChoice0.addItemListener((ItemListener) null);
      assertTrue(keyChoice0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      KeyChoice keyChoice0 = new KeyChoice(simpleEntryInformation0);
      keyChoice0.removeItemListener((ItemListener) null);
      assertFalse(keyChoice0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      KeyChoice keyChoice0 = new KeyChoice(simpleEntryInformation0);
      keyChoice0.setEnabled(false);
  }
}
