/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 03:51:09 GMT 2017
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureSegment;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.MSPcrunchStreamFeature;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.MarkerRange;
import uk.ac.sanger.artemis.sequence.SequenceChangeEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FeatureSegment_ESTest extends FeatureSegment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^>):YTxKEgLb9");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry("^>):YTxKEgLb9");
      Feature feature0 = entry0.createFeature();
      Feature feature1 = feature0.duplicate(true);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      // Undeclared exception!
      try { 
        feature1.getMaxRawRange();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // misc_feature internal error - unexpected OutOfRangeException for position: 1
         //
         verifyException("uk.ac.sanger.artemis.FeatureSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("title, ");
      Bases bases0 = new Bases(emblStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      Range range0 = new Range(20000);
      FeatureSegment featureSegment0 = null;
      try {
        featureSegment0 = new FeatureSegment(feature0, range0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // misc_feature internal error - unexpected OutOfRangeException for position: 20000
         //
         verifyException("uk.ac.sanger.artemis.FeatureSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QualifierVector qualifierVector0 = new QualifierVector();
      MSPcrunchStreamFeature mSPcrunchStreamFeature0 = new MSPcrunchStreamFeature((Key) null, (Location) null, qualifierVector0);
      Feature feature0 = new Feature(mSPcrunchStreamFeature0);
      FeatureSegment featureSegment0 = null;
      try {
        featureSegment0 = new FeatureSegment(feature0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^>):YTxKEgGLb9");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      Range range0 = feature0.getMaxRawRange();
      FeatureSegment featureSegment0 = new FeatureSegment(feature0, range0);
      boolean boolean0 = featureSegment0.isForwardSegment();
      assertTrue(boolean0);
      assertEquals(14, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^>):YTxKEgGLb9");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      Range range0 = feature0.getMaxRawRange();
      FeatureSegment featureSegment0 = new FeatureSegment(feature0, range0);
      featureSegment0.addMarkerChangeListener(feature0);
      assertEquals(14, range0.getCount());
      assertEquals(1, range0.getStart());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(" A; ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry(" A; ");
      Feature feature0 = entry0.createFeature();
      Marker marker0 = feature0.getFirstCodingBaseMarker();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Range range0 = markerRange0.getRange();
      FeatureSegment featureSegment0 = new FeatureSegment(feature0, range0);
      featureSegment0.getStart();
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^>):YTxKEgLb9");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      Range range0 = feature0.getMaxRawRange();
      FeatureSegment featureSegment0 = new FeatureSegment(feature0, range0);
      int int0 = featureSegment0.getFrameID();
      assertEquals(2, int0);
      assertEquals(13, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^>):YTxKEgGLb9");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      Range range0 = feature0.getMaxRawRange();
      FeatureSegment featureSegment0 = new FeatureSegment(feature0, range0);
      int int0 = featureSegment0.getFrameID();
      assertEquals(1, int0);
      assertEquals(14, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^>):YTxKEgGLb9");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      Range range0 = feature0.getMaxRawRange();
      FeatureSegment featureSegment0 = new FeatureSegment(feature0, range0);
      SequenceChangeEvent sequenceChangeEvent0 = new SequenceChangeEvent(bases0, 0, range0, (-5));
      featureSegment0.sequenceChanged(sequenceChangeEvent0);
      assertEquals(14, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^>):YTxKEgGLb9");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      Range range0 = feature0.getMaxRawRange();
      FeatureSegment featureSegment0 = new FeatureSegment(feature0, range0);
      featureSegment0.setRange(range0);
      assertEquals(14, range0.getCount());
      assertEquals(1, range0.getStart());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(131072);
      FeatureSegment featureSegment0 = null;
      try {
        featureSegment0 = new FeatureSegment((Feature) null, range0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FeatureSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(" A; ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry(" A; ");
      Feature feature0 = entry0.createFeature();
      Marker marker0 = feature0.getFirstCodingBaseMarker();
      MarkerRange markerRange0 = new MarkerRange(marker0);
      Range range0 = markerRange0.getRange();
      FeatureSegment featureSegment0 = new FeatureSegment(feature0, range0);
      // Undeclared exception!
      try { 
        featureSegment0.stopListening();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FeatureSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^>):YTxKEgLb9");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry("^>):YTxKEgLb9");
      Feature feature0 = entry0.createFeature();
      Range range0 = feature0.getMaxRawRange();
      FeatureSegment featureSegment0 = new FeatureSegment(feature0, range0);
      try { 
        featureSegment0.setEndPosition(1004);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 1004
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^>):YTxKEgGLb9");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      boolean boolean0 = feature0.trimStart(false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^>):YTxKEgLb9");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      Range range0 = feature0.getMaxRawRange();
      FeatureSegment featureSegment0 = new FeatureSegment(feature0, range0);
      try { 
        featureSegment0.setStartPosition(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // position: 0
         //
         verifyException("uk.ac.sanger.artemis.sequence.MarkerInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("^>):YTxKEgGLb9");
      Bases bases0 = new Bases(genbankStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      Feature feature0 = entry0.createFeature();
      Range range0 = feature0.getMaxRawRange();
      FeatureSegment featureSegment0 = new FeatureSegment(feature0, range0);
      featureSegment0.getRawRange();
  }
}
