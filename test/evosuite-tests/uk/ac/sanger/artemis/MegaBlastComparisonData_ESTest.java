/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:04:20 GMT 2017
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.MegaBlastComparisonData;
import uk.ac.sanger.artemis.SimpleComparisonData;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MegaBlastComparisonData_ESTest extends MegaBlastComparisonData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MegaBlastComparisonData megaBlastComparisonData0 = new MegaBlastComparisonData();
      // Undeclared exception!
      try { 
        megaBlastComparisonData0.makeMatchFromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        MegaBlastComparisonData.formatCorrect((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MegaBlastComparisonData megaBlastComparisonData0 = null;
      try {
        megaBlastComparisonData0 = new MegaBlastComparisonData((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.SimpleComparisonData", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.close();
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(charArrayReader0);
      MegaBlastComparisonData megaBlastComparisonData0 = null;
      try {
        megaBlastComparisonData0 = new MegaBlastComparisonData(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?s badly formatted in this line: ");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      MegaBlastComparisonData megaBlastComparisonData0 = null;
      try {
        megaBlastComparisonData0 = new MegaBlastComparisonData(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // while reading MegaBlast data: first field (?s) is badly formatted in this line:  ?s badly formatted in this line: 
         //
         verifyException("uk.ac.sanger.artemis.MegaBlastComparisonData", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(charArrayReader0);
      MegaBlastComparisonData megaBlastComparisonData0 = new MegaBlastComparisonData(linePushBackReader0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MegaBlastComparisonData megaBlastComparisonData0 = new MegaBlastComparisonData();
      SimpleComparisonData simpleComparisonData0 = megaBlastComparisonData0.getNewSimpleComparisonData();
      assertNotSame(megaBlastComparisonData0, simpleComparisonData0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      boolean boolean0 = MegaBlastComparisonData.formatCorrect("({~NGECTGth");
      assertFalse(boolean0);
  }
}
