/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 04:39:22 GMT 2017
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.FileNotFoundException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Options;
import uk.ac.sanger.artemis.components.LogReadListener;
import uk.ac.sanger.artemis.io.BlastDocumentEntry;
import uk.ac.sanger.artemis.io.BlastEntryInformation;
import uk.ac.sanger.artemis.io.EmblDocumentEntry;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.Entry;
import uk.ac.sanger.artemis.io.EntryInformation;
import uk.ac.sanger.artemis.io.Feature;
import uk.ac.sanger.artemis.io.GenbankDocumentEntry;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.MSPcrunchEntryInformation;
import uk.ac.sanger.artemis.io.PublicDBDocumentEntry;
import uk.ac.sanger.artemis.io.ReadListener;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.io.SimpleEntryInformation;
import uk.ac.sanger.artemis.io.StreamSequence;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.util.Document;
import uk.ac.sanger.artemis.util.FileDocument;
import uk.ac.sanger.artemis.util.TextDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PublicDBDocumentEntry_ESTest extends PublicDBDocumentEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Key key0 = new Key("");
      Key key1 = PublicDBDocumentEntry.mapKeys(key0);
      assertEquals(0, key1.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Key key0 = new Key((String) null, true);
      // Undeclared exception!
      try { 
        PublicDBDocumentEntry.mapKeys(key0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      uk.ac.sanger.artemis.Entry entry0 = uk.ac.sanger.artemis.Entry.newEntry(bases0);
      EntryInformation entryInformation0 = entry0.getEntryInformation();
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation(entryInformation0);
      PublicDBDocumentEntry publicDBDocumentEntry0 = new PublicDBDocumentEntry(simpleEntryInformation0, (Document) null, (ReadListener) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EntryInformation entryInformation0 = SimpleEntryInformation.getDefaultEntryInformation();
      MockFile mockFile0 = new MockFile("lD`i.", "lD`i.");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      LogReadListener logReadListener0 = new LogReadListener("TQIw~PR|e(a_~SI ");
      PublicDBDocumentEntry publicDBDocumentEntry0 = null;
      try {
        publicDBDocumentEntry0 = new PublicDBDocumentEntry(entryInformation0, fileDocument0, logReadListener0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MSPcrunchEntryInformation mSPcrunchEntryInformation0 = new MSPcrunchEntryInformation();
      TextDocument textDocument0 = new TextDocument();
      LogReadListener logReadListener0 = new LogReadListener((String) null);
      PublicDBDocumentEntry publicDBDocumentEntry0 = null;
      try {
        publicDBDocumentEntry0 = new PublicDBDocumentEntry(mSPcrunchEntryInformation0, textDocument0, logReadListener0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      PublicDBDocumentEntry publicDBDocumentEntry0 = null;
      try {
        publicDBDocumentEntry0 = new PublicDBDocumentEntry(blastEntryInformation0, (Entry) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleDocumentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PublicDBDocumentEntry publicDBDocumentEntry0 = null;
      try {
        publicDBDocumentEntry0 = new PublicDBDocumentEntry((EntryInformation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleEntryInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EntryInformation entryInformation0 = Options.getArtemisEntryInformation();
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(entryInformation0);
      // Undeclared exception!
      try { 
        emblDocumentEntry0.makeNativeSequence((Sequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.EmblStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      PublicDBDocumentEntry publicDBDocumentEntry0 = new PublicDBDocumentEntry(blastEntryInformation0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("(e");
      StreamSequence streamSequence0 = publicDBDocumentEntry0.makeNativeSequence(emblStreamSequence0);
      assertEquals(0, streamSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Key key0 = Key.CDS;
      Key key1 = PublicDBDocumentEntry.mapKeys(key0);
      Key key2 = PublicDBDocumentEntry.mapKeys(key1);
      assertSame(key2, key0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EntryInformation entryInformation0 = Options.getDBEntryInformation();
      PublicDBDocumentEntry publicDBDocumentEntry0 = new PublicDBDocumentEntry(entryInformation0);
      // Undeclared exception!
      try { 
        publicDBDocumentEntry0.makeNativeFeature((Feature) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PublicDBDocumentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      GenbankDocumentEntry genbankDocumentEntry0 = new GenbankDocumentEntry(blastEntryInformation0);
      // Undeclared exception!
      try { 
        genbankDocumentEntry0.makeNativeFeature((Feature) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PublicDBDocumentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      uk.ac.sanger.artemis.Entry entry0 = uk.ac.sanger.artemis.Entry.newEntry(bases0);
      EntryInformation entryInformation0 = entry0.getEntryInformation();
      PublicDBDocumentEntry publicDBDocumentEntry0 = null;
      try {
        publicDBDocumentEntry0 = new PublicDBDocumentEntry(entryInformation0, (Document) null, (ReadListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.SimpleDocumentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = PublicDBDocumentEntry.getDatabaseQualifiersToRemove();
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlastEntryInformation blastEntryInformation0 = new BlastEntryInformation();
      PublicDBDocumentEntry publicDBDocumentEntry0 = new PublicDBDocumentEntry(blastEntryInformation0);
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      Object object0 = publicDBDocumentEntry0.makeNativeFeature(genbankStreamFeature0, false);
      assertNotSame(object0, genbankStreamFeature0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EntryInformation entryInformation0 = SimpleEntryInformation.getDefaultEntryInformation();
      BlastDocumentEntry blastDocumentEntry0 = new BlastDocumentEntry(entryInformation0);
      PublicDBDocumentEntry publicDBDocumentEntry0 = new PublicDBDocumentEntry(entryInformation0, blastDocumentEntry0, false);
      assertFalse(publicDBDocumentEntry0.isReadOnly());
  }
}
