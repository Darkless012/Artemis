/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 04:31:53 GMT 2017
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.FuzzyRange;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.LocationParseNode;
import uk.ac.sanger.artemis.io.LowerInteger;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RangeVector;
import uk.ac.sanger.artemis.io.UpperInteger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Location_ESTest extends Location_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(4);
      LowerInteger lowerInteger0 = new LowerInteger(integer0);
      Range range0 = FuzzyRange.makeRange((Object) lowerInteger0);
      Location location0 = new Location(range0);
      boolean boolean0 = location0.isComplement(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-1136), (-1136));
      RangeVector rangeVector0 = new RangeVector(range0);
      rangeVector0.add(range0);
      Location location0 = new Location(rangeVector0, true);
      int int0 = location0.getLastBase();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(2, 2);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, false);
      Range range1 = new Range(2, 58);
      Location location1 = location0.changeRange(range1, range0);
      assertNotSame(location1, location0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(2);
      Location location0 = new Location(range0);
      String string0 = location0.toStringShort();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1334), 71);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, false);
      Location location1 = location0.reverseComplement(40, (-1334));
      Range range1 = location1.getTotalRange();
      assertEquals(2700, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(0, 0);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.reverseComplement(1, 1);
      Location location2 = location1.reverseComplement(1);
      int int0 = location2.getFirstBase();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0, 0);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.reverseComplement(1, 1);
      Location location2 = location1.getComplement();
      int int0 = location2.getFirstBase();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RangeVector rangeVector0 = new RangeVector((Range) null);
      Location location0 = new Location(rangeVector0, true);
      // Undeclared exception!
      try { 
        location0.truncate((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RangeVector rangeVector0 = new RangeVector((Range) null);
      Location location0 = new Location(rangeVector0, false);
      // Undeclared exception!
      try { 
        location0.reverseComplement((-1142), (-1142));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RangeVector rangeVector0 = new RangeVector((Range) null);
      Location location0 = new Location(rangeVector0, true);
      // Undeclared exception!
      try { 
        location0.getFirstBase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RangeVector rangeVector0 = new RangeVector((Range) null);
      Location location0 = new Location(rangeVector0, false);
      // Undeclared exception!
      try { 
        location0.getComplement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RangeVector rangeVector0 = new RangeVector((Range) null);
      Location location0 = new Location(rangeVector0, false);
      Range range0 = new Range(1626, 2528);
      // Undeclared exception!
      try { 
        location0.changeRange(range0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(2, 2);
      RangeVector rangeVector0 = new RangeVector((Range) null);
      Location location0 = new Location(rangeVector0, true);
      // Undeclared exception!
      try { 
        location0.addRange(range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location((RangeVector) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationLexer$TokenEnumeration", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(2);
      Location location0 = new Location(range0);
      Location location1 = location0.addRange(range0);
      Location location2 = location1.getComplement();
      RangeVector rangeVector0 = location2.getRanges();
      assertEquals("[]", rangeVector0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0, 0);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.reverseComplement(1, 1);
      RangeVector rangeVector1 = location1.getRanges();
      assertEquals("[2]", rangeVector1.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(2, 2);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.addRange(range0);
      RangeVector rangeVector1 = location1.getRanges();
      assertFalse(rangeVector1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(21);
      Location location0 = new Location(range0);
      RangeVector rangeVector0 = location0.getRanges();
      assertEquals("[21]", rangeVector0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(21);
      Location location0 = new Location(range0);
      int int0 = location0.getLastBase();
      assertEquals(21, int0);
      
      Range range1 = location0.getTotalRange();
      assertEquals(21, range1.getStart());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range((-1108), (-1108));
      RangeVector rangeVector0 = new RangeVector();
      rangeVector0.add(range0);
      Location location0 = new Location(rangeVector0, false);
      boolean boolean0 = location0.isComplement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range(2147483645);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      boolean boolean0 = location0.isComplement();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(2147483645);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      String string0 = location0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(2147483645);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      LocationParseNode locationParseNode0 = location0.getParsedLocation();
      assertEquals(1, locationParseNode0.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range((-1136), (-1136));
      RangeVector rangeVector0 = new RangeVector(range0);
      rangeVector0.add(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.getComplement();
      Location location2 = location1.addRange(range0);
      boolean boolean0 = location2.isComplement(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range(2);
      Location location0 = new Location(range0);
      Location location1 = location0.addRange(range0);
      boolean boolean0 = location1.isComplement(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-1136), (-1136));
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      boolean boolean0 = location0.isComplement(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(2, 2);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.addRange(range0);
      boolean boolean0 = location1.isComplement((Range) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location("order");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Parse error at this point: : expected(
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location("complement(join(");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Parse error at this point: : expected a range or a functional
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location("0P7SH");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Parse error at this point: java.lang.Integer@0000000004java.lang.String@0000000005: range bounds must be greater than 0
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location("Vl :l");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Parse error at this point: : parse error after reading \"l\"
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location("LCh`,q8BYR1w q");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Parse error at this point: java.lang.String@0000000004java.lang.Character@0000000005java.lang.String@0000000006java.lang.String@0000000007: parse error after reading \"LCh\"
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location("complement(");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Parse error at this point: : expected a range or a functional
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location("4A{9ABqC]nmD>-nG");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Parse error at this point: java.lang.String@0000000006java.lang.String@0000000007java.lang.Integer@0000000008java.lang.String@0000000009java.lang.String@0000000010java.lang.String@0000000011java.lang.Character@0000000012java.lang.String@0000000013java.lang.String@0000000014: garbage at the end of the location string
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-1136), (-1136));
      RangeVector rangeVector0 = new RangeVector(range0);
      rangeVector0.add(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.getComplement();
      int int0 = location1.getFirstBase();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(21);
      Location location0 = new Location(range0);
      Location location1 = location0.reverseComplement(21);
      Location location2 = location1.addRange(range0);
      Range range1 = location2.getTotalRange();
      assertEquals(21, range1.getCount());
      assertEquals(21, range1.getEnd());
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(21);
      Location location0 = new Location(range0);
      Location location1 = location0.addRange(range0);
      Range range1 = location1.getTotalRange();
      assertNotNull(range1);
      assertEquals(21, range1.getStart());
      assertEquals(21, range1.getEnd());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range((-1334), 71);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, false);
      int int0 = location0.getLastBase();
      assertEquals(71, int0);
      
      int int1 = location0.getFirstBase();
      assertEquals((-1334), int1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(21);
      Location location0 = new Location(range0);
      Location location1 = location0.addRange(range0);
      boolean boolean0 = location1.isComplement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-1136), (-1136));
      RangeVector rangeVector0 = new RangeVector(range0);
      rangeVector0.add(range0);
      Location location0 = new Location(rangeVector0, true);
      boolean boolean0 = location0.isComplement();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(4);
      LowerInteger lowerInteger0 = new LowerInteger(integer0);
      Range range0 = FuzzyRange.makeRange((Object) lowerInteger0);
      Location location0 = new Location(range0);
      boolean boolean0 = location0.isPartial(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-1136), (-1136));
      RangeVector rangeVector0 = new RangeVector(range0);
      rangeVector0.add(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.getComplement();
      Location location2 = location1.addRange(range0);
      boolean boolean0 = location2.isPartial(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(21);
      Location location0 = new Location(range0);
      Location location1 = location0.addRange(range0);
      boolean boolean0 = location1.isPartial(true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(2147483645);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      boolean boolean0 = location0.isPartial(true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-1136), (-1136));
      RangeVector rangeVector0 = new RangeVector(range0);
      boolean boolean0 = rangeVector0.add(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.getComplement();
      boolean boolean1 = location1.isPartial(false);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(2147483645);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.reverseComplement(2147483645, 2147483645);
      Location location2 = location1.addRange(range0);
      location2.toStringShort();
      assertNotSame(location1, location0);
      assertNotSame(location0, location1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-1064));
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.truncate(range0);
      Location location2 = location1.truncate(range0);
      assertNull(location2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range((-1136), (-1136));
      RangeVector rangeVector0 = new RangeVector(range0);
      rangeVector0.add(range0);
      Location location0 = new Location(rangeVector0, true);
      String string0 = location0.toStringShort();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(4);
      LowerInteger lowerInteger0 = new LowerInteger(integer0);
      Range range0 = FuzzyRange.makeRange((Object) lowerInteger0);
      Location location0 = new Location(range0);
      Location location1 = location0.truncate(range0);
      assertNotNull(location1);
      
      boolean boolean0 = location1.equals(location0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RangeVector rangeVector0 = new RangeVector();
      Location location0 = null;
      try {
        location0 = new Location(rangeVector0, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - ranges.size () == 0
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UpperInteger upperInteger0 = new UpperInteger((-1718979589));
      Range range0 = FuzzyRange.makeRange((Object) upperInteger0, (Object) null);
      Location location0 = null;
      try {
        location0 = new Location(range0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // location out of range: uk.ac.sanger.artemis.io.UpperInteger@0000000001
         //
         verifyException("uk.ac.sanger.artemis.io.Location", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Location location0 = new Location("9");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = new Range(2147483645);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      location0.setParsedLocation((LocationParseNode) null);
      LocationParseNode locationParseNode0 = location0.getParsedLocation();
      assertNull(locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = new Range(2147483645);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.copy();
      assertNotSame(location0, location1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = new Integer(4);
      LowerInteger lowerInteger0 = new LowerInteger(integer0);
      Range range0 = FuzzyRange.makeRange((Object) lowerInteger0);
      Location location0 = new Location(range0);
      boolean boolean0 = location0.equals(location0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = new Range(2, 2);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      Location location1 = location0.addRange(range0);
      assertNotSame(location1, location0);
      
      Location location2 = location1.removeRange(range0);
      location2.toStringShort();
      assertNotSame(location2, location1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = new Range(2, 2);
      RangeVector rangeVector0 = new RangeVector(range0);
      Location location0 = new Location(rangeVector0, true);
      // Undeclared exception!
      try { 
        location0.removeRange(range0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - inconsistent location
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }
}
