/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 04:34:45 GMT 2017
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.LocationParseNode;
import uk.ac.sanger.artemis.io.LocationParseNodeVector;
import uk.ac.sanger.artemis.io.Range;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocationParseNode_ESTest extends LocationParseNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(3);
      assertNotNull(range0);
      assertEquals(3, range0.getEnd());
      assertEquals(3, range0.getStart());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(3, range0.getEnd());
      assertEquals(3, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.getNodeComplement();
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(3, range0.getEnd());
      assertEquals(3, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      // Undeclared exception!
      try { 
        locationParseNode1.setRange(range0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getRange() - node is not a RANGE 1
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-1));
      assertNotNull(range0);
      assertEquals((-1), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals((-1), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.reverseComplement(0, 0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals((-1), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      // Undeclared exception!
      try { 
        locationParseNode1.getOrderChildren();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getOrderChildren() - node is not an ORDER
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-1));
      assertNotNull(range0);
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getStart());
      assertEquals((-1), range0.getEnd());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getStart());
      assertEquals((-1), range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.reverseComplement((-1), (-1));
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getStart());
      assertEquals((-1), range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      // Undeclared exception!
      try { 
        locationParseNode1.getJoinChildren();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getJoinChildren() - node is not a JOIN
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-3101));
      assertNotNull(range0);
      assertEquals((-3101), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals((-3101), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.getNodeComplement();
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals((-3101), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      // Undeclared exception!
      try { 
        locationParseNode1.getChildren();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getChildren() - node is not a JOIN or ORDER
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range(1978);
      assertNotNull(range0);
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(2, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertSame(locationParseNode2, locationParseNode1);
      
      LocationParseNode locationParseNode3 = locationParseNode2.getCanonical();
      assertNotNull(locationParseNode3);
      assertFalse(locationParseNode0.equals((Object)locationParseNode2));
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertFalse(locationParseNode3.equals((Object)locationParseNode0));
      assertFalse(locationParseNode3.equals((Object)locationParseNode1));
      assertFalse(locationParseNode3.equals((Object)locationParseNode2));
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(2, locationParseNode2.getType());
      assertEquals(2, locationParseNode3.getType());
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode0, locationParseNode3);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode1, locationParseNode3);
      assertSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode3);
      assertSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode3, locationParseNode0);
      assertNotSame(locationParseNode3, locationParseNode1);
      assertNotSame(locationParseNode3, locationParseNode2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-3101));
      assertNotNull(range0);
      assertEquals((-3101), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getEnd());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals((-3101), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.getNodeComplement();
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals((-3101), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.reverseComplement(847, 1879);
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals((-3101), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertEquals(4, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode2, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-301));
      assertNotNull(range0);
      assertEquals(1, range0.getCount());
      assertEquals((-301), range0.getEnd());
      assertEquals((-301), range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1, range0.getCount());
      assertEquals((-301), range0.getEnd());
      assertEquals((-301), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.reverseComplement((-301), (-301));
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1, range0.getCount());
      assertEquals((-301), range0.getEnd());
      assertEquals((-301), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals(1, range0.getCount());
      assertEquals((-301), range0.getEnd());
      assertEquals((-301), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertEquals(2, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode2, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      
      Range range1 = range0.copy();
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range1.getCount());
      assertEquals(1978, range1.getStart());
      assertEquals(1978, range1.getEnd());
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertFalse(range0.equals((Object)range1));
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      boolean boolean0 = locationParseNode0.changeRange(range0, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range1.getCount());
      assertEquals(1978, range1.getStart());
      assertEquals(1978, range1.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertTrue(boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(1, 1);
      assertNotNull(range0);
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getEnd());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      locationParseNode0.setRange(range0);
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(1, 2109);
      assertNotNull(range0);
      assertEquals(2109, range0.getEnd());
      assertEquals(2109, range0.getCount());
      assertEquals(1, range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(2109, range0.getEnd());
      assertEquals(2109, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = new LocationParseNode("internal error - unknown location node type: ", locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(2109, range0.getEnd());
      assertEquals(2109, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(5, locationParseNode1.getType());
      
      LocationParseNode locationParseNode2 = locationParseNode1.copy();
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals(2109, range0.getEnd());
      assertEquals(2109, range0.getCount());
      assertEquals(1, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(5, locationParseNode1.getType());
      assertEquals(5, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode2, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(1, 1);
      assertNotNull(range0);
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      Range range1 = locationParseNode0.getRange();
      assertNotNull(range1);
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getEnd());
      assertSame(range0, range1);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0, 0);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(0, range0.getEnd());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(0, range0.getStart());
      assertEquals(0, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      Range range1 = locationParseNode0.getRange();
      assertNotNull(range1);
      assertEquals(0, range0.getStart());
      assertEquals(0, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, range1.getCount());
      assertEquals(0, range1.getEnd());
      assertEquals(0, range1.getStart());
      assertSame(range0, range1);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1));
      assertNotNull(range0);
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getEnd());
      assertEquals((-1), range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getEnd());
      assertEquals((-1), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      Range range1 = locationParseNode0.getRange();
      assertNotNull(range1);
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getEnd());
      assertEquals((-1), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, range1.getCount());
      assertEquals((-1), range1.getStart());
      assertEquals((-1), range1.getEnd());
      assertSame(range0, range1);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range((-3176));
      assertNotNull(range0);
      assertEquals(1, range0.getCount());
      assertEquals((-3176), range0.getEnd());
      assertEquals((-3176), range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1, range0.getCount());
      assertEquals((-3176), range0.getEnd());
      assertEquals((-3176), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = new LocationParseNode("", locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1, range0.getCount());
      assertEquals((-3176), range0.getEnd());
      assertEquals((-3176), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(5, locationParseNode1.getType());
      
      LocationParseNode locationParseNode2 = locationParseNode1.getEntryRangeChild();
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertEquals(1, range0.getCount());
      assertEquals((-3176), range0.getEnd());
      assertEquals((-3176), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(5, locationParseNode1.getType());
      assertEquals(4, locationParseNode2.getType());
      assertSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertSame(locationParseNode2, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode((Range) null);
      assertNotNull(locationParseNode0);
      assertEquals(4, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.reverseComplement(1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode(1, (LocationParseNode) null);
      assertNotNull(locationParseNode0);
      assertEquals(1, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.isValid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode("", (LocationParseNode) null);
      assertNotNull(locationParseNode0);
      assertEquals(5, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode(1, (LocationParseNode) null);
      assertNotNull(locationParseNode0);
      assertEquals(1, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.addRangeNode((LocationParseNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(1, 1);
      assertNotNull(range0);
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getEnd());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = new LocationParseNode("wfm6q[\"A", locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(5, locationParseNode1.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode1.getRange();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getRange() - node is not a RANGE 5
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode((Range) null);
      assertNotNull(locationParseNode0);
      assertEquals(4, locationParseNode0.getType());
      
      Range range0 = locationParseNode0.getRange();
      assertNull(range0);
      assertEquals(4, locationParseNode0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode("uk.ac.sanger.artemis.io.LocationParseNodeVector", (LocationParseNode) null);
      assertNotNull(locationParseNode0);
      assertEquals(5, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.getEntryRangeChild();
      assertNull(locationParseNode1);
      assertEquals(5, locationParseNode0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNodeVector locationParseNodeVector0 = locationParseNode1.getChildren();
      assertNotNull(locationParseNodeVector0);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(2, locationParseNodeVector0.size());
      assertFalse(locationParseNodeVector0.isEmpty());
      assertEquals(10, locationParseNodeVector0.capacity());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-3101));
      assertNotNull(range0);
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getEnd());
      assertEquals((-3101), range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getEnd());
      assertEquals((-3101), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.getNodeComplement();
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getEnd());
      assertEquals((-3101), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.getComplementChild();
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getEnd());
      assertEquals((-3101), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertEquals(4, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.getNodeComplement();
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(1, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode2, locationParseNode0);
      
      boolean boolean0 = locationParseNode2.changeRange((Range) null, range0);
      assertFalse(locationParseNode0.equals((Object)locationParseNode2));
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode1.equals((Object)locationParseNode2));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(1, locationParseNode2.getType());
      assertFalse(boolean0);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode2, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode((Range) null);
      assertNotNull(locationParseNode0);
      assertEquals(4, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocationParseNodeVector locationParseNodeVector0 = new LocationParseNodeVector();
      assertNotNull(locationParseNodeVector0);
      assertEquals("[]", locationParseNodeVector0.toString());
      assertTrue(locationParseNodeVector0.isEmpty());
      assertEquals(0, locationParseNodeVector0.size());
      assertEquals(10, locationParseNodeVector0.capacity());
      
      Range range0 = new Range(2, 2);
      assertNotNull(range0);
      assertEquals(2, range0.getStart());
      assertEquals(2, range0.getEnd());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(2, range0.getStart());
      assertEquals(2, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      boolean boolean0 = locationParseNodeVector0.add(locationParseNode0);
      assertFalse(locationParseNodeVector0.isEmpty());
      assertEquals(10, locationParseNodeVector0.capacity());
      assertEquals(1, locationParseNodeVector0.size());
      assertEquals(2, range0.getStart());
      assertEquals(2, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertTrue(boolean0);
      
      LocationParseNode locationParseNode1 = new LocationParseNode(2, locationParseNodeVector0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNodeVector0.isEmpty());
      assertEquals(10, locationParseNodeVector0.capacity());
      assertEquals(1, locationParseNodeVector0.size());
      assertEquals(2, locationParseNode1.getType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocationParseNode locationParseNode0 = null;
      try {
        locationParseNode0 = new LocationParseNode(2, (LocationParseNodeVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-1));
      assertNotNull(range0);
      assertEquals((-1), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals((-1), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      int int0 = locationParseNode0.getType();
      assertEquals((-1), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode(1, (LocationParseNode) null);
      assertNotNull(locationParseNode0);
      assertEquals(1, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.getNodeComplement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(1, 2109);
      assertNotNull(range0);
      assertEquals(2109, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(2109, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(2109, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(2109, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = new LocationParseNode("internal error - unknown location node type: ", locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(2109, range0.getEnd());
      assertEquals(1, range0.getStart());
      assertEquals(2109, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(5, locationParseNode1.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode1.setRange(range0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getRange() - node is not a RANGE 5
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-3176));
      assertNotNull(range0);
      assertEquals((-3176), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals((-3176), range0.getEnd());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals((-3176), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals((-3176), range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.copyClean();
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals((-3176), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals((-3176), range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(4, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-3101));
      assertNotNull(range0);
      assertEquals((-3101), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals((-3101), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.reverseComplement(1, (-3101));
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals((-3101), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.getCanonical();
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals((-3101), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals((-3101), range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertEquals(1, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode2, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(1);
      assertNotNull(range0);
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.getNodeComplement();
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1, range0.getStart());
      assertEquals(1, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      // Undeclared exception!
      try { 
        locationParseNode0.addRangeNode(locationParseNode1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getRange() - node is not a RANGE 1
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.getEntryRangeChild();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getEntryRangeChild() - node is not an ENTRY_RANGE
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode("$1IWt", (LocationParseNode) null);
      assertNotNull(locationParseNode0);
      assertEquals(5, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.getCanonical();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range((-1));
      assertNotNull(range0);
      assertEquals((-1), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getEnd());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals((-1), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.getOrderChildren();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getOrderChildren() - node is not an ORDER
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode("uk.ac.sanger.artemis.util.OutOfRangeException", (LocationParseNode) null);
      assertNotNull(locationParseNode0);
      assertEquals(5, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.getJoinChildren();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getJoinChildren() - node is not a JOIN
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNodeVector locationParseNodeVector0 = locationParseNode1.getJoinChildren();
      assertNotNull(locationParseNodeVector0);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(10, locationParseNodeVector0.capacity());
      assertEquals(2, locationParseNodeVector0.size());
      assertFalse(locationParseNodeVector0.isEmpty());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode("uk.ac.sanger.artemis.io.LocationParseNodeVector", (LocationParseNode) null);
      assertNotNull(locationParseNode0);
      assertEquals(5, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.getChildren();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getChildren() - node is not a JOIN or ORDER
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(1978, 1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.getComplementChild();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // in LocationParseNode.getComplementChild() - node is not a COMPLEMENT
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.getNodeComplement();
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(1, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode1);
      
      LocationParseNode locationParseNode3 = locationParseNode2.getCanonical();
      assertNotNull(locationParseNode3);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode0.equals((Object)locationParseNode2));
      assertFalse(locationParseNode1.equals((Object)locationParseNode2));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertFalse(locationParseNode3.equals((Object)locationParseNode0));
      assertFalse(locationParseNode3.equals((Object)locationParseNode1));
      assertFalse(locationParseNode3.equals((Object)locationParseNode2));
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(1, locationParseNode2.getType());
      assertEquals(2, locationParseNode3.getType());
      assertNotSame(locationParseNode0, locationParseNode3);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode3);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode3);
      assertNotSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode3, locationParseNode0);
      assertNotSame(locationParseNode3, locationParseNode1);
      assertNotSame(locationParseNode3, locationParseNode2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(1978, 1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.getCanonical();
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(4, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(1978, 1978);
      assertNotNull(range0);
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(1978, range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.getNodeComplement();
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(1, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode1);
      
      LocationParseNode locationParseNode3 = locationParseNode2.reverseComplement((-1340), 4);
      assertNotNull(locationParseNode3);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode0.equals((Object)locationParseNode2));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode1.equals((Object)locationParseNode2));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertFalse(locationParseNode3.equals((Object)locationParseNode1));
      assertFalse(locationParseNode3.equals((Object)locationParseNode2));
      assertFalse(locationParseNode3.equals((Object)locationParseNode0));
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(1, locationParseNode2.getType());
      assertEquals(2, locationParseNode3.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode0, locationParseNode3);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode1, locationParseNode3);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode3);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode3, locationParseNode1);
      assertNotSame(locationParseNode3, locationParseNode2);
      assertNotSame(locationParseNode3, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode("uk.ac.sanger.artemis.util.OutOfRangeException", (LocationParseNode) null);
      assertNotNull(locationParseNode0);
      assertEquals(5, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.reverseComplement(3221, 3221);
      assertNotNull(locationParseNode1);
      assertEquals(5, locationParseNode0.getType());
      assertEquals(5, locationParseNode1.getType());
      assertSame(locationParseNode0, locationParseNode1);
      assertSame(locationParseNode1, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(1978, 1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.reverseComplement(5, 4);
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(2, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertSame(locationParseNode2, locationParseNode1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode("LocationParseNode constructor was called with the wrong type", (LocationParseNode) null);
      assertNotNull(locationParseNode0);
      assertEquals(5, locationParseNode0.getType());
      
      Range range0 = new Range(2314);
      assertNotNull(range0);
      assertEquals(2314, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(2314, range0.getStart());
      
      LocationParseNode locationParseNode1 = locationParseNode0.removeRange(range0);
      assertNotNull(locationParseNode1);
      assertEquals(5, locationParseNode0.getType());
      assertEquals(2314, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(2314, range0.getStart());
      assertEquals(5, locationParseNode1.getType());
      assertSame(locationParseNode0, locationParseNode1);
      assertSame(locationParseNode1, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-1));
      assertNotNull(range0);
      assertEquals((-1), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getEnd());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals((-1), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals((-1), range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode0.removeRange(range0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - inconsistent location
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-303), 1);
      assertNotNull(range0);
      assertEquals((-303), range0.getStart());
      assertEquals(305, range0.getCount());
      assertEquals(1, range0.getEnd());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals((-303), range0.getStart());
      assertEquals(305, range0.getCount());
      assertEquals(1, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = new LocationParseNode(1, locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals((-303), range0.getStart());
      assertEquals(305, range0.getCount());
      assertEquals(1, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      
      // Undeclared exception!
      try { 
        locationParseNode1.removeRange(range0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - inconsistent location
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(2, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode2, locationParseNode0);
      
      LocationParseNode locationParseNode3 = locationParseNode2.removeRange(range0);
      assertNotNull(locationParseNode3);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode0.equals((Object)locationParseNode2));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertFalse(locationParseNode3.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(2, locationParseNode2.getType());
      assertEquals(2, locationParseNode3.getType());
      assertNotSame(locationParseNode0, locationParseNode3);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertSame(locationParseNode1, locationParseNode3);
      assertSame(locationParseNode2, locationParseNode1);
      assertSame(locationParseNode2, locationParseNode3);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertNotSame(locationParseNode3, locationParseNode0);
      assertSame(locationParseNode3, locationParseNode2);
      assertSame(locationParseNode3, locationParseNode1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(1978, 1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(2, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertSame(locationParseNode1, locationParseNode2);
      assertSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode2, locationParseNode0);
      
      LocationParseNode locationParseNode3 = locationParseNode2.removeRange((Range) null);
      assertNotNull(locationParseNode3);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode0.equals((Object)locationParseNode2));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertFalse(locationParseNode3.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1978, range0.getEnd());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(2, locationParseNode2.getType());
      assertEquals(2, locationParseNode3.getType());
      assertNotSame(locationParseNode0, locationParseNode3);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertSame(locationParseNode1, locationParseNode2);
      assertSame(locationParseNode1, locationParseNode3);
      assertSame(locationParseNode2, locationParseNode1);
      assertSame(locationParseNode2, locationParseNode3);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertSame(locationParseNode3, locationParseNode2);
      assertNotSame(locationParseNode3, locationParseNode0);
      assertSame(locationParseNode3, locationParseNode1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range(4000, 4000);
      assertNotNull(range0);
      assertEquals(4000, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4000, range0.getStart());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(4000, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4000, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = new LocationParseNode("", locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(4000, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4000, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(5, locationParseNode1.getType());
      
      LocationParseNode locationParseNode2 = locationParseNode1.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals(4000, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4000, range0.getStart());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(5, locationParseNode1.getType());
      assertEquals(5, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode2, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(1978, 1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getEnd());
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getEnd());
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      Range range1 = range0.truncate(range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1978, range0.getEnd());
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getEnd());
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      LocationParseNode locationParseNode1 = new LocationParseNode(range1);
      assertNotNull(locationParseNode1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getEnd());
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getEnd());
      assertEquals(4, locationParseNode1.getType());
      
      LocationParseNode locationParseNode2 = locationParseNode0.addRangeNode(locationParseNode1);
      assertNotNull(locationParseNode2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getEnd());
      assertEquals(1978, range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getCount());
      assertEquals(1, range1.getEnd());
      assertEquals(4, locationParseNode1.getType());
      assertEquals(2, locationParseNode2.getType());
      assertNotSame(range0, range1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(range1, range0);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode2, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range((-301));
      assertNotNull(range0);
      assertEquals((-301), range0.getStart());
      assertEquals((-301), range0.getEnd());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals((-301), range0.getStart());
      assertEquals((-301), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.reverseComplement(0, 1);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals((-301), range0.getStart());
      assertEquals((-301), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertEquals((-301), range0.getStart());
      assertEquals((-301), range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(1, locationParseNode1.getType());
      assertEquals(2, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = new Range(1978, 1978);
      assertNotNull(range0);
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
      
      LocationParseNode locationParseNode2 = locationParseNode1.getNodeComplement();
      assertNotNull(locationParseNode2);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(1, locationParseNode2.getType());
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode1);
      
      LocationParseNode locationParseNode3 = locationParseNode2.addRangeNode(locationParseNode0);
      assertNotNull(locationParseNode3);
      assertFalse(locationParseNode0.equals((Object)locationParseNode2));
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode2));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode0));
      assertFalse(locationParseNode2.equals((Object)locationParseNode1));
      assertFalse(locationParseNode3.equals((Object)locationParseNode1));
      assertFalse(locationParseNode3.equals((Object)locationParseNode2));
      assertFalse(locationParseNode3.equals((Object)locationParseNode0));
      assertEquals(1978, range0.getStart());
      assertEquals(1978, range0.getEnd());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(2, locationParseNode1.getType());
      assertEquals(1, locationParseNode2.getType());
      assertEquals(2, locationParseNode3.getType());
      assertNotSame(locationParseNode0, locationParseNode2);
      assertNotSame(locationParseNode0, locationParseNode3);
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode2);
      assertNotSame(locationParseNode1, locationParseNode3);
      assertNotSame(locationParseNode1, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode0);
      assertNotSame(locationParseNode2, locationParseNode1);
      assertNotSame(locationParseNode2, locationParseNode3);
      assertNotSame(locationParseNode3, locationParseNode1);
      assertNotSame(locationParseNode3, locationParseNode2);
      assertNotSame(locationParseNode3, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode("", (LocationParseNode) null);
      assertNotNull(locationParseNode0);
      assertEquals(5, locationParseNode0.getType());
      
      Range range0 = new Range(0, 2145);
      assertNotNull(range0);
      assertEquals(0, range0.getStart());
      assertEquals(2145, range0.getEnd());
      assertEquals(2146, range0.getCount());
      
      // Undeclared exception!
      try { 
        locationParseNode0.changeRange(range0, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = new Range((-3176));
      assertNotNull(range0);
      assertEquals((-3176), range0.getEnd());
      assertEquals((-3176), range0.getStart());
      assertEquals(1, range0.getCount());
      
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertNotNull(locationParseNode0);
      assertEquals((-3176), range0.getEnd());
      assertEquals((-3176), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = new LocationParseNode("", locationParseNode0);
      assertNotNull(locationParseNode1);
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals((-3176), range0.getEnd());
      assertEquals((-3176), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(5, locationParseNode1.getType());
      
      String string0 = locationParseNode1.toString();
      assertNotNull(string0);
      assertFalse(locationParseNode0.equals((Object)locationParseNode1));
      assertFalse(locationParseNode1.equals((Object)locationParseNode0));
      assertEquals((-3176), range0.getEnd());
      assertEquals((-3176), range0.getStart());
      assertEquals(1, range0.getCount());
      assertEquals(4, locationParseNode0.getType());
      assertEquals(5, locationParseNode1.getType());
      assertNotSame(locationParseNode0, locationParseNode1);
      assertNotSame(locationParseNode1, locationParseNode0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = new Range(1978);
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      locationParseNode1.toString();
      assertEquals(2, locationParseNode1.getType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = new Range(1978);
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      LocationParseNode locationParseNode1 = locationParseNode0.getNodeComplement();
      locationParseNode1.toString();
      assertEquals(1, locationParseNode1.getType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode((Range) null);
      LocationParseNode locationParseNode1 = null;
      try {
        locationParseNode1 = new LocationParseNode(3633, locationParseNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // LocationParseNode constructor was called with the wrong type
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocationParseNodeVector locationParseNodeVector0 = new LocationParseNodeVector();
      LocationParseNode locationParseNode0 = null;
      try {
        locationParseNode0 = new LocationParseNode(3, locationParseNodeVector0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // A functional must have at least one argument
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocationParseNodeVector locationParseNodeVector0 = new LocationParseNodeVector();
      LocationParseNode locationParseNode0 = null;
      try {
        locationParseNode0 = new LocationParseNode(1904, locationParseNodeVector0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // LocationParseNode constructor was called with the wrong type
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LocationParseNode locationParseNode0 = new LocationParseNode("dLuV`.!-:J}uE7zrEr", (LocationParseNode) null);
      // Undeclared exception!
      try { 
        locationParseNode0.copyClean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.LocationParseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = new Range(1978, 1978);
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.addRangeNode(locationParseNode0);
      boolean boolean0 = locationParseNode1.changeRange(range0, range0);
      assertTrue(boolean0);
      assertEquals(2, locationParseNode1.getType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = new Range(1978, 1978);
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      assertEquals(4, locationParseNode0.getType());
      
      LocationParseNode locationParseNode1 = locationParseNode0.getNodeComplement();
      assertEquals(1, locationParseNode1.getType());
      
      LocationParseNode locationParseNode2 = locationParseNode1.addRangeNode(locationParseNode0);
      assertEquals(2, locationParseNode2.getType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = new Range(1978, 1978);
      LocationParseNode locationParseNode0 = new LocationParseNode(range0);
      boolean boolean0 = locationParseNode0.isValid();
      assertTrue(boolean0);
      assertEquals(4, locationParseNode0.getType());
  }
}
