/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 03:58:23 GMT 2017
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.BlastStreamFeature;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.Feature;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlastStreamFeature_ESTest extends BlastStreamFeature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Key key0 = new Key("Q9)sGS");
      Range range0 = new Range(3601);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(key0, location0, qualifierVector0);
      // Undeclared exception!
      try { 
        blastStreamFeature0.writeToStream((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.BlastStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        BlastStreamFeature.readFromStream((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.BlastStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 6);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, 12);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(lineNumberReader0);
      try { 
        BlastStreamFeature.readFromStream(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BlastStreamFeature blastStreamFeature0 = null;
      try {
        blastStreamFeature0 = new BlastStreamFeature((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.BlastStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(charArrayReader0);
      BlastStreamFeature blastStreamFeature0 = BlastStreamFeature.readFromStream(linePushBackReader0);
      assertNull(blastStreamFeature0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(inputStreamReader0);
      try { 
        BlastStreamFeature.readFromStream(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // invalid Blast line (not enough fields): \u0000\u0000
         //
         verifyException("uk.ac.sanger.artemis.io.BlastStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Key key0 = new Key("Q9)sGS");
      Range range0 = new Range(3601);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(key0, location0, qualifierVector0);
      Feature feature0 = blastStreamFeature0.copy();
      assertNotSame(blastStreamFeature0, feature0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature(genbankStreamFeature0);
      BlastStreamFeature blastStreamFeature0 = new BlastStreamFeature(emblStreamFeature0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("quA3vr-C*S^p");
      blastStreamFeature0.writeToStream(mockPrintWriter0);
  }
}
