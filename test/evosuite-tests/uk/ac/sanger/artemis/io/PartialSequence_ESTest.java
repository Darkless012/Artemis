/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 04:38:42 GMT 2017
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.PartialSequence;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PartialSequence_ESTest extends PartialSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[4];
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-802), (-802), (Short) null, integer0);
      partialSequence0.setFromChar(charArray0);
      assertEquals((-802), partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)702);
      Integer integer0 = new Integer((-744));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, (-1138), short0, integer0);
      int int0 = partialSequence0.length();
      assertEquals(0, int0);
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short)313);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1), (-1), short0, (Integer) null);
      int int0 = partialSequence0.length();
      assertEquals((-1), int0);
      assertEquals(0, partialSequence0.getTCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[5];
      Short short0 = new Short((short)1);
      Integer integer0 = new Integer(1);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1, 1, short0, integer0);
      String string0 = partialSequence0.getSubSequence((short)1, 1);
      assertEquals("\u0000", string0);
      assertEquals(1, partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[0];
      Integer integer0 = new Integer((-2056));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-56), (-2056), (Short) null, integer0);
      partialSequence0.getStrand();
      assertEquals((-56), partialSequence0.length());
      assertEquals(0, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1745, 1745, short0, integer0);
      partialSequence0.getStrand();
      assertEquals(1745, partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short) (-15));
      Integer integer0 = new Integer(3782);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-2965), (-2965), short0, integer0);
      partialSequence0.getStrand();
      assertEquals((-2965), partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      partialSequence0.clear();
      partialSequence0.getSequence();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[0];
      Integer integer0 = new Integer((-2056));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-56), (-2056), (Short) null, integer0);
      partialSequence0.getSequence();
      assertEquals((-56), partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[5];
      Short short0 = new Short((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 99, 99, short0, (Integer) null);
      partialSequence0.getPhase();
      assertEquals(0, partialSequence0.getACount());
      assertEquals(99, partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short)890);
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1095), 0, short0, integer0);
      partialSequence0.getPhase();
      assertEquals((-1095), partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short) (-15));
      Integer integer0 = new Integer(3782);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-2965), (-2965), short0, integer0);
      partialSequence0.getPhase();
      assertEquals(2, partialSequence0.getOtherCount());
      assertEquals((-2965), partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short)7);
      Integer integer0 = new Integer((-149));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1035, 99, short0, integer0);
      int int0 = partialSequence0.getOtherCount();
      assertEquals(0, int0);
      assertEquals(1035, partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short)1781);
      Integer integer0 = new Integer(116);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-3133), (-3133), short0, integer0);
      char[] charArray1 = partialSequence0.getCharSubSequence((-3133), (-3133));
      assertEquals((-3133), partialSequence0.length());
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(399);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-292), (-292), short0, integer0);
      char char0 = partialSequence0.charAt((short)0);
      assertEquals('2', char0);
      assertEquals((-292), partialSequence0.length());
      assertEquals(7, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'Z';
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-2754), (-2754), short0, integer0);
      char char0 = partialSequence0.charAt(1);
      assertEquals('Z', char0);
      assertEquals((-2754), partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[6];
      Integer integer0 = new Integer(1232);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-698), (-2519), (Short) null, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.isComplement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Short short0 = new Short((short)2950);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 42, 42, short0, (Integer) null);
      // Undeclared exception!
      try { 
        partialSequence0.getSubSequence(71, 71);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short)1);
      Integer integer0 = new Integer((-1692));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 512, (-1692), short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getSubSequence(1890, (-170));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(1126);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1524), 1126, short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getSubSequence((-1490), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2616
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Short short0 = new Short((short) (-1004));
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, (-807), (-807), short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getOtherCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short) (-15));
      Integer integer0 = new Integer(3782);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-2965), (-2965), short0, integer0);
      partialSequence0.clear();
      // Undeclared exception!
      try { 
        partialSequence0.getCharSubSequence((short) (-15), 1081);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 3016, short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getCharSubSequence(43, (-2473));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Short short0 = new Short((short) (-576));
      Integer integer0 = new Integer(4594);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 4594, 4594, short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.charAt(4594);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[6];
      Short short0 = new Short((short) (-1604));
      Integer integer0 = Integer.getInteger("d", 0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.charAt((short) (-1604));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1604
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(1043);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 97, 1426, short0, integer0);
      boolean boolean0 = partialSequence0.isComplement();
      assertTrue(boolean0);
      assertEquals(97, partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short) (-15));
      Integer integer0 = new Integer(3782);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-2965), (-2965), short0, integer0);
      boolean boolean0 = partialSequence0.isComplement();
      assertFalse(boolean0);
      assertEquals((-2965), partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 3016, short0, integer0);
      char[] charArray1 = partialSequence0.getCharSubSequence(0, (-1));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, partialSequence0.getOtherCount());
      assertFalse(partialSequence0.isComplement());
      assertEquals(0, partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)1818);
      Integer integer0 = new Integer(99);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 99, 99, short0, integer0);
      int int0 = partialSequence0.length();
      assertEquals(99, int0);
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short) (-15));
      Integer integer0 = new Integer(3782);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-2965), (-2965), short0, integer0);
      int int0 = partialSequence0.getGCount();
      assertEquals((-2965), partialSequence0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Short short0 = new Short((short) (-576));
      Integer integer0 = new Integer(2740);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 4594, 4594, short0, integer0);
      int int0 = partialSequence0.getTCount();
      assertEquals(0, int0);
      assertEquals(4594, partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[0];
      Integer integer0 = new Integer((-2056));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-56), (-2056), (Short) null, integer0);
      int int0 = partialSequence0.getACount();
      assertEquals((-56), partialSequence0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[0];
      Integer integer0 = new Integer((-2056));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-56), (-2056), (Short) null, integer0);
      int int0 = partialSequence0.getCCount();
      assertEquals((-56), partialSequence0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Short short0 = new Short((short) (-576));
      Integer integer0 = new Integer(2740);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 4594, 4594, short0, integer0);
      char[] charArray0 = new char[8];
      charArray0[3] = 't';
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      Short short0 = new Short((short)3);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 242, '\u0000', short0, (Integer) null);
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[2] = 'c';
      Short short0 = new Short((short) (-3001));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 132, 132, short0, (Integer) null);
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Short short0 = new Short((short) (-576));
      Integer integer0 = new Integer(2740);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 4594, 4594, short0, integer0);
      char[] charArray0 = new char[8];
      charArray0[7] = 'a';
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Short short0 = new Short((short)100);
      Integer integer0 = new Integer((short)100);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 35, 35, short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 0, 0, short0, (Integer) null);
      char[] charArray0 = partialSequence0.getCharSubSequence(0, (short) (-1));
      assertTrue(partialSequence0.isComplement());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[1];
      Integer integer0 = new Integer((-2492));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-2492), (-2492), (Short) null, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getCharSubSequence((-2492), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[5];
      Short short0 = new Short((short)4118);
      Integer integer0 = new Integer((-3470));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1), (-1), short0, integer0);
      partialSequence0.getStrand();
      assertEquals(0, partialSequence0.getACount());
      assertEquals((-1), partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[5];
      Short short0 = new Short((short)4118);
      Integer integer0 = new Integer((-3470));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1), (-1), short0, integer0);
      partialSequence0.getSequence();
      assertEquals(0, partialSequence0.getACount());
      assertEquals((-1), partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1, 1, short0, integer0);
      String string0 = partialSequence0.getSubSequence(1, 0);
      assertEquals("", string0);
      assertEquals(3, partialSequence0.getOtherCount());
      assertEquals(1, partialSequence0.length());
      assertFalse(partialSequence0.isComplement());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[5];
      Short short0 = new Short((short)4118);
      Integer integer0 = new Integer((-3470));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1), (-1), short0, integer0);
      partialSequence0.getPhase();
      assertEquals((-1), partialSequence0.length());
      assertEquals(0, partialSequence0.getGCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[7];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(399);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-292), (-292), short0, integer0);
      partialSequence0.charAt((short)0);
      assertEquals((-292), partialSequence0.length());
      assertEquals(7, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1, 1, short0, integer0);
      int int0 = partialSequence0.getOtherCount();
      assertEquals(3, int0);
      assertEquals(1, partialSequence0.length());
  }
}
