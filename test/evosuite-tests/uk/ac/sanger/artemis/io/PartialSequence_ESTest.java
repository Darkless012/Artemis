/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 15:16:15 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.PartialSequence;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PartialSequence_ESTest extends PartialSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short) (-2805));
      Integer integer0 = Integer.getInteger("", 1);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      boolean boolean0 = partialSequence0.isComplement();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((-3247));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1684), (-1684), short0, integer0);
      partialSequence0.setFromChar(charArray0);
      assertEquals((-1684), partialSequence0.length());
      assertEquals(2, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[7];
      Short short0 = new Short((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 3100, 0, short0, (Integer) null);
      // Undeclared exception!
      try { 
        partialSequence0.getSubSequence(0, 3100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[21];
      Short short0 = Short.valueOf((short)1086);
      Integer integer0 = new Integer(4159);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1, 1, short0, integer0);
      partialSequence0.setFromChar(charArray0);
      assertEquals(1, partialSequence0.length());
      assertEquals(0, partialSequence0.getTCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1885, 1885, short0, integer0);
      int int0 = partialSequence0.length();
      assertEquals(1885, int0);
      assertEquals(2, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)99);
      Integer integer0 = Integer.valueOf((int) (short)99);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-3448), (-3448), short0, integer0);
      int int0 = partialSequence0.length();
      assertEquals((-3448), int0);
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)0);
      Integer integer0 = Integer.valueOf((-268));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      String string0 = partialSequence0.getSubSequence(1, 0);
      assertFalse(partialSequence0.isComplement());
      assertEquals(0, partialSequence0.length());
      assertEquals("", string0);
      assertEquals(0, partialSequence0.getGCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[3];
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, (Short) null, integer0);
      partialSequence0.getStrand();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1885, 1885, short0, integer0);
      partialSequence0.getStrand();
      assertEquals(1885, partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short) (-2672));
      Integer integer0 = new Integer((short) (-2672));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      partialSequence0.getStrand();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getGCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      partialSequence0.getSequence();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getGCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(1196);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1196, 1196, short0, integer0);
      partialSequence0.getSequence();
      assertEquals(1196, partialSequence0.length());
      assertEquals(0, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[6];
      Short short0 = new Short((short) (-1429));
      Integer integer0 = new Integer((short) (-1429));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1, 1, short0, integer0);
      partialSequence0.getPhase();
      assertEquals(1, partialSequence0.length());
      assertEquals(6, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      partialSequence0.getPhase();
      assertEquals(0, partialSequence0.length());
      assertEquals(3, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)99);
      Integer integer0 = Integer.valueOf((int) (short)99);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-3448), (-3448), short0, integer0);
      partialSequence0.getPhase();
      assertEquals((-3448), partialSequence0.length());
      assertEquals(3, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[7];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(1940);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1), 1940, short0, integer0);
      partialSequence0.getPhase();
      assertEquals(0, partialSequence0.getCCount());
      assertEquals((-1), partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short)97);
      Integer integer0 = new Integer(88);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-4171), (-4171), short0, integer0);
      int int0 = partialSequence0.getOtherCount();
      assertEquals(0, int0);
      assertEquals((-4171), partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1169, 1169, short0, integer0);
      partialSequence0.charAt(0);
      assertEquals(1169, partialSequence0.length());
      assertEquals(4, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '7';
      Short short0 = new Short((short) (-1));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-4019), (-2595), short0, (Integer) null);
      char char0 = partialSequence0.charAt(1);
      assertEquals((-4019), partialSequence0.length());
      assertEquals('7', char0);
      assertEquals(0, partialSequence0.getGCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      char char0 = partialSequence0.charAt(0);
      assertEquals(0, partialSequence0.length());
      assertEquals('G', char0);
      assertEquals(0, partialSequence0.getGCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Short short0 = new Short((short)1808);
      Integer integer0 = Integer.getInteger("", (int) (short)1808);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 958, 958, short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[3];
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, (Short) null, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.isComplement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short) (-4385));
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-2724), (-2724), short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getSubSequence(1, (-2724));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[0];
      Integer integer0 = new Integer(2797);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 2797, 2797, (Short) null, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getSubSequence(796, 2797);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2001
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 0, 0, short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getOtherCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[21];
      Short short0 = Short.valueOf((short)1086);
      Integer integer0 = new Integer(4159);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1, 1, short0, integer0);
      partialSequence0.clear();
      // Undeclared exception!
      try { 
        partialSequence0.getCharSubSequence(998, (short)1086);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short)0);
      Integer integer0 = Integer.getInteger("", 1);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1581, 1581, short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getCharSubSequence(1581, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)99);
      Integer integer0 = Integer.valueOf((int) (short)99);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-3448), (-3448), short0, integer0);
      partialSequence0.clear();
      // Undeclared exception!
      try { 
        partialSequence0.charAt((-2103));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short) (-1));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 3966, 497, short0, (Integer) null);
      boolean boolean0 = partialSequence0.isComplement();
      assertTrue(boolean0);
      assertEquals(3966, partialSequence0.length());
      assertEquals(4, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[5];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer((short) (-1));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      char[] charArray1 = partialSequence0.getCharSubSequence(0, 0);
      assertArrayEquals(new char[] {'@'}, charArray1);
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1, 3200, short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getCharSubSequence((short) (-1), 3200);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3201
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      int int0 = partialSequence0.length();
      assertEquals(0, int0);
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)0);
      Integer integer0 = Integer.valueOf((-268));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      int int0 = partialSequence0.getGCount();
      assertEquals(0, int0);
      assertEquals(0, partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[0];
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1, 1, (Short) null, (Integer) null);
      int int0 = partialSequence0.getTCount();
      assertEquals(1, partialSequence0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      int int0 = partialSequence0.getACount();
      assertEquals(0, int0);
      assertEquals(0, partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1885, 1885, short0, integer0);
      int int0 = partialSequence0.getCCount();
      assertEquals(0, int0);
      assertEquals(1885, partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 'y', 'y', short0, (Integer) null);
      char[] charArray1 = new char[9];
      charArray1[1] = 't';
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar(charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)99);
      Integer integer0 = new Integer(5750);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 'M', 'M', short0, integer0);
      char[] charArray1 = new char[5];
      charArray1[3] = 'g';
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar(charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'a';
      Short short0 = Short.valueOf((short)99);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 117, 'a', short0, (Integer) null);
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      String string0 = partialSequence0.getSubSequence(0, 0);
      assertEquals(0, partialSequence0.length());
      assertEquals("@", string0);
      assertEquals(0, partialSequence0.getGCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[8];
      Short short0 = new Short((short)103);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, (-1308), short0, (Integer) null);
      char[] charArray1 = partialSequence0.getCharSubSequence(0, (-1));
      assertEquals(0, partialSequence0.length());
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, partialSequence0.getCCount());
      assertFalse(partialSequence0.isComplement());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Short short0 = Short.valueOf((short)97);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 1838, (-1), short0, (Integer) null);
      partialSequence0.getStrand();
      assertEquals(1838, partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Short short0 = new Short((short) (-1425));
      Integer integer0 = new Integer((-335));
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 0, 0, short0, integer0);
      partialSequence0.getSequence();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Short short0 = Short.valueOf((short)1);
      Integer integer0 = new Integer(2016);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, (-969), 2016, short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getSubSequence((-969), 2016);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[0];
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1, 1, (Short) null, (Integer) null);
      partialSequence0.getPhase();
      assertEquals(1, partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[0];
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1, 1, (Short) null, (Integer) null);
      // Undeclared exception!
      try { 
        partialSequence0.charAt((-592));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -592
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 'y', 'y', short0, (Integer) null);
      int int0 = partialSequence0.getOtherCount();
      assertEquals(4, int0);
      assertEquals(121, partialSequence0.length());
  }
}
