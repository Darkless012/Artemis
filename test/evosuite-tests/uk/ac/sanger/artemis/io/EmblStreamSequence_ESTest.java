/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 04:09:02 GMT 2017
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import org.biojava.bio.symbol.SymbolList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.BioJavaSequence;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.io.StreamSequence;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmblStreamSequence_ESTest extends EmblStreamSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("%yjHaH}d|5=$^Vv8/");
      StringReader stringReader0 = new StringReader("3(qx9^(Q%u}Z");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      emblStreamSequence0.readHeader(linePushBackReader0);
      assertEquals("3(qx9^(Q%u}Z", emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("/etc/feature_keys_gff");
      StreamSequence streamSequence0 = emblStreamSequence0.copy();
      assertEquals(1, streamSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("*k`VUlEc4ef7");
      StreamSequence streamSequence0 = emblStreamSequence0.copy();
      assertEquals(11, streamSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("%yjHaH}d|5=$^Vv8/");
      StreamSequence streamSequence0 = emblStreamSequence0.copy();
      assertEquals(17, streamSequence0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("6_]%,W$>:~;L~e$z");
      // Undeclared exception!
      try { 
        emblStreamSequence0.writeToStream((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.EmblStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("<br>");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        emblStreamSequence0.writeToStream(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(";current=false");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(mockFileReader0);
      // Undeclared exception!
      try { 
        emblStreamSequence0.readSequence(linePushBackReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(charArrayReader0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      charArrayReader0.close();
      try { 
        emblStreamSequence0.readSequence(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("XX");
      // Undeclared exception!
      try { 
        emblStreamSequence0.readHeader((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.EmblStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("Sj1");
      PipedReader pipedReader0 = new PipedReader(55);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(lineNumberReader0);
      try { 
        emblStreamSequence0.readHeader(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = null;
      try {
        emblStreamSequence0 = new EmblStreamSequence((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.EmblStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SQ   Sequence ");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      linePushBackReader0.close();
      EmblStreamSequence emblStreamSequence0 = null;
      try {
        emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = null;
      try {
        emblStreamSequence0 = new EmblStreamSequence((Sequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.EmblStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SymbolList symbolList0 = SymbolList.EMPTY_LIST;
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence(symbolList0);
      EmblStreamSequence emblStreamSequence0 = null;
      try {
        emblStreamSequence0 = new EmblStreamSequence(bioJavaSequence0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.io.BioJavaSequence cannot be cast to uk.ac.sanger.artemis.io.StreamSequence
         //
         verifyException("uk.ac.sanger.artemis.io.EmblStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = null;
      try {
        emblStreamSequence0 = new EmblStreamSequence((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.EmblStreamSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("Sj1");
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(rawStreamSequence0);
      assertEquals(0, emblStreamSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("%yjHaH}d|5=$^Vv8/");
      String string0 = emblStreamSequence0.getHeader();
      assertNull(string0);
      assertEquals(16, emblStreamSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("%yjHaH}d|5=$^Vv8/");
      emblStreamSequence0.setHeader("3(qx9^(Q%u}Z");
      String string0 = emblStreamSequence0.getHeader();
      assertEquals("3(qx9^(Q%u}Z", string0);
      assertEquals(1, emblStreamSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SQ   Sequence S{R.ptS");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      assertEquals("SQ   Sequence S{R.ptS", emblStreamSequence0.getHeader());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("%yjHaH}d|5=$^Vv8/");
      MockFile mockFile0 = new MockFile("Ph^3", "3(qx9^(Q%u}Z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      emblStreamSequence0.writeToStream(mockPrintWriter0);
      assertEquals(16, emblStreamSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(charArrayReader0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      StringWriter stringWriter0 = new StringWriter(10);
      emblStreamSequence0.writeToStream(stringWriter0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000SQ   Sequence 0 BP; 0 A; 0 C; 0 G; 0 T; 0 other;\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(charArrayReader0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      charArrayReader0.reset();
      emblStreamSequence0.readSequence(linePushBackReader0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", emblStreamSequence0.getHeader());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(charArrayReader0);
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(linePushBackReader0);
      StreamSequence streamSequence0 = emblStreamSequence0.copy();
      StringWriter stringWriter0 = new StringWriter(10);
      streamSequence0.writeToStream(stringWriter0);
      assertEquals("SQ   Sequence 0 BP; 0 A; 0 C; 0 G; 0 T; 0 other;\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("Sj1");
      int int0 = emblStreamSequence0.getFormatType();
      assertEquals(3, emblStreamSequence0.length());
      assertEquals(1, int0);
  }
}
