/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 04:27:20 GMT 2017
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.EmblDocumentEntry;
import uk.ac.sanger.artemis.io.Entry;
import uk.ac.sanger.artemis.io.IndexFastaStream;
import uk.ac.sanger.artemis.io.SimpleEntryInformation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IndexFastaStream_ESTest extends IndexFastaStream_ESTest_scaffolding {
	
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(simpleEntryInformation0);
      emblDocumentEntry0.setName("Use index");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(CURRENT_DIR + "/Use index.fai");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      boolean boolean0 = IndexFastaStream.isIndexed(emblDocumentEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(simpleEntryInformation0);
      emblDocumentEntry0.setName("Use index");
      boolean boolean0 = IndexFastaStream.isIndexed(emblDocumentEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(simpleEntryInformation0);
      boolean boolean0 = IndexFastaStream.isIndexed(emblDocumentEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      boolean boolean0 = IndexFastaStream.isIndexed((Entry) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(simpleEntryInformation0);
      emblDocumentEntry0.setName("Use index");
      IndexFastaStream indexFastaStream0 = null;
      try {
        indexFastaStream0 = new IndexFastaStream(emblDocumentEntry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
        
         verifyException("net.sf.picard.io.IoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleEntryInformation simpleEntryInformation0 = new SimpleEntryInformation();
      EmblDocumentEntry emblDocumentEntry0 = new EmblDocumentEntry(simpleEntryInformation0);
      IndexFastaStream indexFastaStream0 = null;
      try {
        indexFastaStream0 = new IndexFastaStream(emblDocumentEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.IndexFastaStream", e);
      }
  }
}
