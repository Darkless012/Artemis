/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 04:25:06 GMT 2017
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.PipedReader;
import java.sql.Timestamp;
import java.util.Hashtable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.ChadoCanonicalGene;
import uk.ac.sanger.artemis.io.DatabaseInferredFeature;
import uk.ac.sanger.artemis.io.DatabaseStreamFeature;
import uk.ac.sanger.artemis.io.EmblStreamFeature;
import uk.ac.sanger.artemis.io.Feature;
import uk.ac.sanger.artemis.io.GFF3AttributeBuilder;
import uk.ac.sanger.artemis.io.GFFStreamFeature;
import uk.ac.sanger.artemis.io.GenbankStreamFeature;
import uk.ac.sanger.artemis.io.Key;
import uk.ac.sanger.artemis.io.Location;
import uk.ac.sanger.artemis.io.QualifierVector;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GFFStreamFeature_ESTest extends GFFStreamFeature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        GFFStreamFeature.readFromStream((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(10);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(pipedReader0);
      try { 
        GFFStreamFeature.readFromStream(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      // Undeclared exception!
      try { 
        databaseStreamFeature0.getAutoNumber((String) null, 'o');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GFFStreamFeature gFFStreamFeature0 = null;
      try {
        gFFStreamFeature0 = new GFFStreamFeature((Feature) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GFFStreamFeature gFFStreamFeature0 = null;
      try {
        gFFStreamFeature0 = new GFFStreamFeature((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GFFStreamFeature gFFStreamFeature0 = null;
      try {
        gFFStreamFeature0 = new GFFStreamFeature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Key key0 = new Key("");
      QualifierVector qualifierVector0 = new QualifierVector();
      GFFStreamFeature gFFStreamFeature0 = null;
      try {
        gFFStreamFeature0 = new GFFStreamFeature(key0, (Location) null, qualifierVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(emblStreamFeature0);
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertTrue(gFFStreamFeature0.isVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      databaseStreamFeature0.setChadoGene((ChadoCanonicalGene) null);
      assertFalse(databaseStreamFeature0.isReadOnly());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertTrue(databaseStreamFeature0.isVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      String string0 = databaseStreamFeature0.getGffSeqName();
      assertNull(string0);
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertFalse(databaseStreamFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      boolean boolean0 = GFFStreamFeature.isGTF(genbankStreamFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmblStreamFeature emblStreamFeature0 = new EmblStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(emblStreamFeature0);
      // Undeclared exception!
      try { 
        databaseStreamFeature0.setLastModified((Timestamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(charArrayReader0);
      try { 
        GFFStreamFeature.readFromStream(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // invalid GFF line: 8 fields needed (got 1 fields) from: \u0000
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GFFStreamFeature gFFStreamFeature0 = null;
      try {
        gFFStreamFeature0 = new GFFStreamFeature("H59>.qDtBp^dR*RS)");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // invalid GFF line: 8 fields needed (got 1 fields) from: H59>.qDtBp^dR*RS)
         //
         verifyException("uk.ac.sanger.artemis.io.GFFStreamFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GFFStreamFeature.removeAttribute("");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      org.gmod.schema.sequence.Feature feature0 = new org.gmod.schema.sequence.Feature();
      databaseStreamFeature0.setChadoLazyFeature(feature0);
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      Hashtable<String, Range> hashtable0 = new Hashtable<String, Range>();
      databaseStreamFeature0.setSegmentRangeStore(hashtable0);
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      databaseStreamFeature0.getChadoGene();
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertFalse(databaseStreamFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      databaseStreamFeature0.setVisible(true);
      assertFalse(databaseStreamFeature0.isLazyLoaded());
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(databaseStreamFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(genbankStreamFeature0, false);
      gFFStreamFeature0.getNewIdMapToOldId();
      assertFalse(gFFStreamFeature0.isLazyLoaded());
      assertTrue(gFFStreamFeature0.isVisible());
      assertFalse(gFFStreamFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      boolean boolean0 = databaseStreamFeature0.isLazyLoaded();
      assertTrue(databaseStreamFeature0.isVisible());
      assertFalse(boolean0);
      assertFalse(databaseStreamFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(genbankStreamFeature0, false);
      gFFStreamFeature0.setReadOnlyFeature(false);
      assertTrue(gFFStreamFeature0.isVisible());
      assertFalse(gFFStreamFeature0.isReadOnly());
      assertFalse(gFFStreamFeature0.isLazyLoaded());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GFFStreamFeature.includeAttribute("h0GwBv)#]Hu!(b/O");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      DatabaseStreamFeature databaseStreamFeature0 = new DatabaseStreamFeature(genbankStreamFeature0);
      DatabaseStreamFeature databaseStreamFeature1 = (DatabaseStreamFeature)databaseStreamFeature0.copy();
      assertFalse(databaseStreamFeature1.isReadOnly());
      assertFalse(databaseStreamFeature1.isLazyLoaded());
      assertTrue(databaseStreamFeature1.isVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Key key0 = new Key("", false);
      Range range0 = new Range(81);
      Location location0 = new Location(range0);
      QualifierVector qualifierVector0 = new QualifierVector();
      ChadoCanonicalGene chadoCanonicalGene0 = new ChadoCanonicalGene();
      DatabaseInferredFeature databaseInferredFeature0 = new DatabaseInferredFeature(key0, location0, qualifierVector0, chadoCanonicalGene0);
      databaseInferredFeature0.setGffSeqName("U%Ck(.Lh");
      assertTrue(databaseInferredFeature0.isVisible());
      assertFalse(databaseInferredFeature0.isLazyLoaded());
      assertEquals("U%Ck(.Lh", databaseInferredFeature0.getGffSeqName());
      assertFalse(databaseInferredFeature0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GenbankStreamFeature genbankStreamFeature0 = new GenbankStreamFeature();
      GFFStreamFeature gFFStreamFeature0 = new GFFStreamFeature(genbankStreamFeature0, false);
      GFF3AttributeBuilder gFF3AttributeBuilder0 = new GFF3AttributeBuilder();
      gFFStreamFeature0.prepareProcessors(gFF3AttributeBuilder0);
  }
}
