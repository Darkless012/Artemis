/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 04:45:21 GMT 2017
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.Range;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(0);
      boolean boolean0 = range0.fuzzyOverlaps(range0, 0);
      assertTrue(boolean0);
      assertEquals(0, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(0, 440);
      Range range1 = range0.change(0, 0);
      boolean boolean0 = range1.equals(range0);
      assertEquals(441, range0.getCount());
      assertEquals(1, range1.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(0);
      Range range1 = range0.truncate(range0);
      boolean boolean0 = range1.equals(range0);
      assertEquals(0, range0.getStart());
      assertEquals(1, range1.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0, 440);
      Range range1 = range0.truncate(range0);
      assertEquals(441, range1.getCount());
      assertEquals(441, range0.getCount());
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-680));
      Range range1 = range0.change((-680), 785);
      Range range2 = range0.truncate(range1);
      assertEquals(1, range2.getCount());
      assertEquals((-680), range0.getEnd());
      assertEquals(1466, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-680));
      Range range1 = range0.change((-680), 785);
      Range range2 = range1.truncate(range0);
      assertEquals(1466, range1.getCount());
      assertEquals((-680), range0.getStart());
      assertEquals(1, range2.getCount());
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0);
      int int0 = range0.getStart();
      assertEquals(0, range0.getEnd());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(1369, 1369);
      int int0 = range0.getStart();
      assertEquals(1, range0.getCount());
      assertEquals(1369, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0);
      int int0 = range0.getEnd();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(1369, 1369);
      int int0 = range0.getEnd();
      assertEquals(1, range0.getCount());
      assertEquals(1369, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(0);
      Range range1 = range0.copy();
      assertEquals(0, range0.getStart());
      assertEquals(1, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range((-645));
      Range range1 = range0.copy();
      assertEquals(1, range1.getCount());
      assertEquals((-645), range0.getStart());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1));
      Range range1 = range0.change(1215, 1215);
      assertEquals(1, range1.getCount());
      assertEquals((-1), range0.getStart());
      assertEquals(1, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range((-680));
      Range range1 = range0.change((-680), (-680));
      assertEquals(1, range0.getCount());
      assertEquals((-680), range0.getStart());
      assertEquals(1, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range((-4199), (-4199));
      // Undeclared exception!
      try { 
        range0.truncate((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-1), 0);
      // Undeclared exception!
      try { 
        range0.overlaps((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-1));
      // Undeclared exception!
      try { 
        range0.fuzzyOverlaps((Range) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(1, 1);
      // Undeclared exception!
      try { 
        range0.contains((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(0, 0);
      Range range1 = new Range((-645));
      boolean boolean0 = range0.overlaps(range1);
      assertFalse(boolean0);
      assertEquals(1, range0.getCount());
      assertEquals((-645), range1.getStart());
      assertEquals(1, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range((-2642), (-2135));
      Range range1 = new Range((-2135));
      boolean boolean0 = range0.overlaps(range1);
      assertEquals((-2135), range1.getEnd());
      assertTrue(boolean0);
      assertEquals(508, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(0);
      boolean boolean0 = range0.overlaps(range0);
      assertTrue(boolean0);
      assertEquals(0, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(0, (-325));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // start: 0 > end: -325
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-4199), (-4199));
      int int0 = range0.getStart();
      assertEquals(1, range0.getCount());
      assertEquals((-4199), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range((-4199), (-4199));
      int int0 = range0.getEnd();
      assertEquals(1, range0.getCount());
      assertEquals((-4199), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(1, 1);
      int int0 = range0.getCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range((-680));
      Range range1 = range0.change((-680), 785);
      boolean boolean0 = range1.fuzzyOverlaps(range0, (-680));
      assertEquals(1, range0.getCount());
      assertEquals((-680), range0.getEnd());
      assertEquals(1466, range1.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range(0, 0);
      Range range1 = new Range((-645));
      boolean boolean0 = range1.fuzzyOverlaps(range0, 0);
      assertFalse(boolean0);
      assertEquals(1, range0.getCount());
      assertEquals((-645), range1.getEnd());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-606), 0);
      Range range1 = new Range(0);
      boolean boolean0 = range0.fuzzyOverlaps(range1, 0);
      assertTrue(boolean0);
      assertEquals(607, range0.getCount());
      assertEquals(0, range1.getEnd());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(1556);
      boolean boolean0 = range0.fuzzyOverlaps(range0, 1379);
      assertTrue(boolean0);
      assertEquals(1, range0.getCount());
      assertEquals(1556, range0.getStart());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(0, 0);
      Range range1 = range0.truncate(range0);
      boolean boolean0 = range0.overlaps(range1);
      assertEquals(1, range0.getCount());
      assertEquals(1, range1.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(1556);
      Range range1 = new Range((-1), 1723);
      boolean boolean0 = range1.contains(range0);
      assertEquals(1556, range0.getEnd());
      assertTrue(boolean0);
      assertEquals(1725, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-2203), (-1));
      Range range1 = new Range((-2203), (-2203));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals(2203, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range((-1));
      Range range1 = new Range(0, 0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(1, range1.getCount());
      assertEquals(1, range0.getCount());
      assertFalse(boolean0);
      assertEquals((-1), range0.getStart());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-2203), (-1));
      boolean boolean0 = range0.equals(range0);
      assertEquals(2203, range0.getCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(0);
      boolean boolean0 = range0.equals((Range) null);
      assertFalse(boolean0);
      assertEquals(0, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(1556);
      Range range1 = new Range((-1), 1723);
      Range range2 = range1.truncate(range0);
      assertNotNull(range2);
      assertEquals(1556, range0.getEnd());
      assertEquals(1, range2.getCount());
      assertEquals(1, range0.getCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-1), 0);
      Range range1 = new Range(3599);
      range0.truncate(range1);
      assertEquals(2, range0.getCount());
      assertEquals(3599, range1.getStart());
      assertEquals(1, range1.getCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(0);
      Range range1 = range0.truncate(range0);
      assertNotNull(range1);
      
      range1.truncate(range0);
      assertEquals(0, range0.getEnd());
      assertEquals(1, range1.getStart());
      assertEquals(1, range1.getCount());
      assertEquals(0, range0.getStart());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(1556);
      Range range1 = new Range(1556, 1723);
      boolean boolean0 = range0.contains(range1);
      assertEquals(1556, range0.getStart());
      assertEquals(168, range1.getCount());
      assertEquals(1556, range0.getEnd());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(1556);
      Range range1 = new Range((-1), 1723);
      boolean boolean0 = range0.contains(range1);
      assertEquals(1556, range0.getStart());
      assertFalse(boolean0);
      assertEquals(1725, range1.getCount());
      assertEquals(1556, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(1556);
      boolean boolean0 = range0.contains(range0);
      assertEquals(1556, range0.getStart());
      assertTrue(boolean0);
      assertEquals(1556, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(0);
      Range range1 = range0.truncate(range0);
      assertNotNull(range1);
      
      boolean boolean0 = range1.contains(range0);
      assertEquals(1, range1.getCount());
      assertEquals(1, range0.getCount());
      assertFalse(boolean0);
      assertEquals(0, range0.getStart());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(0);
      Range range1 = range0.change(0, 1);
      String string0 = range1.toString();
      assertEquals(0, range0.getEnd());
      assertEquals("0..1", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(1556);
      String string0 = range0.toString();
      assertEquals("1556", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range((-680));
      try { 
        range0.change((-1), (-1848));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // start: -1 > end: -1848
         //
         verifyException("uk.ac.sanger.artemis.io.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(1556);
      Range range1 = range0.copy();
      assertEquals(1556, range0.getEnd());
      assertEquals(1, range1.getCount());
      assertEquals(1556, range0.getStart());
  }
}
