/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 04:06:27 GMT 2017
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.PipedReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.EmblMisc;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmblMisc_ESTest extends EmblMisc_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EmblMisc emblMisc0 = null;
      try {
        emblMisc0 = new EmblMisc((LinePushBackReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.MiscLineGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(536870912);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(pipedReader0);
      EmblMisc emblMisc0 = null;
      try {
        emblMisc0 = new EmblMisc(linePushBackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(charArrayReader0);
      EmblMisc emblMisc0 = new EmblMisc(linePushBackReader0);
      assertEquals("\u0000\u0000\u0000\u0000", emblMisc0.getLine());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EmblMisc emblMisc0 = new EmblMisc("LocationInfo");
      assertEquals("LocationInfo", emblMisc0.getLine());
  }
}
