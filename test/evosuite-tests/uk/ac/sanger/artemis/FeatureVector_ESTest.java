/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 03:50:17 GMT 2017
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.Clipboard;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FeatureVector_ESTest extends FeatureVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      featureVector0.insertElementAt((Feature) null, 0);
      featureVector0.removeElementAt(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("?-[{NlK}q|qms");
      Bases bases0 = new Bases(fastaStreamSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry("insertFeatureLoc");
      Feature feature0 = entry0.createFeature();
      featureVector0.addElementAtEnd(feature0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      featureVector0.insertElementAfter((Feature) null, (Feature) null);
      int int0 = featureVector0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      featureVector0.insertElementAfter((Feature) null, (Feature) null);
      boolean boolean0 = featureVector0.remove((Feature) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      // Undeclared exception!
      try { 
        featureVector0.removeElementAt((-315));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      // Undeclared exception!
      try { 
        featureVector0.insertElementAt((Feature) null, 146);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 146, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      FeatureVector featureVector0 = selection0.getSelectedFeatures();
      // Undeclared exception!
      try { 
        featureVector0.elementAt(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("9;[Y@(W^5");
      Selection selection0 = new Selection(clipboard0);
      FeatureVector featureVector0 = selection0.getAllFeatures();
      // Undeclared exception!
      try { 
        featureVector0.contains((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.FeatureVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      // Undeclared exception!
      try { 
        featureVector0.addElementAtEnd((Feature) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      featureVector0.insertElementAfter((Feature) null, (Feature) null);
      Feature feature0 = featureVector0.lastElement();
      assertNull(feature0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      // Undeclared exception!
      try { 
        featureVector0.lastElement();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("3H8w?&UNH7+2;)V");
      Selection selection0 = new Selection(clipboard0);
      FeatureVector featureVector0 = selection0.getSelectedFeatures();
      // Undeclared exception!
      try { 
        featureVector0.elementAt((-238));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      featureVector0.insertElementAt((Feature) null, 0);
      int int0 = featureVector0.indexOf((Feature) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      int int0 = featureVector0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      org.biojava.bio.seq.Feature.ByLocationComparator feature_ByLocationComparator0 = org.biojava.bio.seq.Feature.byLocationOrder;
      FeatureVector featureVector1 = featureVector0.sort(feature_ByLocationComparator0);
      assertNotSame(featureVector1, featureVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("3H8w?&UNH7+2;)V");
      Selection selection0 = new Selection(clipboard0);
      FeatureVector featureVector0 = selection0.getSelectedFeatures();
      featureVector0.removeAllElements();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      int int0 = featureVector0.indexOf((Feature) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      Object object0 = featureVector0.clone();
      assertNotSame(object0, featureVector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      boolean boolean0 = featureVector0.remove((Feature) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      // Undeclared exception!
      try { 
        featureVector0.add((Feature) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - adding a null object
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FeatureVector featureVector0 = new FeatureVector();
      // Undeclared exception!
      try { 
        featureVector0.removeElementAt(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
