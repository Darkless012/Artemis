/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 14:02:12 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.batik.ext.awt.ColorSpaceHintKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.EntryChangeEvent;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EntryChangeEvent_ESTest extends EntryChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("9T)");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, (Feature) null, false, 1);
      boolean boolean0 = entryChangeEvent0.isDuplicate();
      assertEquals(1, entryChangeEvent0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(object0, entry0, 0);
      int int0 = entryChangeEvent0.getType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = ColorSpaceHintKey.VALUE_COLORSPACE_ALPHA_CONVERT;
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("%QFGHG^B!J~!6rS. F");
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(object0, entry0, (-2358));
      int int0 = entryChangeEvent0.getType();
      assertEquals((-2358), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(mockMinguoDate0, (Entry) null, 0);
      entryChangeEvent0.getEntry();
      assertEquals(0, entryChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EntryChangeEvent entryChangeEvent0 = null;
      try {
        entryChangeEvent0 = new EntryChangeEvent((Entry) null, (Feature) null, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EntryChangeEvent entryChangeEvent0 = null;
      try {
        entryChangeEvent0 = new EntryChangeEvent((Entry) null, (Feature) null, 620);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EntryChangeEvent entryChangeEvent0 = null;
      try {
        entryChangeEvent0 = new EntryChangeEvent((Object) null, (Entry) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry("JvIo-btS!FQ[A[o");
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, (Feature) null, (-1135));
      assertEquals((-1135), entryChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("9T)");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, (Feature) null, false, 1);
      int int0 = entryChangeEvent0.getType();
      assertFalse(entryChangeEvent0.isDuplicate());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("9T)");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, (Feature) null, true, 1);
      entryChangeEvent0.getEntry();
      assertEquals(1, entryChangeEvent0.getType());
      assertTrue(entryChangeEvent0.isDuplicate());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("9T)");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, (Feature) null, true, 1);
      entryChangeEvent0.isDuplicate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(mockMinguoDate0, (Entry) null, 0);
      entryChangeEvent0.getFeature();
      assertEquals(0, entryChangeEvent0.getType());
  }
}
