/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 03:30:45 GMT 2017
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.GridLayout;
import java.awt.Panel;
import org.biojava.bio.symbol.IntegerAlphabet;
import org.biojava.bio.symbol.SymbolList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.EntryChangeEvent;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.FeatureVector;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.io.BioJavaSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.sequence.Bases;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EntryChangeEvent_ESTest extends EntryChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, (Feature) null, false, 0);
      boolean boolean0 = entryChangeEvent0.isDuplicate();
      assertFalse(boolean0);
      assertEquals(0, entryChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(mockHijrahDate0, entry0, 0);
      int int0 = entryChangeEvent0.getType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, (Feature) null, false, 0);
      entryChangeEvent0.getFeature();
      assertEquals(0, entryChangeEvent0.getType());
      assertFalse(entryChangeEvent0.isDuplicate());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      Entry entry0 = simpleEntryGroup0.createEntry();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(mockHijrahDate0, entry0, 0);
      entryChangeEvent0.getEntry();
      assertEquals(0, entryChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EntryChangeEvent entryChangeEvent0 = null;
      try {
        entryChangeEvent0 = new EntryChangeEvent((Entry) null, (Feature) null, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EntryChangeEvent entryChangeEvent0 = null;
      try {
        entryChangeEvent0 = new EntryChangeEvent((Entry) null, (Feature) null, (-1953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EntryChangeEvent entryChangeEvent0 = null;
      try {
        entryChangeEvent0 = new EntryChangeEvent((Object) null, (Entry) null, (-427));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FeatureVector featureVector0 = new FeatureVector();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, featureVector0, " T; ");
      Entry entry0 = filteredEntryGroup0.createEntry();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, (Feature) null, (-701));
      int int0 = entryChangeEvent0.getType();
      assertEquals((-701), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, (FeatureVector) null, "uk.ac.sanger.artemis.EntryChangeEvent");
      Entry entry0 = filteredEntryGroup0.createEntry();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, (Feature) null, false, 75);
      int int0 = entryChangeEvent0.getType();
      assertEquals(75, int0);
      assertFalse(entryChangeEvent0.isDuplicate());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GridLayout gridLayout0 = new GridLayout();
      Panel panel0 = new Panel(gridLayout0);
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(panel0, (Entry) null, (-409));
      entryChangeEvent0.getEntry();
      assertEquals((-409), entryChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[8];
      SymbolList symbolList0 = IntegerAlphabet.fromArray(intArray0);
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence(symbolList0);
      Bases bases0 = new Bases(bioJavaSequence0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup(bases0);
      Entry entry0 = simpleEntryGroup0.createEntry();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, (Feature) null, true, 0);
      boolean boolean0 = entryChangeEvent0.isDuplicate();
      assertEquals(0, entryChangeEvent0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(" bytesRead=");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, 5);
      entryChangeEvent0.getFeature();
  }
}
