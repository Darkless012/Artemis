/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:26:17 GMT 2017
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.biojava.bio.symbol.SymbolList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.BioJavaSequence;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.GCWindowAlgorithm;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GCWindowAlgorithm_ESTest extends GCWindowAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("6mpn\"B@>B");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      gCWindowAlgorithm0.getAverage();
      assertTrue(gCWindowAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(emblStreamSequence0);
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      gCWindowAlgorithm0.getAverage();
      assertTrue(gCWindowAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("2aFCg1/nhoTe;gZ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      gCWindowAlgorithm0.getAverage();
      assertTrue(gCWindowAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("gc_content");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        gCWindowAlgorithm0.getValues(99, (-5), floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 99 > end: -5
         //
         verifyException("uk.ac.sanger.artemis.plot.GCWindowAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("qIG\"4d=X");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        gCWindowAlgorithm0.getValues(1, 1, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("uk.ac.sanger.artemis.plot.GCWindowAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GCWindowAlgorithm gCWindowAlgorithm0 = null;
      try {
        gCWindowAlgorithm0 = new GCWindowAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      Integer integer0 = gCWindowAlgorithm0.getDefaultStepSize(628);
      assertTrue(gCWindowAlgorithm0.scalingFlag());
      assertNotNull(integer0);
      assertEquals(62, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      Integer integer0 = gCWindowAlgorithm0.getDefaultStepSize(5);
      assertTrue(gCWindowAlgorithm0.scalingFlag());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(emblStreamSequence0);
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      Integer integer0 = gCWindowAlgorithm0.getDefaultMinWindowSize();
      assertEquals(24, (int)integer0);
      assertTrue(gCWindowAlgorithm0.scalingFlag());
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("2aFg1/nhoT5;gZ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      Integer integer0 = gCWindowAlgorithm0.getDefaultMaxWindowSize();
      assertTrue(gCWindowAlgorithm0.scalingFlag());
      assertNotNull(integer0);
      assertEquals(500, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("qIG\"4d=X");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      Integer integer0 = gCWindowAlgorithm0.getDefaultWindowSize();
      assertEquals(120, (int)integer0);
      assertTrue(gCWindowAlgorithm0.scalingFlag());
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("2aFCg1/nhoTe;gZ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      // Undeclared exception!
      try { 
        gCWindowAlgorithm0.getValues(0, 2, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.GCWindowAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(emblStreamSequence0);
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      float[] floatArray0 = new float[3];
      gCWindowAlgorithm0.getValues((-846), (-846), floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(gCWindowAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("qIG\"4d=X");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      int int0 = gCWindowAlgorithm0.getValueCount();
      assertEquals(1, int0);
      assertTrue(gCWindowAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("qIG\"4d=X");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      Float float0 = gCWindowAlgorithm0.getMinimumInternal();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertTrue(gCWindowAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence((SymbolList) null);
      Bases bases0 = new Bases(bioJavaSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      // Undeclared exception!
      try { 
        gCWindowAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.biojava.bio.seq.io.SymbolListCharSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("2aFg1/nhoT5;gZ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      gCWindowAlgorithm0.getMaximumInternal();
  }
}
