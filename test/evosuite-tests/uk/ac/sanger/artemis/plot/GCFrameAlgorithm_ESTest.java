/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:23:18 GMT 2017
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.PartialSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.GCFrameAlgorithm;
import uk.ac.sanger.artemis.plot.LineAttributes;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GCFrameAlgorithm_ESTest extends GCFrameAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("!Qtt( 55=Q?3E)hr");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      Integer integer0 = gCFrameAlgorithm0.getDefaultStepSize(1918128707);
      assertNotNull(integer0);
      assertTrue(gCFrameAlgorithm0.scalingFlag());
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertEquals(239766088, (int)integer0);
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("1~Jsn/+'4pCiasQb");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      Integer integer0 = gCFrameAlgorithm0.getDefaultStepSize(5161);
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertEquals(645, (int)integer0);
      assertNotNull(integer0);
      assertTrue(gCFrameAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[6];
      Short short0 = new Short((short)24);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      gCFrameAlgorithm0.getAverage();
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertTrue(gCFrameAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("!Qtt( 55=Q?3E)hr");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      gCFrameAlgorithm0.getAverage();
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertTrue(gCFrameAlgorithm0.scalingFlag());
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("7+a");
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence(fastaStreamSequence0);
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      bases0.addBases(33, 33, "Reverse GC Frame Plot");
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      gCFrameAlgorithm0.getAverage();
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertTrue(gCFrameAlgorithm0.scalingFlag());
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("!Qtt( 55=Q?3E)hr");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      float[] floatArray0 = new float[8];
      // Undeclared exception!
      try { 
        gCFrameAlgorithm0.getValues(495, 0, floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 493 > end: 0
         //
         verifyException("uk.ac.sanger.artemis.plot.GCFrameAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GCFrameAlgorithm gCFrameAlgorithm0 = null;
      try {
        gCFrameAlgorithm0 = new GCFrameAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.GCFrameAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("!Qtt( 55=Q?3E)hr");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      int int0 = gCFrameAlgorithm0.getValueCount();
      assertTrue(gCFrameAlgorithm0.scalingFlag());
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("1~Jsn/+'4pCiasQb");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      Integer integer0 = gCFrameAlgorithm0.getDefaultStepSize(4096);
      assertNotNull(integer0);
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertEquals(512, (int)integer0);
      assertTrue(gCFrameAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("!Qtt( 55=Q?3E)hr");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      Integer integer0 = gCFrameAlgorithm0.getDefaultStepSize(3);
      assertTrue(gCFrameAlgorithm0.scalingFlag());
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("1~Jsn/+'4pCiasQb");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      Integer integer0 = gCFrameAlgorithm0.getDefaultMinWindowSize();
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertTrue(gCFrameAlgorithm0.scalingFlag());
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertNotNull(integer0);
      assertEquals(24, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("!Qtt( 55=Q?3E)hr");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      Integer integer0 = gCFrameAlgorithm0.getDefaultMaxWindowSize();
      assertNotNull(integer0);
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertEquals(500, (int)integer0);
      assertTrue(gCFrameAlgorithm0.scalingFlag());
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("!Qtt( 55=Q?3E)hr");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      Integer integer0 = gCFrameAlgorithm0.getDefaultWindowSize();
      assertNotNull(integer0);
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertEquals(120, (int)integer0);
      assertTrue(gCFrameAlgorithm0.scalingFlag());
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("1~Jsn/+'4pCiasQb");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      float[] floatArray0 = new float[8];
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      gCFrameAlgorithm0.setRevCompDisplay(true);
      // Undeclared exception!
      try { 
        gCFrameAlgorithm0.getValues((-5), 13, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("uk.ac.sanger.artemis.plot.GCFrameAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("1~Jsn/+'4pCiasQb");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      float[] floatArray0 = new float[8];
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      // Undeclared exception!
      try { 
        gCFrameAlgorithm0.getValues((-5), 13, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("uk.ac.sanger.artemis.plot.GCFrameAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("1~Jsn/+'4pCiasQb");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      float[] floatArray0 = new float[8];
      gCFrameAlgorithm0.setRevCompDisplay(true);
      gCFrameAlgorithm0.getValues((-5), 13, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertTrue(gCFrameAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("1~Jsn/+'4pCiasQb");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      float[] floatArray0 = new float[8];
      gCFrameAlgorithm0.getValues((-5), 13, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertTrue(gCFrameAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("internal error - unexpected exception: ");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      LineAttributes[] lineAttributesArray0 = new LineAttributes[6];
      gCFrameAlgorithm0.drawLegend((Graphics) null, 1751, 71, lineAttributesArray0, 49);
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertTrue(gCFrameAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("1~Jsn/+'4pCiasQb");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      Float float0 = gCFrameAlgorithm0.getMinimumInternal();
      assertTrue(gCFrameAlgorithm0.scalingFlag());
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      Float float0 = gCFrameAlgorithm0.getMaximumInternal();
      assertEquals(3, gCFrameAlgorithm0.getValueCount());
      assertEquals("Reverse GC Frame Plot", gCFrameAlgorithm0.getAlgorithmName());
      assertTrue(gCFrameAlgorithm0.scalingFlag());
      assertEquals(100.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      GCFrameAlgorithm gCFrameAlgorithm0 = new GCFrameAlgorithm(strand0);
      // Undeclared exception!
      try { 
        gCFrameAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }
}
