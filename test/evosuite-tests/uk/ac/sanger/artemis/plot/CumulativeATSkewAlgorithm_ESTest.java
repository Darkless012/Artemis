/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:20:09 GMT 2017
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.CumulativeATSkewAlgorithm;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CumulativeATSkewAlgorithm_ESTest extends CumulativeATSkewAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("n");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      Integer integer0 = cumulativeATSkewAlgorithm0.getDefaultStepSize(10);
      assertNull(integer0);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      float[] floatArray0 = new float[8];
      cumulativeATSkewAlgorithm0.getValues(0, 2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("n");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      float[] floatArray0 = new float[2];
      cumulativeATSkewAlgorithm0.getValues(1, (-5), floatArray0);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("The Hiearchy.overrideAsNeeded method has been deprecated.");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      Integer integer0 = cumulativeATSkewAlgorithm0.getDefaultStepSize(116);
      assertEquals(11, (int)integer0);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getValues(0, 2, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.CumulativeATSkewAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("n");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getValues(2308, 763, floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 0 > end: -1545
         //
         verifyException("uk.ac.sanger.artemis.plot.CumulativeATSkewAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("n");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getValues(2, 5, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("uk.ac.sanger.artemis.plot.CumulativeATSkewAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      // Undeclared exception!
      try { 
        cumulativeATSkewAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = null;
      try {
        cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      genbankStreamSequence0.setFromChar(bases0.letter_index);
      Float float0 = cumulativeATSkewAlgorithm0.getAverage();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("n");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      Float float0 = cumulativeATSkewAlgorithm0.getAverage();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("n");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      Integer integer0 = cumulativeATSkewAlgorithm0.getDefaultStepSize(1578);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertEquals(157, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      Integer integer0 = cumulativeATSkewAlgorithm0.getDefaultStepSize(1);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      Integer integer0 = cumulativeATSkewAlgorithm0.getDefaultMinWindowSize();
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("The Hiearchy.overrideAsNeeded method has been deprecated.");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      Integer integer0 = cumulativeATSkewAlgorithm0.getDefaultMaxWindowSize();
      assertEquals(5000, (int)integer0);
      assertNotNull(integer0);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      Integer integer0 = cumulativeATSkewAlgorithm0.getDefaultWindowSize();
      assertEquals(60, (int)integer0);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("n");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      int int0 = cumulativeATSkewAlgorithm0.getValueCount();
      assertEquals(1, int0);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      Float float0 = cumulativeATSkewAlgorithm0.getMaximumInternal();
      assertEquals(1.0F, (float)float0, 0.01F);
      assertTrue(cumulativeATSkewAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      CumulativeATSkewAlgorithm cumulativeATSkewAlgorithm0 = new CumulativeATSkewAlgorithm(strand0);
      cumulativeATSkewAlgorithm0.getMinimumInternal();
  }
}
