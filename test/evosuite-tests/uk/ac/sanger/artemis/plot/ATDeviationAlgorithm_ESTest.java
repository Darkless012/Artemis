/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:13:38 GMT 2017
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.ATDeviationAlgorithm;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ATDeviationAlgorithm_ESTest extends ATDeviationAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence(",Yi3ZR}4Xm(aCTeW0,");
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(17, fastaStreamSequence0.getOtherCount());
      assertEquals(18, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertNotNull(fastaStreamSequence0);
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(17, fastaStreamSequence0.getOtherCount());
      assertEquals(18, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertNotNull(bases0);
      
      Strand strand0 = bases0.getReverseStrand();
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(17, fastaStreamSequence0.getOtherCount());
      assertEquals(18, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertNotNull(strand0);
      
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(17, fastaStreamSequence0.getOtherCount());
      assertEquals(18, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertNotNull(aTDeviationAlgorithm0);
      
      Integer integer0 = aTDeviationAlgorithm0.getDefaultStepSize(1161);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(1, fastaStreamSequence0.getACount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(17, fastaStreamSequence0.getOtherCount());
      assertEquals(18, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals(116, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("AT Deviation (A-T)/(A+T)");
      assertEquals(24, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(22, emblStreamSequence0.getOtherCount());
      assertNotNull(emblStreamSequence0);
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(emblStreamSequence0);
      assertEquals(24, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(22, emblStreamSequence0.getOtherCount());
      assertEquals(1, rawStreamSequence0.getACount());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(24, rawStreamSequence0.length());
      assertEquals(22, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertNotNull(rawStreamSequence0);
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(24, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(22, emblStreamSequence0.getOtherCount());
      assertEquals(1, rawStreamSequence0.getACount());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(24, rawStreamSequence0.length());
      assertEquals(22, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertNotNull(bases0);
      
      Strand strand0 = bases0.getReverseStrand();
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(24, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(22, emblStreamSequence0.getOtherCount());
      assertEquals(1, rawStreamSequence0.getACount());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(24, rawStreamSequence0.length());
      assertEquals(22, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertNotNull(strand0);
      
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(24, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(0, emblStreamSequence0.getCCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(22, emblStreamSequence0.getOtherCount());
      assertEquals(1, rawStreamSequence0.getACount());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(24, rawStreamSequence0.length());
      assertEquals(22, rawStreamSequence0.getOtherCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(2, strand0.getDirection());
      assertFalse(strand0.isForwardStrand());
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertNotNull(aTDeviationAlgorithm0);
      
      float[] floatArray0 = new float[9];
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm0.getValues(4096, 1482, floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 4096 > end: 1482
         //
         verifyException("uk.ac.sanger.artemis.plot.ATDeviationAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ATDeviationAlgorithm aTDeviationAlgorithm0 = null;
      try {
        aTDeviationAlgorithm0 = new ATDeviationAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("F% `dX7v$cQ(3n6");
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertNotNull(fastaStreamSequence0);
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertNotNull(bases0);
      
      Strand strand0 = bases0.getForwardStrand();
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertNotNull(strand0);
      
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertNotNull(aTDeviationAlgorithm0);
      
      Float float0 = aTDeviationAlgorithm0.getAverage();
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Strand.FORWARD);
      assertEquals(2, Strand.REVERSE);
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("AT Deviation (A-T)/(A+T)");
      assertEquals(0, emblStreamSequence0.getCCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(24, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(22, emblStreamSequence0.getOtherCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertNotNull(emblStreamSequence0);
      
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(emblStreamSequence0);
      assertEquals(0, emblStreamSequence0.getCCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(24, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(22, emblStreamSequence0.getOtherCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(1, rawStreamSequence0.getACount());
      assertEquals(24, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(22, rawStreamSequence0.getOtherCount());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertNotNull(rawStreamSequence0);
      
      Bases bases0 = new Bases(rawStreamSequence0);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, emblStreamSequence0.getCCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(24, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(22, emblStreamSequence0.getOtherCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(1, rawStreamSequence0.getACount());
      assertEquals(24, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(22, rawStreamSequence0.getOtherCount());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertNotNull(bases0);
      
      Strand strand0 = bases0.getReverseStrand();
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, emblStreamSequence0.getCCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(24, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(22, emblStreamSequence0.getOtherCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(1, rawStreamSequence0.getACount());
      assertEquals(24, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(22, rawStreamSequence0.getOtherCount());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertNotNull(strand0);
      
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, emblStreamSequence0.getCCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(24, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(22, emblStreamSequence0.getOtherCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(1, rawStreamSequence0.getACount());
      assertEquals(24, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(22, rawStreamSequence0.getOtherCount());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertNotNull(aTDeviationAlgorithm0);
      
      Integer integer0 = aTDeviationAlgorithm0.getDefaultStepSize(2392);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, emblStreamSequence0.getCCount());
      assertNull(emblStreamSequence0.getHeader());
      assertEquals(0, emblStreamSequence0.getGCount());
      assertEquals(24, emblStreamSequence0.length());
      assertEquals(1, emblStreamSequence0.getACount());
      assertEquals(22, emblStreamSequence0.getOtherCount());
      assertEquals(1, emblStreamSequence0.getFormatType());
      assertEquals(1, emblStreamSequence0.getTCount());
      assertEquals(0, rawStreamSequence0.getGCount());
      assertEquals(1, rawStreamSequence0.getACount());
      assertEquals(24, rawStreamSequence0.length());
      assertEquals(3, rawStreamSequence0.getFormatType());
      assertEquals(0, rawStreamSequence0.getCCount());
      assertEquals(22, rawStreamSequence0.getOtherCount());
      assertEquals(1, rawStreamSequence0.getTCount());
      assertFalse(strand0.isForwardStrand());
      assertEquals(2, strand0.getDirection());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(239, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("F% `dX7v$cQ(3n6");
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertNotNull(fastaStreamSequence0);
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertNotNull(bases0);
      
      Strand strand0 = bases0.getForwardStrand();
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertNotNull(strand0);
      
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertNotNull(aTDeviationAlgorithm0);
      
      Integer integer0 = aTDeviationAlgorithm0.getDefaultStepSize(2);
      assertEquals(1, Bases.FORWARD);
      assertEquals(2, Bases.REVERSE);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("F% `dX7v$cQ(3n6");
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertNotNull(fastaStreamSequence0);
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertNotNull(bases0);
      
      Strand strand0 = bases0.getForwardStrand();
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertNotNull(strand0);
      
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertNotNull(aTDeviationAlgorithm0);
      
      Integer integer0 = aTDeviationAlgorithm0.getDefaultMinWindowSize();
      assertEquals(2, Bases.REVERSE);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertTrue(strand0.isForwardStrand());
      assertEquals(1, strand0.getDirection());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      assertEquals(0, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertNotNull(fastaStreamSequence0);
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(0, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertNotNull(bases0);
      
      Strand strand0 = bases0.getForwardStrand();
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertNotNull(strand0);
      
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertNotNull(aTDeviationAlgorithm0);
      
      Integer integer0 = aTDeviationAlgorithm0.getDefaultMaxWindowSize();
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(1, Bases.FORWARD);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(0, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(0, fastaStreamSequence0.length());
      assertEquals(0, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertEquals(5000, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("F% `dX7v$cQ(3n6");
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertNotNull(fastaStreamSequence0);
      
      Bases bases0 = new Bases(fastaStreamSequence0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertNotNull(bases0);
      
      Strand strand0 = bases0.getForwardStrand();
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertNotNull(strand0);
      
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertNotNull(aTDeviationAlgorithm0);
      
      Integer integer0 = aTDeviationAlgorithm0.getDefaultWindowSize();
      assertEquals((-5), Bases.MIN_PRIORITY);
      assertEquals(0, Bases.MEDIUM_PRIORITY);
      assertEquals(1, Bases.FORWARD);
      assertEquals(5, Bases.MAX_PRIORITY);
      assertEquals(2, Bases.REVERSE);
      assertEquals(2, Strand.REVERSE);
      assertEquals(1, Strand.FORWARD);
      assertEquals(4, fastaStreamSequence0.getFormatType());
      assertEquals(14, fastaStreamSequence0.getOtherCount());
      assertEquals(0, fastaStreamSequence0.getACount());
      assertEquals(1, fastaStreamSequence0.getCCount());
      assertEquals(0, fastaStreamSequence0.getGCount());
      assertEquals(0, fastaStreamSequence0.getTCount());
      assertEquals(15, fastaStreamSequence0.length());
      assertEquals(1, strand0.getDirection());
      assertTrue(strand0.isForwardStrand());
      assertFalse(aTDeviationAlgorithm0.isUserMaxMin());
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, aTDeviationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("at_deviation", aTDeviationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, aTDeviationAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1, aTDeviationAlgorithm0.getValueCount());
      assertEquals("AT Deviation (A-T)/(A+T)", aTDeviationAlgorithm0.getAlgorithmName());
      assertFalse(aTDeviationAlgorithm0.isRevCompDisplay());
      assertEquals(30, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("getContextClassLoader");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm0.getValues(1, 1191, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.ATDeviationAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("oS1qk!squ0");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      float[] floatArray0 = new float[7];
      aTDeviationAlgorithm0.getValues(2, 2, floatArray0);
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("F% `dX7v$cQ(3n6");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm0.getValues(0, 1174, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("uk.ac.sanger.artemis.plot.ATDeviationAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("F% `dX7v$cQ(3n6");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      Float float0 = aTDeviationAlgorithm0.getMaximumInternal();
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("F% `dX7v$cQ(3n6");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      int int0 = aTDeviationAlgorithm0.getValueCount();
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      Float float0 = aTDeviationAlgorithm0.getMinimumInternal();
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertTrue(aTDeviationAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      ATDeviationAlgorithm aTDeviationAlgorithm0 = new ATDeviationAlgorithm(strand0);
      // Undeclared exception!
      try { 
        aTDeviationAlgorithm0.getAverage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }
}
