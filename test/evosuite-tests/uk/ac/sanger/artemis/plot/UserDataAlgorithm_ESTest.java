/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:36:35 GMT 2017
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import javax.swing.JLayeredPane;
import javax.swing.JPasswordField;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.PartialSequence;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.plot.UserDataAlgorithm;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Strand;
import uk.ac.sanger.artemis.util.DatabaseDocument;
import uk.ac.sanger.artemis.util.FileDocument;
import uk.ac.sanger.artemis.util.TextDocument;
import uk.ac.sanger.artemis.util.URLDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserDataAlgorithm_ESTest extends UserDataAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GapContent gapContent0 = new GapContent(1202);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JPasswordField jPasswordField0 = new JPasswordField(defaultStyledDocument0, "G9W4C`_'j#Z;KN86KU", 1202);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("G9W4C`_'j#Z;KN86KU", jPasswordField0);
      UserDataAlgorithm userDataAlgorithm0 = null;
      try {
        userDataAlgorithm0 = new UserDataAlgorithm((Strand) null, databaseDocument0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[5];
      Short short0 = new Short((short)0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 2296, 2296, short0, integer0);
      Bases bases0 = new Bases(partialSequence0);
      Strand strand0 = bases0.getForwardStrand();
      TextDocument textDocument0 = new TextDocument();
      UserDataAlgorithm userDataAlgorithm0 = null;
      try {
        userDataAlgorithm0 = new UserDataAlgorithm(strand0, textDocument0, false);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("E`oI_km{2*,_}SnAQa");
      Bases bases0 = new Bases(rawStreamSequence0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "14");
      Strand strand0 = bases0.getForwardStrand();
      URL uRL0 = MockURL.getHttpExample();
      URLDocument uRLDocument0 = new URLDocument(uRL0);
      UserDataAlgorithm userDataAlgorithm0 = null;
      try {
        userDataAlgorithm0 = new UserDataAlgorithm(strand0, uRLDocument0, true);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.UserDataAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(" step=");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MockFile mockFile0 = new MockFile("\t", "%j>Z");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      UserDataAlgorithm userDataAlgorithm0 = null;
      try {
        userDataAlgorithm0 = new UserDataAlgorithm(strand0, fileDocument0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("E`oI_km{2*,_}SnAQa");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      URL uRL0 = MockURL.getHttpExample();
      URLDocument uRLDocument0 = new URLDocument(uRL0);
      UserDataAlgorithm userDataAlgorithm0 = null;
      try {
        userDataAlgorithm0 = new UserDataAlgorithm(strand0, uRLDocument0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
}
