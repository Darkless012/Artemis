/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:23:32 GMT 2017
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.biojava.bio.symbol.SimpleAlphabet;
import org.biojava.bio.symbol.SimpleSymbolList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.io.BioJavaSequence;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.GenbankStreamSequence;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.EntropyAlgorithm;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Marker;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EntropyAlgorithm_ESTest extends EntropyAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("4T=qSSD5l?u");
      Bases bases0 = new Bases(rawStreamSequence0);
      Entry entry0 = Entry.newEntry(bases0);
      Feature feature0 = entry0.createFeature();
      Marker marker0 = feature0.getFirstBaseMarker();
      Strand strand0 = marker0.getStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      float[] floatArray0 = new float[5];
      entropyAlgorithm0.getValues(0, 0, floatArray0);
      assertEquals("Informational Entropy", entropyAlgorithm0.getAlgorithmName());
      assertTrue(entropyAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      Integer integer0 = entropyAlgorithm0.getDefaultStepSize(2068);
      assertEquals(206, (int)integer0);
      assertTrue(entropyAlgorithm0.scalingFlag());
      assertNotNull(integer0);
      assertEquals("Reverse Informational Entropy", entropyAlgorithm0.getAlgorithmName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("DBLINK");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getAverage();
      assertTrue(entropyAlgorithm0.scalingFlag());
      assertEquals("Reverse Informational Entropy", entropyAlgorithm0.getAlgorithmName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleAlphabet simpleAlphabet0 = new SimpleAlphabet("Informational Entropy");
      SimpleSymbolList simpleSymbolList0 = new SimpleSymbolList(simpleAlphabet0);
      BioJavaSequence bioJavaSequence0 = new BioJavaSequence(simpleSymbolList0);
      Bases bases0 = new Bases(bioJavaSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getAverage();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There is no tokenization 'token' defined in alphabet Informational Entropy
         //
         verifyException("org.biojava.bio.symbol.AbstractAlphabet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EntropyAlgorithm entropyAlgorithm0 = null;
      try {
        entropyAlgorithm0 = new EntropyAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.EntropyAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      Integer integer0 = entropyAlgorithm0.getDefaultStepSize(93);
      assertNotNull(integer0);
      assertEquals("Informational Entropy", entropyAlgorithm0.getAlgorithmName());
      assertTrue(entropyAlgorithm0.scalingFlag());
      assertEquals(9, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      Integer integer0 = entropyAlgorithm0.getDefaultStepSize(1);
      assertNull(integer0);
      assertTrue(entropyAlgorithm0.scalingFlag());
      assertEquals("Reverse Informational Entropy", entropyAlgorithm0.getAlgorithmName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("R~\"ys;I^}2`", "R~\"ys;I^}2`");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      Integer integer0 = entropyAlgorithm0.getDefaultMinWindowSize();
      assertEquals(25, (int)integer0);
      assertEquals("Reverse Informational Entropy", entropyAlgorithm0.getAlgorithmName());
      assertNotNull(integer0);
      assertTrue(entropyAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("\\/@YYLzT$54!>8I&0");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      Integer integer0 = entropyAlgorithm0.getDefaultMaxWindowSize();
      assertTrue(entropyAlgorithm0.scalingFlag());
      assertEquals(5000, (int)integer0);
      assertEquals("Informational Entropy", entropyAlgorithm0.getAlgorithmName());
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      Integer integer0 = entropyAlgorithm0.getDefaultWindowSize();
      assertTrue(entropyAlgorithm0.scalingFlag());
      assertEquals("Informational Entropy", entropyAlgorithm0.getAlgorithmName());
      assertNotNull(integer0);
      assertEquals(500, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("R~\"ys;I^}2`", "R~\"ys;I^}2`");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      float[] floatArray0 = new float[1];
      entropyAlgorithm0.getValues(0, 2, floatArray0);
      assertEquals("Reverse Informational Entropy", entropyAlgorithm0.getAlgorithmName());
      assertTrue(entropyAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("R~\"ys;I^}2`", "R~\"ys;I^}2`");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getValues((-2073), 2, floatArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      float[] floatArray0 = new float[3];
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getValues(0, 0, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        entropyAlgorithm0.getValues(5, 1, floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 0 > end: -4
         //
         verifyException("uk.ac.sanger.artemis.plot.EntropyAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenbankStreamSequence genbankStreamSequence0 = new GenbankStreamSequence("\\/@YYLzT$54!>8I&0");
      Bases bases0 = new Bases(genbankStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      Float float0 = entropyAlgorithm0.getMinimumInternal();
      assertEquals("Informational Entropy", entropyAlgorithm0.getAlgorithmName());
      assertTrue(entropyAlgorithm0.scalingFlag());
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("DBLINK");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      Float float0 = entropyAlgorithm0.getMaximumInternal();
      assertEquals(100.0F, (float)float0, 0.01F);
      assertTrue(entropyAlgorithm0.scalingFlag());
      assertEquals("Reverse Informational Entropy", entropyAlgorithm0.getAlgorithmName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("R~\"ys;I^}2`", "R~\"ys;I^}2`");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      int int0 = entropyAlgorithm0.getValueCount();
      assertEquals("Reverse Informational Entropy", entropyAlgorithm0.getAlgorithmName());
      assertEquals(1, int0);
      assertTrue(entropyAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      EntropyAlgorithm entropyAlgorithm0 = new EntropyAlgorithm(strand0);
      entropyAlgorithm0.getAverage();
  }
}
