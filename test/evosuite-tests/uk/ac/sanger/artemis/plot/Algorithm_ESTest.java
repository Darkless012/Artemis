/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:12:55 GMT 2017
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.plot.Codon12CorrelationAlgorithm;
import uk.ac.sanger.artemis.plot.CoilFeatureAlgorithm;
import uk.ac.sanger.artemis.plot.GCSDWindowAlgorithm;
import uk.ac.sanger.artemis.plot.GCWindowAlgorithm;
import uk.ac.sanger.artemis.plot.HydrophilicityAlgorithm;
import uk.ac.sanger.artemis.plot.NcAlgorithm;
import uk.ac.sanger.artemis.plot.PositionalAsymmetryAlgorithm;
import uk.ac.sanger.artemis.plot.ScaledChiAlgorithm;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Algorithm_ESTest extends Algorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      assertFalse(coilFeatureAlgorithm0.isUserMaxMin());
      
      coilFeatureAlgorithm0.setUserMaxMin(true);
      assertTrue(coilFeatureAlgorithm0.isUserMaxMin());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("2\"rpSPi");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      gCWindowAlgorithm0.getMinimumInternal();
      assertEquals("GC Content (%)", gCWindowAlgorithm0.getAlgorithmName());
      assertEquals(1.4E-45F, gCWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals("gc_content", gCWindowAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, gCWindowAlgorithm0.getUserMax(), 0.01F);
      assertTrue(gCWindowAlgorithm0.scalingFlag());
      assertFalse(gCWindowAlgorithm0.isUserMaxMin());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      coilFeatureAlgorithm0.getMinimumInternal();
      assertEquals(1.4E-45F, coilFeatureAlgorithm0.getUserMin(), 0.01F);
      assertFalse(coilFeatureAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, coilFeatureAlgorithm0.getUserMax(), 0.01F);
      assertEquals("coiled_coil", coilFeatureAlgorithm0.getAlgorithmShortName());
      assertEquals("Coiled Coils", coilFeatureAlgorithm0.getAlgorithmName());
      assertFalse(coilFeatureAlgorithm0.isUserMaxMin());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("2\"rpSPi");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      NcAlgorithm ncAlgorithm0 = new NcAlgorithm(strand0);
      ncAlgorithm0.getDefaultStepSize((-2146));
      assertEquals("Effective Codon Number(Nc)", ncAlgorithm0.getAlgorithmName());
      assertFalse(ncAlgorithm0.isUserMaxMin());
      assertTrue(ncAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, ncAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Nc", ncAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, ncAlgorithm0.getUserMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("2\"rpSPi");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Codon12CorrelationAlgorithm codon12CorrelationAlgorithm0 = new Codon12CorrelationAlgorithm(strand0);
      codon12CorrelationAlgorithm0.getDefaultMaxWindowSize();
      assertFalse(codon12CorrelationAlgorithm0.isUserMaxMin());
      assertTrue(codon12CorrelationAlgorithm0.scalingFlag());
      assertEquals(1.4E-45F, codon12CorrelationAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Correlation Scores", codon12CorrelationAlgorithm0.getAlgorithmName());
      assertEquals("correlation_score", codon12CorrelationAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, codon12CorrelationAlgorithm0.getUserMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Codon12CorrelationAlgorithm codon12CorrelationAlgorithm0 = new Codon12CorrelationAlgorithm(strand0);
      boolean boolean0 = codon12CorrelationAlgorithm0.scalingFlag();
      assertTrue(boolean0);
      assertEquals("correlation_score", codon12CorrelationAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, codon12CorrelationAlgorithm0.getUserMin(), 0.01F);
      assertEquals(3.4028235E38F, codon12CorrelationAlgorithm0.getUserMax(), 0.01F);
      assertEquals("Correlation Scores", codon12CorrelationAlgorithm0.getAlgorithmName());
      assertFalse(codon12CorrelationAlgorithm0.isUserMaxMin());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HydrophilicityAlgorithm hydrophilicityAlgorithm0 = new HydrophilicityAlgorithm((Feature) null);
      hydrophilicityAlgorithm0.setScalingFlag(false);
      assertEquals(1.4E-45F, hydrophilicityAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Hopp-Woods Hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmName());
      assertFalse(hydrophilicityAlgorithm0.scalingFlag());
      assertEquals(3.4028235E38F, hydrophilicityAlgorithm0.getUserMax(), 0.01F);
      assertEquals("hydrophilicity", hydrophilicityAlgorithm0.getAlgorithmShortName());
      assertFalse(hydrophilicityAlgorithm0.isUserMaxMin());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("getGraphs");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      ScaledChiAlgorithm scaledChiAlgorithm0 = new ScaledChiAlgorithm(strand0);
      Float float0 = scaledChiAlgorithm0.getMinimum();
      assertEquals(3.4028235E38F, scaledChiAlgorithm0.getUserMax(), 0.01F);
      assertFalse(scaledChiAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, scaledChiAlgorithm0.getUserMin(), 0.01F);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("2\"rpSPi");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Codon12CorrelationAlgorithm codon12CorrelationAlgorithm0 = new Codon12CorrelationAlgorithm(strand0);
      Float float0 = codon12CorrelationAlgorithm0.getMaximum();
      assertEquals("correlation_score", codon12CorrelationAlgorithm0.getAlgorithmShortName());
      assertEquals(1.4E-45F, codon12CorrelationAlgorithm0.getUserMin(), 0.01F);
      assertNull(float0);
      assertFalse(codon12CorrelationAlgorithm0.isUserMaxMin());
      assertEquals("Correlation Scores", codon12CorrelationAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, codon12CorrelationAlgorithm0.getUserMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      Float float0 = coilFeatureAlgorithm0.getMaximum();
      assertNotNull(float0);
      assertEquals("coiled_coil", coilFeatureAlgorithm0.getAlgorithmShortName());
      assertEquals(3.4028235E38F, coilFeatureAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1.01F, (float)float0, 0.01F);
      assertEquals(1.4E-45F, coilFeatureAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Coiled Coils", coilFeatureAlgorithm0.getAlgorithmName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      coilFeatureAlgorithm0.setUserMax((-2665.0F));
      assertEquals((-2665.0F), coilFeatureAlgorithm0.getUserMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("getGraphs");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      float float0 = positionalAsymmetryAlgorithm0.getUserMin();
      assertTrue(positionalAsymmetryAlgorithm0.scalingFlag());
      assertFalse(positionalAsymmetryAlgorithm0.isUserMaxMin());
      assertEquals("Positional Asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, positionalAsymmetryAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1.4E-45F, float0, 0.01F);
      assertEquals("positional_asymmetry", positionalAsymmetryAlgorithm0.getAlgorithmShortName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("2\"rpSPi");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      Codon12CorrelationAlgorithm codon12CorrelationAlgorithm0 = new Codon12CorrelationAlgorithm(strand0);
      codon12CorrelationAlgorithm0.getDefaultWindowSize();
      assertEquals("Correlation Scores", codon12CorrelationAlgorithm0.getAlgorithmName());
      assertEquals(3.4028235E38F, codon12CorrelationAlgorithm0.getUserMax(), 0.01F);
      assertFalse(codon12CorrelationAlgorithm0.isUserMaxMin());
      assertEquals(1.4E-45F, codon12CorrelationAlgorithm0.getUserMin(), 0.01F);
      assertTrue(codon12CorrelationAlgorithm0.scalingFlag());
      assertEquals("correlation_score", codon12CorrelationAlgorithm0.getAlgorithmShortName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("2\"rpSPi");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      NcAlgorithm ncAlgorithm0 = new NcAlgorithm(strand0);
      ncAlgorithm0.getDefaultMinWindowSize();
      assertEquals(3.4028235E38F, ncAlgorithm0.getUserMax(), 0.01F);
      assertEquals(1.4E-45F, ncAlgorithm0.getUserMin(), 0.01F);
      assertEquals("Nc", ncAlgorithm0.getAlgorithmShortName());
      assertEquals("Effective Codon Number(Nc)", ncAlgorithm0.getAlgorithmName());
      assertTrue(ncAlgorithm0.scalingFlag());
      assertFalse(ncAlgorithm0.isUserMaxMin());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      assertEquals("Coiled Coils", coilFeatureAlgorithm0.getAlgorithmName());
      
      coilFeatureAlgorithm0.setAlgorithmName("+@XfS");
      assertEquals(3.4028235E38F, coilFeatureAlgorithm0.getUserMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("2\"rpSPi");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      GCSDWindowAlgorithm gCSDWindowAlgorithm0 = new GCSDWindowAlgorithm(strand0);
      Float float0 = gCSDWindowAlgorithm0.getMinimum();
      assertEquals(1.4E-45F, gCSDWindowAlgorithm0.getUserMin(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(3.4028235E38F, gCSDWindowAlgorithm0.getUserMax(), 0.01F);
      assertEquals("sd_gc_content", gCSDWindowAlgorithm0.getAlgorithmShortName());
      assertEquals("GC Content (%) With A 2.5 SD Cutoff", gCSDWindowAlgorithm0.getAlgorithmName());
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CoilFeatureAlgorithm coilFeatureAlgorithm0 = new CoilFeatureAlgorithm((Feature) null);
      coilFeatureAlgorithm0.getMinimum();
  }
}
