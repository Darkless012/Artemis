/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:12:41 GMT 2017
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics;
import javax.swing.DebugGraphics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.AGWindowAlgorithm;
import uk.ac.sanger.artemis.plot.GCDeviationAlgorithm;
import uk.ac.sanger.artemis.plot.GCWindowAlgorithm;
import uk.ac.sanger.artemis.plot.LineAttributes;
import uk.ac.sanger.artemis.plot.PositionalAsymmetryAlgorithm;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Strand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseAlgorithm_ESTest extends BaseAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      LineAttributes[] lineAttributesArray0 = new LineAttributes[4];
      // Undeclared exception!
      try { 
        positionalAsymmetryAlgorithm0.drawLegend((Graphics) null, 1, 14, lineAttributesArray0, 557);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      LineAttributes[] lineAttributesArray0 = new LineAttributes[4];
      // Undeclared exception!
      try { 
        positionalAsymmetryAlgorithm0.drawLegend(debugGraphics0, 1, 14, lineAttributesArray0, 557);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.DebugGraphics cannot be cast to java.awt.Graphics2D
         //
         verifyException("uk.ac.sanger.artemis.plot.BaseAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("yzu?*b");
      Bases bases0 = new Bases(fastaStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      Strand strand1 = aGWindowAlgorithm0.getStrand();
      assertFalse(strand1.isForwardStrand());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("/usr/local/bin/");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      GCWindowAlgorithm gCWindowAlgorithm0 = new GCWindowAlgorithm(strand0);
      gCWindowAlgorithm0.getBases();
      assertFalse(gCWindowAlgorithm0.isRevCompDisplay());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      AGWindowAlgorithm aGWindowAlgorithm0 = new AGWindowAlgorithm(strand0);
      aGWindowAlgorithm0.setRevCompDisplay(false);
      assertFalse(aGWindowAlgorithm0.isRevCompDisplay());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("/usr/local/bin/");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      GCDeviationAlgorithm gCDeviationAlgorithm0 = new GCDeviationAlgorithm(strand0);
      Float float0 = gCDeviationAlgorithm0.getAverage();
      assertEquals((-1.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getForwardStrand();
      PositionalAsymmetryAlgorithm positionalAsymmetryAlgorithm0 = new PositionalAsymmetryAlgorithm(strand0);
      positionalAsymmetryAlgorithm0.isRevCompDisplay();
  }
}
