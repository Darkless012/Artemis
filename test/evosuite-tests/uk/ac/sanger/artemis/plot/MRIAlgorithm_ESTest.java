/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 05:34:14 GMT 2017
 */

package uk.ac.sanger.artemis.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.EmblStreamSequence;
import uk.ac.sanger.artemis.io.FastaStreamSequence;
import uk.ac.sanger.artemis.io.RawStreamSequence;
import uk.ac.sanger.artemis.io.Sequence;
import uk.ac.sanger.artemis.plot.MRIAlgorithm;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.sequence.Strand;
import uk.ac.sanger.artemis.util.LinePushBackReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MRIAlgorithm_ESTest extends MRIAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("aIyqeo:4");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      try { 
        mRIAlgorithm0.getValues(1797, 103, floatArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - unexpected exception: org.evosuite.runtime.mock.java.lang.MockThrowable: start: 1797 > end: 104
         //
         verifyException("uk.ac.sanger.artemis.plot.MRIAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MRIAlgorithm mRIAlgorithm0 = null;
      try {
        mRIAlgorithm0 = new MRIAlgorithm((Strand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.plot.MRIAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c{Zrda72*mY]Gi");
      LinePushBackReader linePushBackReader0 = new LinePushBackReader(stringReader0);
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence(linePushBackReader0);
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      mRIAlgorithm0.getDefaultStepSize(3264);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(fastaStreamSequence0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      mRIAlgorithm0.getDefaultStepSize(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      mRIAlgorithm0.getDefaultMinWindowSize();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(fastaStreamSequence0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      mRIAlgorithm0.getDefaultMaxWindowSize();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RawStreamSequence rawStreamSequence0 = new RawStreamSequence("aIyqeo:4");
      Bases bases0 = new Bases(rawStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      mRIAlgorithm0.getDefaultWindowSize();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(fastaStreamSequence0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getReverseStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      float[] floatArray0 = new float[3];
      mRIAlgorithm0.getValues((-1883), (-433), floatArray0);
      assertEquals("Reverse Mutational Response Index", mRIAlgorithm0.getAlgorithmName());
      assertTrue(mRIAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Bases bases0 = new Bases((Sequence) null);
      Strand strand0 = bases0.getReverseStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      float[] floatArray0 = new float[5];
      // Undeclared exception!
      try { 
        mRIAlgorithm0.getValues(2, 1, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.sequence.Bases", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(fastaStreamSequence0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      int int0 = mRIAlgorithm0.getValueCount();
      assertTrue(mRIAlgorithm0.scalingFlag());
      assertEquals("Mutational Response Index", mRIAlgorithm0.getAlgorithmName());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(fastaStreamSequence0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      Float float0 = mRIAlgorithm0.getMaximumInternal();
      assertEquals("Mutational Response Index", mRIAlgorithm0.getAlgorithmName());
      assertTrue(mRIAlgorithm0.scalingFlag());
      assertEquals(1000.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence("jpyaXD0");
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      Float float0 = mRIAlgorithm0.getAverage();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals("Mutational Response Index", mRIAlgorithm0.getAlgorithmName());
      assertTrue(mRIAlgorithm0.scalingFlag());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastaStreamSequence fastaStreamSequence0 = new FastaStreamSequence("");
      EmblStreamSequence emblStreamSequence0 = new EmblStreamSequence(fastaStreamSequence0);
      Bases bases0 = new Bases(emblStreamSequence0);
      Strand strand0 = bases0.getForwardStrand();
      MRIAlgorithm mRIAlgorithm0 = new MRIAlgorithm(strand0);
      mRIAlgorithm0.getMinimumInternal();
  }
}
