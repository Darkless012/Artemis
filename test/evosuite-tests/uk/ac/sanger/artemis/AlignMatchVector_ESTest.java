/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 12 10:21:59 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.AlignMatch;
import uk.ac.sanger.artemis.AlignMatchVector;
import uk.ac.sanger.artemis.io.Range;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AlignMatchVector_ESTest extends AlignMatchVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(0);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 1344, 0);
      alignMatchVector0.addElement(alignMatch0);
      int int0 = alignMatchVector0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(97);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 97, (-2156));
      alignMatchVector0.add(alignMatch0);
      boolean boolean0 = alignMatchVector0.remove(alignMatch0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(0);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 0, 0);
      alignMatchVector0.add(alignMatch0);
      int int0 = alignMatchVector0.indexOf(alignMatch0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(2139);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 2139, (-1320));
      AlignMatch alignMatch1 = AlignMatch.copy(alignMatch0);
      alignMatchVector0.addElement(alignMatch1);
      alignMatchVector0.add(alignMatch0);
      int int0 = alignMatchVector0.indexOf(alignMatch0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(0);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 1344, 0);
      alignMatch0.setRange(0, 1344, false, false);
      alignMatchVector0.addElement(alignMatch0);
      AlignMatch alignMatch1 = alignMatchVector0.elementAt(0);
      assertEquals(0, alignMatch1.getSubjectSequenceStart());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(0);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 0, 0);
      alignMatchVector0.add(alignMatch0);
      AlignMatch alignMatch1 = alignMatchVector0.elementAt(0);
      assertEquals(0, alignMatch1.getSubjectSequenceEnd());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range((-1));
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 565, 1573);
      alignMatchVector0.addElement(alignMatch0);
      AlignMatch alignMatch1 = alignMatchVector0.elementAt(0);
      assertEquals(565, alignMatch1.getScore());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(0, 0);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, true, (-832), (-2698));
      alignMatchVector0.add(alignMatch0);
      AlignMatch alignMatch1 = alignMatchVector0.elementAt(0);
      assertTrue(alignMatch1.isSelfMatch());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(67);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, true, (-1), 4022);
      alignMatchVector0.addElement(alignMatch0);
      AlignMatch alignMatch1 = alignMatchVector0.elementAt(0);
      assertEquals(67, alignMatch1.getSubjectSequenceEnd());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(2139);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 2139, (-1320));
      alignMatchVector0.addElement(alignMatch0);
      boolean boolean0 = alignMatchVector0.contains(alignMatch0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      // Undeclared exception!
      try { 
        alignMatchVector0.elementAt((-2139));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(0, 0);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, true, (-832), (-2698));
      alignMatchVector0.add(alignMatch0);
      // Undeclared exception!
      try { 
        alignMatchVector0.add(alignMatch0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - object added a second time
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      alignMatchVector0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      int int0 = alignMatchVector0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(2139);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 2139, (-1320));
      int int0 = alignMatchVector0.indexOf(alignMatch0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      // Undeclared exception!
      try { 
        alignMatchVector0.elementAt(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      alignMatchVector0.removeAllElements();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Object object0 = alignMatchVector0.clone();
      assertNotSame(object0, alignMatchVector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(2139);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 2139, (-1320));
      boolean boolean0 = alignMatchVector0.contains(alignMatch0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(67);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, true, (-1), 4022);
      boolean boolean0 = alignMatchVector0.remove(alignMatch0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AlignMatchVector alignMatchVector0 = new AlignMatchVector();
      Range range0 = new Range(2139);
      AlignMatch alignMatch0 = new AlignMatch(range0, range0, false, 2139, (-1320));
      alignMatchVector0.addElement(alignMatch0);
      // Undeclared exception!
      try { 
        alignMatchVector0.addElement(alignMatch0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - object added a second time
         //
         verifyException("uk.ac.sanger.artemis.util.FastVector", e);
      }
  }
}
