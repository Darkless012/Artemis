/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 06:10:49 GMT 2017
 */

package uk.ac.sanger.artemis.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.util.ZipFileDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZipFileDocument_ESTest extends ZipFileDocument_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".zXp");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "tEmp");
      String string0 = zipFileDocument0.writeTmpFile("tEmp");
      assertEquals("/var/folders/r3/l648tx8s7hn8ppds6z2bk5cc000h2n/T/tEmp0tmp", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, (String) null);
      String string0 = zipFileDocument0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fv`MtP\"#|f?Wwk");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "fv`MtP\"#|f?Wwk");
      String string0 = zipFileDocument0.getName();
      assertEquals("fv`MtP\"#|f?Wwk", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".zXp");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "tEmp");
      zipFileDocument0.getWriter();
      InputStream inputStream0 = zipFileDocument0.getInputStream();
      assertNotNull(inputStream0);
      assertEquals("tEmp", zipFileDocument0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "");
      // Undeclared exception!
      try { 
        zipFileDocument0.writeTmpFile("tmp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5>7R^MB}lD!u4Q", "5>7R^MB}lD!u4Q");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "5>7R^MB}lD!u4Q");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        zipFileDocument0.writeTmpFile("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q{k8%L,tB;/U");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, (String) null);
      zipFileDocument0.setLocation((Object) null);
      // Undeclared exception!
      try { 
        zipFileDocument0.readable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.ZipFileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "");
      Object object0 = new Object();
      zipFileDocument0.setLocation(object0);
      // Undeclared exception!
      try { 
        zipFileDocument0.readable();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s5}_r", "s5}_r");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "s5}_r");
      zipFileDocument0.setLocation((Object) null);
      // Undeclared exception!
      try { 
        zipFileDocument0.getInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".zip", ".zip");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, ".zip");
      zipFileDocument0.getOutputStream();
      try { 
        zipFileDocument0.getInputStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".gz");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, ".gz");
      mockFile0.createNewFile();
      try { 
        zipFileDocument0.getInputStream();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipFileDocument zipFileDocument0 = null;
      try {
        zipFileDocument0 = new ZipFileDocument((File) null, "qZH_.sIxJG.@");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".zXp");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "tEmp");
      zipFileDocument0.getWriter();
      boolean boolean0 = zipFileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".zip");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "tEmp");
      zipFileDocument0.getWriter();
      mockFile0.setReadable(false);
      boolean boolean0 = zipFileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fv`MtP\"#|f?Wwk");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "fv`MtP\"#|f?Wwk");
      boolean boolean0 = zipFileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".zip", ".zip");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, ".zip");
      zipFileDocument0.getOutputStream();
      boolean boolean0 = zipFileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".zip", ".zip");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, ".zip");
      zipFileDocument0.getOutputStream();
      zipFileDocument0.getInputStream();
      zipFileDocument0.getInputStream();
      assertEquals(".zip.gz", zipFileDocument0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s5}_r", "s5}_r");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "s5}_r");
      try { 
        zipFileDocument0.getInputStream();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, (String) null);
      // Undeclared exception!
      try { 
        zipFileDocument0.writeTmpFile(".gz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".gz", ".gz");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "");
      String string0 = zipFileDocument0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "");
      Object object0 = new Object();
      zipFileDocument0.setLocation(object0);
      // Undeclared exception!
      try { 
        zipFileDocument0.getInputStream();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }
}
