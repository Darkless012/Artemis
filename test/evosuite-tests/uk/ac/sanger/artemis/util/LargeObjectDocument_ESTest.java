/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 06:07:01 GMT 2017
 */

package uk.ac.sanger.artemis.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.postgresql.largeobject.LargeObject;
import uk.ac.sanger.artemis.util.Document;
import uk.ac.sanger.artemis.util.LargeObjectDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LargeObjectDocument_ESTest extends LargeObjectDocument_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LargeObject largeObject0 = mock(LargeObject.class, new ViolatedAssumptionAnswer());
      LargeObjectDocument largeObjectDocument0 = new LargeObjectDocument("", "", largeObject0);
      boolean boolean0 = largeObjectDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LargeObject largeObject0 = mock(LargeObject.class, new ViolatedAssumptionAnswer());
      LargeObjectDocument largeObjectDocument0 = new LargeObjectDocument("", "", largeObject0);
      Document document0 = largeObjectDocument0.getParent();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LargeObject largeObject0 = mock(LargeObject.class, new ViolatedAssumptionAnswer());
      LargeObjectDocument largeObjectDocument0 = new LargeObjectDocument("", "", largeObject0);
      OutputStream outputStream0 = largeObjectDocument0.getOutputStream();
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LargeObject largeObject0 = mock(LargeObject.class, new ViolatedAssumptionAnswer());
      LargeObjectDocument largeObjectDocument0 = new LargeObjectDocument("", "", largeObject0);
      Document document0 = largeObjectDocument0.append("");
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LargeObject largeObject0 = mock(LargeObject.class, new ViolatedAssumptionAnswer());
      LargeObjectDocument largeObjectDocument0 = new LargeObjectDocument("*zJcQ", (String) null, largeObject0);
      String string0 = largeObjectDocument0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LargeObject largeObject0 = mock(LargeObject.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(largeObject0).getInputStream();
      LargeObjectDocument largeObjectDocument0 = new LargeObjectDocument("*(`XF%", "*(`XF%", largeObject0);
      // Undeclared exception!
      try { 
        largeObjectDocument0.getInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LargeObjectDocument largeObjectDocument0 = null;
      try {
        largeObjectDocument0 = new LargeObjectDocument((String) null, "G&_XMr 'fr%vV_R0xV", (LargeObject) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(inputStream0).read();
      LargeObject largeObject0 = mock(LargeObject.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0, (InputStream) null).when(largeObject0).getInputStream();
      LargeObjectDocument largeObjectDocument0 = new LargeObjectDocument("g:", "iS]T&vU5PiI7]gKw+z", largeObject0);
      largeObjectDocument0.getInputStream();
      assertEquals("iS]T&vU5PiI7]gKw+z", largeObjectDocument0.getName());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LargeObject largeObject0 = mock(LargeObject.class, new ViolatedAssumptionAnswer());
      LargeObjectDocument largeObjectDocument0 = new LargeObjectDocument("XKXcLloj?\"4V", "", largeObject0);
      boolean boolean0 = largeObjectDocument0.writable();
      assertEquals("", largeObjectDocument0.getName());
      assertFalse(boolean0);
  }
}
