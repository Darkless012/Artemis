/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 29 06:07:14 GMT 2017
 */

package uk.ac.sanger.artemis.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.util.InputStreamProgressListener;
import uk.ac.sanger.artemis.util.InputStreamProgressListenerVector;
import uk.ac.sanger.artemis.util.ProgressInputStream;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProgressInputStream_ESTest extends ProgressInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2472, (byte) (-46));
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(byteArrayInputStream0, inputStreamProgressListenerVector0);
      int int0 = progressInputStream0.read(byteArray0, 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(pipedInputStream0, inputStreamProgressListenerVector0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        progressInputStream0.read(byteArray0, 1362, 1362);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(mockFileInputStream0, inputStreamProgressListenerVector0);
      byte[] byteArray0 = new byte[3];
      try { 
        progressInputStream0.read(byteArray0, (int) (byte)17, 4445);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(sequenceInputStream0, inputStreamProgressListenerVector0);
      // Undeclared exception!
      try { 
        progressInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-86), 16);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(dataInputStream0, inputStreamProgressListenerVector0);
      // Undeclared exception!
      try { 
        progressInputStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3206);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(pipedInputStream0, inputStreamProgressListenerVector0);
      byte[] byteArray0 = new byte[1];
      try { 
        progressInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      ProgressInputStream progressInputStream0 = new ProgressInputStream((InputStream) null, inputStreamProgressListenerVector0);
      // Undeclared exception!
      try { 
        progressInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      inputStreamProgressListenerVector0.add((InputStreamProgressListener) null);
      ProgressInputStream progressInputStream0 = new ProgressInputStream(bufferedInputStream0, inputStreamProgressListenerVector0);
      // Undeclared exception!
      try { 
        progressInputStream0.read(byteArray0, (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.ProgressInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ProgressInputStream progressInputStream0 = new ProgressInputStream(dataInputStream0, (InputStreamProgressListenerVector) null);
      byte[] byteArray0 = new byte[0];
      int int0 = progressInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(bufferedInputStream0, inputStreamProgressListenerVector0);
      int int0 = progressInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 10000);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, dataInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(bufferedInputStream0, inputStreamProgressListenerVector0);
      int int0 = progressInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-86), 16);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(dataInputStream0, inputStreamProgressListenerVector0);
      progressInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = new InputStreamProgressListenerVector();
      ProgressInputStream progressInputStream0 = new ProgressInputStream(mockFileInputStream0, inputStreamProgressListenerVector0);
      byte[] byteArray0 = new byte[4];
      int int0 = progressInputStream0.read(byteArray0, (int) (byte)0, 0);
      assertEquals(0, int0);
  }
}
