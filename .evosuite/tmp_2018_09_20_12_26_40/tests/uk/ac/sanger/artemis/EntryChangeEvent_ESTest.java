/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 14:23:56 GMT 2018
 */

package uk.ac.sanger.artemis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.EntryChangeEvent;
import uk.ac.sanger.artemis.Feature;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class EntryChangeEvent_ESTest extends EntryChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent("term=", (Entry) null, 0);
      int int0 = entryChangeEvent0.getType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, (-1467));
      int int0 = entryChangeEvent0.getType();
      assertEquals((-1467), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent("", (Entry) null, 3002);
      entryChangeEvent0.getFeature();
      assertEquals(3002, entryChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent("", (Entry) null, 3002);
      entryChangeEvent0.getEntry();
      assertEquals(3002, entryChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      EntryChangeEvent entryChangeEvent0 = null;
      try {
        entryChangeEvent0 = new EntryChangeEvent((Entry) null, feature0, 1616);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, true, (-2417));
      boolean boolean0 = entryChangeEvent0.isDuplicate();
      assertTrue(boolean0);
      assertEquals((-2417), entryChangeEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, 1833);
      int int0 = entryChangeEvent0.getType();
      assertEquals(1833, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      EntryChangeEvent entryChangeEvent0 = null;
      try {
        entryChangeEvent0 = new EntryChangeEvent((Entry) null, feature0, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      EntryChangeEvent entryChangeEvent0 = null;
      try {
        entryChangeEvent0 = new EntryChangeEvent((Object) null, entry0, (-2210));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Entry entry0 = mock(Entry.class, new ViolatedAssumptionAnswer());
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      EntryChangeEvent entryChangeEvent0 = new EntryChangeEvent(entry0, feature0, 1833);
      entryChangeEvent0.isDuplicate();
      assertEquals(1833, entryChangeEvent0.getType());
  }
}
