/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 13:03:28 GMT 2018
 */

package uk.ac.sanger.artemis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.io.PartialSequence;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class PartialSequence_ESTest extends PartialSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-3561));
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, (-504), (-1), (Short) null, integer0);
      partialSequence0.setFromChar((char[]) null);
      assertEquals((-504), partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short)3281);
      Integer integer0 = new Integer((short)3281);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1740, 1740, short0, integer0);
      int int0 = partialSequence0.length();
      assertEquals(1740, int0);
      assertEquals(0, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)116);
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-128), (-128), short0, integer0);
      int int0 = partialSequence0.length();
      assertEquals((-128), int0);
      assertEquals(0, partialSequence0.getTCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)1);
      Integer integer0 = new Integer((short)1);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      String string0 = partialSequence0.getSubSequence((short)1, 0);
      assertEquals(0, partialSequence0.length());
      assertFalse(partialSequence0.isComplement());
      assertEquals(0, partialSequence0.getACount());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[6];
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 103, 103, (Short) null, integer0);
      partialSequence0.getStrand();
      assertEquals(103, partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      partialSequence0.getStrand();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getGCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      partialSequence0.getStrand();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Short short0 = new Short((short)394);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 0, (-2782), short0, (Integer) null);
      partialSequence0.getStrand();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-3561));
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, (-504), (-1), (Short) null, integer0);
      partialSequence0.getSequence();
      assertEquals((-504), partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short) (-2036));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, (Integer) null);
      partialSequence0.getSequence();
      assertEquals(0, partialSequence0.getACount());
      assertEquals(0, partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short short0 = new Short((short) (-584));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 1, 912, short0, (Integer) null);
      partialSequence0.getPhase();
      assertEquals(1, partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(1636);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      partialSequence0.getPhase();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short) (-113));
      Integer integer0 = new Integer((short) (-113));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1387), (-1387), short0, integer0);
      partialSequence0.getPhase();
      assertEquals(0, partialSequence0.getACount());
      assertEquals((-1387), partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-4952), (-4952), short0, integer0);
      int int0 = partialSequence0.getOtherCount();
      assertEquals(0, int0);
      assertEquals((-4952), partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-285), 0, (Short) null, integer0);
      partialSequence0.charAt(0);
      assertEquals(0, partialSequence0.getTCount());
      assertEquals((-285), partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Short short0 = new Short((short)1);
      char[] charArray0 = new char[2];
      charArray0[1] = '6';
      Integer integer0 = new Integer(1187);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (short)1, 2, short0, integer0);
      partialSequence0.charAt(1);
      assertEquals(1, partialSequence0.length());
      assertEquals(0, partialSequence0.getGCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      Short short0 = new Short((short)509);
      Integer integer0 = new Integer((-1080));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1080), (-1080), short0, integer0);
      char char0 = partialSequence0.charAt(0);
      assertEquals('S', char0);
      assertEquals((-1080), partialSequence0.length());
      assertEquals(0, partialSequence0.getTCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 2029, 0, (Short) null, (Integer) null);
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[0];
      Integer integer0 = new Integer(1039);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-797), (-797), (Short) null, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.isComplement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Short short0 = new Short((short)1300);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, (-2569), (-2569), short0, (Integer) null);
      // Undeclared exception!
      try { 
        partialSequence0.getSubSequence((-2569), (-2569));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[4];
      Short short0 = new Short((short) (-705));
      Integer integer0 = new Integer(1);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, (-2500), short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getSubSequence(0, (-2500));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)116);
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-128), (-128), short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getSubSequence((-128), 2995);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      partialSequence0.clear();
      // Undeclared exception!
      try { 
        partialSequence0.getCharSubSequence((-2774), (-2774));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short) (-2036));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, (Integer) null);
      // Undeclared exception!
      try { 
        partialSequence0.getCharSubSequence(2329, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)727);
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 2225, short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.getCharSubSequence(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2225
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[15];
      Integer integer0 = new Integer('|');
      PartialSequence partialSequence0 = new PartialSequence(charArray0, '|', '|', (Short) null, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.charAt('|');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 124
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer((-3651));
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, (-1505), (-1505), short0, integer0);
      boolean boolean0 = partialSequence0.isComplement();
      assertTrue(boolean0);
      assertEquals((-1505), partialSequence0.length());
      assertEquals(0, partialSequence0.getCCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short) (-1239));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 99, 2465, short0, (Integer) null);
      boolean boolean0 = partialSequence0.isComplement();
      assertEquals(99, partialSequence0.length());
      assertFalse(boolean0);
      assertEquals(0, partialSequence0.getOtherCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)1);
      Integer integer0 = new Integer((-424));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, (-424), short0, integer0);
      char[] charArray1 = partialSequence0.getCharSubSequence((short)1, 0);
      assertEquals(0, charArray1.length);
      assertEquals(0, partialSequence0.length());
      assertFalse(partialSequence0.isComplement());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Short short0 = new Short((short)394);
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, 0, (-2782), short0, (Integer) null);
      int int0 = partialSequence0.length();
      assertEquals(0, partialSequence0.getTCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer((-3651));
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, (-1505), (-1505), short0, integer0);
      int int0 = partialSequence0.getGCount();
      assertEquals(0, int0);
      assertEquals((-1505), partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[0];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer((-1));
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 886, (-1), short0, integer0);
      int int0 = partialSequence0.getTCount();
      assertEquals(886, partialSequence0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[0];
      Integer integer0 = new Integer(1039);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-797), (-797), (Short) null, integer0);
      int int0 = partialSequence0.getACount();
      assertEquals((-797), partialSequence0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(1636);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      int int0 = partialSequence0.getCCount();
      assertEquals(0, int0);
      assertEquals(0, partialSequence0.length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[2] = 't';
      Short short0 = new Short((short) (-1679));
      Integer integer0 = new Integer('t');
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 'g', 't', short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[1] = 'g';
      Short short0 = new Short((short) (-1679));
      Integer integer0 = new Integer('t');
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 'g', 't', short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'c';
      Short short0 = new Short((short)96);
      Integer integer0 = new Integer('c');
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 'c', 'c', short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'a';
      Short short0 = new Short((short)138);
      Integer integer0 = new Integer('a');
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 'a', 'a', short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.setFromChar(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      char[] charArray1 = partialSequence0.getCharSubSequence(0, 0);
      assertEquals(0, partialSequence0.length());
      assertEquals(1, partialSequence0.getOtherCount());
      assertArrayEquals(new char[] {'@'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Short short0 = new Short((short)4470);
      Integer integer0 = new Integer((-2204));
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, (-1), (-1), short0, integer0);
      partialSequence0.getStrand();
      assertEquals((-1), partialSequence0.length());
      assertEquals(0, partialSequence0.getTCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)1);
      Integer integer0 = new Integer((short)1);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      partialSequence0.getSequence();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getACount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer((short)0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      String string0 = partialSequence0.getSubSequence(1, 1);
      assertEquals(0, partialSequence0.length());
      assertEquals("\u0000", string0);
      assertEquals(0, partialSequence0.getTCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[1];
      Short short0 = new Short((short) (-1));
      Integer integer0 = new Integer(0);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      partialSequence0.getPhase();
      assertEquals(0, partialSequence0.length());
      assertEquals(0, partialSequence0.getGCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Short short0 = new Short((short)4470);
      Integer integer0 = new Integer((-2204));
      PartialSequence partialSequence0 = new PartialSequence((char[]) null, (-1), (-1), short0, integer0);
      // Undeclared exception!
      try { 
        partialSequence0.charAt((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[6];
      Short short0 = new Short((short)1277);
      Integer integer0 = new Integer((short)1277);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, (-1989), (-1989), short0, integer0);
      partialSequence0.clear();
      // Undeclared exception!
      try { 
        partialSequence0.getOtherCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.io.PartialSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[3];
      Short short0 = new Short((short)1);
      Integer integer0 = new Integer((short)1);
      PartialSequence partialSequence0 = new PartialSequence(charArray0, 0, 0, short0, integer0);
      int int0 = partialSequence0.getOtherCount();
      assertEquals(3, int0);
      assertEquals(0, partialSequence0.length());
  }
}
