/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 12:24:23 GMT 2018
 */

package uk.ac.sanger.artemis.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTKeyStroke;
import java.awt.Dialog;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.NoSuchElementException;
import java.util.Properties;
import javax.swing.Box;
import javax.swing.JDesktopPane;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Feature;
import uk.ac.sanger.artemis.editor.DataViewInternalFrame;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class DataViewInternalFrame_ESTest extends DataViewInternalFrame_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hashtable<Integer, AWTKeyStroke> hashtable0 = new Hashtable<Integer, AWTKeyStroke>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertNotNull(jDesktopPane0);
      
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, (JScrollPane) null, 335, 3022, "!Ot=S_Aq6`.F%#", (Feature) null);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertNotNull(dataViewInternalFrame0);
      
      String string0 = dataViewInternalFrame0.getFeatureText();
      assertEquals("/!Ot=S_Aq6`.F%#", string0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hashtable<AWTKeyStroke, DataViewInternalFrame.ActiveJSplitPane> hashtable0 = new Hashtable<AWTKeyStroke, DataViewInternalFrame.ActiveJSplitPane>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertNotNull(jDesktopPane0);
      
      JScrollPane jScrollPane0 = new JScrollPane();
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertNotNull(jScrollPane0);
      
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, jScrollPane0, 429, 1, "", (Feature) null);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertNotNull(dataViewInternalFrame0);
      
      String string0 = dataViewInternalFrame0.getFeatureText();
      assertEquals("", string0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hashtable<AWTKeyStroke, DataViewInternalFrame.ActiveJSplitPane> hashtable0 = new Hashtable<AWTKeyStroke, DataViewInternalFrame.ActiveJSplitPane>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertNotNull(jDesktopPane0);
      
      JScrollPane jScrollPane0 = new JScrollPane();
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertNotNull(jScrollPane0);
      
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, jScrollPane0, 429, 1, "", (Feature) null);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertNotNull(dataViewInternalFrame0);
      
      // Undeclared exception!
      try { 
        dataViewInternalFrame0.reReadSelectedResults();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.DataViewInternalFrame", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      DataViewInternalFrame dataViewInternalFrame0 = null;
      try {
        dataViewInternalFrame0 = new DataViewInternalFrame(properties0, (JDesktopPane) null, (JScrollPane) null, 0, 0, "", (Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.DataViewInternalFrame", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hashtable<Integer, AWTKeyStroke> hashtable0 = new Hashtable<Integer, AWTKeyStroke>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertNotNull(jDesktopPane0);
      
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, (JScrollPane) null, 335, 3022, "!Ot=S_Aq6`.F%#", (Feature) null);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertNotNull(dataViewInternalFrame0);
      
      JList<Object> jList0 = new JList<Object>();
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertNotNull(jList0);
      
      DataViewInternalFrame.ActiveJSplitPane dataViewInternalFrame_ActiveJSplitPane0 = dataViewInternalFrame0.new ActiveJSplitPane(0, jDesktopPane0, jList0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(dataViewInternalFrame_ActiveJSplitPane0.isFocusTraversalPolicyProvider());
      assertFalse(dataViewInternalFrame_ActiveJSplitPane0.getIgnoreRepaint());
      assertFalse(dataViewInternalFrame_ActiveJSplitPane0.isFocusTraversalPolicySet());
      assertTrue(dataViewInternalFrame_ActiveJSplitPane0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame_ActiveJSplitPane0.isFocusCycleRoot());
      assertNotNull(dataViewInternalFrame_ActiveJSplitPane0);
      
      // Undeclared exception!
      try { 
        dataViewInternalFrame_ActiveJSplitPane0.setActive(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.DataViewInternalFrame$ActiveJSplitPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hashtable<Integer, AWTKeyStroke> hashtable0 = new Hashtable<Integer, AWTKeyStroke>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertNotNull(jDesktopPane0);
      
      JScrollPane jScrollPane0 = new JScrollPane();
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertNotNull(jScrollPane0);
      
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, jScrollPane0, 256, (-299), "'#I", (Feature) null);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertNotNull(dataViewInternalFrame0);
      
      DataViewInternalFrame.ActiveJSplitPane dataViewInternalFrame_ActiveJSplitPane0 = dataViewInternalFrame0.new ActiveJSplitPane(0, jScrollPane0, dataViewInternalFrame0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(dataViewInternalFrame_ActiveJSplitPane0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame_ActiveJSplitPane0.getIgnoreRepaint());
      assertFalse(dataViewInternalFrame_ActiveJSplitPane0.isFocusCycleRoot());
      assertFalse(dataViewInternalFrame_ActiveJSplitPane0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame_ActiveJSplitPane0.isFocusTraversalPolicyProvider());
      assertNotNull(dataViewInternalFrame_ActiveJSplitPane0);
      
      // Undeclared exception!
      try { 
        dataViewInternalFrame_ActiveJSplitPane0.setActive(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.DataViewInternalFrame$ActiveJSplitPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hashtable<Integer, AWTKeyStroke> hashtable0 = new Hashtable<Integer, AWTKeyStroke>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertNotNull(jDesktopPane0);
      
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, (JScrollPane) null, 335, 3022, "!Ot=S_Aq6`.F%#", (Feature) null);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertNotNull(dataViewInternalFrame0);
      
      dataViewInternalFrame0.setDataDividerLocation();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hashtable<Integer, AWTKeyStroke> hashtable0 = new Hashtable<Integer, AWTKeyStroke>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertNotNull(jDesktopPane0);
      
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, (JScrollPane) null, 4, 5, "/similarity=/'#I", (Feature) null);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertNotNull(dataViewInternalFrame0);
      
      // Undeclared exception!
      try { 
        dataViewInternalFrame0.updateNote();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hashtable<Integer, AWTKeyStroke> hashtable0 = new Hashtable<Integer, AWTKeyStroke>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertNotNull(jDesktopPane0);
      
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, (JScrollPane) null, 335, 3022, "!Ot=S_Aq6`.F%#", (Feature) null);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertNotNull(dataViewInternalFrame0);
      
      dataViewInternalFrame0.stopGetz();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Dialog.ModalityType, Dialog.ModalityType> hashMap0 = new HashMap<Dialog.ModalityType, Dialog.ModalityType>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Hashtable<Dialog.ModalityType, Dialog.ModalityType> hashtable0 = new Hashtable<Dialog.ModalityType, Dialog.ModalityType>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertNotNull(jDesktopPane0);
      
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.DOCUMENT_MODAL;
      hashtable0.put(dialog_ModalityType0, dialog_ModalityType0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      DataViewInternalFrame dataViewInternalFrame0 = null;
      try {
        dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, (JScrollPane) null, 0, 0, "", (Feature) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Dialog$ModalityType cannot be cast to java.lang.String
         //
         verifyException("uk.ac.sanger.artemis.editor.DataViewInternalFrame", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hashtable<Integer, AWTKeyStroke> hashtable0 = new Hashtable<Integer, AWTKeyStroke>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertNotNull(jDesktopPane0);
      
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, (JScrollPane) null, 335, 3022, "!Ot=S_Aq6`.F%#", (Feature) null);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(dataViewInternalFrame0);
      
      Box box0 = dataViewInternalFrame0.getEvidenceBox();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.getIgnoreRepaint());
      assertNotNull(box0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hashtable<AWTKeyStroke, DataViewInternalFrame.ActiveJSplitPane> hashtable0 = new Hashtable<AWTKeyStroke, DataViewInternalFrame.ActiveJSplitPane>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertNotNull(jDesktopPane0);
      
      JScrollPane jScrollPane0 = new JScrollPane();
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertNotNull(jScrollPane0);
      
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, jScrollPane0, (-442), 1445, "%", (Feature) null);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(dataViewInternalFrame0);
      
      dataViewInternalFrame0.deleteNote();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hashtable<Integer, AWTKeyStroke> hashtable0 = new Hashtable<Integer, AWTKeyStroke>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertNotNull(jDesktopPane0);
      
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, (JScrollPane) null, 335, 3022, "!Ot=S_Aq6`.F%#", (Feature) null);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(dataViewInternalFrame0);
      
      dataViewInternalFrame0.updateNote();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertTrue(dataViewInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(dataViewInternalFrame0.getIgnoreRepaint());
      assertTrue(dataViewInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hashtable<Integer, AWTKeyStroke> hashtable0 = new Hashtable<Integer, AWTKeyStroke>();
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, (JScrollPane) null, 335, 3022, "!Ot=S_Aq6`.F%#", (Feature) null);
      dataViewInternalFrame0.setAnnotationDividerLocation();
      assertFalse(dataViewInternalFrame0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hashtable<Integer, AWTKeyStroke> hashtable0 = new Hashtable<Integer, AWTKeyStroke>();
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, (JScrollPane) null, 335, 3022, "!Ot=S_Aq6`.F%#", (Feature) null);
      JList<Object> jList0 = new JList<Object>();
      DataViewInternalFrame.ActiveJSplitPane dataViewInternalFrame_ActiveJSplitPane0 = dataViewInternalFrame0.new ActiveJSplitPane(0, jDesktopPane0, jList0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      dataViewInternalFrame_ActiveJSplitPane0.setLabel(defaultTreeCellRenderer0);
      dataViewInternalFrame_ActiveJSplitPane0.setActive(true);
      assertFalse(dataViewInternalFrame_ActiveJSplitPane0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hashtable<AWTKeyStroke, DataViewInternalFrame.ActiveJSplitPane> hashtable0 = new Hashtable<AWTKeyStroke, DataViewInternalFrame.ActiveJSplitPane>();
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      JScrollPane jScrollPane0 = new JScrollPane();
      DataViewInternalFrame dataViewInternalFrame0 = new DataViewInternalFrame(hashtable0, jDesktopPane0, jScrollPane0, 429, 1, "", (Feature) null);
      DataViewInternalFrame.TabChangeListener dataViewInternalFrame_TabChangeListener0 = dataViewInternalFrame0.new TabChangeListener();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      ChangeEvent changeEvent0 = new ChangeEvent(defaultTableModel0);
      // Undeclared exception!
      try { 
        dataViewInternalFrame_TabChangeListener0.stateChanged(changeEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.editor.DataViewInternalFrame$TabChangeListener", e);
      }
  }
}
