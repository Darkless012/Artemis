/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 13:59:32 GMT 2018
 */

package org.gmod.schema.phylogeny;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Collection;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gmod.schema.cv.CvTerm;
import org.gmod.schema.phylogeny.Phylonode;
import org.gmod.schema.phylogeny.PhylonodeDbXRef;
import org.gmod.schema.phylogeny.PhylonodeOrganism;
import org.gmod.schema.phylogeny.PhylonodeProp;
import org.gmod.schema.phylogeny.PhylonodePub;
import org.gmod.schema.phylogeny.PhylonodeRelationship;
import org.gmod.schema.phylogeny.Phylotree;
import org.gmod.schema.sequence.Feature;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Phylonode_ESTest extends Phylonode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode((-2721), phylotree0, (-980), 3772);
      int int0 = phylonode0.getRightIdx();
      assertEquals(3772, int0);
      assertEquals((-980), phylonode0.getLeftIdx());
      assertEquals((-2721), phylonode0.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode((-1467), phylotree0, 0, (-1467));
      int int0 = phylonode0.getRightIdx();
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals((-1467), phylonode0.getPhylonodeId());
      assertEquals((-1467), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setPhylonodeRelationshipsForSubjectId((Set<PhylonodeRelationship>) null);
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setPhylonodePubs((Set<PhylonodePub>) null);
      Collection<PhylonodePub> collection0 = phylonode0.getPhylonodePubs();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode((-1035), (Phylotree) null, 0, 0);
      assertEquals((-1035), phylonode0.getPhylonodeId());
      
      phylonode0.setPhylonodeId(0);
      int int0 = phylonode0.getPhylonodeId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setPhylonodeId(2053);
      int int0 = phylonode0.getPhylonodeId();
      assertEquals(2053, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode(0, phylotree0, (-1), 32);
      phylonode0.setPhylonodeDbXRefs((Set<PhylonodeDbXRef>) null);
      phylonode0.getPhylonodeDbXRefs();
      assertEquals(0, phylonode0.getPhylonodeId());
      assertEquals((-1), phylonode0.getLeftIdx());
      assertEquals(32, phylonode0.getRightIdx());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode(3590, (Phylotree) null, 3590, 1460);
      phylonode0.setRightIdx((-1));
      phylonode0.setParent(phylonode0);
      phylonode0.getParent();
      assertEquals((-1), phylonode0.getRightIdx());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode(3590, (Phylotree) null, 3590, 1460);
      phylonode0.setParent(phylonode0);
      Phylonode phylonode1 = phylonode0.getParent();
      assertEquals(3590, phylonode1.getLeftIdx());
      assertEquals(1460, phylonode1.getRightIdx());
      assertEquals(3590, phylonode1.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = new Phylonode((-2650), phylotree0, 255, 0);
      phylonode0.setParent(phylonode1);
      Phylonode phylonode2 = phylonode0.getParent();
      assertEquals(255, phylonode2.getLeftIdx());
      assertEquals(0, phylonode2.getRightIdx());
      assertEquals((-2650), phylonode2.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode(2023, phylotree0, 705, 0);
      int int0 = phylonode0.getLeftIdx();
      assertEquals(0, phylonode0.getRightIdx());
      assertEquals(705, int0);
      assertEquals(2023, phylonode0.getPhylonodeId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setLeftIdx((-1684));
      int int0 = phylonode0.getLeftIdx();
      assertEquals((-1684), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setLabel("YZ{IKWlQ-vdXd\"rsw");
      String string0 = phylonode0.getLabel();
      assertEquals("YZ{IKWlQ-vdXd\"rsw", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setLabel("");
      String string0 = phylonode0.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Double double0 = new Double(0.0);
      phylonode0.setDistance(double0);
      Double double1 = phylonode0.getDistance();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode(3590, (Phylotree) null, 3590, 1460);
      Double double0 = new Double(2928.87151517115);
      phylonode0.setDistance(double0);
      phylonode0.getDistance();
      assertEquals(1460, phylonode0.getRightIdx());
      assertEquals(3590, phylonode0.getPhylonodeId());
      assertEquals(3590, phylonode0.getLeftIdx());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode((-1035), (Phylotree) null, 0, 0);
      Double double0 = new Double((-1035));
      phylonode0.setDistance(double0);
      phylonode0.getDistance();
      assertEquals((-1035), phylonode0.getPhylonodeId());
      assertEquals(0, phylonode0.getLeftIdx());
      assertEquals(0, phylonode0.getRightIdx());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Phylotree phylotree0 = mock(Phylotree.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode0 = new Phylonode((-1108), phylotree0, (-1108), (-1108));
      int int0 = phylonode0.getPhylonodeId();
      assertEquals((-1108), int0);
      assertEquals((-1108), phylonode0.getLeftIdx());
      assertEquals((-1108), phylonode0.getRightIdx());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForSubjectId();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Collection<Phylonode> collection0 = phylonode0.getPhylonodes();
      assertFalse(collection0.contains(phylonode0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Phylonode phylonode1 = phylonode0.getParent();
      assertNull(phylonode1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      int int0 = phylonode0.getRightIdx();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setPhylonodeOrganisms((Set<PhylonodeOrganism>) null);
      Collection<PhylonodeOrganism> collection0 = phylonode0.getPhylonodeOrganisms();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Collection<PhylonodePub> collection0 = phylonode0.getPhylonodePubs();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setPhylonodes((Set<Phylonode>) null);
      Collection<Phylonode> collection0 = phylonode0.getPhylonodes();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setPhylotree((Phylotree) null);
      assertNull(phylonode0.getLabel());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Double double0 = phylonode0.getDistance();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      String string0 = phylonode0.getLabel();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setPhylonodeRelationshipsForObjectId((Set<PhylonodeRelationship>) null);
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setPhylonodeProps((Set<PhylonodeProp>) null);
      Collection<PhylonodeProp> collection0 = phylonode0.getPhylonodeProps();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Phylotree phylotree0 = phylonode0.getPhylotree();
      assertNull(phylotree0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      int int0 = phylonode0.getLeftIdx();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      CvTerm cvTerm0 = phylonode0.getCvTerm();
      assertNull(cvTerm0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Collection<PhylonodeProp> collection0 = phylonode0.getPhylonodeProps();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Collection<PhylonodeRelationship> collection0 = phylonode0.getPhylonodeRelationshipsForObjectId();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      phylonode0.setCvTerm(cvTerm0);
      assertNull(phylonode0.getDistance());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Feature feature0 = mock(Feature.class, new ViolatedAssumptionAnswer());
      phylonode0.setFeature(feature0);
      assertNull(phylonode0.getLabel());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setParent(phylonode0);
      Phylonode phylonode1 = phylonode0.getParent();
      assertEquals(0, phylonode1.getLeftIdx());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Collection<PhylonodeOrganism> collection0 = phylonode0.getPhylonodeOrganisms();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Feature feature0 = phylonode0.getFeature();
      assertNull(feature0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      Collection<PhylonodeDbXRef> collection0 = phylonode0.getPhylonodeDbXRefs();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Phylonode phylonode0 = new Phylonode();
      phylonode0.setLeftIdx((-2721));
      phylonode0.setParent(phylonode0);
      phylonode0.getParent();
      assertEquals((-2721), phylonode0.getLeftIdx());
  }
}
