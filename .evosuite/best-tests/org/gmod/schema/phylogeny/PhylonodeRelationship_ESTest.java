/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 19 19:33:19 GMT 2018
 */

package org.gmod.schema.phylogeny;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gmod.schema.cv.CvTerm;
import org.gmod.schema.phylogeny.Phylonode;
import org.gmod.schema.phylogeny.PhylonodeRelationship;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class PhylonodeRelationship_ESTest extends PhylonodeRelationship_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship();
      Integer integer0 = new Integer(772);
      phylonodeRelationship0.setRank(integer0);
      Integer integer1 = phylonodeRelationship0.getRank();
      assertEquals(772, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship(593, (Phylonode) null, (Phylonode) null, (CvTerm) null);
      Integer integer0 = new Integer((-2421));
      phylonodeRelationship0.setRank(integer0);
      phylonodeRelationship0.getRank();
      assertEquals(593, phylonodeRelationship0.getPhylonodeRelationshipId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship();
      phylonodeRelationship0.setPhylonodeRelationshipId(255);
      int int0 = phylonodeRelationship0.getPhylonodeRelationshipId();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship(593, (Phylonode) null, (Phylonode) null, (CvTerm) null);
      phylonodeRelationship0.setPhylonodeRelationshipId((-1477));
      int int0 = phylonodeRelationship0.getPhylonodeRelationshipId();
      assertEquals((-1477), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship();
      Phylonode phylonode0 = phylonodeRelationship0.getPhylonodeBySubjectId();
      assertNull(phylonode0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Phylonode phylonode0 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship(0, phylonode0, phylonode1, (CvTerm) null);
      Phylonode phylonode2 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      phylonodeRelationship0.setPhylonodeByObjectId(phylonode2);
      assertEquals(0, phylonodeRelationship0.getPhylonodeRelationshipId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Phylonode phylonode0 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship(0, phylonode0, phylonode1, (CvTerm) null);
      Phylonode phylonode2 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      phylonodeRelationship0.setPhylonodeBySubjectId(phylonode2);
      assertEquals(0, phylonodeRelationship0.getPhylonodeRelationshipId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Phylonode phylonode0 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship(0, phylonode0, phylonode1, (CvTerm) null);
      phylonodeRelationship0.getRank();
      assertEquals(0, phylonodeRelationship0.getPhylonodeRelationshipId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Phylonode phylonode0 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(phylonode0).toString();
      CvTerm cvTerm0 = mock(CvTerm.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship(0, phylonode0, phylonode0, cvTerm0, integer0);
      phylonodeRelationship0.getPhylonodeBySubjectId();
      assertEquals(0, phylonodeRelationship0.getPhylonodeRelationshipId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Phylonode phylonode0 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(phylonode1).toString();
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship(0, phylonode0, phylonode1, (CvTerm) null);
      Phylonode phylonode2 = phylonodeRelationship0.getPhylonodeByObjectId();
      assertEquals(0, phylonodeRelationship0.getPhylonodeRelationshipId());
      assertSame(phylonode2, phylonode1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship();
      Phylonode phylonode0 = phylonodeRelationship0.getPhylonodeByObjectId();
      assertNull(phylonode0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Phylonode phylonode0 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship(0, phylonode0, phylonode1, (CvTerm) null);
      phylonodeRelationship0.getCvTerm();
      assertEquals(0, phylonodeRelationship0.getPhylonodeRelationshipId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Phylonode phylonode0 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship(0, phylonode0, phylonode1, (CvTerm) null);
      Integer integer0 = new Integer(0);
      phylonodeRelationship0.setRank(integer0);
      phylonodeRelationship0.getRank();
      assertEquals(0, phylonodeRelationship0.getPhylonodeRelationshipId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Phylonode phylonode0 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship(0, phylonode0, phylonode1, (CvTerm) null);
      int int0 = phylonodeRelationship0.getPhylonodeRelationshipId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Phylonode phylonode0 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      Phylonode phylonode1 = mock(Phylonode.class, new ViolatedAssumptionAnswer());
      PhylonodeRelationship phylonodeRelationship0 = new PhylonodeRelationship(0, phylonode0, phylonode1, (CvTerm) null);
      phylonodeRelationship0.setCvTerm((CvTerm) null);
      assertEquals(0, phylonodeRelationship0.getPhylonodeRelationshipId());
  }
}
