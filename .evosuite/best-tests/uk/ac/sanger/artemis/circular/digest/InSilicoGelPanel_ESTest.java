/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 12:28:32 GMT 2018
 */

package uk.ac.sanger.artemis.circular.digest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.IllegalComponentStateException;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.JInternalFrame;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import org.apache.batik.anim.dom.SVG12DOMImplementation;
import org.apache.batik.anim.dom.SVG12OMDocument;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGDocumentBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.dom.AbstractNode;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.script.InterpreterPool;
import org.apache.batik.svggen.CachedImageHandlerBase64Encoder;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import uk.ac.sanger.artemis.circular.digest.CutSite;
import uk.ac.sanger.artemis.circular.digest.FragmentBand;
import uk.ac.sanger.artemis.circular.digest.InSilicoGelPanel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class InSilicoGelPanel_ESTest extends InSilicoGelPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SVGDocumentBridge sVGDocumentBridge0 = new SVGDocumentBridge();
      assertEquals(0.0F, sVGDocumentBridge0.getFontSize(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportHeight(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportWidth(), 0.01F);
      assertNull(sVGDocumentBridge0.getNamespaceURI());
      assertNull(sVGDocumentBridge0.getLocalName());
      assertNotNull(sVGDocumentBridge0);
      
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("all", userAgentAdapter0.getMedia());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertNotNull(userAgentAdapter0);
      
      InterpreterPool interpreterPool0 = new InterpreterPool();
      assertNotNull(interpreterPool0);
      
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("all", userAgentAdapter0.getMedia());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertNotNull(documentLoader0);
      
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("all", userAgentAdapter0.getMedia());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isDynamic());
      assertEquals(0.26458332F, bridgeContext0.getPixelToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isSVG12());
      assertEquals(0.26458332F, bridgeContext0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, bridgeContext0.getMediumFontSize(), 0.01F);
      assertFalse(bridgeContext0.isInteractive());
      assertNotNull(bridgeContext0);
      assertEquals(1, BridgeContext.INTERACTIVE);
      assertEquals(0, BridgeContext.STATIC);
      assertEquals(2, BridgeContext.DYNAMIC);
      
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("document", "document", "Invalid character");
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertNull(genericDocumentType0.getInternalSubset());
      assertEquals("document", genericDocumentType0.getName());
      assertNotNull(genericDocumentType0);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      assertNotNull(sVG12DOMImplementation0);
      
      SVG12OMDocument sVG12OMDocument0 = new SVG12OMDocument(genericDocumentType0, sVG12DOMImplementation0);
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertNull(genericDocumentType0.getInternalSubset());
      assertEquals("document", genericDocumentType0.getName());
      assertEquals("1.0", sVG12OMDocument0.getXmlVersion());
      assertTrue(sVG12OMDocument0.getStrictErrorChecking());
      assertNull(sVG12OMDocument0.getDocumentURI());
      assertTrue(sVG12OMDocument0.hasChildNodes());
      assertEquals("#document", sVG12OMDocument0.getNodeName());
      assertFalse(sVG12OMDocument0.isSVG12());
      assertNull(sVG12OMDocument0.getNamespaceURI());
      assertFalse(sVG12OMDocument0.getXmlStandalone());
      assertNull(sVG12OMDocument0.getXmlEncoding());
      assertNull(sVG12OMDocument0.getURL());
      assertEquals((short)9, sVG12OMDocument0.getNodeType());
      assertFalse(sVG12OMDocument0.isReadonly());
      assertNull(sVG12OMDocument0.getDomain());
      assertFalse(sVG12OMDocument0.getEventsEnabled());
      assertNull(sVG12OMDocument0.getInputEncoding());
      assertEquals("", sVG12OMDocument0.getReferrer());
      assertNotNull(sVG12OMDocument0);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      
      RootGraphicsNode rootGraphicsNode0 = sVGDocumentBridge0.createGraphicsNode(bridgeContext0, sVG12OMDocument0);
      assertEquals(0.0F, sVGDocumentBridge0.getFontSize(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportHeight(), 0.01F);
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportWidth(), 0.01F);
      assertNull(sVGDocumentBridge0.getLocalName());
      assertNull(sVGDocumentBridge0.getNamespaceURI());
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelToMM(), 0.01F);
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("all", userAgentAdapter0.getMedia());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isDynamic());
      assertEquals(0.26458332F, bridgeContext0.getPixelToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isSVG12());
      assertEquals(0.26458332F, bridgeContext0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, bridgeContext0.getMediumFontSize(), 0.01F);
      assertFalse(bridgeContext0.isInteractive());
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertNull(genericDocumentType0.getInternalSubset());
      assertEquals("document", genericDocumentType0.getName());
      assertEquals("1.0", sVG12OMDocument0.getXmlVersion());
      assertTrue(sVG12OMDocument0.getStrictErrorChecking());
      assertNull(sVG12OMDocument0.getDocumentURI());
      assertTrue(sVG12OMDocument0.hasChildNodes());
      assertEquals("#document", sVG12OMDocument0.getNodeName());
      assertFalse(sVG12OMDocument0.isSVG12());
      assertNull(sVG12OMDocument0.getNamespaceURI());
      assertFalse(sVG12OMDocument0.getXmlStandalone());
      assertNull(sVG12OMDocument0.getXmlEncoding());
      assertNull(sVG12OMDocument0.getURL());
      assertEquals((short)9, sVG12OMDocument0.getNodeType());
      assertFalse(sVG12OMDocument0.isReadonly());
      assertNull(sVG12OMDocument0.getDomain());
      assertFalse(sVG12OMDocument0.getEventsEnabled());
      assertNull(sVG12OMDocument0.getInputEncoding());
      assertEquals("", sVG12OMDocument0.getReferrer());
      assertEquals(0, rootGraphicsNode0.size());
      assertEquals(0, rootGraphicsNode0.getPointerEventType());
      assertTrue(rootGraphicsNode0.isVisible());
      assertTrue(rootGraphicsNode0.isEmpty());
      assertNotNull(rootGraphicsNode0);
      assertEquals(1, BridgeContext.INTERACTIVE);
      assertEquals(0, BridgeContext.STATIC);
      assertEquals(2, BridgeContext.DYNAMIC);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      
      MockFile mockFile0 = new MockFile("ni", "d)!dmAdG~N");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(rootGraphicsNode0, 337, mockFile0, "Invalid character");
      assertEquals(0.0F, sVGDocumentBridge0.getFontSize(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportHeight(), 0.01F);
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportWidth(), 0.01F);
      assertNull(sVGDocumentBridge0.getLocalName());
      assertNull(sVGDocumentBridge0.getNamespaceURI());
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelToMM(), 0.01F);
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("all", userAgentAdapter0.getMedia());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isDynamic());
      assertEquals(0.26458332F, bridgeContext0.getPixelToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isSVG12());
      assertEquals(0.26458332F, bridgeContext0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, bridgeContext0.getMediumFontSize(), 0.01F);
      assertFalse(bridgeContext0.isInteractive());
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertNull(genericDocumentType0.getInternalSubset());
      assertEquals("document", genericDocumentType0.getName());
      assertEquals("1.0", sVG12OMDocument0.getXmlVersion());
      assertTrue(sVG12OMDocument0.getStrictErrorChecking());
      assertNull(sVG12OMDocument0.getDocumentURI());
      assertTrue(sVG12OMDocument0.hasChildNodes());
      assertEquals("#document", sVG12OMDocument0.getNodeName());
      assertFalse(sVG12OMDocument0.isSVG12());
      assertNull(sVG12OMDocument0.getNamespaceURI());
      assertFalse(sVG12OMDocument0.getXmlStandalone());
      assertNull(sVG12OMDocument0.getXmlEncoding());
      assertNull(sVG12OMDocument0.getURL());
      assertEquals((short)9, sVG12OMDocument0.getNodeType());
      assertFalse(sVG12OMDocument0.isReadonly());
      assertNull(sVG12OMDocument0.getDomain());
      assertFalse(sVG12OMDocument0.getEventsEnabled());
      assertNull(sVG12OMDocument0.getInputEncoding());
      assertEquals("", sVG12OMDocument0.getReferrer());
      assertEquals(0, rootGraphicsNode0.size());
      assertEquals(0, rootGraphicsNode0.getPointerEventType());
      assertTrue(rootGraphicsNode0.isVisible());
      assertTrue(rootGraphicsNode0.isEmpty());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/ni/d)!dmAdG~N", mockFile0.toString());
      assertEquals("d)!dmAdG~N", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/ni", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertNotNull(inSilicoGelPanel0);
      assertEquals(1, BridgeContext.INTERACTIVE);
      assertEquals(0, BridgeContext.STATIC);
      assertEquals(2, BridgeContext.DYNAMIC);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      assertNotNull(imageHandlerBase64Encoder0);
      
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      assertNotNull(defaultExtensionHandler0);
      
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVG12OMDocument0, imageHandlerBase64Encoder0, defaultExtensionHandler0, false);
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertNull(genericDocumentType0.getInternalSubset());
      assertEquals("document", genericDocumentType0.getName());
      assertEquals("1.0", sVG12OMDocument0.getXmlVersion());
      assertTrue(sVG12OMDocument0.getStrictErrorChecking());
      assertNull(sVG12OMDocument0.getDocumentURI());
      assertTrue(sVG12OMDocument0.hasChildNodes());
      assertEquals("#document", sVG12OMDocument0.getNodeName());
      assertFalse(sVG12OMDocument0.isSVG12());
      assertNull(sVG12OMDocument0.getNamespaceURI());
      assertFalse(sVG12OMDocument0.getXmlStandalone());
      assertNull(sVG12OMDocument0.getXmlEncoding());
      assertNull(sVG12OMDocument0.getURL());
      assertEquals((short)9, sVG12OMDocument0.getNodeType());
      assertFalse(sVG12OMDocument0.isReadonly());
      assertNull(sVG12OMDocument0.getDomain());
      assertFalse(sVG12OMDocument0.getEventsEnabled());
      assertNull(sVG12OMDocument0.getInputEncoding());
      assertEquals("", sVG12OMDocument0.getReferrer());
      assertNotNull(sVGGraphics2D0);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals(3, SVGGraphics2D.DEFAULT_MAX_GC_OVERRIDES);
      
      inSilicoGelPanel0.paintComponent(sVGGraphics2D0);
      assertEquals(0.0F, sVGDocumentBridge0.getFontSize(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportHeight(), 0.01F);
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportWidth(), 0.01F);
      assertNull(sVGDocumentBridge0.getLocalName());
      assertNull(sVGDocumentBridge0.getNamespaceURI());
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelToMM(), 0.01F);
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("all", userAgentAdapter0.getMedia());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isDynamic());
      assertEquals(0.26458332F, bridgeContext0.getPixelToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isSVG12());
      assertEquals(0.26458332F, bridgeContext0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, bridgeContext0.getMediumFontSize(), 0.01F);
      assertFalse(bridgeContext0.isInteractive());
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertNull(genericDocumentType0.getInternalSubset());
      assertEquals("document", genericDocumentType0.getName());
      assertEquals("1.0", sVG12OMDocument0.getXmlVersion());
      assertTrue(sVG12OMDocument0.getStrictErrorChecking());
      assertNull(sVG12OMDocument0.getDocumentURI());
      assertTrue(sVG12OMDocument0.hasChildNodes());
      assertEquals("#document", sVG12OMDocument0.getNodeName());
      assertFalse(sVG12OMDocument0.isSVG12());
      assertNull(sVG12OMDocument0.getNamespaceURI());
      assertFalse(sVG12OMDocument0.getXmlStandalone());
      assertNull(sVG12OMDocument0.getXmlEncoding());
      assertNull(sVG12OMDocument0.getURL());
      assertEquals((short)9, sVG12OMDocument0.getNodeType());
      assertFalse(sVG12OMDocument0.isReadonly());
      assertNull(sVG12OMDocument0.getDomain());
      assertFalse(sVG12OMDocument0.getEventsEnabled());
      assertNull(sVG12OMDocument0.getInputEncoding());
      assertEquals("", sVG12OMDocument0.getReferrer());
      assertEquals(0, rootGraphicsNode0.size());
      assertEquals(0, rootGraphicsNode0.getPointerEventType());
      assertTrue(rootGraphicsNode0.isVisible());
      assertTrue(rootGraphicsNode0.isEmpty());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/ni/d)!dmAdG~N", mockFile0.toString());
      assertEquals("d)!dmAdG~N", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/ni", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertEquals(1, BridgeContext.INTERACTIVE);
      assertEquals(0, BridgeContext.STATIC);
      assertEquals(2, BridgeContext.DYNAMIC);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals(3, SVGGraphics2D.DEFAULT_MAX_GC_OVERRIDES);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<FragmentBand> arrayList0 = new ArrayList<FragmentBand>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FragmentBand fragmentBand0 = new FragmentBand();
      assertNotNull(fragmentBand0);
      
      fragmentBand0.genomeFragmentLength = (-312);
      boolean boolean0 = arrayList0.add(fragmentBand0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(fragmentBand0));
      
      MockFile mockFile0 = new MockFile("J0");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(arrayList0, (-1955), mockFile0, "J0");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("J0", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("J0", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertTrue(arrayList0.contains(fragmentBand0));
      assertNotNull(inSilicoGelPanel0);
      
      Point point0 = new Point((-1955), (-312));
      assertEquals((-312.0), point0.getY(), 0.01);
      assertEquals((-1955.0), point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals((-1955), point0.x);
      assertEquals((-312), point0.y);
      
      FragmentBand fragmentBand1 = inSilicoGelPanel0.getBandAtLocation(point0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("J0", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("J0", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertEquals((-312.0), point0.getY(), 0.01);
      assertEquals((-1955.0), point0.getX(), 0.01);
      assertTrue(arrayList0.contains(fragmentBand0));
      assertNull(fragmentBand1);
      assertEquals((-1955), point0.x);
      assertEquals((-312), point0.y);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<FragmentBand> vector0 = new Vector<FragmentBand>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      MockFile mockFile0 = new MockFile("rSXl");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(vector0, (-2428), mockFile0, "`l~.u'M");
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("rSXl", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("rSXl", mockFile0.getName());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertNotNull(inSilicoGelPanel0);
      
      InSilicoGelPanel.PopupListener inSilicoGelPanel_PopupListener0 = inSilicoGelPanel0.new PopupListener();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("rSXl", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("rSXl", mockFile0.getName());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertNotNull(inSilicoGelPanel_PopupListener0);
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(inSilicoGelPanel0, (-2428), 3995L, (-2428), 5, 1651, (-2428), false, Integer.MAX_VALUE, (-2428), 8935);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("rSXl", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("rSXl", mockFile0.getName());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals(8935, mouseWheelEvent0.getWheelRotation());
      assertEquals(3995L, mouseWheelEvent0.getWhen());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(Integer.MAX_VALUE, mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals((-21694180), mouseWheelEvent0.getUnitsToScroll());
      assertEquals(1651, mouseWheelEvent0.getY());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals((-2428), mouseWheelEvent0.getClickCount());
      assertEquals((-2428), mouseWheelEvent0.getScrollAmount());
      assertEquals((-2147483644), mouseWheelEvent0.getModifiers());
      assertEquals((-2428), mouseWheelEvent0.getID());
      assertEquals(5, mouseWheelEvent0.getX());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertNotNull(mouseWheelEvent0);
      
      inSilicoGelPanel_PopupListener0.mouseReleased(mouseWheelEvent0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("rSXl", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("rSXl", mockFile0.getName());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals(8935, mouseWheelEvent0.getWheelRotation());
      assertEquals(3995L, mouseWheelEvent0.getWhen());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(Integer.MAX_VALUE, mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals((-21694180), mouseWheelEvent0.getUnitsToScroll());
      assertEquals(1651, mouseWheelEvent0.getY());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals((-2428), mouseWheelEvent0.getClickCount());
      assertEquals((-2428), mouseWheelEvent0.getScrollAmount());
      assertEquals((-2147483644), mouseWheelEvent0.getModifiers());
      assertEquals((-2428), mouseWheelEvent0.getID());
      assertEquals(5, mouseWheelEvent0.getX());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<CutSite> vector0 = new Vector<CutSite>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel((-1381), vector0, (-1381), (File) null, "#0.0");
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertNotNull(inSilicoGelPanel0);
      
      // Undeclared exception!
      try { 
        inSilicoGelPanel0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SVGDocumentBridge sVGDocumentBridge0 = new SVGDocumentBridge();
      assertEquals(0.0F, sVGDocumentBridge0.getViewportHeight(), 0.01F);
      assertNull(sVGDocumentBridge0.getNamespaceURI());
      assertNull(sVGDocumentBridge0.getLocalName());
      assertEquals(0.0F, sVGDocumentBridge0.getFontSize(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportWidth(), 0.01F);
      assertNotNull(sVGDocumentBridge0);
      
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals("all", userAgentAdapter0.getMedia());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertNotNull(userAgentAdapter0);
      
      InterpreterPool interpreterPool0 = new InterpreterPool();
      assertNotNull(interpreterPool0);
      
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals("all", userAgentAdapter0.getMedia());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertNotNull(documentLoader0);
      
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals("all", userAgentAdapter0.getMedia());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals(0.26458332F, bridgeContext0.getPixelUnitToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isSVG12());
      assertFalse(bridgeContext0.isInteractive());
      assertEquals(12.0F, bridgeContext0.getMediumFontSize(), 0.01F);
      assertEquals(0.26458332F, bridgeContext0.getPixelToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isDynamic());
      assertNotNull(bridgeContext0);
      assertEquals(2, BridgeContext.DYNAMIC);
      assertEquals(1, BridgeContext.INTERACTIVE);
      assertEquals(0, BridgeContext.STATIC);
      
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("document", "document", "Invalid character");
      assertNull(genericDocumentType0.getInternalSubset());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getName());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertNotNull(genericDocumentType0);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      assertNotNull(sVG12DOMImplementation0);
      
      SVG12OMDocument sVG12OMDocument0 = new SVG12OMDocument(genericDocumentType0, sVG12DOMImplementation0);
      assertNull(genericDocumentType0.getInternalSubset());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getName());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertNull(sVG12OMDocument0.getDomain());
      assertNull(sVG12OMDocument0.getNamespaceURI());
      assertNull(sVG12OMDocument0.getXmlEncoding());
      assertEquals((short)9, sVG12OMDocument0.getNodeType());
      assertFalse(sVG12OMDocument0.getXmlStandalone());
      assertTrue(sVG12OMDocument0.getStrictErrorChecking());
      assertTrue(sVG12OMDocument0.hasChildNodes());
      assertFalse(sVG12OMDocument0.getEventsEnabled());
      assertEquals("#document", sVG12OMDocument0.getNodeName());
      assertFalse(sVG12OMDocument0.isReadonly());
      assertNull(sVG12OMDocument0.getURL());
      assertNull(sVG12OMDocument0.getInputEncoding());
      assertEquals("", sVG12OMDocument0.getReferrer());
      assertNull(sVG12OMDocument0.getDocumentURI());
      assertFalse(sVG12OMDocument0.isSVG12());
      assertEquals("1.0", sVG12OMDocument0.getXmlVersion());
      assertNotNull(sVG12OMDocument0);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      
      RootGraphicsNode rootGraphicsNode0 = sVGDocumentBridge0.createGraphicsNode(bridgeContext0, sVG12OMDocument0);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportHeight(), 0.01F);
      assertNull(sVGDocumentBridge0.getNamespaceURI());
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelUnitToMillimeter(), 0.01F);
      assertNull(sVGDocumentBridge0.getLocalName());
      assertEquals(0.0F, sVGDocumentBridge0.getFontSize(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportWidth(), 0.01F);
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelToMM(), 0.01F);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals("all", userAgentAdapter0.getMedia());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals(0.26458332F, bridgeContext0.getPixelUnitToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isSVG12());
      assertFalse(bridgeContext0.isInteractive());
      assertEquals(12.0F, bridgeContext0.getMediumFontSize(), 0.01F);
      assertEquals(0.26458332F, bridgeContext0.getPixelToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isDynamic());
      assertNull(genericDocumentType0.getInternalSubset());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getName());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertNull(sVG12OMDocument0.getDomain());
      assertNull(sVG12OMDocument0.getNamespaceURI());
      assertNull(sVG12OMDocument0.getXmlEncoding());
      assertEquals((short)9, sVG12OMDocument0.getNodeType());
      assertFalse(sVG12OMDocument0.getXmlStandalone());
      assertTrue(sVG12OMDocument0.getStrictErrorChecking());
      assertTrue(sVG12OMDocument0.hasChildNodes());
      assertFalse(sVG12OMDocument0.getEventsEnabled());
      assertEquals("#document", sVG12OMDocument0.getNodeName());
      assertFalse(sVG12OMDocument0.isReadonly());
      assertNull(sVG12OMDocument0.getURL());
      assertNull(sVG12OMDocument0.getInputEncoding());
      assertEquals("", sVG12OMDocument0.getReferrer());
      assertNull(sVG12OMDocument0.getDocumentURI());
      assertFalse(sVG12OMDocument0.isSVG12());
      assertEquals("1.0", sVG12OMDocument0.getXmlVersion());
      assertTrue(rootGraphicsNode0.isEmpty());
      assertEquals(0, rootGraphicsNode0.size());
      assertTrue(rootGraphicsNode0.isVisible());
      assertEquals(0, rootGraphicsNode0.getPointerEventType());
      assertNotNull(rootGraphicsNode0);
      assertEquals(2, BridgeContext.DYNAMIC);
      assertEquals(1, BridgeContext.INTERACTIVE);
      assertEquals(0, BridgeContext.STATIC);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      
      MockFile mockFile0 = new MockFile("ni", "d)!dmAdG~N");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(rootGraphicsNode0, 337, mockFile0, "Invalid character");
      assertEquals(0.0F, sVGDocumentBridge0.getViewportHeight(), 0.01F);
      assertNull(sVGDocumentBridge0.getNamespaceURI());
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelUnitToMillimeter(), 0.01F);
      assertNull(sVGDocumentBridge0.getLocalName());
      assertEquals(0.0F, sVGDocumentBridge0.getFontSize(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportWidth(), 0.01F);
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelToMM(), 0.01F);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals("all", userAgentAdapter0.getMedia());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals(0.26458332F, bridgeContext0.getPixelUnitToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isSVG12());
      assertFalse(bridgeContext0.isInteractive());
      assertEquals(12.0F, bridgeContext0.getMediumFontSize(), 0.01F);
      assertEquals(0.26458332F, bridgeContext0.getPixelToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isDynamic());
      assertNull(genericDocumentType0.getInternalSubset());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getName());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertNull(sVG12OMDocument0.getDomain());
      assertNull(sVG12OMDocument0.getNamespaceURI());
      assertNull(sVG12OMDocument0.getXmlEncoding());
      assertEquals((short)9, sVG12OMDocument0.getNodeType());
      assertFalse(sVG12OMDocument0.getXmlStandalone());
      assertTrue(sVG12OMDocument0.getStrictErrorChecking());
      assertTrue(sVG12OMDocument0.hasChildNodes());
      assertFalse(sVG12OMDocument0.getEventsEnabled());
      assertEquals("#document", sVG12OMDocument0.getNodeName());
      assertFalse(sVG12OMDocument0.isReadonly());
      assertNull(sVG12OMDocument0.getURL());
      assertNull(sVG12OMDocument0.getInputEncoding());
      assertEquals("", sVG12OMDocument0.getReferrer());
      assertNull(sVG12OMDocument0.getDocumentURI());
      assertFalse(sVG12OMDocument0.isSVG12());
      assertEquals("1.0", sVG12OMDocument0.getXmlVersion());
      assertTrue(rootGraphicsNode0.isEmpty());
      assertEquals(0, rootGraphicsNode0.size());
      assertTrue(rootGraphicsNode0.isVisible());
      assertEquals(0, rootGraphicsNode0.getPointerEventType());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("d)!dmAdG~N", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/ni", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/ni/d)!dmAdG~N", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertNotNull(inSilicoGelPanel0);
      assertEquals(2, BridgeContext.DYNAMIC);
      assertEquals(1, BridgeContext.INTERACTIVE);
      assertEquals(0, BridgeContext.STATIC);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      assertNotNull(imageHandlerBase64Encoder0);
      
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      assertNotNull(defaultExtensionHandler0);
      
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVG12OMDocument0, imageHandlerBase64Encoder0, defaultExtensionHandler0, false);
      assertNull(genericDocumentType0.getInternalSubset());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getName());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertNull(sVG12OMDocument0.getDomain());
      assertNull(sVG12OMDocument0.getNamespaceURI());
      assertNull(sVG12OMDocument0.getXmlEncoding());
      assertEquals((short)9, sVG12OMDocument0.getNodeType());
      assertFalse(sVG12OMDocument0.getXmlStandalone());
      assertTrue(sVG12OMDocument0.getStrictErrorChecking());
      assertTrue(sVG12OMDocument0.hasChildNodes());
      assertFalse(sVG12OMDocument0.getEventsEnabled());
      assertEquals("#document", sVG12OMDocument0.getNodeName());
      assertFalse(sVG12OMDocument0.isReadonly());
      assertNull(sVG12OMDocument0.getURL());
      assertNull(sVG12OMDocument0.getInputEncoding());
      assertEquals("", sVG12OMDocument0.getReferrer());
      assertNull(sVG12OMDocument0.getDocumentURI());
      assertFalse(sVG12OMDocument0.isSVG12());
      assertEquals("1.0", sVG12OMDocument0.getXmlVersion());
      assertNotNull(sVGGraphics2D0);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals(3, SVGGraphics2D.DEFAULT_MAX_GC_OVERRIDES);
      
      DebugGraphics debugGraphics0 = new DebugGraphics(sVGGraphics2D0, inSilicoGelPanel0);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportHeight(), 0.01F);
      assertNull(sVGDocumentBridge0.getNamespaceURI());
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelUnitToMillimeter(), 0.01F);
      assertNull(sVGDocumentBridge0.getLocalName());
      assertEquals(0.0F, sVGDocumentBridge0.getFontSize(), 0.01F);
      assertEquals(0.0F, sVGDocumentBridge0.getViewportWidth(), 0.01F);
      assertEquals(0.26458332F, sVGDocumentBridge0.getPixelToMM(), 0.01F);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals("all", userAgentAdapter0.getMedia());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals(0.26458332F, bridgeContext0.getPixelUnitToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isSVG12());
      assertFalse(bridgeContext0.isInteractive());
      assertEquals(12.0F, bridgeContext0.getMediumFontSize(), 0.01F);
      assertEquals(0.26458332F, bridgeContext0.getPixelToMillimeter(), 0.01F);
      assertFalse(bridgeContext0.isDynamic());
      assertNull(genericDocumentType0.getInternalSubset());
      assertTrue(genericDocumentType0.isReadonly());
      assertEquals("document", genericDocumentType0.getName());
      assertNull(genericDocumentType0.getNamespaceURI());
      assertEquals("Invalid character", genericDocumentType0.getSystemId());
      assertFalse(genericDocumentType0.hasChildNodes());
      assertEquals("document", genericDocumentType0.getNodeName());
      assertEquals((short)10, genericDocumentType0.getNodeType());
      assertEquals("document", genericDocumentType0.getPublicId());
      assertNull(sVG12OMDocument0.getDomain());
      assertNull(sVG12OMDocument0.getNamespaceURI());
      assertNull(sVG12OMDocument0.getXmlEncoding());
      assertEquals((short)9, sVG12OMDocument0.getNodeType());
      assertFalse(sVG12OMDocument0.getXmlStandalone());
      assertTrue(sVG12OMDocument0.getStrictErrorChecking());
      assertTrue(sVG12OMDocument0.hasChildNodes());
      assertFalse(sVG12OMDocument0.getEventsEnabled());
      assertEquals("#document", sVG12OMDocument0.getNodeName());
      assertFalse(sVG12OMDocument0.isReadonly());
      assertNull(sVG12OMDocument0.getURL());
      assertNull(sVG12OMDocument0.getInputEncoding());
      assertEquals("", sVG12OMDocument0.getReferrer());
      assertNull(sVG12OMDocument0.getDocumentURI());
      assertFalse(sVG12OMDocument0.isSVG12());
      assertEquals("1.0", sVG12OMDocument0.getXmlVersion());
      assertTrue(rootGraphicsNode0.isEmpty());
      assertEquals(0, rootGraphicsNode0.size());
      assertTrue(rootGraphicsNode0.isVisible());
      assertEquals(0, rootGraphicsNode0.getPointerEventType());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("d)!dmAdG~N", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/ni", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/Users/kp11/workspace/applications/Artemis-build-ci/Artemis/ni/d)!dmAdG~N", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertNotNull(debugGraphics0);
      assertEquals(2, BridgeContext.DYNAMIC);
      assertEquals(1, BridgeContext.INTERACTIVE);
      assertEquals(0, BridgeContext.STATIC);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)1, AbstractNode.DOCUMENT_POSITION_DISCONNECTED);
      assertEquals((short)32, AbstractNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
      assertEquals((short)2, AbstractNode.DOCUMENT_POSITION_PRECEDING);
      assertEquals((short)16, AbstractNode.DOCUMENT_POSITION_CONTAINED_BY);
      assertEquals((short)4, AbstractNode.DOCUMENT_POSITION_FOLLOWING);
      assertEquals((short)8, AbstractNode.DOCUMENT_POSITION_CONTAINS);
      assertEquals(3, SVGGraphics2D.DEFAULT_MAX_GC_OVERRIDES);
      
      // Undeclared exception!
      try { 
        inSilicoGelPanel0.paintComponent(debugGraphics0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.DebugGraphics cannot be cast to java.awt.Graphics2D
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.InSilicoGelPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<FragmentBand> arrayList0 = new ArrayList<FragmentBand>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      FragmentBand fragmentBand0 = new FragmentBand();
      assertNotNull(fragmentBand0);
      
      boolean boolean0 = arrayList0.add(fragmentBand0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(fragmentBand0));
      
      MockFile mockFile0 = new MockFile("J0");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(arrayList0, (-312), mockFile0, "J0");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("J0", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("J0", mockFile0.toString());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertTrue(arrayList0.contains(fragmentBand0));
      assertNotNull(inSilicoGelPanel0);
      
      // Undeclared exception!
      try { 
        inSilicoGelPanel0.getBandAtLocation((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.InSilicoGelPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      assertEquals(0, canvasGraphicsNode0.getPointerEventType());
      assertTrue(canvasGraphicsNode0.isVisible());
      assertTrue(canvasGraphicsNode0.isEmpty());
      assertEquals(0, canvasGraphicsNode0.size());
      assertNotNull(canvasGraphicsNode0);
      
      MockFile mockFile0 = new MockFile("SLA;f8Qd$0M");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(canvasGraphicsNode0, 55, mockFile0, "JwU;z^");
      assertEquals(0, canvasGraphicsNode0.getPointerEventType());
      assertTrue(canvasGraphicsNode0.isVisible());
      assertTrue(canvasGraphicsNode0.isEmpty());
      assertEquals(0, canvasGraphicsNode0.size());
      assertEquals("SLA;f8Qd$0M", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("SLA;f8Qd$0M", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertNotNull(inSilicoGelPanel0);
      
      // Undeclared exception!
      try { 
        inSilicoGelPanel0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.InSilicoGelPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      InSilicoGelPanel inSilicoGelPanel0 = null;
      try {
        inSilicoGelPanel0 = new InSilicoGelPanel((List<FragmentBand>) null, (-1), file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.InSilicoGelPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<FragmentBand> arrayList0 = new ArrayList<FragmentBand>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockFile mockFile0 = new MockFile("J0");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(arrayList0, (-1955), mockFile0, "J0");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("J0", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals("J0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertNotNull(inSilicoGelPanel0);
      
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("J0", false);
      assertTrue(jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jRadioButtonMenuItem0.isFocusCycleRoot());
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jRadioButtonMenuItem0.getIgnoreRepaint());
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertNotNull(jRadioButtonMenuItem0);
      
      ActionEvent actionEvent0 = new ActionEvent(jRadioButtonMenuItem0, (-1955), "Show cut site details", (-963L), (-1989));
      assertTrue(jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jRadioButtonMenuItem0.isFocusCycleRoot());
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jRadioButtonMenuItem0.getIgnoreRepaint());
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals((-1955), actionEvent0.getID());
      assertEquals((-1989), actionEvent0.getModifiers());
      assertEquals((-963L), actionEvent0.getWhen());
      assertEquals("Show cut site details", actionEvent0.getActionCommand());
      assertNotNull(actionEvent0);
      
      inSilicoGelPanel0.actionPerformed(actionEvent0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("J0", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals("J0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertTrue(jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jRadioButtonMenuItem0.isFocusCycleRoot());
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jRadioButtonMenuItem0.getIgnoreRepaint());
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals((-1955), actionEvent0.getID());
      assertEquals((-1989), actionEvent0.getModifiers());
      assertEquals((-963L), actionEvent0.getWhen());
      assertEquals("Show cut site details", actionEvent0.getActionCommand());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<FragmentBand> arrayList0 = new ArrayList<FragmentBand>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockFile mockFile0 = new MockFile("J0");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(arrayList0, (-1955), mockFile0, "J0");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("J0", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("J0", mockFile0.getName());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertNotNull(inSilicoGelPanel0);
      
      ActionEvent actionEvent0 = new ActionEvent("J0", (-312), ")N8mAD|t", 0L, (-1955));
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals((-312), actionEvent0.getID());
      assertEquals((-1955), actionEvent0.getModifiers());
      assertEquals(")N8mAD|t", actionEvent0.getActionCommand());
      assertNotNull(actionEvent0);
      
      // Undeclared exception!
      try { 
        inSilicoGelPanel0.actionPerformed(actionEvent0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class uk.ac.sanger.artemis.components.FileViewer
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.InSilicoGelPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<CutSite> linkedList0 = new LinkedList<CutSite>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(688, linkedList0, 688, mockFile0, "L#");
      assertEquals(0, linkedList0.size());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(inSilicoGelPanel0);
      
      InSilicoGelPanel.PopupListener inSilicoGelPanel_PopupListener0 = inSilicoGelPanel0.new PopupListener();
      assertEquals(0, linkedList0.size());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(inSilicoGelPanel_PopupListener0);
      
      MenuElement[] menuElementArray0 = new MenuElement[1];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      assertNotNull(menuSelectionManager0);
      
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(inSilicoGelPanel0, 602, 688, (-2062), 688, 688, 1974, false, menuElementArray0, menuSelectionManager0);
      assertEquals(0, linkedList0.size());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0, menuDragMouseEvent0.getXOnScreen());
      assertFalse(menuDragMouseEvent0.isAltDown());
      assertFalse(menuDragMouseEvent0.isMetaDown());
      assertEquals((-2147483598), menuDragMouseEvent0.getModifiers());
      assertEquals(1974, menuDragMouseEvent0.getClickCount());
      assertFalse(menuDragMouseEvent0.isPopupTrigger());
      assertTrue(menuDragMouseEvent0.isAltGraphDown());
      assertEquals(688, menuDragMouseEvent0.getY());
      assertEquals(688, menuDragMouseEvent0.getX());
      assertEquals(0, menuDragMouseEvent0.getYOnScreen());
      assertTrue(menuDragMouseEvent0.isControlDown());
      assertEquals(688L, menuDragMouseEvent0.getWhen());
      assertFalse(menuDragMouseEvent0.isShiftDown());
      assertEquals(602, menuDragMouseEvent0.getID());
      assertFalse(menuDragMouseEvent0.isConsumed());
      assertEquals(0, menuDragMouseEvent0.getButton());
      assertEquals(1, menuElementArray0.length);
      assertNotNull(menuDragMouseEvent0);
      
      inSilicoGelPanel_PopupListener0.mousePressed(menuDragMouseEvent0);
      assertEquals(0, linkedList0.size());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0, menuDragMouseEvent0.getXOnScreen());
      assertFalse(menuDragMouseEvent0.isAltDown());
      assertFalse(menuDragMouseEvent0.isMetaDown());
      assertEquals((-2147483598), menuDragMouseEvent0.getModifiers());
      assertEquals(1974, menuDragMouseEvent0.getClickCount());
      assertFalse(menuDragMouseEvent0.isPopupTrigger());
      assertTrue(menuDragMouseEvent0.isAltGraphDown());
      assertEquals(688, menuDragMouseEvent0.getY());
      assertEquals(688, menuDragMouseEvent0.getX());
      assertEquals(0, menuDragMouseEvent0.getYOnScreen());
      assertTrue(menuDragMouseEvent0.isControlDown());
      assertEquals(688L, menuDragMouseEvent0.getWhen());
      assertFalse(menuDragMouseEvent0.isShiftDown());
      assertEquals(602, menuDragMouseEvent0.getID());
      assertFalse(menuDragMouseEvent0.isConsumed());
      assertEquals(0, menuDragMouseEvent0.getButton());
      assertEquals(1, menuElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<FragmentBand> arrayList0 = new ArrayList<FragmentBand>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      FragmentBand fragmentBand0 = new FragmentBand();
      assertNotNull(fragmentBand0);
      
      boolean boolean0 = arrayList0.add(fragmentBand0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(fragmentBand0));
      
      MockFile mockFile0 = new MockFile("J0");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(arrayList0, (-1955), mockFile0, "J0");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertEquals("J0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("J0", mockFile0.getName());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertTrue(arrayList0.contains(fragmentBand0));
      assertNotNull(inSilicoGelPanel0);
      
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("J0", true);
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jRadioButtonMenuItem0.isFocusCycleRoot());
      assertTrue(jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jRadioButtonMenuItem0.getIgnoreRepaint());
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertNotNull(jRadioButtonMenuItem0);
      
      ActionEvent actionEvent0 = new ActionEvent(jRadioButtonMenuItem0, (-1955), "Show cut site details", (-963L), (-2005));
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jRadioButtonMenuItem0.isFocusCycleRoot());
      assertTrue(jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jRadioButtonMenuItem0.getIgnoreRepaint());
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals((-963L), actionEvent0.getWhen());
      assertEquals("Show cut site details", actionEvent0.getActionCommand());
      assertEquals((-1955), actionEvent0.getID());
      assertEquals((-2005), actionEvent0.getModifiers());
      assertNotNull(actionEvent0);
      
      inSilicoGelPanel0.actionPerformed(actionEvent0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertEquals("J0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("J0", mockFile0.getName());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jRadioButtonMenuItem0.isFocusCycleRoot());
      assertTrue(jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jRadioButtonMenuItem0.getIgnoreRepaint());
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals((-963L), actionEvent0.getWhen());
      assertEquals("Show cut site details", actionEvent0.getActionCommand());
      assertEquals((-1955), actionEvent0.getID());
      assertEquals((-2005), actionEvent0.getModifiers());
      assertTrue(arrayList0.contains(fragmentBand0));
      
      Point point0 = inSilicoGelPanel0.getLocation();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertEquals("J0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("J0", mockFile0.getName());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertTrue(arrayList0.contains(fragmentBand0));
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      FragmentBand fragmentBand1 = inSilicoGelPanel0.getBandAtLocation(point0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertEquals("J0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("J0", mockFile0.getName());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertSame(fragmentBand1, fragmentBand0);
      assertTrue(arrayList0.contains(fragmentBand1));
      assertNotNull(fragmentBand1);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<FragmentBand> arrayList0 = new ArrayList<FragmentBand>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FragmentBand fragmentBand0 = new FragmentBand();
      assertNotNull(fragmentBand0);
      
      boolean boolean0 = arrayList0.add(fragmentBand0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(fragmentBand0));
      
      MockFile mockFile0 = new MockFile("J0");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(arrayList0, (-1955), mockFile0, "J0");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("J0", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("J0", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertTrue(arrayList0.contains(fragmentBand0));
      assertNotNull(inSilicoGelPanel0);
      
      CachedImageHandlerBase64Encoder cachedImageHandlerBase64Encoder0 = new CachedImageHandlerBase64Encoder();
      assertEquals("", cachedImageHandlerBase64Encoder0.getRefPrefix());
      assertEquals(2, cachedImageHandlerBase64Encoder0.getBufferedImageType());
      assertNotNull(cachedImageHandlerBase64Encoder0);
      
      JInternalFrame jInternalFrame0 = new JInternalFrame("r}IqJ)x");
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(jInternalFrame0);
      
      BasicInternalFrameUI basicInternalFrameUI0 = new BasicInternalFrameUI(jInternalFrame0);
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(basicInternalFrameUI0);
      
      Dimension dimension0 = basicInternalFrameUI0.getPreferredSize(jInternalFrame0);
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(100.0, dimension0.getWidth(), 0.01);
      assertEquals(100.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      assertEquals(100, dimension0.width);
      assertEquals(100, dimension0.height);
      
      BufferedImage bufferedImage0 = cachedImageHandlerBase64Encoder0.buildBufferedImage(dimension0);
      assertEquals("", cachedImageHandlerBase64Encoder0.getRefPrefix());
      assertEquals(2, cachedImageHandlerBase64Encoder0.getBufferedImageType());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(100.0, dimension0.getWidth(), 0.01);
      assertEquals(100.0, dimension0.getHeight(), 0.01);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(100, bufferedImage0.getHeight());
      assertEquals(100, bufferedImage0.getTileWidth());
      assertEquals(100, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(100, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertNotNull(bufferedImage0);
      assertEquals(100, dimension0.width);
      assertEquals(100, dimension0.height);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertEquals("", cachedImageHandlerBase64Encoder0.getRefPrefix());
      assertEquals(2, cachedImageHandlerBase64Encoder0.getBufferedImageType());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(100.0, dimension0.getWidth(), 0.01);
      assertEquals(100.0, dimension0.getHeight(), 0.01);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(100, bufferedImage0.getHeight());
      assertEquals(100, bufferedImage0.getTileWidth());
      assertEquals(100, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(100, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertNotNull(sunGraphics2D0);
      assertEquals(100, dimension0.width);
      assertEquals(100, dimension0.height);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      
      inSilicoGelPanel0.paintComponent(sunGraphics2D0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("J0", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("J0", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertEquals("", cachedImageHandlerBase64Encoder0.getRefPrefix());
      assertEquals(2, cachedImageHandlerBase64Encoder0.getBufferedImageType());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(100.0, dimension0.getWidth(), 0.01);
      assertEquals(100.0, dimension0.getHeight(), 0.01);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(100, bufferedImage0.getHeight());
      assertEquals(100, bufferedImage0.getTileWidth());
      assertEquals(100, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(100, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(arrayList0.contains(fragmentBand0));
      assertEquals(100, dimension0.width);
      assertEquals(100, dimension0.height);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertEquals((-16777216), sunGraphics2D0.pixel);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<FragmentBand> arrayList0 = new ArrayList<FragmentBand>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FragmentBand fragmentBand0 = new FragmentBand();
      assertNotNull(fragmentBand0);
      
      boolean boolean0 = arrayList0.add(fragmentBand0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(fragmentBand0));
      
      boolean boolean1 = arrayList0.add(fragmentBand0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(fragmentBand0));
      
      MockFile mockFile0 = new MockFile("J0");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(arrayList0, (-312), mockFile0, "J0");
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("J0", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("J0", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertTrue(arrayList0.contains(fragmentBand0));
      assertNotNull(inSilicoGelPanel0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<FragmentBand> arrayList0 = new ArrayList<FragmentBand>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FragmentBand fragmentBand0 = new FragmentBand();
      assertNotNull(fragmentBand0);
      
      fragmentBand0.genomeFragmentLength = 5;
      boolean boolean0 = arrayList0.add(fragmentBand0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(fragmentBand0));
      
      MockFile mockFile0 = new MockFile("J0");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(arrayList0, (-1955), mockFile0, "J0");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("J0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("J0", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(inSilicoGelPanel0.getFocusTraversalKeysEnabled());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicySet());
      assertFalse(inSilicoGelPanel0.getIgnoreRepaint());
      assertFalse(inSilicoGelPanel0.isFocusTraversalPolicyProvider());
      assertFalse(inSilicoGelPanel0.isFocusCycleRoot());
      assertTrue(arrayList0.contains(fragmentBand0));
      assertNotNull(inSilicoGelPanel0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<CutSite> vector0 = new Vector<CutSite>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((CutSite) null);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("@L{,^n|vT&lJO~xlC!>", "@L{,^n|vT&lJO~xlC!>");
      assertNotNull(mockFile0);
      
      InSilicoGelPanel inSilicoGelPanel0 = null;
      try {
        inSilicoGelPanel0 = new InSilicoGelPanel(2464, vector0, 65533, mockFile0, "@L{,^n|vT&lJO~xlC!>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.digest.InSilicoGelPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      MockFile mockFile0 = new MockFile("| ");
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(2464, canvasGraphicsNode0, 2464, mockFile0, "| ");
      InSilicoGelPanel.PopupListener inSilicoGelPanel_PopupListener0 = inSilicoGelPanel0.new PopupListener();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(inSilicoGelPanel0, 2464, 2464, 2207, Integer.MAX_VALUE, Integer.MAX_VALUE, 1142, 341, (-4247), true, (-1527), 79, (-2945));
      // Undeclared exception!
      try { 
        inSilicoGelPanel_PopupListener0.mousePressed(mouseWheelEvent0);
        fail("Expecting exception: IllegalComponentStateException");
      
      } catch(IllegalComponentStateException e) {
         //
         // component must be showing on the screen to determine its location
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<FragmentBand> arrayList0 = new ArrayList<FragmentBand>();
      FragmentBand fragmentBand0 = new FragmentBand();
      arrayList0.add(fragmentBand0);
      MockFile mockFile0 = new MockFile("J0");
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(arrayList0, (-1955), mockFile0, "J0");
      Point point0 = new Point((-1955), (-312));
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("J0", true);
      ActionEvent actionEvent0 = new ActionEvent(jRadioButtonMenuItem0, (-1955), "Show cut site details", (-963L), (-2005));
      inSilicoGelPanel0.actionPerformed(actionEvent0);
      FragmentBand fragmentBand1 = inSilicoGelPanel0.getBandAtLocation(point0);
      assertNull(fragmentBand1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<FragmentBand> arrayList0 = new ArrayList<FragmentBand>();
      MockFile mockFile0 = new MockFile("J0");
      InSilicoGelPanel inSilicoGelPanel0 = new InSilicoGelPanel(arrayList0, (-1955), mockFile0, "J0");
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("J0", true);
      ActionEvent actionEvent0 = new ActionEvent(jRadioButtonMenuItem0, (-1955), "Show cut site details", (-963L), (-2005));
      inSilicoGelPanel0.actionPerformed(actionEvent0);
      CachedImageHandlerBase64Encoder cachedImageHandlerBase64Encoder0 = new CachedImageHandlerBase64Encoder();
      JInternalFrame jInternalFrame0 = new JInternalFrame("r}IqJ)x");
      BasicInternalFrameUI basicInternalFrameUI0 = new BasicInternalFrameUI(jInternalFrame0);
      Dimension dimension0 = basicInternalFrameUI0.getPreferredSize(jInternalFrame0);
      BufferedImage bufferedImage0 = cachedImageHandlerBase64Encoder0.buildBufferedImage(dimension0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      inSilicoGelPanel0.paintComponent(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.transX);
  }
}
