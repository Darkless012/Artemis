/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 20 11:48:32 GMT 2018
 */

package uk.ac.sanger.artemis.circular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.datatransfer.Clipboard;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.renderable.ParameterBlock;
import java.awt.print.PageFormat;
import java.util.Hashtable;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.DebugGraphics;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.xmlgraphics.java2d.DefaultGraphics2D;
import org.apache.xmlgraphics.java2d.GraphicsConfigurationWithoutTransparency;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.Entry;
import uk.ac.sanger.artemis.FeaturePredicate;
import uk.ac.sanger.artemis.FilteredEntryGroup;
import uk.ac.sanger.artemis.Selection;
import uk.ac.sanger.artemis.SimpleEntryGroup;
import uk.ac.sanger.artemis.circular.Block;
import uk.ac.sanger.artemis.circular.DNADraw;
import uk.ac.sanger.artemis.circular.Feature;
import uk.ac.sanger.artemis.circular.GCGraph;
import uk.ac.sanger.artemis.circular.GCSkewGraph;
import uk.ac.sanger.artemis.circular.Graph;
import uk.ac.sanger.artemis.circular.Track;
import uk.ac.sanger.artemis.circular.TrackManager;
import uk.ac.sanger.artemis.circular.UserGraph;
import uk.ac.sanger.artemis.io.Range;
import uk.ac.sanger.artemis.io.RangeVector;
import uk.ac.sanger.artemis.sequence.Bases;
import uk.ac.sanger.artemis.util.StringVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class DNADraw_ESTest extends DNADraw_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.isCircular();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw((Vector) null, (Vector) null, (Vector) null, (Vector) null);
      dNADraw0.setStartTick((-498));
      dNADraw0.getStartTick();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getStart();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getRestrictionEnzyme();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector<Color> vector0 = new Vector<Color>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.setMinorTickInterval(0);
      dNADraw0.getMinorTickInterval();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getLineSize();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<Color> vector0 = new Vector<Color>();
      Color color0 = Color.LIGHT_GRAY;
      vector0.add(color0);
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.getGeneticMarker();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<Color> vector0 = new Vector<Color>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.getGeneticMarker();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getEnd();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getBlock();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<UserGraph> vector0 = new Vector<UserGraph>(0, 0);
      DNADraw dNADraw0 = new DNADraw((Vector) null, vector0, vector0, vector0);
      dNADraw0.getBlock();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      dNADraw0.getAngleFromPosition(690, (-2098));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getAngleFromPosition((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      Hashtable<Integer, GCSkewGraph> hashtable0 = new Hashtable<Integer, GCSkewGraph>();
      // Undeclared exception!
      try { 
        dNADraw0.setLineAttributes(hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<Feature> vector0 = new Vector<Feature>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      PageFormat pageFormat0 = new PageFormat();
      // Undeclared exception!
      try { 
        dNADraw0.print((Graphics) null, pageFormat0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<UserGraph> stack0 = new Stack<UserGraph>();
      Vector<Feature> vector0 = new Vector<Feature>();
      DNADraw dNADraw0 = new DNADraw(stack0, vector0, stack0, vector0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      PageFormat pageFormat0 = new PageFormat();
      // Undeclared exception!
      try { 
        dNADraw0.print((Graphics) debugGraphics0, pageFormat0, (-944));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.DebugGraphics cannot be cast to java.awt.Graphics2D
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      MouseEvent mouseEvent0 = new MouseEvent(dNADraw0, 0, 0L, 0, 0, 0, 0, true);
      // Undeclared exception!
      try { 
        dNADraw0.getToolTipText(mouseEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      // Undeclared exception!
      try { 
        dNADraw0.getFeaturePoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^2*F:,";
      StringVector stringVector0 = new StringVector(stringArray0);
      DNADraw dNADraw0 = new DNADraw(stringVector0, stringVector0, stringVector0, stringVector0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtLocation(point0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to uk.ac.sanger.artemis.circular.Block
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      rangeVector0.add((Range) null);
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtBasePosition(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      // Undeclared exception!
      try { 
        dNADraw0.drop((DropTargetDropEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      // Undeclared exception!
      try { 
        dNADraw0.drawLinearPanel((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      // Undeclared exception!
      try { 
        dNADraw0.drawCircularPanel((Graphics2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      // Undeclared exception!
      try { 
        dNADraw0.dragEnter((DropTargetDragEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      Track track0 = new Track(2778.681, "3Fczmo*gf&8qT!", true, false, (Entry) null);
      // Undeclared exception!
      try { 
        dNADraw0.addFeaturesToTrack((List) null, track0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getSources();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Track track0 = new Track((-3.141592653589793), (Entry) null);
      // Undeclared exception!
      try { 
        dNADraw0.addFeatureToTrack((Feature) null, track0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector<AWTKeyStroke> vector0 = new Vector<AWTKeyStroke>();
      Hashtable<Object, DefaultGraphics2D> hashtable0 = new Hashtable<Object, DefaultGraphics2D>();
      DNADraw dNADraw0 = null;
      try {
        dNADraw0 = new DNADraw(vector0, vector0, hashtable0, 1526, 1526, 75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StringVector stringVector0 = new StringVector(stringArray0);
      DNADraw dNADraw0 = new DNADraw(stringVector0, stringVector0, stringVector0, stringVector0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtLocation(point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector<Feature> vector0 = new Vector<Feature>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      Point point0 = userAgentAdapter0.getClientAreaLocationOnScreen();
      dNADraw0.getBlockAtLocation(point0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector<GCGraph> vector0 = new Vector<GCGraph>();
      Vector<Block> vector1 = new Vector<Block>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector1);
      dNADraw0.getArtemisEntryGroup();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stack<AffineTransform> stack0 = new Stack<AffineTransform>();
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      dNADraw0.setGeneticMarker(stack0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.getBlockAtBasePosition(0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector<AffineTransform> vector0 = new Vector<AffineTransform>();
      Vector<GCSkewGraph> vector1 = new Vector<GCSkewGraph>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector1, vector0);
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      vector1.add(gCSkewGraph0);
      // Undeclared exception!
      try { 
        dNADraw0.getBlockAtBasePosition(157);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.circular.GCSkewGraph cannot be cast to uk.ac.sanger.artemis.circular.Block
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector<Feature> vector0 = new Vector<Feature>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      Feature feature0 = new Feature("circular", 1357, 1357, 1357);
      vector0.add(feature0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(dNADraw0, 1357, 1357, 71, 71, 71, (-568), true, (-500), 709, (-500));
      // Undeclared exception!
      try { 
        dNADraw0.getToolTipText((MouseEvent) mouseWheelEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // uk.ac.sanger.artemis.circular.Feature cannot be cast to uk.ac.sanger.artemis.circular.Block
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector<GCGraph> vector0 = new Vector<GCGraph>();
      Vector<Block> vector1 = new Vector<Block>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector1);
      dNADraw0.getFeaturePoints();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector<UserGraph> vector0 = new Vector<UserGraph>();
      Vector<MouseEvent> vector1 = new Vector<MouseEvent>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector1, vector0);
      MouseEvent mouseEvent0 = new MouseEvent(dNADraw0, 187, (-1L), 187, 0, 187, 0, false);
      vector1.add(mouseEvent0);
      // Undeclared exception!
      try { 
        dNADraw0.getFeaturePoints();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.MouseEvent cannot be cast to uk.ac.sanger.artemis.circular.Block
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      GCSkewGraph gCSkewGraph0 = new GCSkewGraph(dNADraw0);
      dNADraw0.containsGraph(gCSkewGraph0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<UserGraph> vector0 = new Vector<UserGraph>();
      Vector<MouseEvent> vector1 = new Vector<MouseEvent>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector1, vector0);
      DefaultGraphics2D defaultGraphics2D0 = new DefaultGraphics2D(true);
      // Undeclared exception!
      try { 
        dNADraw0.drawAll(defaultGraphics2D0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlgraphics.java2d.AbstractGraphics2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.setTickInterval((-88));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setStartTick(8929);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw((Vector) null, (Vector) null, (Vector) null, (Vector) null);
      dNADraw0.setStartTick((-498));
      dNADraw0.calculateTickPosistions();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Stack<Feature> stack0 = new Stack<Feature>();
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      dNADraw0.addBlock((Block) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector<Feature> vector0 = new Vector<Feature>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.zoomIn();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector<UserGraph> vector0 = new Vector<UserGraph>();
      Vector<MouseEvent> vector1 = new Vector<MouseEvent>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector1, vector0);
      MouseEvent mouseEvent0 = new MouseEvent(dNADraw0, 187, (-1L), 187, 9, 187, 0, true);
      dNADraw0.getToolTipText(mouseEvent0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector<UserGraph> vector0 = new Vector<UserGraph>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      FilteredEntryGroup filteredEntryGroup0 = new FilteredEntryGroup(simpleEntryGroup0, (FeaturePredicate) null, "Tick marks...");
      Entry entry0 = filteredEntryGroup0.createEntry();
      Track track0 = new Track(2297.0744632824, entry0);
      dNADraw0.addFeaturesToTrack(vector0, track0, true);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getVersion();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      GraphicsConfigurationWithoutTransparency graphicsConfigurationWithoutTransparency0 = new GraphicsConfigurationWithoutTransparency();
      BufferedImage bufferedImage0 = graphicsConfigurationWithoutTransparency0.createCompatibleImage(324, 324, 400);
      Graphics graphics0 = bufferedImage0.getGraphics();
      // Undeclared exception!
      try { 
        dNADraw0.paintComponent(graphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.circular.DNADraw", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getGcGraph();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.dropActionChanged((DragSourceDragEvent) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      SimpleEntryGroup simpleEntryGroup0 = new SimpleEntryGroup();
      dNADraw0.setArtemisEntryGroup(simpleEntryGroup0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.setLineSize((-88));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.setLineHeight(0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getBasesPerLine();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setBases((Bases) null);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getUserGraphs();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Vector<GCGraph> vector0 = new Vector<GCGraph>();
          Vector<Block> vector1 = new Vector<Block>();
          DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector1);
          // Undeclared exception!
          try { 
            dNADraw0.doPrintActions();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"queuePrintJob\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkPrintJobAccess(SecurityManager.java:1378)
             // java.awt.print.PrinterJob.getPrinterJob(PrinterJob.java:75)
             // uk.ac.sanger.artemis.circular.DNADraw.doPrintActions(DNADraw.java:1008)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setGcGraph((Graph) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getAngleFromPosition(0, 0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.zoomOut();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.getTrackManager();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector<Feature> vector0 = new Vector<Feature>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.setSingleBaseWidth((-891.29F));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector<MouseEvent> vector0 = new Vector<MouseEvent>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.setEnd(24);
      dNADraw0.setMinorTickInterval(2463);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.getLocationPoint();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector<Boolean> vector0 = new Vector<Boolean>();
      Stack<Integer> stack0 = new Stack<Integer>();
      DNADraw dNADraw0 = new DNADraw(vector0, stack0, vector0, stack0);
      dNADraw0.getBlock();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector<MouseEvent> vector0 = new Vector<MouseEvent>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.setBorderWidth2(945);
      dNADraw0.getBorderWidth2();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.getRestrictionEnzyme();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.setGcSkewGraph((Graph) null);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.getSingleBaseWidth();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setRestrictionEnzyme((Vector) null);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      // Undeclared exception!
      try { 
        dNADraw0.createImage((Block) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.dragOver((DragSourceDragEvent) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.dragDropEnd((DragSourceDropEvent) null);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vector<UserGraph> vector0 = new Vector<UserGraph>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.getDiameter();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Stack<Feature> stack0 = new Stack<Feature>();
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      dNADraw0.setTrackManager((TrackManager) null);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.setBasesPerLine(79);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setPlasmidLocation(10, 222);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Vector<Feature> vector0 = new Vector<Feature>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.getLineHeight();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      Feature feature0 = new Feature("mA_1o*.", 3304, 8080, 1);
      Track track0 = new Track(8080, "mA_1o*.", "6#T5{.#+#\"=n+@>~oJ7", true, false, true, (Entry) null);
      dNADraw0.addFeatureToTrack(feature0, track0, true);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getStartTick();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Stack<Boolean> stack0 = new Stack<Boolean>();
      DNADraw dNADraw0 = new DNADraw(stack0, stack0, stack0, stack0);
      dNADraw0.getTickInterval();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setCloseAndDispose(false, (JFrame) null);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Vector<Feature> vector0 = new Vector<Feature>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      dNADraw0.getBorderWidth2();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Vector<UserGraph> vector0 = new Vector<UserGraph>();
      Vector<MouseEvent> vector1 = new Vector<MouseEvent>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector1, vector0);
      dNADraw0.getMinorTickInterval();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.dropActionChanged((DropTargetDragEvent) null);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.getGcSkewGraph();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getGeneticMarker();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Clipboard clipboard0 = new Clipboard("");
      Selection selection0 = new Selection(clipboard0);
      RangeVector rangeVector0 = selection0.getSelectionRanges();
      DNADraw dNADraw0 = new DNADraw(rangeVector0, rangeVector0, rangeVector0, rangeVector0);
      dNADraw0.setBorderHeight2(1334);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setStart((-24576));
      dNADraw0.setMinorTickInterval(820);
      assertEquals(20000, dNADraw0.getBasesPerLine());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getBases();
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.dragExit((DragSourceEvent) null);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      DNADraw dNADraw0 = new DNADraw(vector0, vector0, vector0, vector0);
      int int0 = dNADraw0.getNumberOfLines();
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.getLineAttributes();
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.setNumberOfLines('T');
      assertEquals(84, dNADraw0.getNumberOfLines());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      int int0 = dNADraw0.getBorderHeight2();
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(20000, dNADraw0.getBasesPerLine());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      dNADraw0.dragEnter((DragSourceDragEvent) null);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertEquals(20000, dNADraw0.getBasesPerLine());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      boolean boolean0 = dNADraw0.setStartTick(0);
      assertEquals(200.0F, dNADraw0.getLineHeight(), 0.01F);
      assertTrue(boolean0);
      assertEquals(20000, dNADraw0.getBasesPerLine());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DNADraw dNADraw0 = new DNADraw();
      // Undeclared exception!
      try { 
        dNADraw0.createMenuBar();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DNADraw.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }
}
