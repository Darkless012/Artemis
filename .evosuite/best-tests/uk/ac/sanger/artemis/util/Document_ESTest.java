/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 06 19:30:10 GMT 2018
 */

package uk.ac.sanger.artemis.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLStreamHandler;
import javax.swing.JPasswordField;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.PlainDocument;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.junit.runner.RunWith;
import uk.ac.sanger.artemis.components.filetree.RemoteFileNode;
import uk.ac.sanger.artemis.j2ssh.SshLogin;
import uk.ac.sanger.artemis.util.ByteBuffer;
import uk.ac.sanger.artemis.util.DatabaseDocument;
import uk.ac.sanger.artemis.util.Document;
import uk.ac.sanger.artemis.util.FileDocument;
import uk.ac.sanger.artemis.util.InputStreamProgressListener;
import uk.ac.sanger.artemis.util.InputStreamProgressListenerVector;
import uk.ac.sanger.artemis.util.LinePushBackReader;
import uk.ac.sanger.artemis.util.RemoteFileDocument;
import uk.ac.sanger.artemis.util.TextDocument;
import uk.ac.sanger.artemis.util.URLDocument;
import uk.ac.sanger.artemis.util.ZipFileDocument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Document_ESTest extends Document_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("$^?%");
      DatabaseDocument databaseDocument0 = new DatabaseDocument("cU<VyR,H.gPo\"zR0f", jPasswordField0);
      boolean boolean0 = databaseDocument0.writable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLDocument uRLDocument0 = new URLDocument(uRL0);
      boolean boolean0 = uRLDocument0.writable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "internal error - created a null Document");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      Document document0 = fileDocument0.getParent();
      boolean boolean0 = document0.readable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("DR", "<");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      boolean boolean0 = fileDocument0.readable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("DR", "");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      fileDocument0.addInputStreamProgressListener(inputStreamProgressListener0);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = fileDocument0.getProgressListeners();
      assertEquals(1, inputStreamProgressListenerVector0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0);
      Document document0 = databaseDocument0.getParent();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      ByteBuffer byteBuffer0 = new ByteBuffer();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("hmKD[H$I?luL~+", jPasswordField0, "Global request succeeded", "hmKD[H$I?luL~+", byteBuffer0, "Global request succeeded");
      OutputStream outputStream0 = databaseDocument0.getOutputStream();
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDocument textDocument0 = new TextDocument();
      String string0 = textDocument0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("bec)!a _^", "bec)!a _^");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(file0, "org.biojava.bio.seq.Feature$ByLocationComparator");
      String string0 = zipFileDocument0.getName();
      assertEquals("org.biojava.bio.seq.Feature$ByLocationComparator", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      File file0 = mockJFileChooser0.getCurrentDirectory();
      FileDocument fileDocument0 = new FileDocument(file0);
      fileDocument0.setLocation(mockJFileChooser0);
      // Undeclared exception!
      try { 
        fileDocument0.writable();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.javax.swing.MockJFileChooser cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("DR", "");
      URL uRL0 = mockFile0.toURL();
      URLDocument uRLDocument0 = new URLDocument(uRL0);
      try { 
        uRLDocument0.getWriter();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // this Document can not be written to
         //
         verifyException("uk.ac.sanger.artemis.util.URLDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JPasswordField jPasswordField0 = new JPasswordField(defaultStyledDocument0, "G3.Q.G[Y9z", 134);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("G3.Q.G[Y9z", jPasswordField0);
      // Undeclared exception!
      try { 
        databaseDocument0.getWriter();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDocument textDocument0 = new TextDocument();
      // Undeclared exception!
      try { 
        textDocument0.getWriter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      File file0 = mockJFileChooser0.getCurrentDirectory();
      FileDocument fileDocument0 = new FileDocument(file0);
      try { 
        fileDocument0.getWriter();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("sHAOzO;^_#!n9mLW", "xap\"/}a)wWs", 0, "\" &Hiq", uRLStreamHandler0);
      URLDocument uRLDocument0 = new URLDocument(uRL0);
      // Undeclared exception!
      try { 
        uRLDocument0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sanger.artemis.util.URLDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLDocument uRLDocument0 = new URLDocument(uRL0);
      try { 
        uRLDocument0.getReader();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "");
      try { 
        zipFileDocument0.getReader();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDocument textDocument0 = new TextDocument();
      // Undeclared exception!
      try { 
        textDocument0.getOutputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      File file0 = mockJFileChooser0.getCurrentDirectory();
      FileDocument fileDocument0 = new FileDocument(file0);
      try { 
        fileDocument0.getOutputStream();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlainDocument plainDocument0 = new PlainDocument();
      JPasswordField jPasswordField0 = new JPasswordField(plainDocument0, "<Q", 3869);
      DatabaseDocument databaseDocument0 = new DatabaseDocument("<Q", jPasswordField0, "", "", (ByteBuffer) null, "");
      Document document0 = databaseDocument0.append("");
      // Undeclared exception!
      try { 
        document0.getName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      ByteBuffer byteBuffer0 = new ByteBuffer();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("HH2a4##", jPasswordField0, "HH2a4##", "uk.ac.sanger.artemis.util.Document", byteBuffer0, "f{6K{AssC'IkI3cy");
      // Undeclared exception!
      try { 
        databaseDocument0.getLinePushBackReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*iHKmVLa\"R");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "");
      zipFileDocument0.setLocation("*iHKmVLa\"R");
      // Undeclared exception!
      try { 
        zipFileDocument0.getLinePushBackReader();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.io.File
         //
         verifyException("uk.ac.sanger.artemis.util.FileDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDocument textDocument0 = new TextDocument();
      // Undeclared exception!
      try { 
        textDocument0.getLinePushBackReader();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("DR", "");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      try { 
        fileDocument0.getInputStream();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField("error - new location should have exactly one range ");
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "", "", true, inputStreamProgressListener0);
      // Undeclared exception!
      try { 
        databaseDocument0.getInputStream();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("eTt'P02Etn'Jo[`", jPasswordField0, "eTt'P02Etn'Jo[`", "eTt'P02Etn'Jo[`");
      Object object0 = databaseDocument0.getLocation();
      assertEquals("eTt'P02Etn'Jo[`", object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField(0);
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = null;
      try {
        databaseDocument0 = new DatabaseDocument((String) null, jPasswordField0, (String) null, (String) null, false, inputStreamProgressListener0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // internal error - created a null Document
         //
         verifyException("uk.ac.sanger.artemis.util.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*iHKmVLa\"R");
      ZipFileDocument zipFileDocument0 = new ZipFileDocument(mockFile0, "");
      try { 
        zipFileDocument0.getLinePushBackReader();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      InputStreamProgressListener inputStreamProgressListener0 = mock(InputStreamProgressListener.class, new ViolatedAssumptionAnswer());
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0, "", "", false, inputStreamProgressListener0);
      // Undeclared exception!
      try { 
        databaseDocument0.getOutputStream();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("DR", "");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      String string0 = fileDocument0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("DR", "");
      FileDocument fileDocument0 = new FileDocument(mockFile0);
      fileDocument0.getWriter();
      LinePushBackReader linePushBackReader0 = fileDocument0.getLinePushBackReader();
      assertEquals(0, linePushBackReader0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RemoteFileNode remoteFileNode0 = new RemoteFileNode(true);
      RemoteFileDocument remoteFileDocument0 = new RemoteFileDocument(remoteFileNode0);
      // Undeclared exception!
      try { 
        remoteFileDocument0.getReader();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SshLogin sshLogin0 = new SshLogin();
      JPasswordField jPasswordField0 = sshLogin0.getJPasswordField();
      DatabaseDocument databaseDocument0 = new DatabaseDocument("", jPasswordField0);
      InputStreamProgressListenerVector inputStreamProgressListenerVector0 = databaseDocument0.getProgressListeners();
      assertEquals(0, inputStreamProgressListenerVector0.size());
  }
}
